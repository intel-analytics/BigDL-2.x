// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: caffe/proto/caffe.proto

package caffe;

public final class Caffe {
  private Caffe() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  /**
   * Protobuf enum {@code caffe.Phase}
   */
  public enum Phase
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>TRAIN = 0;</code>
     */
    TRAIN(0, 0),
    /**
     * <code>TEST = 1;</code>
     */
    TEST(1, 1),
    ;

    /**
     * <code>TRAIN = 0;</code>
     */
    public static final int TRAIN_VALUE = 0;
    /**
     * <code>TEST = 1;</code>
     */
    public static final int TEST_VALUE = 1;


    public final int getNumber() { return value; }

    public static Phase valueOf(int value) {
      switch (value) {
        case 0: return TRAIN;
        case 1: return TEST;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Phase>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<Phase>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Phase>() {
            public Phase findValueByNumber(int number) {
              return Phase.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return caffe.Caffe.getDescriptor().getEnumTypes().get(0);
    }

    private static final Phase[] VALUES = values();

    public static Phase valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private Phase(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:caffe.Phase)
  }

  public interface BlobShapeOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated int64 dim = 1 [packed = true];
    /**
     * <code>repeated int64 dim = 1 [packed = true];</code>
     */
    java.util.List<java.lang.Long> getDimList();
    /**
     * <code>repeated int64 dim = 1 [packed = true];</code>
     */
    int getDimCount();
    /**
     * <code>repeated int64 dim = 1 [packed = true];</code>
     */
    long getDim(int index);
  }
  /**
   * Protobuf type {@code caffe.BlobShape}
   *
   * <pre>
   * Specifies the shape (dimensions) of a Blob.
   * </pre>
   */
  public static final class BlobShape extends
      com.google.protobuf.GeneratedMessage
      implements BlobShapeOrBuilder {
    // Use BlobShape.newBuilder() to construct.
    private BlobShape(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private BlobShape(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final BlobShape defaultInstance;
    public static BlobShape getDefaultInstance() {
      return defaultInstance;
    }

    public BlobShape getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private BlobShape(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                dim_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000001;
              }
              dim_.add(input.readInt64());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                dim_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                dim_.add(input.readInt64());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          dim_ = java.util.Collections.unmodifiableList(dim_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_BlobShape_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_BlobShape_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.BlobShape.class, caffe.Caffe.BlobShape.Builder.class);
    }

    public static com.google.protobuf.Parser<BlobShape> PARSER =
        new com.google.protobuf.AbstractParser<BlobShape>() {
      public BlobShape parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new BlobShape(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<BlobShape> getParserForType() {
      return PARSER;
    }

    // repeated int64 dim = 1 [packed = true];
    public static final int DIM_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Long> dim_;
    /**
     * <code>repeated int64 dim = 1 [packed = true];</code>
     */
    public java.util.List<java.lang.Long>
        getDimList() {
      return dim_;
    }
    /**
     * <code>repeated int64 dim = 1 [packed = true];</code>
     */
    public int getDimCount() {
      return dim_.size();
    }
    /**
     * <code>repeated int64 dim = 1 [packed = true];</code>
     */
    public long getDim(int index) {
      return dim_.get(index);
    }
    private int dimMemoizedSerializedSize = -1;

    private void initFields() {
      dim_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (getDimList().size() > 0) {
        output.writeRawVarint32(10);
        output.writeRawVarint32(dimMemoizedSerializedSize);
      }
      for (int i = 0; i < dim_.size(); i++) {
        output.writeInt64NoTag(dim_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < dim_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt64SizeNoTag(dim_.get(i));
        }
        size += dataSize;
        if (!getDimList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        dimMemoizedSerializedSize = dataSize;
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.BlobShape parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.BlobShape parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.BlobShape parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.BlobShape parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.BlobShape parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.BlobShape parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.BlobShape parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.BlobShape parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.BlobShape parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.BlobShape parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.BlobShape prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.BlobShape}
     *
     * <pre>
     * Specifies the shape (dimensions) of a Blob.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements caffe.Caffe.BlobShapeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_BlobShape_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_BlobShape_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.BlobShape.class, caffe.Caffe.BlobShape.Builder.class);
      }

      // Construct using caffe.Caffe.BlobShape.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        dim_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_BlobShape_descriptor;
      }

      public caffe.Caffe.BlobShape getDefaultInstanceForType() {
        return caffe.Caffe.BlobShape.getDefaultInstance();
      }

      public caffe.Caffe.BlobShape build() {
        caffe.Caffe.BlobShape result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.BlobShape buildPartial() {
        caffe.Caffe.BlobShape result = new caffe.Caffe.BlobShape(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          dim_ = java.util.Collections.unmodifiableList(dim_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.dim_ = dim_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.BlobShape) {
          return mergeFrom((caffe.Caffe.BlobShape)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.BlobShape other) {
        if (other == caffe.Caffe.BlobShape.getDefaultInstance()) return this;
        if (!other.dim_.isEmpty()) {
          if (dim_.isEmpty()) {
            dim_ = other.dim_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureDimIsMutable();
            dim_.addAll(other.dim_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.BlobShape parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.BlobShape) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated int64 dim = 1 [packed = true];
      private java.util.List<java.lang.Long> dim_ = java.util.Collections.emptyList();
      private void ensureDimIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          dim_ = new java.util.ArrayList<java.lang.Long>(dim_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated int64 dim = 1 [packed = true];</code>
       */
      public java.util.List<java.lang.Long>
          getDimList() {
        return java.util.Collections.unmodifiableList(dim_);
      }
      /**
       * <code>repeated int64 dim = 1 [packed = true];</code>
       */
      public int getDimCount() {
        return dim_.size();
      }
      /**
       * <code>repeated int64 dim = 1 [packed = true];</code>
       */
      public long getDim(int index) {
        return dim_.get(index);
      }
      /**
       * <code>repeated int64 dim = 1 [packed = true];</code>
       */
      public Builder setDim(
          int index, long value) {
        ensureDimIsMutable();
        dim_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 dim = 1 [packed = true];</code>
       */
      public Builder addDim(long value) {
        ensureDimIsMutable();
        dim_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 dim = 1 [packed = true];</code>
       */
      public Builder addAllDim(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureDimIsMutable();
        super.addAll(values, dim_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 dim = 1 [packed = true];</code>
       */
      public Builder clearDim() {
        dim_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.BlobShape)
    }

    static {
      defaultInstance = new BlobShape(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.BlobShape)
  }

  public interface BlobProtoOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional .caffe.BlobShape shape = 7;
    /**
     * <code>optional .caffe.BlobShape shape = 7;</code>
     */
    boolean hasShape();
    /**
     * <code>optional .caffe.BlobShape shape = 7;</code>
     */
    caffe.Caffe.BlobShape getShape();
    /**
     * <code>optional .caffe.BlobShape shape = 7;</code>
     */
    caffe.Caffe.BlobShapeOrBuilder getShapeOrBuilder();

    // repeated float data = 5 [packed = true];
    /**
     * <code>repeated float data = 5 [packed = true];</code>
     */
    java.util.List<java.lang.Float> getDataList();
    /**
     * <code>repeated float data = 5 [packed = true];</code>
     */
    int getDataCount();
    /**
     * <code>repeated float data = 5 [packed = true];</code>
     */
    float getData(int index);

    // repeated float diff = 6 [packed = true];
    /**
     * <code>repeated float diff = 6 [packed = true];</code>
     */
    java.util.List<java.lang.Float> getDiffList();
    /**
     * <code>repeated float diff = 6 [packed = true];</code>
     */
    int getDiffCount();
    /**
     * <code>repeated float diff = 6 [packed = true];</code>
     */
    float getDiff(int index);

    // repeated double double_data = 8 [packed = true];
    /**
     * <code>repeated double double_data = 8 [packed = true];</code>
     */
    java.util.List<java.lang.Double> getDoubleDataList();
    /**
     * <code>repeated double double_data = 8 [packed = true];</code>
     */
    int getDoubleDataCount();
    /**
     * <code>repeated double double_data = 8 [packed = true];</code>
     */
    double getDoubleData(int index);

    // repeated double double_diff = 9 [packed = true];
    /**
     * <code>repeated double double_diff = 9 [packed = true];</code>
     */
    java.util.List<java.lang.Double> getDoubleDiffList();
    /**
     * <code>repeated double double_diff = 9 [packed = true];</code>
     */
    int getDoubleDiffCount();
    /**
     * <code>repeated double double_diff = 9 [packed = true];</code>
     */
    double getDoubleDiff(int index);

    // optional int32 num = 1 [default = 0];
    /**
     * <code>optional int32 num = 1 [default = 0];</code>
     *
     * <pre>
     * 4D dimensions -- deprecated.  Use "shape" instead.
     * </pre>
     */
    boolean hasNum();
    /**
     * <code>optional int32 num = 1 [default = 0];</code>
     *
     * <pre>
     * 4D dimensions -- deprecated.  Use "shape" instead.
     * </pre>
     */
    int getNum();

    // optional int32 channels = 2 [default = 0];
    /**
     * <code>optional int32 channels = 2 [default = 0];</code>
     */
    boolean hasChannels();
    /**
     * <code>optional int32 channels = 2 [default = 0];</code>
     */
    int getChannels();

    // optional int32 height = 3 [default = 0];
    /**
     * <code>optional int32 height = 3 [default = 0];</code>
     */
    boolean hasHeight();
    /**
     * <code>optional int32 height = 3 [default = 0];</code>
     */
    int getHeight();

    // optional int32 width = 4 [default = 0];
    /**
     * <code>optional int32 width = 4 [default = 0];</code>
     */
    boolean hasWidth();
    /**
     * <code>optional int32 width = 4 [default = 0];</code>
     */
    int getWidth();
  }
  /**
   * Protobuf type {@code caffe.BlobProto}
   */
  public static final class BlobProto extends
      com.google.protobuf.GeneratedMessage
      implements BlobProtoOrBuilder {
    // Use BlobProto.newBuilder() to construct.
    private BlobProto(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private BlobProto(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final BlobProto defaultInstance;
    public static BlobProto getDefaultInstance() {
      return defaultInstance;
    }

    public BlobProto getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private BlobProto(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000002;
              num_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000004;
              channels_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000008;
              height_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000010;
              width_ = input.readInt32();
              break;
            }
            case 45: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                data_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000002;
              }
              data_.add(input.readFloat());
              break;
            }
            case 42: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                data_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                data_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 53: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                diff_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000004;
              }
              diff_.add(input.readFloat());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                diff_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                diff_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 58: {
              caffe.Caffe.BlobShape.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = shape_.toBuilder();
              }
              shape_ = input.readMessage(caffe.Caffe.BlobShape.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(shape_);
                shape_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 65: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                doubleData_ = new java.util.ArrayList<java.lang.Double>();
                mutable_bitField0_ |= 0x00000008;
              }
              doubleData_.add(input.readDouble());
              break;
            }
            case 66: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                doubleData_ = new java.util.ArrayList<java.lang.Double>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                doubleData_.add(input.readDouble());
              }
              input.popLimit(limit);
              break;
            }
            case 73: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                doubleDiff_ = new java.util.ArrayList<java.lang.Double>();
                mutable_bitField0_ |= 0x00000010;
              }
              doubleDiff_.add(input.readDouble());
              break;
            }
            case 74: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010) && input.getBytesUntilLimit() > 0) {
                doubleDiff_ = new java.util.ArrayList<java.lang.Double>();
                mutable_bitField0_ |= 0x00000010;
              }
              while (input.getBytesUntilLimit() > 0) {
                doubleDiff_.add(input.readDouble());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          data_ = java.util.Collections.unmodifiableList(data_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          diff_ = java.util.Collections.unmodifiableList(diff_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          doubleData_ = java.util.Collections.unmodifiableList(doubleData_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          doubleDiff_ = java.util.Collections.unmodifiableList(doubleDiff_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_BlobProto_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_BlobProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.BlobProto.class, caffe.Caffe.BlobProto.Builder.class);
    }

    public static com.google.protobuf.Parser<BlobProto> PARSER =
        new com.google.protobuf.AbstractParser<BlobProto>() {
      public BlobProto parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new BlobProto(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<BlobProto> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional .caffe.BlobShape shape = 7;
    public static final int SHAPE_FIELD_NUMBER = 7;
    private caffe.Caffe.BlobShape shape_;
    /**
     * <code>optional .caffe.BlobShape shape = 7;</code>
     */
    public boolean hasShape() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .caffe.BlobShape shape = 7;</code>
     */
    public caffe.Caffe.BlobShape getShape() {
      return shape_;
    }
    /**
     * <code>optional .caffe.BlobShape shape = 7;</code>
     */
    public caffe.Caffe.BlobShapeOrBuilder getShapeOrBuilder() {
      return shape_;
    }

    // repeated float data = 5 [packed = true];
    public static final int DATA_FIELD_NUMBER = 5;
    private java.util.List<java.lang.Float> data_;
    /**
     * <code>repeated float data = 5 [packed = true];</code>
     */
    public java.util.List<java.lang.Float>
        getDataList() {
      return data_;
    }
    /**
     * <code>repeated float data = 5 [packed = true];</code>
     */
    public int getDataCount() {
      return data_.size();
    }
    /**
     * <code>repeated float data = 5 [packed = true];</code>
     */
    public float getData(int index) {
      return data_.get(index);
    }
    private int dataMemoizedSerializedSize = -1;

    // repeated float diff = 6 [packed = true];
    public static final int DIFF_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Float> diff_;
    /**
     * <code>repeated float diff = 6 [packed = true];</code>
     */
    public java.util.List<java.lang.Float>
        getDiffList() {
      return diff_;
    }
    /**
     * <code>repeated float diff = 6 [packed = true];</code>
     */
    public int getDiffCount() {
      return diff_.size();
    }
    /**
     * <code>repeated float diff = 6 [packed = true];</code>
     */
    public float getDiff(int index) {
      return diff_.get(index);
    }
    private int diffMemoizedSerializedSize = -1;

    // repeated double double_data = 8 [packed = true];
    public static final int DOUBLE_DATA_FIELD_NUMBER = 8;
    private java.util.List<java.lang.Double> doubleData_;
    /**
     * <code>repeated double double_data = 8 [packed = true];</code>
     */
    public java.util.List<java.lang.Double>
        getDoubleDataList() {
      return doubleData_;
    }
    /**
     * <code>repeated double double_data = 8 [packed = true];</code>
     */
    public int getDoubleDataCount() {
      return doubleData_.size();
    }
    /**
     * <code>repeated double double_data = 8 [packed = true];</code>
     */
    public double getDoubleData(int index) {
      return doubleData_.get(index);
    }
    private int doubleDataMemoizedSerializedSize = -1;

    // repeated double double_diff = 9 [packed = true];
    public static final int DOUBLE_DIFF_FIELD_NUMBER = 9;
    private java.util.List<java.lang.Double> doubleDiff_;
    /**
     * <code>repeated double double_diff = 9 [packed = true];</code>
     */
    public java.util.List<java.lang.Double>
        getDoubleDiffList() {
      return doubleDiff_;
    }
    /**
     * <code>repeated double double_diff = 9 [packed = true];</code>
     */
    public int getDoubleDiffCount() {
      return doubleDiff_.size();
    }
    /**
     * <code>repeated double double_diff = 9 [packed = true];</code>
     */
    public double getDoubleDiff(int index) {
      return doubleDiff_.get(index);
    }
    private int doubleDiffMemoizedSerializedSize = -1;

    // optional int32 num = 1 [default = 0];
    public static final int NUM_FIELD_NUMBER = 1;
    private int num_;
    /**
     * <code>optional int32 num = 1 [default = 0];</code>
     *
     * <pre>
     * 4D dimensions -- deprecated.  Use "shape" instead.
     * </pre>
     */
    public boolean hasNum() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 num = 1 [default = 0];</code>
     *
     * <pre>
     * 4D dimensions -- deprecated.  Use "shape" instead.
     * </pre>
     */
    public int getNum() {
      return num_;
    }

    // optional int32 channels = 2 [default = 0];
    public static final int CHANNELS_FIELD_NUMBER = 2;
    private int channels_;
    /**
     * <code>optional int32 channels = 2 [default = 0];</code>
     */
    public boolean hasChannels() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 channels = 2 [default = 0];</code>
     */
    public int getChannels() {
      return channels_;
    }

    // optional int32 height = 3 [default = 0];
    public static final int HEIGHT_FIELD_NUMBER = 3;
    private int height_;
    /**
     * <code>optional int32 height = 3 [default = 0];</code>
     */
    public boolean hasHeight() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 height = 3 [default = 0];</code>
     */
    public int getHeight() {
      return height_;
    }

    // optional int32 width = 4 [default = 0];
    public static final int WIDTH_FIELD_NUMBER = 4;
    private int width_;
    /**
     * <code>optional int32 width = 4 [default = 0];</code>
     */
    public boolean hasWidth() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 width = 4 [default = 0];</code>
     */
    public int getWidth() {
      return width_;
    }

    private void initFields() {
      shape_ = caffe.Caffe.BlobShape.getDefaultInstance();
      data_ = java.util.Collections.emptyList();
      diff_ = java.util.Collections.emptyList();
      doubleData_ = java.util.Collections.emptyList();
      doubleDiff_ = java.util.Collections.emptyList();
      num_ = 0;
      channels_ = 0;
      height_ = 0;
      width_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(1, num_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(2, channels_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(3, height_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(4, width_);
      }
      if (getDataList().size() > 0) {
        output.writeRawVarint32(42);
        output.writeRawVarint32(dataMemoizedSerializedSize);
      }
      for (int i = 0; i < data_.size(); i++) {
        output.writeFloatNoTag(data_.get(i));
      }
      if (getDiffList().size() > 0) {
        output.writeRawVarint32(50);
        output.writeRawVarint32(diffMemoizedSerializedSize);
      }
      for (int i = 0; i < diff_.size(); i++) {
        output.writeFloatNoTag(diff_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(7, shape_);
      }
      if (getDoubleDataList().size() > 0) {
        output.writeRawVarint32(66);
        output.writeRawVarint32(doubleDataMemoizedSerializedSize);
      }
      for (int i = 0; i < doubleData_.size(); i++) {
        output.writeDoubleNoTag(doubleData_.get(i));
      }
      if (getDoubleDiffList().size() > 0) {
        output.writeRawVarint32(74);
        output.writeRawVarint32(doubleDiffMemoizedSerializedSize);
      }
      for (int i = 0; i < doubleDiff_.size(); i++) {
        output.writeDoubleNoTag(doubleDiff_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, num_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, channels_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, height_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, width_);
      }
      {
        int dataSize = 0;
        dataSize = 4 * getDataList().size();
        size += dataSize;
        if (!getDataList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        dataMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        dataSize = 4 * getDiffList().size();
        size += dataSize;
        if (!getDiffList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        diffMemoizedSerializedSize = dataSize;
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, shape_);
      }
      {
        int dataSize = 0;
        dataSize = 8 * getDoubleDataList().size();
        size += dataSize;
        if (!getDoubleDataList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        doubleDataMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        dataSize = 8 * getDoubleDiffList().size();
        size += dataSize;
        if (!getDoubleDiffList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        doubleDiffMemoizedSerializedSize = dataSize;
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.BlobProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.BlobProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.BlobProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.BlobProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.BlobProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.BlobProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.BlobProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.BlobProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.BlobProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.BlobProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.BlobProto prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.BlobProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements caffe.Caffe.BlobProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_BlobProto_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_BlobProto_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.BlobProto.class, caffe.Caffe.BlobProto.Builder.class);
      }

      // Construct using caffe.Caffe.BlobProto.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getShapeFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (shapeBuilder_ == null) {
          shape_ = caffe.Caffe.BlobShape.getDefaultInstance();
        } else {
          shapeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        data_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        diff_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        doubleData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        doubleDiff_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        num_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        channels_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        height_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        width_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_BlobProto_descriptor;
      }

      public caffe.Caffe.BlobProto getDefaultInstanceForType() {
        return caffe.Caffe.BlobProto.getDefaultInstance();
      }

      public caffe.Caffe.BlobProto build() {
        caffe.Caffe.BlobProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.BlobProto buildPartial() {
        caffe.Caffe.BlobProto result = new caffe.Caffe.BlobProto(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (shapeBuilder_ == null) {
          result.shape_ = shape_;
        } else {
          result.shape_ = shapeBuilder_.build();
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          data_ = java.util.Collections.unmodifiableList(data_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.data_ = data_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          diff_ = java.util.Collections.unmodifiableList(diff_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.diff_ = diff_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          doubleData_ = java.util.Collections.unmodifiableList(doubleData_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.doubleData_ = doubleData_;
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          doubleDiff_ = java.util.Collections.unmodifiableList(doubleDiff_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.doubleDiff_ = doubleDiff_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000002;
        }
        result.num_ = num_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000004;
        }
        result.channels_ = channels_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000008;
        }
        result.height_ = height_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000010;
        }
        result.width_ = width_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.BlobProto) {
          return mergeFrom((caffe.Caffe.BlobProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.BlobProto other) {
        if (other == caffe.Caffe.BlobProto.getDefaultInstance()) return this;
        if (other.hasShape()) {
          mergeShape(other.getShape());
        }
        if (!other.data_.isEmpty()) {
          if (data_.isEmpty()) {
            data_ = other.data_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureDataIsMutable();
            data_.addAll(other.data_);
          }
          onChanged();
        }
        if (!other.diff_.isEmpty()) {
          if (diff_.isEmpty()) {
            diff_ = other.diff_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureDiffIsMutable();
            diff_.addAll(other.diff_);
          }
          onChanged();
        }
        if (!other.doubleData_.isEmpty()) {
          if (doubleData_.isEmpty()) {
            doubleData_ = other.doubleData_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureDoubleDataIsMutable();
            doubleData_.addAll(other.doubleData_);
          }
          onChanged();
        }
        if (!other.doubleDiff_.isEmpty()) {
          if (doubleDiff_.isEmpty()) {
            doubleDiff_ = other.doubleDiff_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureDoubleDiffIsMutable();
            doubleDiff_.addAll(other.doubleDiff_);
          }
          onChanged();
        }
        if (other.hasNum()) {
          setNum(other.getNum());
        }
        if (other.hasChannels()) {
          setChannels(other.getChannels());
        }
        if (other.hasHeight()) {
          setHeight(other.getHeight());
        }
        if (other.hasWidth()) {
          setWidth(other.getWidth());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.BlobProto parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.BlobProto) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .caffe.BlobShape shape = 7;
      private caffe.Caffe.BlobShape shape_ = caffe.Caffe.BlobShape.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.BlobShape, caffe.Caffe.BlobShape.Builder, caffe.Caffe.BlobShapeOrBuilder> shapeBuilder_;
      /**
       * <code>optional .caffe.BlobShape shape = 7;</code>
       */
      public boolean hasShape() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .caffe.BlobShape shape = 7;</code>
       */
      public caffe.Caffe.BlobShape getShape() {
        if (shapeBuilder_ == null) {
          return shape_;
        } else {
          return shapeBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.BlobShape shape = 7;</code>
       */
      public Builder setShape(caffe.Caffe.BlobShape value) {
        if (shapeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          shape_ = value;
          onChanged();
        } else {
          shapeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .caffe.BlobShape shape = 7;</code>
       */
      public Builder setShape(
          caffe.Caffe.BlobShape.Builder builderForValue) {
        if (shapeBuilder_ == null) {
          shape_ = builderForValue.build();
          onChanged();
        } else {
          shapeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .caffe.BlobShape shape = 7;</code>
       */
      public Builder mergeShape(caffe.Caffe.BlobShape value) {
        if (shapeBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              shape_ != caffe.Caffe.BlobShape.getDefaultInstance()) {
            shape_ =
              caffe.Caffe.BlobShape.newBuilder(shape_).mergeFrom(value).buildPartial();
          } else {
            shape_ = value;
          }
          onChanged();
        } else {
          shapeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .caffe.BlobShape shape = 7;</code>
       */
      public Builder clearShape() {
        if (shapeBuilder_ == null) {
          shape_ = caffe.Caffe.BlobShape.getDefaultInstance();
          onChanged();
        } else {
          shapeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .caffe.BlobShape shape = 7;</code>
       */
      public caffe.Caffe.BlobShape.Builder getShapeBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getShapeFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.BlobShape shape = 7;</code>
       */
      public caffe.Caffe.BlobShapeOrBuilder getShapeOrBuilder() {
        if (shapeBuilder_ != null) {
          return shapeBuilder_.getMessageOrBuilder();
        } else {
          return shape_;
        }
      }
      /**
       * <code>optional .caffe.BlobShape shape = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.BlobShape, caffe.Caffe.BlobShape.Builder, caffe.Caffe.BlobShapeOrBuilder> 
          getShapeFieldBuilder() {
        if (shapeBuilder_ == null) {
          shapeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.BlobShape, caffe.Caffe.BlobShape.Builder, caffe.Caffe.BlobShapeOrBuilder>(
                  shape_,
                  getParentForChildren(),
                  isClean());
          shape_ = null;
        }
        return shapeBuilder_;
      }

      // repeated float data = 5 [packed = true];
      private java.util.List<java.lang.Float> data_ = java.util.Collections.emptyList();
      private void ensureDataIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          data_ = new java.util.ArrayList<java.lang.Float>(data_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated float data = 5 [packed = true];</code>
       */
      public java.util.List<java.lang.Float>
          getDataList() {
        return java.util.Collections.unmodifiableList(data_);
      }
      /**
       * <code>repeated float data = 5 [packed = true];</code>
       */
      public int getDataCount() {
        return data_.size();
      }
      /**
       * <code>repeated float data = 5 [packed = true];</code>
       */
      public float getData(int index) {
        return data_.get(index);
      }
      /**
       * <code>repeated float data = 5 [packed = true];</code>
       */
      public Builder setData(
          int index, float value) {
        ensureDataIsMutable();
        data_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float data = 5 [packed = true];</code>
       */
      public Builder addData(float value) {
        ensureDataIsMutable();
        data_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float data = 5 [packed = true];</code>
       */
      public Builder addAllData(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureDataIsMutable();
        super.addAll(values, data_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float data = 5 [packed = true];</code>
       */
      public Builder clearData() {
        data_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // repeated float diff = 6 [packed = true];
      private java.util.List<java.lang.Float> diff_ = java.util.Collections.emptyList();
      private void ensureDiffIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          diff_ = new java.util.ArrayList<java.lang.Float>(diff_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated float diff = 6 [packed = true];</code>
       */
      public java.util.List<java.lang.Float>
          getDiffList() {
        return java.util.Collections.unmodifiableList(diff_);
      }
      /**
       * <code>repeated float diff = 6 [packed = true];</code>
       */
      public int getDiffCount() {
        return diff_.size();
      }
      /**
       * <code>repeated float diff = 6 [packed = true];</code>
       */
      public float getDiff(int index) {
        return diff_.get(index);
      }
      /**
       * <code>repeated float diff = 6 [packed = true];</code>
       */
      public Builder setDiff(
          int index, float value) {
        ensureDiffIsMutable();
        diff_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float diff = 6 [packed = true];</code>
       */
      public Builder addDiff(float value) {
        ensureDiffIsMutable();
        diff_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float diff = 6 [packed = true];</code>
       */
      public Builder addAllDiff(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureDiffIsMutable();
        super.addAll(values, diff_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float diff = 6 [packed = true];</code>
       */
      public Builder clearDiff() {
        diff_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      // repeated double double_data = 8 [packed = true];
      private java.util.List<java.lang.Double> doubleData_ = java.util.Collections.emptyList();
      private void ensureDoubleDataIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          doubleData_ = new java.util.ArrayList<java.lang.Double>(doubleData_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated double double_data = 8 [packed = true];</code>
       */
      public java.util.List<java.lang.Double>
          getDoubleDataList() {
        return java.util.Collections.unmodifiableList(doubleData_);
      }
      /**
       * <code>repeated double double_data = 8 [packed = true];</code>
       */
      public int getDoubleDataCount() {
        return doubleData_.size();
      }
      /**
       * <code>repeated double double_data = 8 [packed = true];</code>
       */
      public double getDoubleData(int index) {
        return doubleData_.get(index);
      }
      /**
       * <code>repeated double double_data = 8 [packed = true];</code>
       */
      public Builder setDoubleData(
          int index, double value) {
        ensureDoubleDataIsMutable();
        doubleData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double double_data = 8 [packed = true];</code>
       */
      public Builder addDoubleData(double value) {
        ensureDoubleDataIsMutable();
        doubleData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double double_data = 8 [packed = true];</code>
       */
      public Builder addAllDoubleData(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureDoubleDataIsMutable();
        super.addAll(values, doubleData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double double_data = 8 [packed = true];</code>
       */
      public Builder clearDoubleData() {
        doubleData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // repeated double double_diff = 9 [packed = true];
      private java.util.List<java.lang.Double> doubleDiff_ = java.util.Collections.emptyList();
      private void ensureDoubleDiffIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          doubleDiff_ = new java.util.ArrayList<java.lang.Double>(doubleDiff_);
          bitField0_ |= 0x00000010;
         }
      }
      /**
       * <code>repeated double double_diff = 9 [packed = true];</code>
       */
      public java.util.List<java.lang.Double>
          getDoubleDiffList() {
        return java.util.Collections.unmodifiableList(doubleDiff_);
      }
      /**
       * <code>repeated double double_diff = 9 [packed = true];</code>
       */
      public int getDoubleDiffCount() {
        return doubleDiff_.size();
      }
      /**
       * <code>repeated double double_diff = 9 [packed = true];</code>
       */
      public double getDoubleDiff(int index) {
        return doubleDiff_.get(index);
      }
      /**
       * <code>repeated double double_diff = 9 [packed = true];</code>
       */
      public Builder setDoubleDiff(
          int index, double value) {
        ensureDoubleDiffIsMutable();
        doubleDiff_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double double_diff = 9 [packed = true];</code>
       */
      public Builder addDoubleDiff(double value) {
        ensureDoubleDiffIsMutable();
        doubleDiff_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double double_diff = 9 [packed = true];</code>
       */
      public Builder addAllDoubleDiff(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureDoubleDiffIsMutable();
        super.addAll(values, doubleDiff_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double double_diff = 9 [packed = true];</code>
       */
      public Builder clearDoubleDiff() {
        doubleDiff_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }

      // optional int32 num = 1 [default = 0];
      private int num_ ;
      /**
       * <code>optional int32 num = 1 [default = 0];</code>
       *
       * <pre>
       * 4D dimensions -- deprecated.  Use "shape" instead.
       * </pre>
       */
      public boolean hasNum() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 num = 1 [default = 0];</code>
       *
       * <pre>
       * 4D dimensions -- deprecated.  Use "shape" instead.
       * </pre>
       */
      public int getNum() {
        return num_;
      }
      /**
       * <code>optional int32 num = 1 [default = 0];</code>
       *
       * <pre>
       * 4D dimensions -- deprecated.  Use "shape" instead.
       * </pre>
       */
      public Builder setNum(int value) {
        bitField0_ |= 0x00000020;
        num_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 num = 1 [default = 0];</code>
       *
       * <pre>
       * 4D dimensions -- deprecated.  Use "shape" instead.
       * </pre>
       */
      public Builder clearNum() {
        bitField0_ = (bitField0_ & ~0x00000020);
        num_ = 0;
        onChanged();
        return this;
      }

      // optional int32 channels = 2 [default = 0];
      private int channels_ ;
      /**
       * <code>optional int32 channels = 2 [default = 0];</code>
       */
      public boolean hasChannels() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 channels = 2 [default = 0];</code>
       */
      public int getChannels() {
        return channels_;
      }
      /**
       * <code>optional int32 channels = 2 [default = 0];</code>
       */
      public Builder setChannels(int value) {
        bitField0_ |= 0x00000040;
        channels_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 channels = 2 [default = 0];</code>
       */
      public Builder clearChannels() {
        bitField0_ = (bitField0_ & ~0x00000040);
        channels_ = 0;
        onChanged();
        return this;
      }

      // optional int32 height = 3 [default = 0];
      private int height_ ;
      /**
       * <code>optional int32 height = 3 [default = 0];</code>
       */
      public boolean hasHeight() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int32 height = 3 [default = 0];</code>
       */
      public int getHeight() {
        return height_;
      }
      /**
       * <code>optional int32 height = 3 [default = 0];</code>
       */
      public Builder setHeight(int value) {
        bitField0_ |= 0x00000080;
        height_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 height = 3 [default = 0];</code>
       */
      public Builder clearHeight() {
        bitField0_ = (bitField0_ & ~0x00000080);
        height_ = 0;
        onChanged();
        return this;
      }

      // optional int32 width = 4 [default = 0];
      private int width_ ;
      /**
       * <code>optional int32 width = 4 [default = 0];</code>
       */
      public boolean hasWidth() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional int32 width = 4 [default = 0];</code>
       */
      public int getWidth() {
        return width_;
      }
      /**
       * <code>optional int32 width = 4 [default = 0];</code>
       */
      public Builder setWidth(int value) {
        bitField0_ |= 0x00000100;
        width_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 width = 4 [default = 0];</code>
       */
      public Builder clearWidth() {
        bitField0_ = (bitField0_ & ~0x00000100);
        width_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.BlobProto)
    }

    static {
      defaultInstance = new BlobProto(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.BlobProto)
  }

  public interface BlobProtoVectorOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated .caffe.BlobProto blobs = 1;
    /**
     * <code>repeated .caffe.BlobProto blobs = 1;</code>
     */
    java.util.List<caffe.Caffe.BlobProto> 
        getBlobsList();
    /**
     * <code>repeated .caffe.BlobProto blobs = 1;</code>
     */
    caffe.Caffe.BlobProto getBlobs(int index);
    /**
     * <code>repeated .caffe.BlobProto blobs = 1;</code>
     */
    int getBlobsCount();
    /**
     * <code>repeated .caffe.BlobProto blobs = 1;</code>
     */
    java.util.List<? extends caffe.Caffe.BlobProtoOrBuilder> 
        getBlobsOrBuilderList();
    /**
     * <code>repeated .caffe.BlobProto blobs = 1;</code>
     */
    caffe.Caffe.BlobProtoOrBuilder getBlobsOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code caffe.BlobProtoVector}
   *
   * <pre>
   * The BlobProtoVector is simply a way to pass multiple blobproto instances
   * around.
   * </pre>
   */
  public static final class BlobProtoVector extends
      com.google.protobuf.GeneratedMessage
      implements BlobProtoVectorOrBuilder {
    // Use BlobProtoVector.newBuilder() to construct.
    private BlobProtoVector(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private BlobProtoVector(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final BlobProtoVector defaultInstance;
    public static BlobProtoVector getDefaultInstance() {
      return defaultInstance;
    }

    public BlobProtoVector getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private BlobProtoVector(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                blobs_ = new java.util.ArrayList<caffe.Caffe.BlobProto>();
                mutable_bitField0_ |= 0x00000001;
              }
              blobs_.add(input.readMessage(caffe.Caffe.BlobProto.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          blobs_ = java.util.Collections.unmodifiableList(blobs_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_BlobProtoVector_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_BlobProtoVector_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.BlobProtoVector.class, caffe.Caffe.BlobProtoVector.Builder.class);
    }

    public static com.google.protobuf.Parser<BlobProtoVector> PARSER =
        new com.google.protobuf.AbstractParser<BlobProtoVector>() {
      public BlobProtoVector parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new BlobProtoVector(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<BlobProtoVector> getParserForType() {
      return PARSER;
    }

    // repeated .caffe.BlobProto blobs = 1;
    public static final int BLOBS_FIELD_NUMBER = 1;
    private java.util.List<caffe.Caffe.BlobProto> blobs_;
    /**
     * <code>repeated .caffe.BlobProto blobs = 1;</code>
     */
    public java.util.List<caffe.Caffe.BlobProto> getBlobsList() {
      return blobs_;
    }
    /**
     * <code>repeated .caffe.BlobProto blobs = 1;</code>
     */
    public java.util.List<? extends caffe.Caffe.BlobProtoOrBuilder> 
        getBlobsOrBuilderList() {
      return blobs_;
    }
    /**
     * <code>repeated .caffe.BlobProto blobs = 1;</code>
     */
    public int getBlobsCount() {
      return blobs_.size();
    }
    /**
     * <code>repeated .caffe.BlobProto blobs = 1;</code>
     */
    public caffe.Caffe.BlobProto getBlobs(int index) {
      return blobs_.get(index);
    }
    /**
     * <code>repeated .caffe.BlobProto blobs = 1;</code>
     */
    public caffe.Caffe.BlobProtoOrBuilder getBlobsOrBuilder(
        int index) {
      return blobs_.get(index);
    }

    private void initFields() {
      blobs_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < blobs_.size(); i++) {
        output.writeMessage(1, blobs_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < blobs_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, blobs_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.BlobProtoVector parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.BlobProtoVector parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.BlobProtoVector parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.BlobProtoVector parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.BlobProtoVector parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.BlobProtoVector parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.BlobProtoVector parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.BlobProtoVector parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.BlobProtoVector parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.BlobProtoVector parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.BlobProtoVector prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.BlobProtoVector}
     *
     * <pre>
     * The BlobProtoVector is simply a way to pass multiple blobproto instances
     * around.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements caffe.Caffe.BlobProtoVectorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_BlobProtoVector_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_BlobProtoVector_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.BlobProtoVector.class, caffe.Caffe.BlobProtoVector.Builder.class);
      }

      // Construct using caffe.Caffe.BlobProtoVector.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getBlobsFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (blobsBuilder_ == null) {
          blobs_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          blobsBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_BlobProtoVector_descriptor;
      }

      public caffe.Caffe.BlobProtoVector getDefaultInstanceForType() {
        return caffe.Caffe.BlobProtoVector.getDefaultInstance();
      }

      public caffe.Caffe.BlobProtoVector build() {
        caffe.Caffe.BlobProtoVector result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.BlobProtoVector buildPartial() {
        caffe.Caffe.BlobProtoVector result = new caffe.Caffe.BlobProtoVector(this);
        int from_bitField0_ = bitField0_;
        if (blobsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            blobs_ = java.util.Collections.unmodifiableList(blobs_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.blobs_ = blobs_;
        } else {
          result.blobs_ = blobsBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.BlobProtoVector) {
          return mergeFrom((caffe.Caffe.BlobProtoVector)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.BlobProtoVector other) {
        if (other == caffe.Caffe.BlobProtoVector.getDefaultInstance()) return this;
        if (blobsBuilder_ == null) {
          if (!other.blobs_.isEmpty()) {
            if (blobs_.isEmpty()) {
              blobs_ = other.blobs_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureBlobsIsMutable();
              blobs_.addAll(other.blobs_);
            }
            onChanged();
          }
        } else {
          if (!other.blobs_.isEmpty()) {
            if (blobsBuilder_.isEmpty()) {
              blobsBuilder_.dispose();
              blobsBuilder_ = null;
              blobs_ = other.blobs_;
              bitField0_ = (bitField0_ & ~0x00000001);
              blobsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getBlobsFieldBuilder() : null;
            } else {
              blobsBuilder_.addAllMessages(other.blobs_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.BlobProtoVector parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.BlobProtoVector) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated .caffe.BlobProto blobs = 1;
      private java.util.List<caffe.Caffe.BlobProto> blobs_ =
        java.util.Collections.emptyList();
      private void ensureBlobsIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          blobs_ = new java.util.ArrayList<caffe.Caffe.BlobProto>(blobs_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          caffe.Caffe.BlobProto, caffe.Caffe.BlobProto.Builder, caffe.Caffe.BlobProtoOrBuilder> blobsBuilder_;

      /**
       * <code>repeated .caffe.BlobProto blobs = 1;</code>
       */
      public java.util.List<caffe.Caffe.BlobProto> getBlobsList() {
        if (blobsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(blobs_);
        } else {
          return blobsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 1;</code>
       */
      public int getBlobsCount() {
        if (blobsBuilder_ == null) {
          return blobs_.size();
        } else {
          return blobsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 1;</code>
       */
      public caffe.Caffe.BlobProto getBlobs(int index) {
        if (blobsBuilder_ == null) {
          return blobs_.get(index);
        } else {
          return blobsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 1;</code>
       */
      public Builder setBlobs(
          int index, caffe.Caffe.BlobProto value) {
        if (blobsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBlobsIsMutable();
          blobs_.set(index, value);
          onChanged();
        } else {
          blobsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 1;</code>
       */
      public Builder setBlobs(
          int index, caffe.Caffe.BlobProto.Builder builderForValue) {
        if (blobsBuilder_ == null) {
          ensureBlobsIsMutable();
          blobs_.set(index, builderForValue.build());
          onChanged();
        } else {
          blobsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 1;</code>
       */
      public Builder addBlobs(caffe.Caffe.BlobProto value) {
        if (blobsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBlobsIsMutable();
          blobs_.add(value);
          onChanged();
        } else {
          blobsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 1;</code>
       */
      public Builder addBlobs(
          int index, caffe.Caffe.BlobProto value) {
        if (blobsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBlobsIsMutable();
          blobs_.add(index, value);
          onChanged();
        } else {
          blobsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 1;</code>
       */
      public Builder addBlobs(
          caffe.Caffe.BlobProto.Builder builderForValue) {
        if (blobsBuilder_ == null) {
          ensureBlobsIsMutable();
          blobs_.add(builderForValue.build());
          onChanged();
        } else {
          blobsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 1;</code>
       */
      public Builder addBlobs(
          int index, caffe.Caffe.BlobProto.Builder builderForValue) {
        if (blobsBuilder_ == null) {
          ensureBlobsIsMutable();
          blobs_.add(index, builderForValue.build());
          onChanged();
        } else {
          blobsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 1;</code>
       */
      public Builder addAllBlobs(
          java.lang.Iterable<? extends caffe.Caffe.BlobProto> values) {
        if (blobsBuilder_ == null) {
          ensureBlobsIsMutable();
          super.addAll(values, blobs_);
          onChanged();
        } else {
          blobsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 1;</code>
       */
      public Builder clearBlobs() {
        if (blobsBuilder_ == null) {
          blobs_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          blobsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 1;</code>
       */
      public Builder removeBlobs(int index) {
        if (blobsBuilder_ == null) {
          ensureBlobsIsMutable();
          blobs_.remove(index);
          onChanged();
        } else {
          blobsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 1;</code>
       */
      public caffe.Caffe.BlobProto.Builder getBlobsBuilder(
          int index) {
        return getBlobsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 1;</code>
       */
      public caffe.Caffe.BlobProtoOrBuilder getBlobsOrBuilder(
          int index) {
        if (blobsBuilder_ == null) {
          return blobs_.get(index);  } else {
          return blobsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 1;</code>
       */
      public java.util.List<? extends caffe.Caffe.BlobProtoOrBuilder> 
           getBlobsOrBuilderList() {
        if (blobsBuilder_ != null) {
          return blobsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(blobs_);
        }
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 1;</code>
       */
      public caffe.Caffe.BlobProto.Builder addBlobsBuilder() {
        return getBlobsFieldBuilder().addBuilder(
            caffe.Caffe.BlobProto.getDefaultInstance());
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 1;</code>
       */
      public caffe.Caffe.BlobProto.Builder addBlobsBuilder(
          int index) {
        return getBlobsFieldBuilder().addBuilder(
            index, caffe.Caffe.BlobProto.getDefaultInstance());
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 1;</code>
       */
      public java.util.List<caffe.Caffe.BlobProto.Builder> 
           getBlobsBuilderList() {
        return getBlobsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          caffe.Caffe.BlobProto, caffe.Caffe.BlobProto.Builder, caffe.Caffe.BlobProtoOrBuilder> 
          getBlobsFieldBuilder() {
        if (blobsBuilder_ == null) {
          blobsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              caffe.Caffe.BlobProto, caffe.Caffe.BlobProto.Builder, caffe.Caffe.BlobProtoOrBuilder>(
                  blobs_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          blobs_ = null;
        }
        return blobsBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:caffe.BlobProtoVector)
    }

    static {
      defaultInstance = new BlobProtoVector(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.BlobProtoVector)
  }

  public interface DatumOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 channels = 1;
    /**
     * <code>optional int32 channels = 1;</code>
     */
    boolean hasChannels();
    /**
     * <code>optional int32 channels = 1;</code>
     */
    int getChannels();

    // optional int32 height = 2;
    /**
     * <code>optional int32 height = 2;</code>
     */
    boolean hasHeight();
    /**
     * <code>optional int32 height = 2;</code>
     */
    int getHeight();

    // optional int32 width = 3;
    /**
     * <code>optional int32 width = 3;</code>
     */
    boolean hasWidth();
    /**
     * <code>optional int32 width = 3;</code>
     */
    int getWidth();

    // optional bytes data = 4;
    /**
     * <code>optional bytes data = 4;</code>
     *
     * <pre>
     * the actual image data, in bytes
     * </pre>
     */
    boolean hasData();
    /**
     * <code>optional bytes data = 4;</code>
     *
     * <pre>
     * the actual image data, in bytes
     * </pre>
     */
    com.google.protobuf.ByteString getData();

    // optional int32 label = 5;
    /**
     * <code>optional int32 label = 5;</code>
     */
    boolean hasLabel();
    /**
     * <code>optional int32 label = 5;</code>
     */
    int getLabel();

    // repeated float float_data = 6;
    /**
     * <code>repeated float float_data = 6;</code>
     *
     * <pre>
     * Optionally, the datum could also hold float data.
     * </pre>
     */
    java.util.List<java.lang.Float> getFloatDataList();
    /**
     * <code>repeated float float_data = 6;</code>
     *
     * <pre>
     * Optionally, the datum could also hold float data.
     * </pre>
     */
    int getFloatDataCount();
    /**
     * <code>repeated float float_data = 6;</code>
     *
     * <pre>
     * Optionally, the datum could also hold float data.
     * </pre>
     */
    float getFloatData(int index);

    // optional bool encoded = 7 [default = false];
    /**
     * <code>optional bool encoded = 7 [default = false];</code>
     *
     * <pre>
     * If true data contains an encoded image that need to be decoded
     * </pre>
     */
    boolean hasEncoded();
    /**
     * <code>optional bool encoded = 7 [default = false];</code>
     *
     * <pre>
     * If true data contains an encoded image that need to be decoded
     * </pre>
     */
    boolean getEncoded();
  }
  /**
   * Protobuf type {@code caffe.Datum}
   */
  public static final class Datum extends
      com.google.protobuf.GeneratedMessage
      implements DatumOrBuilder {
    // Use Datum.newBuilder() to construct.
    private Datum(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Datum(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Datum defaultInstance;
    public static Datum getDefaultInstance() {
      return defaultInstance;
    }

    public Datum getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Datum(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              channels_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              height_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              width_ = input.readInt32();
              break;
            }
            case 34: {
              bitField0_ |= 0x00000008;
              data_ = input.readBytes();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              label_ = input.readInt32();
              break;
            }
            case 53: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                floatData_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000020;
              }
              floatData_.add(input.readFloat());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                floatData_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                floatData_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 56: {
              bitField0_ |= 0x00000020;
              encoded_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          floatData_ = java.util.Collections.unmodifiableList(floatData_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_Datum_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_Datum_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.Datum.class, caffe.Caffe.Datum.Builder.class);
    }

    public static com.google.protobuf.Parser<Datum> PARSER =
        new com.google.protobuf.AbstractParser<Datum>() {
      public Datum parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Datum(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Datum> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 channels = 1;
    public static final int CHANNELS_FIELD_NUMBER = 1;
    private int channels_;
    /**
     * <code>optional int32 channels = 1;</code>
     */
    public boolean hasChannels() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 channels = 1;</code>
     */
    public int getChannels() {
      return channels_;
    }

    // optional int32 height = 2;
    public static final int HEIGHT_FIELD_NUMBER = 2;
    private int height_;
    /**
     * <code>optional int32 height = 2;</code>
     */
    public boolean hasHeight() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 height = 2;</code>
     */
    public int getHeight() {
      return height_;
    }

    // optional int32 width = 3;
    public static final int WIDTH_FIELD_NUMBER = 3;
    private int width_;
    /**
     * <code>optional int32 width = 3;</code>
     */
    public boolean hasWidth() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 width = 3;</code>
     */
    public int getWidth() {
      return width_;
    }

    // optional bytes data = 4;
    public static final int DATA_FIELD_NUMBER = 4;
    private com.google.protobuf.ByteString data_;
    /**
     * <code>optional bytes data = 4;</code>
     *
     * <pre>
     * the actual image data, in bytes
     * </pre>
     */
    public boolean hasData() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional bytes data = 4;</code>
     *
     * <pre>
     * the actual image data, in bytes
     * </pre>
     */
    public com.google.protobuf.ByteString getData() {
      return data_;
    }

    // optional int32 label = 5;
    public static final int LABEL_FIELD_NUMBER = 5;
    private int label_;
    /**
     * <code>optional int32 label = 5;</code>
     */
    public boolean hasLabel() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 label = 5;</code>
     */
    public int getLabel() {
      return label_;
    }

    // repeated float float_data = 6;
    public static final int FLOAT_DATA_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Float> floatData_;
    /**
     * <code>repeated float float_data = 6;</code>
     *
     * <pre>
     * Optionally, the datum could also hold float data.
     * </pre>
     */
    public java.util.List<java.lang.Float>
        getFloatDataList() {
      return floatData_;
    }
    /**
     * <code>repeated float float_data = 6;</code>
     *
     * <pre>
     * Optionally, the datum could also hold float data.
     * </pre>
     */
    public int getFloatDataCount() {
      return floatData_.size();
    }
    /**
     * <code>repeated float float_data = 6;</code>
     *
     * <pre>
     * Optionally, the datum could also hold float data.
     * </pre>
     */
    public float getFloatData(int index) {
      return floatData_.get(index);
    }

    // optional bool encoded = 7 [default = false];
    public static final int ENCODED_FIELD_NUMBER = 7;
    private boolean encoded_;
    /**
     * <code>optional bool encoded = 7 [default = false];</code>
     *
     * <pre>
     * If true data contains an encoded image that need to be decoded
     * </pre>
     */
    public boolean hasEncoded() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional bool encoded = 7 [default = false];</code>
     *
     * <pre>
     * If true data contains an encoded image that need to be decoded
     * </pre>
     */
    public boolean getEncoded() {
      return encoded_;
    }

    private void initFields() {
      channels_ = 0;
      height_ = 0;
      width_ = 0;
      data_ = com.google.protobuf.ByteString.EMPTY;
      label_ = 0;
      floatData_ = java.util.Collections.emptyList();
      encoded_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, channels_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, height_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, width_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(4, data_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, label_);
      }
      for (int i = 0; i < floatData_.size(); i++) {
        output.writeFloat(6, floatData_.get(i));
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeBool(7, encoded_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, channels_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, height_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, width_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, data_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, label_);
      }
      {
        int dataSize = 0;
        dataSize = 4 * getFloatDataList().size();
        size += dataSize;
        size += 1 * getFloatDataList().size();
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7, encoded_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.Datum parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.Datum parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.Datum parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.Datum parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.Datum parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.Datum parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.Datum parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.Datum parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.Datum parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.Datum parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.Datum prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.Datum}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements caffe.Caffe.DatumOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_Datum_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_Datum_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.Datum.class, caffe.Caffe.Datum.Builder.class);
      }

      // Construct using caffe.Caffe.Datum.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        channels_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        height_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        width_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        data_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000008);
        label_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        floatData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        encoded_ = false;
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_Datum_descriptor;
      }

      public caffe.Caffe.Datum getDefaultInstanceForType() {
        return caffe.Caffe.Datum.getDefaultInstance();
      }

      public caffe.Caffe.Datum build() {
        caffe.Caffe.Datum result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.Datum buildPartial() {
        caffe.Caffe.Datum result = new caffe.Caffe.Datum(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.channels_ = channels_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.height_ = height_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.width_ = width_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.data_ = data_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.label_ = label_;
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          floatData_ = java.util.Collections.unmodifiableList(floatData_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.floatData_ = floatData_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000020;
        }
        result.encoded_ = encoded_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.Datum) {
          return mergeFrom((caffe.Caffe.Datum)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.Datum other) {
        if (other == caffe.Caffe.Datum.getDefaultInstance()) return this;
        if (other.hasChannels()) {
          setChannels(other.getChannels());
        }
        if (other.hasHeight()) {
          setHeight(other.getHeight());
        }
        if (other.hasWidth()) {
          setWidth(other.getWidth());
        }
        if (other.hasData()) {
          setData(other.getData());
        }
        if (other.hasLabel()) {
          setLabel(other.getLabel());
        }
        if (!other.floatData_.isEmpty()) {
          if (floatData_.isEmpty()) {
            floatData_ = other.floatData_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureFloatDataIsMutable();
            floatData_.addAll(other.floatData_);
          }
          onChanged();
        }
        if (other.hasEncoded()) {
          setEncoded(other.getEncoded());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.Datum parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.Datum) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 channels = 1;
      private int channels_ ;
      /**
       * <code>optional int32 channels = 1;</code>
       */
      public boolean hasChannels() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 channels = 1;</code>
       */
      public int getChannels() {
        return channels_;
      }
      /**
       * <code>optional int32 channels = 1;</code>
       */
      public Builder setChannels(int value) {
        bitField0_ |= 0x00000001;
        channels_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 channels = 1;</code>
       */
      public Builder clearChannels() {
        bitField0_ = (bitField0_ & ~0x00000001);
        channels_ = 0;
        onChanged();
        return this;
      }

      // optional int32 height = 2;
      private int height_ ;
      /**
       * <code>optional int32 height = 2;</code>
       */
      public boolean hasHeight() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 height = 2;</code>
       */
      public int getHeight() {
        return height_;
      }
      /**
       * <code>optional int32 height = 2;</code>
       */
      public Builder setHeight(int value) {
        bitField0_ |= 0x00000002;
        height_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 height = 2;</code>
       */
      public Builder clearHeight() {
        bitField0_ = (bitField0_ & ~0x00000002);
        height_ = 0;
        onChanged();
        return this;
      }

      // optional int32 width = 3;
      private int width_ ;
      /**
       * <code>optional int32 width = 3;</code>
       */
      public boolean hasWidth() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 width = 3;</code>
       */
      public int getWidth() {
        return width_;
      }
      /**
       * <code>optional int32 width = 3;</code>
       */
      public Builder setWidth(int value) {
        bitField0_ |= 0x00000004;
        width_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 width = 3;</code>
       */
      public Builder clearWidth() {
        bitField0_ = (bitField0_ & ~0x00000004);
        width_ = 0;
        onChanged();
        return this;
      }

      // optional bytes data = 4;
      private com.google.protobuf.ByteString data_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes data = 4;</code>
       *
       * <pre>
       * the actual image data, in bytes
       * </pre>
       */
      public boolean hasData() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional bytes data = 4;</code>
       *
       * <pre>
       * the actual image data, in bytes
       * </pre>
       */
      public com.google.protobuf.ByteString getData() {
        return data_;
      }
      /**
       * <code>optional bytes data = 4;</code>
       *
       * <pre>
       * the actual image data, in bytes
       * </pre>
       */
      public Builder setData(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        data_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes data = 4;</code>
       *
       * <pre>
       * the actual image data, in bytes
       * </pre>
       */
      public Builder clearData() {
        bitField0_ = (bitField0_ & ~0x00000008);
        data_ = getDefaultInstance().getData();
        onChanged();
        return this;
      }

      // optional int32 label = 5;
      private int label_ ;
      /**
       * <code>optional int32 label = 5;</code>
       */
      public boolean hasLabel() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 label = 5;</code>
       */
      public int getLabel() {
        return label_;
      }
      /**
       * <code>optional int32 label = 5;</code>
       */
      public Builder setLabel(int value) {
        bitField0_ |= 0x00000010;
        label_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 label = 5;</code>
       */
      public Builder clearLabel() {
        bitField0_ = (bitField0_ & ~0x00000010);
        label_ = 0;
        onChanged();
        return this;
      }

      // repeated float float_data = 6;
      private java.util.List<java.lang.Float> floatData_ = java.util.Collections.emptyList();
      private void ensureFloatDataIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          floatData_ = new java.util.ArrayList<java.lang.Float>(floatData_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <code>repeated float float_data = 6;</code>
       *
       * <pre>
       * Optionally, the datum could also hold float data.
       * </pre>
       */
      public java.util.List<java.lang.Float>
          getFloatDataList() {
        return java.util.Collections.unmodifiableList(floatData_);
      }
      /**
       * <code>repeated float float_data = 6;</code>
       *
       * <pre>
       * Optionally, the datum could also hold float data.
       * </pre>
       */
      public int getFloatDataCount() {
        return floatData_.size();
      }
      /**
       * <code>repeated float float_data = 6;</code>
       *
       * <pre>
       * Optionally, the datum could also hold float data.
       * </pre>
       */
      public float getFloatData(int index) {
        return floatData_.get(index);
      }
      /**
       * <code>repeated float float_data = 6;</code>
       *
       * <pre>
       * Optionally, the datum could also hold float data.
       * </pre>
       */
      public Builder setFloatData(
          int index, float value) {
        ensureFloatDataIsMutable();
        floatData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float float_data = 6;</code>
       *
       * <pre>
       * Optionally, the datum could also hold float data.
       * </pre>
       */
      public Builder addFloatData(float value) {
        ensureFloatDataIsMutable();
        floatData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float float_data = 6;</code>
       *
       * <pre>
       * Optionally, the datum could also hold float data.
       * </pre>
       */
      public Builder addAllFloatData(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureFloatDataIsMutable();
        super.addAll(values, floatData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float float_data = 6;</code>
       *
       * <pre>
       * Optionally, the datum could also hold float data.
       * </pre>
       */
      public Builder clearFloatData() {
        floatData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      // optional bool encoded = 7 [default = false];
      private boolean encoded_ ;
      /**
       * <code>optional bool encoded = 7 [default = false];</code>
       *
       * <pre>
       * If true data contains an encoded image that need to be decoded
       * </pre>
       */
      public boolean hasEncoded() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional bool encoded = 7 [default = false];</code>
       *
       * <pre>
       * If true data contains an encoded image that need to be decoded
       * </pre>
       */
      public boolean getEncoded() {
        return encoded_;
      }
      /**
       * <code>optional bool encoded = 7 [default = false];</code>
       *
       * <pre>
       * If true data contains an encoded image that need to be decoded
       * </pre>
       */
      public Builder setEncoded(boolean value) {
        bitField0_ |= 0x00000040;
        encoded_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool encoded = 7 [default = false];</code>
       *
       * <pre>
       * If true data contains an encoded image that need to be decoded
       * </pre>
       */
      public Builder clearEncoded() {
        bitField0_ = (bitField0_ & ~0x00000040);
        encoded_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.Datum)
    }

    static {
      defaultInstance = new Datum(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.Datum)
  }

  public interface FillerParameterOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional string type = 1 [default = "constant"];
    /**
     * <code>optional string type = 1 [default = "constant"];</code>
     *
     * <pre>
     * The filler type.
     * </pre>
     */
    boolean hasType();
    /**
     * <code>optional string type = 1 [default = "constant"];</code>
     *
     * <pre>
     * The filler type.
     * </pre>
     */
    java.lang.String getType();
    /**
     * <code>optional string type = 1 [default = "constant"];</code>
     *
     * <pre>
     * The filler type.
     * </pre>
     */
    com.google.protobuf.ByteString
        getTypeBytes();

    // optional float value = 2 [default = 0];
    /**
     * <code>optional float value = 2 [default = 0];</code>
     *
     * <pre>
     * the value in constant filler
     * </pre>
     */
    boolean hasValue();
    /**
     * <code>optional float value = 2 [default = 0];</code>
     *
     * <pre>
     * the value in constant filler
     * </pre>
     */
    float getValue();

    // optional float min = 3 [default = 0];
    /**
     * <code>optional float min = 3 [default = 0];</code>
     *
     * <pre>
     * the min value in uniform filler
     * </pre>
     */
    boolean hasMin();
    /**
     * <code>optional float min = 3 [default = 0];</code>
     *
     * <pre>
     * the min value in uniform filler
     * </pre>
     */
    float getMin();

    // optional float max = 4 [default = 1];
    /**
     * <code>optional float max = 4 [default = 1];</code>
     *
     * <pre>
     * the max value in uniform filler
     * </pre>
     */
    boolean hasMax();
    /**
     * <code>optional float max = 4 [default = 1];</code>
     *
     * <pre>
     * the max value in uniform filler
     * </pre>
     */
    float getMax();

    // optional float mean = 5 [default = 0];
    /**
     * <code>optional float mean = 5 [default = 0];</code>
     *
     * <pre>
     * the mean value in Gaussian filler
     * </pre>
     */
    boolean hasMean();
    /**
     * <code>optional float mean = 5 [default = 0];</code>
     *
     * <pre>
     * the mean value in Gaussian filler
     * </pre>
     */
    float getMean();

    // optional float std = 6 [default = 1];
    /**
     * <code>optional float std = 6 [default = 1];</code>
     *
     * <pre>
     * the std value in Gaussian filler
     * </pre>
     */
    boolean hasStd();
    /**
     * <code>optional float std = 6 [default = 1];</code>
     *
     * <pre>
     * the std value in Gaussian filler
     * </pre>
     */
    float getStd();

    // optional int32 sparse = 7 [default = -1];
    /**
     * <code>optional int32 sparse = 7 [default = -1];</code>
     *
     * <pre>
     * The expected number of non-zero output weights for a given input in
     * Gaussian filler -- the default -1 means don't perform sparsification.
     * </pre>
     */
    boolean hasSparse();
    /**
     * <code>optional int32 sparse = 7 [default = -1];</code>
     *
     * <pre>
     * The expected number of non-zero output weights for a given input in
     * Gaussian filler -- the default -1 means don't perform sparsification.
     * </pre>
     */
    int getSparse();

    // optional .caffe.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
    /**
     * <code>optional .caffe.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];</code>
     */
    boolean hasVarianceNorm();
    /**
     * <code>optional .caffe.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];</code>
     */
    caffe.Caffe.FillerParameter.VarianceNorm getVarianceNorm();
  }
  /**
   * Protobuf type {@code caffe.FillerParameter}
   */
  public static final class FillerParameter extends
      com.google.protobuf.GeneratedMessage
      implements FillerParameterOrBuilder {
    // Use FillerParameter.newBuilder() to construct.
    private FillerParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private FillerParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final FillerParameter defaultInstance;
    public static FillerParameter getDefaultInstance() {
      return defaultInstance;
    }

    public FillerParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private FillerParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              type_ = input.readBytes();
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              value_ = input.readFloat();
              break;
            }
            case 29: {
              bitField0_ |= 0x00000004;
              min_ = input.readFloat();
              break;
            }
            case 37: {
              bitField0_ |= 0x00000008;
              max_ = input.readFloat();
              break;
            }
            case 45: {
              bitField0_ |= 0x00000010;
              mean_ = input.readFloat();
              break;
            }
            case 53: {
              bitField0_ |= 0x00000020;
              std_ = input.readFloat();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              sparse_ = input.readInt32();
              break;
            }
            case 64: {
              int rawValue = input.readEnum();
              caffe.Caffe.FillerParameter.VarianceNorm value = caffe.Caffe.FillerParameter.VarianceNorm.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(8, rawValue);
              } else {
                bitField0_ |= 0x00000080;
                varianceNorm_ = value;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_FillerParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_FillerParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.FillerParameter.class, caffe.Caffe.FillerParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<FillerParameter> PARSER =
        new com.google.protobuf.AbstractParser<FillerParameter>() {
      public FillerParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new FillerParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<FillerParameter> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code caffe.FillerParameter.VarianceNorm}
     *
     * <pre>
     * Normalize the filler variance by fan_in, fan_out, or their average.
     * Applies to 'xavier' and 'msra' fillers.
     * </pre>
     */
    public enum VarianceNorm
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>FAN_IN = 0;</code>
       */
      FAN_IN(0, 0),
      /**
       * <code>FAN_OUT = 1;</code>
       */
      FAN_OUT(1, 1),
      /**
       * <code>AVERAGE = 2;</code>
       */
      AVERAGE(2, 2),
      ;

      /**
       * <code>FAN_IN = 0;</code>
       */
      public static final int FAN_IN_VALUE = 0;
      /**
       * <code>FAN_OUT = 1;</code>
       */
      public static final int FAN_OUT_VALUE = 1;
      /**
       * <code>AVERAGE = 2;</code>
       */
      public static final int AVERAGE_VALUE = 2;


      public final int getNumber() { return value; }

      public static VarianceNorm valueOf(int value) {
        switch (value) {
          case 0: return FAN_IN;
          case 1: return FAN_OUT;
          case 2: return AVERAGE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<VarianceNorm>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<VarianceNorm>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<VarianceNorm>() {
              public VarianceNorm findValueByNumber(int number) {
                return VarianceNorm.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return caffe.Caffe.FillerParameter.getDescriptor().getEnumTypes().get(0);
      }

      private static final VarianceNorm[] VALUES = values();

      public static VarianceNorm valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private VarianceNorm(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:caffe.FillerParameter.VarianceNorm)
    }

    private int bitField0_;
    // optional string type = 1 [default = "constant"];
    public static final int TYPE_FIELD_NUMBER = 1;
    private java.lang.Object type_;
    /**
     * <code>optional string type = 1 [default = "constant"];</code>
     *
     * <pre>
     * The filler type.
     * </pre>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string type = 1 [default = "constant"];</code>
     *
     * <pre>
     * The filler type.
     * </pre>
     */
    public java.lang.String getType() {
      java.lang.Object ref = type_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          type_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string type = 1 [default = "constant"];</code>
     *
     * <pre>
     * The filler type.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getTypeBytes() {
      java.lang.Object ref = type_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        type_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional float value = 2 [default = 0];
    public static final int VALUE_FIELD_NUMBER = 2;
    private float value_;
    /**
     * <code>optional float value = 2 [default = 0];</code>
     *
     * <pre>
     * the value in constant filler
     * </pre>
     */
    public boolean hasValue() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional float value = 2 [default = 0];</code>
     *
     * <pre>
     * the value in constant filler
     * </pre>
     */
    public float getValue() {
      return value_;
    }

    // optional float min = 3 [default = 0];
    public static final int MIN_FIELD_NUMBER = 3;
    private float min_;
    /**
     * <code>optional float min = 3 [default = 0];</code>
     *
     * <pre>
     * the min value in uniform filler
     * </pre>
     */
    public boolean hasMin() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional float min = 3 [default = 0];</code>
     *
     * <pre>
     * the min value in uniform filler
     * </pre>
     */
    public float getMin() {
      return min_;
    }

    // optional float max = 4 [default = 1];
    public static final int MAX_FIELD_NUMBER = 4;
    private float max_;
    /**
     * <code>optional float max = 4 [default = 1];</code>
     *
     * <pre>
     * the max value in uniform filler
     * </pre>
     */
    public boolean hasMax() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional float max = 4 [default = 1];</code>
     *
     * <pre>
     * the max value in uniform filler
     * </pre>
     */
    public float getMax() {
      return max_;
    }

    // optional float mean = 5 [default = 0];
    public static final int MEAN_FIELD_NUMBER = 5;
    private float mean_;
    /**
     * <code>optional float mean = 5 [default = 0];</code>
     *
     * <pre>
     * the mean value in Gaussian filler
     * </pre>
     */
    public boolean hasMean() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional float mean = 5 [default = 0];</code>
     *
     * <pre>
     * the mean value in Gaussian filler
     * </pre>
     */
    public float getMean() {
      return mean_;
    }

    // optional float std = 6 [default = 1];
    public static final int STD_FIELD_NUMBER = 6;
    private float std_;
    /**
     * <code>optional float std = 6 [default = 1];</code>
     *
     * <pre>
     * the std value in Gaussian filler
     * </pre>
     */
    public boolean hasStd() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional float std = 6 [default = 1];</code>
     *
     * <pre>
     * the std value in Gaussian filler
     * </pre>
     */
    public float getStd() {
      return std_;
    }

    // optional int32 sparse = 7 [default = -1];
    public static final int SPARSE_FIELD_NUMBER = 7;
    private int sparse_;
    /**
     * <code>optional int32 sparse = 7 [default = -1];</code>
     *
     * <pre>
     * The expected number of non-zero output weights for a given input in
     * Gaussian filler -- the default -1 means don't perform sparsification.
     * </pre>
     */
    public boolean hasSparse() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 sparse = 7 [default = -1];</code>
     *
     * <pre>
     * The expected number of non-zero output weights for a given input in
     * Gaussian filler -- the default -1 means don't perform sparsification.
     * </pre>
     */
    public int getSparse() {
      return sparse_;
    }

    // optional .caffe.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
    public static final int VARIANCE_NORM_FIELD_NUMBER = 8;
    private caffe.Caffe.FillerParameter.VarianceNorm varianceNorm_;
    /**
     * <code>optional .caffe.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];</code>
     */
    public boolean hasVarianceNorm() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional .caffe.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];</code>
     */
    public caffe.Caffe.FillerParameter.VarianceNorm getVarianceNorm() {
      return varianceNorm_;
    }

    private void initFields() {
      type_ = "constant";
      value_ = 0F;
      min_ = 0F;
      max_ = 1F;
      mean_ = 0F;
      std_ = 1F;
      sparse_ = -1;
      varianceNorm_ = caffe.Caffe.FillerParameter.VarianceNorm.FAN_IN;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getTypeBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, value_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFloat(3, min_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeFloat(4, max_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeFloat(5, mean_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeFloat(6, std_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(7, sparse_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeEnum(8, varianceNorm_.getNumber());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getTypeBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, value_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(3, min_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(4, max_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(5, mean_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(6, std_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, sparse_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(8, varianceNorm_.getNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.FillerParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.FillerParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.FillerParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.FillerParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.FillerParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.FillerParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.FillerParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.FillerParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.FillerParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.FillerParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.FillerParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.FillerParameter}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements caffe.Caffe.FillerParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_FillerParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_FillerParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.FillerParameter.class, caffe.Caffe.FillerParameter.Builder.class);
      }

      // Construct using caffe.Caffe.FillerParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        type_ = "constant";
        bitField0_ = (bitField0_ & ~0x00000001);
        value_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000002);
        min_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000004);
        max_ = 1F;
        bitField0_ = (bitField0_ & ~0x00000008);
        mean_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000010);
        std_ = 1F;
        bitField0_ = (bitField0_ & ~0x00000020);
        sparse_ = -1;
        bitField0_ = (bitField0_ & ~0x00000040);
        varianceNorm_ = caffe.Caffe.FillerParameter.VarianceNorm.FAN_IN;
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_FillerParameter_descriptor;
      }

      public caffe.Caffe.FillerParameter getDefaultInstanceForType() {
        return caffe.Caffe.FillerParameter.getDefaultInstance();
      }

      public caffe.Caffe.FillerParameter build() {
        caffe.Caffe.FillerParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.FillerParameter buildPartial() {
        caffe.Caffe.FillerParameter result = new caffe.Caffe.FillerParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.value_ = value_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.min_ = min_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.max_ = max_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.mean_ = mean_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.std_ = std_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.sparse_ = sparse_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.varianceNorm_ = varianceNorm_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.FillerParameter) {
          return mergeFrom((caffe.Caffe.FillerParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.FillerParameter other) {
        if (other == caffe.Caffe.FillerParameter.getDefaultInstance()) return this;
        if (other.hasType()) {
          bitField0_ |= 0x00000001;
          type_ = other.type_;
          onChanged();
        }
        if (other.hasValue()) {
          setValue(other.getValue());
        }
        if (other.hasMin()) {
          setMin(other.getMin());
        }
        if (other.hasMax()) {
          setMax(other.getMax());
        }
        if (other.hasMean()) {
          setMean(other.getMean());
        }
        if (other.hasStd()) {
          setStd(other.getStd());
        }
        if (other.hasSparse()) {
          setSparse(other.getSparse());
        }
        if (other.hasVarianceNorm()) {
          setVarianceNorm(other.getVarianceNorm());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.FillerParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.FillerParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional string type = 1 [default = "constant"];
      private java.lang.Object type_ = "constant";
      /**
       * <code>optional string type = 1 [default = "constant"];</code>
       *
       * <pre>
       * The filler type.
       * </pre>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string type = 1 [default = "constant"];</code>
       *
       * <pre>
       * The filler type.
       * </pre>
       */
      public java.lang.String getType() {
        java.lang.Object ref = type_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          type_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string type = 1 [default = "constant"];</code>
       *
       * <pre>
       * The filler type.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getTypeBytes() {
        java.lang.Object ref = type_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          type_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string type = 1 [default = "constant"];</code>
       *
       * <pre>
       * The filler type.
       * </pre>
       */
      public Builder setType(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string type = 1 [default = "constant"];</code>
       *
       * <pre>
       * The filler type.
       * </pre>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = getDefaultInstance().getType();
        onChanged();
        return this;
      }
      /**
       * <code>optional string type = 1 [default = "constant"];</code>
       *
       * <pre>
       * The filler type.
       * </pre>
       */
      public Builder setTypeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        type_ = value;
        onChanged();
        return this;
      }

      // optional float value = 2 [default = 0];
      private float value_ ;
      /**
       * <code>optional float value = 2 [default = 0];</code>
       *
       * <pre>
       * the value in constant filler
       * </pre>
       */
      public boolean hasValue() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional float value = 2 [default = 0];</code>
       *
       * <pre>
       * the value in constant filler
       * </pre>
       */
      public float getValue() {
        return value_;
      }
      /**
       * <code>optional float value = 2 [default = 0];</code>
       *
       * <pre>
       * the value in constant filler
       * </pre>
       */
      public Builder setValue(float value) {
        bitField0_ |= 0x00000002;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float value = 2 [default = 0];</code>
       *
       * <pre>
       * the value in constant filler
       * </pre>
       */
      public Builder clearValue() {
        bitField0_ = (bitField0_ & ~0x00000002);
        value_ = 0F;
        onChanged();
        return this;
      }

      // optional float min = 3 [default = 0];
      private float min_ ;
      /**
       * <code>optional float min = 3 [default = 0];</code>
       *
       * <pre>
       * the min value in uniform filler
       * </pre>
       */
      public boolean hasMin() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional float min = 3 [default = 0];</code>
       *
       * <pre>
       * the min value in uniform filler
       * </pre>
       */
      public float getMin() {
        return min_;
      }
      /**
       * <code>optional float min = 3 [default = 0];</code>
       *
       * <pre>
       * the min value in uniform filler
       * </pre>
       */
      public Builder setMin(float value) {
        bitField0_ |= 0x00000004;
        min_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float min = 3 [default = 0];</code>
       *
       * <pre>
       * the min value in uniform filler
       * </pre>
       */
      public Builder clearMin() {
        bitField0_ = (bitField0_ & ~0x00000004);
        min_ = 0F;
        onChanged();
        return this;
      }

      // optional float max = 4 [default = 1];
      private float max_ = 1F;
      /**
       * <code>optional float max = 4 [default = 1];</code>
       *
       * <pre>
       * the max value in uniform filler
       * </pre>
       */
      public boolean hasMax() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional float max = 4 [default = 1];</code>
       *
       * <pre>
       * the max value in uniform filler
       * </pre>
       */
      public float getMax() {
        return max_;
      }
      /**
       * <code>optional float max = 4 [default = 1];</code>
       *
       * <pre>
       * the max value in uniform filler
       * </pre>
       */
      public Builder setMax(float value) {
        bitField0_ |= 0x00000008;
        max_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float max = 4 [default = 1];</code>
       *
       * <pre>
       * the max value in uniform filler
       * </pre>
       */
      public Builder clearMax() {
        bitField0_ = (bitField0_ & ~0x00000008);
        max_ = 1F;
        onChanged();
        return this;
      }

      // optional float mean = 5 [default = 0];
      private float mean_ ;
      /**
       * <code>optional float mean = 5 [default = 0];</code>
       *
       * <pre>
       * the mean value in Gaussian filler
       * </pre>
       */
      public boolean hasMean() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional float mean = 5 [default = 0];</code>
       *
       * <pre>
       * the mean value in Gaussian filler
       * </pre>
       */
      public float getMean() {
        return mean_;
      }
      /**
       * <code>optional float mean = 5 [default = 0];</code>
       *
       * <pre>
       * the mean value in Gaussian filler
       * </pre>
       */
      public Builder setMean(float value) {
        bitField0_ |= 0x00000010;
        mean_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float mean = 5 [default = 0];</code>
       *
       * <pre>
       * the mean value in Gaussian filler
       * </pre>
       */
      public Builder clearMean() {
        bitField0_ = (bitField0_ & ~0x00000010);
        mean_ = 0F;
        onChanged();
        return this;
      }

      // optional float std = 6 [default = 1];
      private float std_ = 1F;
      /**
       * <code>optional float std = 6 [default = 1];</code>
       *
       * <pre>
       * the std value in Gaussian filler
       * </pre>
       */
      public boolean hasStd() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional float std = 6 [default = 1];</code>
       *
       * <pre>
       * the std value in Gaussian filler
       * </pre>
       */
      public float getStd() {
        return std_;
      }
      /**
       * <code>optional float std = 6 [default = 1];</code>
       *
       * <pre>
       * the std value in Gaussian filler
       * </pre>
       */
      public Builder setStd(float value) {
        bitField0_ |= 0x00000020;
        std_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float std = 6 [default = 1];</code>
       *
       * <pre>
       * the std value in Gaussian filler
       * </pre>
       */
      public Builder clearStd() {
        bitField0_ = (bitField0_ & ~0x00000020);
        std_ = 1F;
        onChanged();
        return this;
      }

      // optional int32 sparse = 7 [default = -1];
      private int sparse_ = -1;
      /**
       * <code>optional int32 sparse = 7 [default = -1];</code>
       *
       * <pre>
       * The expected number of non-zero output weights for a given input in
       * Gaussian filler -- the default -1 means don't perform sparsification.
       * </pre>
       */
      public boolean hasSparse() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 sparse = 7 [default = -1];</code>
       *
       * <pre>
       * The expected number of non-zero output weights for a given input in
       * Gaussian filler -- the default -1 means don't perform sparsification.
       * </pre>
       */
      public int getSparse() {
        return sparse_;
      }
      /**
       * <code>optional int32 sparse = 7 [default = -1];</code>
       *
       * <pre>
       * The expected number of non-zero output weights for a given input in
       * Gaussian filler -- the default -1 means don't perform sparsification.
       * </pre>
       */
      public Builder setSparse(int value) {
        bitField0_ |= 0x00000040;
        sparse_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 sparse = 7 [default = -1];</code>
       *
       * <pre>
       * The expected number of non-zero output weights for a given input in
       * Gaussian filler -- the default -1 means don't perform sparsification.
       * </pre>
       */
      public Builder clearSparse() {
        bitField0_ = (bitField0_ & ~0x00000040);
        sparse_ = -1;
        onChanged();
        return this;
      }

      // optional .caffe.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
      private caffe.Caffe.FillerParameter.VarianceNorm varianceNorm_ = caffe.Caffe.FillerParameter.VarianceNorm.FAN_IN;
      /**
       * <code>optional .caffe.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];</code>
       */
      public boolean hasVarianceNorm() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional .caffe.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];</code>
       */
      public caffe.Caffe.FillerParameter.VarianceNorm getVarianceNorm() {
        return varianceNorm_;
      }
      /**
       * <code>optional .caffe.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];</code>
       */
      public Builder setVarianceNorm(caffe.Caffe.FillerParameter.VarianceNorm value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000080;
        varianceNorm_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];</code>
       */
      public Builder clearVarianceNorm() {
        bitField0_ = (bitField0_ & ~0x00000080);
        varianceNorm_ = caffe.Caffe.FillerParameter.VarianceNorm.FAN_IN;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.FillerParameter)
    }

    static {
      defaultInstance = new FillerParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.FillerParameter)
  }

  public interface NetParameterOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional string name = 1;
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * consider giving the network a name
     * </pre>
     */
    boolean hasName();
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * consider giving the network a name
     * </pre>
     */
    java.lang.String getName();
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * consider giving the network a name
     * </pre>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    // repeated string input = 3;
    /**
     * <code>repeated string input = 3;</code>
     *
     * <pre>
     * DEPRECATED. See InputParameter. The input blobs to the network.
     * </pre>
     */
    java.util.List<java.lang.String>
    getInputList();
    /**
     * <code>repeated string input = 3;</code>
     *
     * <pre>
     * DEPRECATED. See InputParameter. The input blobs to the network.
     * </pre>
     */
    int getInputCount();
    /**
     * <code>repeated string input = 3;</code>
     *
     * <pre>
     * DEPRECATED. See InputParameter. The input blobs to the network.
     * </pre>
     */
    java.lang.String getInput(int index);
    /**
     * <code>repeated string input = 3;</code>
     *
     * <pre>
     * DEPRECATED. See InputParameter. The input blobs to the network.
     * </pre>
     */
    com.google.protobuf.ByteString
        getInputBytes(int index);

    // repeated .caffe.BlobShape input_shape = 8;
    /**
     * <code>repeated .caffe.BlobShape input_shape = 8;</code>
     *
     * <pre>
     * DEPRECATED. See InputParameter. The shape of the input blobs.
     * </pre>
     */
    java.util.List<caffe.Caffe.BlobShape> 
        getInputShapeList();
    /**
     * <code>repeated .caffe.BlobShape input_shape = 8;</code>
     *
     * <pre>
     * DEPRECATED. See InputParameter. The shape of the input blobs.
     * </pre>
     */
    caffe.Caffe.BlobShape getInputShape(int index);
    /**
     * <code>repeated .caffe.BlobShape input_shape = 8;</code>
     *
     * <pre>
     * DEPRECATED. See InputParameter. The shape of the input blobs.
     * </pre>
     */
    int getInputShapeCount();
    /**
     * <code>repeated .caffe.BlobShape input_shape = 8;</code>
     *
     * <pre>
     * DEPRECATED. See InputParameter. The shape of the input blobs.
     * </pre>
     */
    java.util.List<? extends caffe.Caffe.BlobShapeOrBuilder> 
        getInputShapeOrBuilderList();
    /**
     * <code>repeated .caffe.BlobShape input_shape = 8;</code>
     *
     * <pre>
     * DEPRECATED. See InputParameter. The shape of the input blobs.
     * </pre>
     */
    caffe.Caffe.BlobShapeOrBuilder getInputShapeOrBuilder(
        int index);

    // repeated int32 input_dim = 4;
    /**
     * <code>repeated int32 input_dim = 4;</code>
     *
     * <pre>
     * 4D input dimensions -- deprecated.  Use "input_shape" instead.
     * If specified, for each input blob there should be four
     * values specifying the num, channels, height and width of the input blob.
     * Thus, there should be a total of (4 * #input) numbers.
     * </pre>
     */
    java.util.List<java.lang.Integer> getInputDimList();
    /**
     * <code>repeated int32 input_dim = 4;</code>
     *
     * <pre>
     * 4D input dimensions -- deprecated.  Use "input_shape" instead.
     * If specified, for each input blob there should be four
     * values specifying the num, channels, height and width of the input blob.
     * Thus, there should be a total of (4 * #input) numbers.
     * </pre>
     */
    int getInputDimCount();
    /**
     * <code>repeated int32 input_dim = 4;</code>
     *
     * <pre>
     * 4D input dimensions -- deprecated.  Use "input_shape" instead.
     * If specified, for each input blob there should be four
     * values specifying the num, channels, height and width of the input blob.
     * Thus, there should be a total of (4 * #input) numbers.
     * </pre>
     */
    int getInputDim(int index);

    // optional bool force_backward = 5 [default = false];
    /**
     * <code>optional bool force_backward = 5 [default = false];</code>
     *
     * <pre>
     * Whether the network will force every layer to carry out backward operation.
     * If set False, then whether to carry out backward is determined
     * automatically according to the net structure and learning rates.
     * </pre>
     */
    boolean hasForceBackward();
    /**
     * <code>optional bool force_backward = 5 [default = false];</code>
     *
     * <pre>
     * Whether the network will force every layer to carry out backward operation.
     * If set False, then whether to carry out backward is determined
     * automatically according to the net structure and learning rates.
     * </pre>
     */
    boolean getForceBackward();

    // optional .caffe.NetState state = 6;
    /**
     * <code>optional .caffe.NetState state = 6;</code>
     *
     * <pre>
     * The current "state" of the network, including the phase, level, and stage.
     * Some layers may be included/excluded depending on this state and the states
     * specified in the layers' include and exclude fields.
     * </pre>
     */
    boolean hasState();
    /**
     * <code>optional .caffe.NetState state = 6;</code>
     *
     * <pre>
     * The current "state" of the network, including the phase, level, and stage.
     * Some layers may be included/excluded depending on this state and the states
     * specified in the layers' include and exclude fields.
     * </pre>
     */
    caffe.Caffe.NetState getState();
    /**
     * <code>optional .caffe.NetState state = 6;</code>
     *
     * <pre>
     * The current "state" of the network, including the phase, level, and stage.
     * Some layers may be included/excluded depending on this state and the states
     * specified in the layers' include and exclude fields.
     * </pre>
     */
    caffe.Caffe.NetStateOrBuilder getStateOrBuilder();

    // optional bool debug_info = 7 [default = false];
    /**
     * <code>optional bool debug_info = 7 [default = false];</code>
     *
     * <pre>
     * Print debugging information about results while running Net::Forward,
     * Net::Backward, and Net::Update.
     * </pre>
     */
    boolean hasDebugInfo();
    /**
     * <code>optional bool debug_info = 7 [default = false];</code>
     *
     * <pre>
     * Print debugging information about results while running Net::Forward,
     * Net::Backward, and Net::Update.
     * </pre>
     */
    boolean getDebugInfo();

    // repeated .caffe.LayerParameter layer = 100;
    /**
     * <code>repeated .caffe.LayerParameter layer = 100;</code>
     *
     * <pre>
     * The layers that make up the net.  Each of their configurations, including
     * connectivity and behavior, is specified as a LayerParameter.
     * </pre>
     */
    java.util.List<caffe.Caffe.LayerParameter> 
        getLayerList();
    /**
     * <code>repeated .caffe.LayerParameter layer = 100;</code>
     *
     * <pre>
     * The layers that make up the net.  Each of their configurations, including
     * connectivity and behavior, is specified as a LayerParameter.
     * </pre>
     */
    caffe.Caffe.LayerParameter getLayer(int index);
    /**
     * <code>repeated .caffe.LayerParameter layer = 100;</code>
     *
     * <pre>
     * The layers that make up the net.  Each of their configurations, including
     * connectivity and behavior, is specified as a LayerParameter.
     * </pre>
     */
    int getLayerCount();
    /**
     * <code>repeated .caffe.LayerParameter layer = 100;</code>
     *
     * <pre>
     * The layers that make up the net.  Each of their configurations, including
     * connectivity and behavior, is specified as a LayerParameter.
     * </pre>
     */
    java.util.List<? extends caffe.Caffe.LayerParameterOrBuilder> 
        getLayerOrBuilderList();
    /**
     * <code>repeated .caffe.LayerParameter layer = 100;</code>
     *
     * <pre>
     * The layers that make up the net.  Each of their configurations, including
     * connectivity and behavior, is specified as a LayerParameter.
     * </pre>
     */
    caffe.Caffe.LayerParameterOrBuilder getLayerOrBuilder(
        int index);

    // repeated .caffe.V1LayerParameter layers = 2;
    /**
     * <code>repeated .caffe.V1LayerParameter layers = 2;</code>
     *
     * <pre>
     * DEPRECATED: use 'layer' instead.
     * </pre>
     */
    java.util.List<caffe.Caffe.V1LayerParameter> 
        getLayersList();
    /**
     * <code>repeated .caffe.V1LayerParameter layers = 2;</code>
     *
     * <pre>
     * DEPRECATED: use 'layer' instead.
     * </pre>
     */
    caffe.Caffe.V1LayerParameter getLayers(int index);
    /**
     * <code>repeated .caffe.V1LayerParameter layers = 2;</code>
     *
     * <pre>
     * DEPRECATED: use 'layer' instead.
     * </pre>
     */
    int getLayersCount();
    /**
     * <code>repeated .caffe.V1LayerParameter layers = 2;</code>
     *
     * <pre>
     * DEPRECATED: use 'layer' instead.
     * </pre>
     */
    java.util.List<? extends caffe.Caffe.V1LayerParameterOrBuilder> 
        getLayersOrBuilderList();
    /**
     * <code>repeated .caffe.V1LayerParameter layers = 2;</code>
     *
     * <pre>
     * DEPRECATED: use 'layer' instead.
     * </pre>
     */
    caffe.Caffe.V1LayerParameterOrBuilder getLayersOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code caffe.NetParameter}
   */
  public static final class NetParameter extends
      com.google.protobuf.GeneratedMessage
      implements NetParameterOrBuilder {
    // Use NetParameter.newBuilder() to construct.
    private NetParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private NetParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final NetParameter defaultInstance;
    public static NetParameter getDefaultInstance() {
      return defaultInstance;
    }

    public NetParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private NetParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              name_ = input.readBytes();
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                layers_ = new java.util.ArrayList<caffe.Caffe.V1LayerParameter>();
                mutable_bitField0_ |= 0x00000100;
              }
              layers_.add(input.readMessage(caffe.Caffe.V1LayerParameter.PARSER, extensionRegistry));
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                input_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000002;
              }
              input_.add(input.readBytes());
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                inputDim_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              inputDim_.add(input.readInt32());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                inputDim_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                inputDim_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 40: {
              bitField0_ |= 0x00000002;
              forceBackward_ = input.readBool();
              break;
            }
            case 50: {
              caffe.Caffe.NetState.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = state_.toBuilder();
              }
              state_ = input.readMessage(caffe.Caffe.NetState.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(state_);
                state_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 56: {
              bitField0_ |= 0x00000008;
              debugInfo_ = input.readBool();
              break;
            }
            case 66: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                inputShape_ = new java.util.ArrayList<caffe.Caffe.BlobShape>();
                mutable_bitField0_ |= 0x00000004;
              }
              inputShape_.add(input.readMessage(caffe.Caffe.BlobShape.PARSER, extensionRegistry));
              break;
            }
            case 802: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                layer_ = new java.util.ArrayList<caffe.Caffe.LayerParameter>();
                mutable_bitField0_ |= 0x00000080;
              }
              layer_.add(input.readMessage(caffe.Caffe.LayerParameter.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
          layers_ = java.util.Collections.unmodifiableList(layers_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          input_ = new com.google.protobuf.UnmodifiableLazyStringList(input_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          inputDim_ = java.util.Collections.unmodifiableList(inputDim_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          inputShape_ = java.util.Collections.unmodifiableList(inputShape_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          layer_ = java.util.Collections.unmodifiableList(layer_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_NetParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_NetParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.NetParameter.class, caffe.Caffe.NetParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<NetParameter> PARSER =
        new com.google.protobuf.AbstractParser<NetParameter>() {
      public NetParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new NetParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<NetParameter> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional string name = 1;
    public static final int NAME_FIELD_NUMBER = 1;
    private java.lang.Object name_;
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * consider giving the network a name
     * </pre>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * consider giving the network a name
     * </pre>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * consider giving the network a name
     * </pre>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // repeated string input = 3;
    public static final int INPUT_FIELD_NUMBER = 3;
    private com.google.protobuf.LazyStringList input_;
    /**
     * <code>repeated string input = 3;</code>
     *
     * <pre>
     * DEPRECATED. See InputParameter. The input blobs to the network.
     * </pre>
     */
    public java.util.List<java.lang.String>
        getInputList() {
      return input_;
    }
    /**
     * <code>repeated string input = 3;</code>
     *
     * <pre>
     * DEPRECATED. See InputParameter. The input blobs to the network.
     * </pre>
     */
    public int getInputCount() {
      return input_.size();
    }
    /**
     * <code>repeated string input = 3;</code>
     *
     * <pre>
     * DEPRECATED. See InputParameter. The input blobs to the network.
     * </pre>
     */
    public java.lang.String getInput(int index) {
      return input_.get(index);
    }
    /**
     * <code>repeated string input = 3;</code>
     *
     * <pre>
     * DEPRECATED. See InputParameter. The input blobs to the network.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getInputBytes(int index) {
      return input_.getByteString(index);
    }

    // repeated .caffe.BlobShape input_shape = 8;
    public static final int INPUT_SHAPE_FIELD_NUMBER = 8;
    private java.util.List<caffe.Caffe.BlobShape> inputShape_;
    /**
     * <code>repeated .caffe.BlobShape input_shape = 8;</code>
     *
     * <pre>
     * DEPRECATED. See InputParameter. The shape of the input blobs.
     * </pre>
     */
    public java.util.List<caffe.Caffe.BlobShape> getInputShapeList() {
      return inputShape_;
    }
    /**
     * <code>repeated .caffe.BlobShape input_shape = 8;</code>
     *
     * <pre>
     * DEPRECATED. See InputParameter. The shape of the input blobs.
     * </pre>
     */
    public java.util.List<? extends caffe.Caffe.BlobShapeOrBuilder> 
        getInputShapeOrBuilderList() {
      return inputShape_;
    }
    /**
     * <code>repeated .caffe.BlobShape input_shape = 8;</code>
     *
     * <pre>
     * DEPRECATED. See InputParameter. The shape of the input blobs.
     * </pre>
     */
    public int getInputShapeCount() {
      return inputShape_.size();
    }
    /**
     * <code>repeated .caffe.BlobShape input_shape = 8;</code>
     *
     * <pre>
     * DEPRECATED. See InputParameter. The shape of the input blobs.
     * </pre>
     */
    public caffe.Caffe.BlobShape getInputShape(int index) {
      return inputShape_.get(index);
    }
    /**
     * <code>repeated .caffe.BlobShape input_shape = 8;</code>
     *
     * <pre>
     * DEPRECATED. See InputParameter. The shape of the input blobs.
     * </pre>
     */
    public caffe.Caffe.BlobShapeOrBuilder getInputShapeOrBuilder(
        int index) {
      return inputShape_.get(index);
    }

    // repeated int32 input_dim = 4;
    public static final int INPUT_DIM_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Integer> inputDim_;
    /**
     * <code>repeated int32 input_dim = 4;</code>
     *
     * <pre>
     * 4D input dimensions -- deprecated.  Use "input_shape" instead.
     * If specified, for each input blob there should be four
     * values specifying the num, channels, height and width of the input blob.
     * Thus, there should be a total of (4 * #input) numbers.
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getInputDimList() {
      return inputDim_;
    }
    /**
     * <code>repeated int32 input_dim = 4;</code>
     *
     * <pre>
     * 4D input dimensions -- deprecated.  Use "input_shape" instead.
     * If specified, for each input blob there should be four
     * values specifying the num, channels, height and width of the input blob.
     * Thus, there should be a total of (4 * #input) numbers.
     * </pre>
     */
    public int getInputDimCount() {
      return inputDim_.size();
    }
    /**
     * <code>repeated int32 input_dim = 4;</code>
     *
     * <pre>
     * 4D input dimensions -- deprecated.  Use "input_shape" instead.
     * If specified, for each input blob there should be four
     * values specifying the num, channels, height and width of the input blob.
     * Thus, there should be a total of (4 * #input) numbers.
     * </pre>
     */
    public int getInputDim(int index) {
      return inputDim_.get(index);
    }

    // optional bool force_backward = 5 [default = false];
    public static final int FORCE_BACKWARD_FIELD_NUMBER = 5;
    private boolean forceBackward_;
    /**
     * <code>optional bool force_backward = 5 [default = false];</code>
     *
     * <pre>
     * Whether the network will force every layer to carry out backward operation.
     * If set False, then whether to carry out backward is determined
     * automatically according to the net structure and learning rates.
     * </pre>
     */
    public boolean hasForceBackward() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional bool force_backward = 5 [default = false];</code>
     *
     * <pre>
     * Whether the network will force every layer to carry out backward operation.
     * If set False, then whether to carry out backward is determined
     * automatically according to the net structure and learning rates.
     * </pre>
     */
    public boolean getForceBackward() {
      return forceBackward_;
    }

    // optional .caffe.NetState state = 6;
    public static final int STATE_FIELD_NUMBER = 6;
    private caffe.Caffe.NetState state_;
    /**
     * <code>optional .caffe.NetState state = 6;</code>
     *
     * <pre>
     * The current "state" of the network, including the phase, level, and stage.
     * Some layers may be included/excluded depending on this state and the states
     * specified in the layers' include and exclude fields.
     * </pre>
     */
    public boolean hasState() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .caffe.NetState state = 6;</code>
     *
     * <pre>
     * The current "state" of the network, including the phase, level, and stage.
     * Some layers may be included/excluded depending on this state and the states
     * specified in the layers' include and exclude fields.
     * </pre>
     */
    public caffe.Caffe.NetState getState() {
      return state_;
    }
    /**
     * <code>optional .caffe.NetState state = 6;</code>
     *
     * <pre>
     * The current "state" of the network, including the phase, level, and stage.
     * Some layers may be included/excluded depending on this state and the states
     * specified in the layers' include and exclude fields.
     * </pre>
     */
    public caffe.Caffe.NetStateOrBuilder getStateOrBuilder() {
      return state_;
    }

    // optional bool debug_info = 7 [default = false];
    public static final int DEBUG_INFO_FIELD_NUMBER = 7;
    private boolean debugInfo_;
    /**
     * <code>optional bool debug_info = 7 [default = false];</code>
     *
     * <pre>
     * Print debugging information about results while running Net::Forward,
     * Net::Backward, and Net::Update.
     * </pre>
     */
    public boolean hasDebugInfo() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional bool debug_info = 7 [default = false];</code>
     *
     * <pre>
     * Print debugging information about results while running Net::Forward,
     * Net::Backward, and Net::Update.
     * </pre>
     */
    public boolean getDebugInfo() {
      return debugInfo_;
    }

    // repeated .caffe.LayerParameter layer = 100;
    public static final int LAYER_FIELD_NUMBER = 100;
    private java.util.List<caffe.Caffe.LayerParameter> layer_;
    /**
     * <code>repeated .caffe.LayerParameter layer = 100;</code>
     *
     * <pre>
     * The layers that make up the net.  Each of their configurations, including
     * connectivity and behavior, is specified as a LayerParameter.
     * </pre>
     */
    public java.util.List<caffe.Caffe.LayerParameter> getLayerList() {
      return layer_;
    }
    /**
     * <code>repeated .caffe.LayerParameter layer = 100;</code>
     *
     * <pre>
     * The layers that make up the net.  Each of their configurations, including
     * connectivity and behavior, is specified as a LayerParameter.
     * </pre>
     */
    public java.util.List<? extends caffe.Caffe.LayerParameterOrBuilder> 
        getLayerOrBuilderList() {
      return layer_;
    }
    /**
     * <code>repeated .caffe.LayerParameter layer = 100;</code>
     *
     * <pre>
     * The layers that make up the net.  Each of their configurations, including
     * connectivity and behavior, is specified as a LayerParameter.
     * </pre>
     */
    public int getLayerCount() {
      return layer_.size();
    }
    /**
     * <code>repeated .caffe.LayerParameter layer = 100;</code>
     *
     * <pre>
     * The layers that make up the net.  Each of their configurations, including
     * connectivity and behavior, is specified as a LayerParameter.
     * </pre>
     */
    public caffe.Caffe.LayerParameter getLayer(int index) {
      return layer_.get(index);
    }
    /**
     * <code>repeated .caffe.LayerParameter layer = 100;</code>
     *
     * <pre>
     * The layers that make up the net.  Each of their configurations, including
     * connectivity and behavior, is specified as a LayerParameter.
     * </pre>
     */
    public caffe.Caffe.LayerParameterOrBuilder getLayerOrBuilder(
        int index) {
      return layer_.get(index);
    }

    // repeated .caffe.V1LayerParameter layers = 2;
    public static final int LAYERS_FIELD_NUMBER = 2;
    private java.util.List<caffe.Caffe.V1LayerParameter> layers_;
    /**
     * <code>repeated .caffe.V1LayerParameter layers = 2;</code>
     *
     * <pre>
     * DEPRECATED: use 'layer' instead.
     * </pre>
     */
    public java.util.List<caffe.Caffe.V1LayerParameter> getLayersList() {
      return layers_;
    }
    /**
     * <code>repeated .caffe.V1LayerParameter layers = 2;</code>
     *
     * <pre>
     * DEPRECATED: use 'layer' instead.
     * </pre>
     */
    public java.util.List<? extends caffe.Caffe.V1LayerParameterOrBuilder> 
        getLayersOrBuilderList() {
      return layers_;
    }
    /**
     * <code>repeated .caffe.V1LayerParameter layers = 2;</code>
     *
     * <pre>
     * DEPRECATED: use 'layer' instead.
     * </pre>
     */
    public int getLayersCount() {
      return layers_.size();
    }
    /**
     * <code>repeated .caffe.V1LayerParameter layers = 2;</code>
     *
     * <pre>
     * DEPRECATED: use 'layer' instead.
     * </pre>
     */
    public caffe.Caffe.V1LayerParameter getLayers(int index) {
      return layers_.get(index);
    }
    /**
     * <code>repeated .caffe.V1LayerParameter layers = 2;</code>
     *
     * <pre>
     * DEPRECATED: use 'layer' instead.
     * </pre>
     */
    public caffe.Caffe.V1LayerParameterOrBuilder getLayersOrBuilder(
        int index) {
      return layers_.get(index);
    }

    private void initFields() {
      name_ = "";
      input_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      inputShape_ = java.util.Collections.emptyList();
      inputDim_ = java.util.Collections.emptyList();
      forceBackward_ = false;
      state_ = caffe.Caffe.NetState.getDefaultInstance();
      debugInfo_ = false;
      layer_ = java.util.Collections.emptyList();
      layers_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getNameBytes());
      }
      for (int i = 0; i < layers_.size(); i++) {
        output.writeMessage(2, layers_.get(i));
      }
      for (int i = 0; i < input_.size(); i++) {
        output.writeBytes(3, input_.getByteString(i));
      }
      for (int i = 0; i < inputDim_.size(); i++) {
        output.writeInt32(4, inputDim_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBool(5, forceBackward_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(6, state_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBool(7, debugInfo_);
      }
      for (int i = 0; i < inputShape_.size(); i++) {
        output.writeMessage(8, inputShape_.get(i));
      }
      for (int i = 0; i < layer_.size(); i++) {
        output.writeMessage(100, layer_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getNameBytes());
      }
      for (int i = 0; i < layers_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, layers_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < input_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(input_.getByteString(i));
        }
        size += dataSize;
        size += 1 * getInputList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < inputDim_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(inputDim_.get(i));
        }
        size += dataSize;
        size += 1 * getInputDimList().size();
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, forceBackward_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, state_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7, debugInfo_);
      }
      for (int i = 0; i < inputShape_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, inputShape_.get(i));
      }
      for (int i = 0; i < layer_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(100, layer_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.NetParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.NetParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.NetParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.NetParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.NetParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.NetParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.NetParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.NetParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.NetParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.NetParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.NetParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.NetParameter}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements caffe.Caffe.NetParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_NetParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_NetParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.NetParameter.class, caffe.Caffe.NetParameter.Builder.class);
      }

      // Construct using caffe.Caffe.NetParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getInputShapeFieldBuilder();
          getStateFieldBuilder();
          getLayerFieldBuilder();
          getLayersFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        input_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        if (inputShapeBuilder_ == null) {
          inputShape_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          inputShapeBuilder_.clear();
        }
        inputDim_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        forceBackward_ = false;
        bitField0_ = (bitField0_ & ~0x00000010);
        if (stateBuilder_ == null) {
          state_ = caffe.Caffe.NetState.getDefaultInstance();
        } else {
          stateBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        debugInfo_ = false;
        bitField0_ = (bitField0_ & ~0x00000040);
        if (layerBuilder_ == null) {
          layer_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000080);
        } else {
          layerBuilder_.clear();
        }
        if (layersBuilder_ == null) {
          layers_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000100);
        } else {
          layersBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_NetParameter_descriptor;
      }

      public caffe.Caffe.NetParameter getDefaultInstanceForType() {
        return caffe.Caffe.NetParameter.getDefaultInstance();
      }

      public caffe.Caffe.NetParameter build() {
        caffe.Caffe.NetParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.NetParameter buildPartial() {
        caffe.Caffe.NetParameter result = new caffe.Caffe.NetParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.name_ = name_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          input_ = new com.google.protobuf.UnmodifiableLazyStringList(
              input_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.input_ = input_;
        if (inputShapeBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            inputShape_ = java.util.Collections.unmodifiableList(inputShape_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.inputShape_ = inputShape_;
        } else {
          result.inputShape_ = inputShapeBuilder_.build();
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          inputDim_ = java.util.Collections.unmodifiableList(inputDim_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.inputDim_ = inputDim_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000002;
        }
        result.forceBackward_ = forceBackward_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000004;
        }
        if (stateBuilder_ == null) {
          result.state_ = state_;
        } else {
          result.state_ = stateBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000008;
        }
        result.debugInfo_ = debugInfo_;
        if (layerBuilder_ == null) {
          if (((bitField0_ & 0x00000080) == 0x00000080)) {
            layer_ = java.util.Collections.unmodifiableList(layer_);
            bitField0_ = (bitField0_ & ~0x00000080);
          }
          result.layer_ = layer_;
        } else {
          result.layer_ = layerBuilder_.build();
        }
        if (layersBuilder_ == null) {
          if (((bitField0_ & 0x00000100) == 0x00000100)) {
            layers_ = java.util.Collections.unmodifiableList(layers_);
            bitField0_ = (bitField0_ & ~0x00000100);
          }
          result.layers_ = layers_;
        } else {
          result.layers_ = layersBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.NetParameter) {
          return mergeFrom((caffe.Caffe.NetParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.NetParameter other) {
        if (other == caffe.Caffe.NetParameter.getDefaultInstance()) return this;
        if (other.hasName()) {
          bitField0_ |= 0x00000001;
          name_ = other.name_;
          onChanged();
        }
        if (!other.input_.isEmpty()) {
          if (input_.isEmpty()) {
            input_ = other.input_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureInputIsMutable();
            input_.addAll(other.input_);
          }
          onChanged();
        }
        if (inputShapeBuilder_ == null) {
          if (!other.inputShape_.isEmpty()) {
            if (inputShape_.isEmpty()) {
              inputShape_ = other.inputShape_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureInputShapeIsMutable();
              inputShape_.addAll(other.inputShape_);
            }
            onChanged();
          }
        } else {
          if (!other.inputShape_.isEmpty()) {
            if (inputShapeBuilder_.isEmpty()) {
              inputShapeBuilder_.dispose();
              inputShapeBuilder_ = null;
              inputShape_ = other.inputShape_;
              bitField0_ = (bitField0_ & ~0x00000004);
              inputShapeBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getInputShapeFieldBuilder() : null;
            } else {
              inputShapeBuilder_.addAllMessages(other.inputShape_);
            }
          }
        }
        if (!other.inputDim_.isEmpty()) {
          if (inputDim_.isEmpty()) {
            inputDim_ = other.inputDim_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureInputDimIsMutable();
            inputDim_.addAll(other.inputDim_);
          }
          onChanged();
        }
        if (other.hasForceBackward()) {
          setForceBackward(other.getForceBackward());
        }
        if (other.hasState()) {
          mergeState(other.getState());
        }
        if (other.hasDebugInfo()) {
          setDebugInfo(other.getDebugInfo());
        }
        if (layerBuilder_ == null) {
          if (!other.layer_.isEmpty()) {
            if (layer_.isEmpty()) {
              layer_ = other.layer_;
              bitField0_ = (bitField0_ & ~0x00000080);
            } else {
              ensureLayerIsMutable();
              layer_.addAll(other.layer_);
            }
            onChanged();
          }
        } else {
          if (!other.layer_.isEmpty()) {
            if (layerBuilder_.isEmpty()) {
              layerBuilder_.dispose();
              layerBuilder_ = null;
              layer_ = other.layer_;
              bitField0_ = (bitField0_ & ~0x00000080);
              layerBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getLayerFieldBuilder() : null;
            } else {
              layerBuilder_.addAllMessages(other.layer_);
            }
          }
        }
        if (layersBuilder_ == null) {
          if (!other.layers_.isEmpty()) {
            if (layers_.isEmpty()) {
              layers_ = other.layers_;
              bitField0_ = (bitField0_ & ~0x00000100);
            } else {
              ensureLayersIsMutable();
              layers_.addAll(other.layers_);
            }
            onChanged();
          }
        } else {
          if (!other.layers_.isEmpty()) {
            if (layersBuilder_.isEmpty()) {
              layersBuilder_.dispose();
              layersBuilder_ = null;
              layers_ = other.layers_;
              bitField0_ = (bitField0_ & ~0x00000100);
              layersBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getLayersFieldBuilder() : null;
            } else {
              layersBuilder_.addAllMessages(other.layers_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.NetParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.NetParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional string name = 1;
      private java.lang.Object name_ = "";
      /**
       * <code>optional string name = 1;</code>
       *
       * <pre>
       * consider giving the network a name
       * </pre>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string name = 1;</code>
       *
       * <pre>
       * consider giving the network a name
       * </pre>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string name = 1;</code>
       *
       * <pre>
       * consider giving the network a name
       * </pre>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string name = 1;</code>
       *
       * <pre>
       * consider giving the network a name
       * </pre>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 1;</code>
       *
       * <pre>
       * consider giving the network a name
       * </pre>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 1;</code>
       *
       * <pre>
       * consider giving the network a name
       * </pre>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }

      // repeated string input = 3;
      private com.google.protobuf.LazyStringList input_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureInputIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          input_ = new com.google.protobuf.LazyStringArrayList(input_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated string input = 3;</code>
       *
       * <pre>
       * DEPRECATED. See InputParameter. The input blobs to the network.
       * </pre>
       */
      public java.util.List<java.lang.String>
          getInputList() {
        return java.util.Collections.unmodifiableList(input_);
      }
      /**
       * <code>repeated string input = 3;</code>
       *
       * <pre>
       * DEPRECATED. See InputParameter. The input blobs to the network.
       * </pre>
       */
      public int getInputCount() {
        return input_.size();
      }
      /**
       * <code>repeated string input = 3;</code>
       *
       * <pre>
       * DEPRECATED. See InputParameter. The input blobs to the network.
       * </pre>
       */
      public java.lang.String getInput(int index) {
        return input_.get(index);
      }
      /**
       * <code>repeated string input = 3;</code>
       *
       * <pre>
       * DEPRECATED. See InputParameter. The input blobs to the network.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getInputBytes(int index) {
        return input_.getByteString(index);
      }
      /**
       * <code>repeated string input = 3;</code>
       *
       * <pre>
       * DEPRECATED. See InputParameter. The input blobs to the network.
       * </pre>
       */
      public Builder setInput(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureInputIsMutable();
        input_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string input = 3;</code>
       *
       * <pre>
       * DEPRECATED. See InputParameter. The input blobs to the network.
       * </pre>
       */
      public Builder addInput(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureInputIsMutable();
        input_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string input = 3;</code>
       *
       * <pre>
       * DEPRECATED. See InputParameter. The input blobs to the network.
       * </pre>
       */
      public Builder addAllInput(
          java.lang.Iterable<java.lang.String> values) {
        ensureInputIsMutable();
        super.addAll(values, input_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string input = 3;</code>
       *
       * <pre>
       * DEPRECATED. See InputParameter. The input blobs to the network.
       * </pre>
       */
      public Builder clearInput() {
        input_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string input = 3;</code>
       *
       * <pre>
       * DEPRECATED. See InputParameter. The input blobs to the network.
       * </pre>
       */
      public Builder addInputBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureInputIsMutable();
        input_.add(value);
        onChanged();
        return this;
      }

      // repeated .caffe.BlobShape input_shape = 8;
      private java.util.List<caffe.Caffe.BlobShape> inputShape_ =
        java.util.Collections.emptyList();
      private void ensureInputShapeIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          inputShape_ = new java.util.ArrayList<caffe.Caffe.BlobShape>(inputShape_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          caffe.Caffe.BlobShape, caffe.Caffe.BlobShape.Builder, caffe.Caffe.BlobShapeOrBuilder> inputShapeBuilder_;

      /**
       * <code>repeated .caffe.BlobShape input_shape = 8;</code>
       *
       * <pre>
       * DEPRECATED. See InputParameter. The shape of the input blobs.
       * </pre>
       */
      public java.util.List<caffe.Caffe.BlobShape> getInputShapeList() {
        if (inputShapeBuilder_ == null) {
          return java.util.Collections.unmodifiableList(inputShape_);
        } else {
          return inputShapeBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .caffe.BlobShape input_shape = 8;</code>
       *
       * <pre>
       * DEPRECATED. See InputParameter. The shape of the input blobs.
       * </pre>
       */
      public int getInputShapeCount() {
        if (inputShapeBuilder_ == null) {
          return inputShape_.size();
        } else {
          return inputShapeBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .caffe.BlobShape input_shape = 8;</code>
       *
       * <pre>
       * DEPRECATED. See InputParameter. The shape of the input blobs.
       * </pre>
       */
      public caffe.Caffe.BlobShape getInputShape(int index) {
        if (inputShapeBuilder_ == null) {
          return inputShape_.get(index);
        } else {
          return inputShapeBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .caffe.BlobShape input_shape = 8;</code>
       *
       * <pre>
       * DEPRECATED. See InputParameter. The shape of the input blobs.
       * </pre>
       */
      public Builder setInputShape(
          int index, caffe.Caffe.BlobShape value) {
        if (inputShapeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInputShapeIsMutable();
          inputShape_.set(index, value);
          onChanged();
        } else {
          inputShapeBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobShape input_shape = 8;</code>
       *
       * <pre>
       * DEPRECATED. See InputParameter. The shape of the input blobs.
       * </pre>
       */
      public Builder setInputShape(
          int index, caffe.Caffe.BlobShape.Builder builderForValue) {
        if (inputShapeBuilder_ == null) {
          ensureInputShapeIsMutable();
          inputShape_.set(index, builderForValue.build());
          onChanged();
        } else {
          inputShapeBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobShape input_shape = 8;</code>
       *
       * <pre>
       * DEPRECATED. See InputParameter. The shape of the input blobs.
       * </pre>
       */
      public Builder addInputShape(caffe.Caffe.BlobShape value) {
        if (inputShapeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInputShapeIsMutable();
          inputShape_.add(value);
          onChanged();
        } else {
          inputShapeBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobShape input_shape = 8;</code>
       *
       * <pre>
       * DEPRECATED. See InputParameter. The shape of the input blobs.
       * </pre>
       */
      public Builder addInputShape(
          int index, caffe.Caffe.BlobShape value) {
        if (inputShapeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInputShapeIsMutable();
          inputShape_.add(index, value);
          onChanged();
        } else {
          inputShapeBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobShape input_shape = 8;</code>
       *
       * <pre>
       * DEPRECATED. See InputParameter. The shape of the input blobs.
       * </pre>
       */
      public Builder addInputShape(
          caffe.Caffe.BlobShape.Builder builderForValue) {
        if (inputShapeBuilder_ == null) {
          ensureInputShapeIsMutable();
          inputShape_.add(builderForValue.build());
          onChanged();
        } else {
          inputShapeBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobShape input_shape = 8;</code>
       *
       * <pre>
       * DEPRECATED. See InputParameter. The shape of the input blobs.
       * </pre>
       */
      public Builder addInputShape(
          int index, caffe.Caffe.BlobShape.Builder builderForValue) {
        if (inputShapeBuilder_ == null) {
          ensureInputShapeIsMutable();
          inputShape_.add(index, builderForValue.build());
          onChanged();
        } else {
          inputShapeBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobShape input_shape = 8;</code>
       *
       * <pre>
       * DEPRECATED. See InputParameter. The shape of the input blobs.
       * </pre>
       */
      public Builder addAllInputShape(
          java.lang.Iterable<? extends caffe.Caffe.BlobShape> values) {
        if (inputShapeBuilder_ == null) {
          ensureInputShapeIsMutable();
          super.addAll(values, inputShape_);
          onChanged();
        } else {
          inputShapeBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobShape input_shape = 8;</code>
       *
       * <pre>
       * DEPRECATED. See InputParameter. The shape of the input blobs.
       * </pre>
       */
      public Builder clearInputShape() {
        if (inputShapeBuilder_ == null) {
          inputShape_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          inputShapeBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobShape input_shape = 8;</code>
       *
       * <pre>
       * DEPRECATED. See InputParameter. The shape of the input blobs.
       * </pre>
       */
      public Builder removeInputShape(int index) {
        if (inputShapeBuilder_ == null) {
          ensureInputShapeIsMutable();
          inputShape_.remove(index);
          onChanged();
        } else {
          inputShapeBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobShape input_shape = 8;</code>
       *
       * <pre>
       * DEPRECATED. See InputParameter. The shape of the input blobs.
       * </pre>
       */
      public caffe.Caffe.BlobShape.Builder getInputShapeBuilder(
          int index) {
        return getInputShapeFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .caffe.BlobShape input_shape = 8;</code>
       *
       * <pre>
       * DEPRECATED. See InputParameter. The shape of the input blobs.
       * </pre>
       */
      public caffe.Caffe.BlobShapeOrBuilder getInputShapeOrBuilder(
          int index) {
        if (inputShapeBuilder_ == null) {
          return inputShape_.get(index);  } else {
          return inputShapeBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .caffe.BlobShape input_shape = 8;</code>
       *
       * <pre>
       * DEPRECATED. See InputParameter. The shape of the input blobs.
       * </pre>
       */
      public java.util.List<? extends caffe.Caffe.BlobShapeOrBuilder> 
           getInputShapeOrBuilderList() {
        if (inputShapeBuilder_ != null) {
          return inputShapeBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(inputShape_);
        }
      }
      /**
       * <code>repeated .caffe.BlobShape input_shape = 8;</code>
       *
       * <pre>
       * DEPRECATED. See InputParameter. The shape of the input blobs.
       * </pre>
       */
      public caffe.Caffe.BlobShape.Builder addInputShapeBuilder() {
        return getInputShapeFieldBuilder().addBuilder(
            caffe.Caffe.BlobShape.getDefaultInstance());
      }
      /**
       * <code>repeated .caffe.BlobShape input_shape = 8;</code>
       *
       * <pre>
       * DEPRECATED. See InputParameter. The shape of the input blobs.
       * </pre>
       */
      public caffe.Caffe.BlobShape.Builder addInputShapeBuilder(
          int index) {
        return getInputShapeFieldBuilder().addBuilder(
            index, caffe.Caffe.BlobShape.getDefaultInstance());
      }
      /**
       * <code>repeated .caffe.BlobShape input_shape = 8;</code>
       *
       * <pre>
       * DEPRECATED. See InputParameter. The shape of the input blobs.
       * </pre>
       */
      public java.util.List<caffe.Caffe.BlobShape.Builder> 
           getInputShapeBuilderList() {
        return getInputShapeFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          caffe.Caffe.BlobShape, caffe.Caffe.BlobShape.Builder, caffe.Caffe.BlobShapeOrBuilder> 
          getInputShapeFieldBuilder() {
        if (inputShapeBuilder_ == null) {
          inputShapeBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              caffe.Caffe.BlobShape, caffe.Caffe.BlobShape.Builder, caffe.Caffe.BlobShapeOrBuilder>(
                  inputShape_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          inputShape_ = null;
        }
        return inputShapeBuilder_;
      }

      // repeated int32 input_dim = 4;
      private java.util.List<java.lang.Integer> inputDim_ = java.util.Collections.emptyList();
      private void ensureInputDimIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          inputDim_ = new java.util.ArrayList<java.lang.Integer>(inputDim_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated int32 input_dim = 4;</code>
       *
       * <pre>
       * 4D input dimensions -- deprecated.  Use "input_shape" instead.
       * If specified, for each input blob there should be four
       * values specifying the num, channels, height and width of the input blob.
       * Thus, there should be a total of (4 * #input) numbers.
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getInputDimList() {
        return java.util.Collections.unmodifiableList(inputDim_);
      }
      /**
       * <code>repeated int32 input_dim = 4;</code>
       *
       * <pre>
       * 4D input dimensions -- deprecated.  Use "input_shape" instead.
       * If specified, for each input blob there should be four
       * values specifying the num, channels, height and width of the input blob.
       * Thus, there should be a total of (4 * #input) numbers.
       * </pre>
       */
      public int getInputDimCount() {
        return inputDim_.size();
      }
      /**
       * <code>repeated int32 input_dim = 4;</code>
       *
       * <pre>
       * 4D input dimensions -- deprecated.  Use "input_shape" instead.
       * If specified, for each input blob there should be four
       * values specifying the num, channels, height and width of the input blob.
       * Thus, there should be a total of (4 * #input) numbers.
       * </pre>
       */
      public int getInputDim(int index) {
        return inputDim_.get(index);
      }
      /**
       * <code>repeated int32 input_dim = 4;</code>
       *
       * <pre>
       * 4D input dimensions -- deprecated.  Use "input_shape" instead.
       * If specified, for each input blob there should be four
       * values specifying the num, channels, height and width of the input blob.
       * Thus, there should be a total of (4 * #input) numbers.
       * </pre>
       */
      public Builder setInputDim(
          int index, int value) {
        ensureInputDimIsMutable();
        inputDim_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 input_dim = 4;</code>
       *
       * <pre>
       * 4D input dimensions -- deprecated.  Use "input_shape" instead.
       * If specified, for each input blob there should be four
       * values specifying the num, channels, height and width of the input blob.
       * Thus, there should be a total of (4 * #input) numbers.
       * </pre>
       */
      public Builder addInputDim(int value) {
        ensureInputDimIsMutable();
        inputDim_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 input_dim = 4;</code>
       *
       * <pre>
       * 4D input dimensions -- deprecated.  Use "input_shape" instead.
       * If specified, for each input blob there should be four
       * values specifying the num, channels, height and width of the input blob.
       * Thus, there should be a total of (4 * #input) numbers.
       * </pre>
       */
      public Builder addAllInputDim(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureInputDimIsMutable();
        super.addAll(values, inputDim_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 input_dim = 4;</code>
       *
       * <pre>
       * 4D input dimensions -- deprecated.  Use "input_shape" instead.
       * If specified, for each input blob there should be four
       * values specifying the num, channels, height and width of the input blob.
       * Thus, there should be a total of (4 * #input) numbers.
       * </pre>
       */
      public Builder clearInputDim() {
        inputDim_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // optional bool force_backward = 5 [default = false];
      private boolean forceBackward_ ;
      /**
       * <code>optional bool force_backward = 5 [default = false];</code>
       *
       * <pre>
       * Whether the network will force every layer to carry out backward operation.
       * If set False, then whether to carry out backward is determined
       * automatically according to the net structure and learning rates.
       * </pre>
       */
      public boolean hasForceBackward() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional bool force_backward = 5 [default = false];</code>
       *
       * <pre>
       * Whether the network will force every layer to carry out backward operation.
       * If set False, then whether to carry out backward is determined
       * automatically according to the net structure and learning rates.
       * </pre>
       */
      public boolean getForceBackward() {
        return forceBackward_;
      }
      /**
       * <code>optional bool force_backward = 5 [default = false];</code>
       *
       * <pre>
       * Whether the network will force every layer to carry out backward operation.
       * If set False, then whether to carry out backward is determined
       * automatically according to the net structure and learning rates.
       * </pre>
       */
      public Builder setForceBackward(boolean value) {
        bitField0_ |= 0x00000010;
        forceBackward_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool force_backward = 5 [default = false];</code>
       *
       * <pre>
       * Whether the network will force every layer to carry out backward operation.
       * If set False, then whether to carry out backward is determined
       * automatically according to the net structure and learning rates.
       * </pre>
       */
      public Builder clearForceBackward() {
        bitField0_ = (bitField0_ & ~0x00000010);
        forceBackward_ = false;
        onChanged();
        return this;
      }

      // optional .caffe.NetState state = 6;
      private caffe.Caffe.NetState state_ = caffe.Caffe.NetState.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.NetState, caffe.Caffe.NetState.Builder, caffe.Caffe.NetStateOrBuilder> stateBuilder_;
      /**
       * <code>optional .caffe.NetState state = 6;</code>
       *
       * <pre>
       * The current "state" of the network, including the phase, level, and stage.
       * Some layers may be included/excluded depending on this state and the states
       * specified in the layers' include and exclude fields.
       * </pre>
       */
      public boolean hasState() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .caffe.NetState state = 6;</code>
       *
       * <pre>
       * The current "state" of the network, including the phase, level, and stage.
       * Some layers may be included/excluded depending on this state and the states
       * specified in the layers' include and exclude fields.
       * </pre>
       */
      public caffe.Caffe.NetState getState() {
        if (stateBuilder_ == null) {
          return state_;
        } else {
          return stateBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.NetState state = 6;</code>
       *
       * <pre>
       * The current "state" of the network, including the phase, level, and stage.
       * Some layers may be included/excluded depending on this state and the states
       * specified in the layers' include and exclude fields.
       * </pre>
       */
      public Builder setState(caffe.Caffe.NetState value) {
        if (stateBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          state_ = value;
          onChanged();
        } else {
          stateBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .caffe.NetState state = 6;</code>
       *
       * <pre>
       * The current "state" of the network, including the phase, level, and stage.
       * Some layers may be included/excluded depending on this state and the states
       * specified in the layers' include and exclude fields.
       * </pre>
       */
      public Builder setState(
          caffe.Caffe.NetState.Builder builderForValue) {
        if (stateBuilder_ == null) {
          state_ = builderForValue.build();
          onChanged();
        } else {
          stateBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .caffe.NetState state = 6;</code>
       *
       * <pre>
       * The current "state" of the network, including the phase, level, and stage.
       * Some layers may be included/excluded depending on this state and the states
       * specified in the layers' include and exclude fields.
       * </pre>
       */
      public Builder mergeState(caffe.Caffe.NetState value) {
        if (stateBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020) &&
              state_ != caffe.Caffe.NetState.getDefaultInstance()) {
            state_ =
              caffe.Caffe.NetState.newBuilder(state_).mergeFrom(value).buildPartial();
          } else {
            state_ = value;
          }
          onChanged();
        } else {
          stateBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .caffe.NetState state = 6;</code>
       *
       * <pre>
       * The current "state" of the network, including the phase, level, and stage.
       * Some layers may be included/excluded depending on this state and the states
       * specified in the layers' include and exclude fields.
       * </pre>
       */
      public Builder clearState() {
        if (stateBuilder_ == null) {
          state_ = caffe.Caffe.NetState.getDefaultInstance();
          onChanged();
        } else {
          stateBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }
      /**
       * <code>optional .caffe.NetState state = 6;</code>
       *
       * <pre>
       * The current "state" of the network, including the phase, level, and stage.
       * Some layers may be included/excluded depending on this state and the states
       * specified in the layers' include and exclude fields.
       * </pre>
       */
      public caffe.Caffe.NetState.Builder getStateBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getStateFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.NetState state = 6;</code>
       *
       * <pre>
       * The current "state" of the network, including the phase, level, and stage.
       * Some layers may be included/excluded depending on this state and the states
       * specified in the layers' include and exclude fields.
       * </pre>
       */
      public caffe.Caffe.NetStateOrBuilder getStateOrBuilder() {
        if (stateBuilder_ != null) {
          return stateBuilder_.getMessageOrBuilder();
        } else {
          return state_;
        }
      }
      /**
       * <code>optional .caffe.NetState state = 6;</code>
       *
       * <pre>
       * The current "state" of the network, including the phase, level, and stage.
       * Some layers may be included/excluded depending on this state and the states
       * specified in the layers' include and exclude fields.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.NetState, caffe.Caffe.NetState.Builder, caffe.Caffe.NetStateOrBuilder> 
          getStateFieldBuilder() {
        if (stateBuilder_ == null) {
          stateBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.NetState, caffe.Caffe.NetState.Builder, caffe.Caffe.NetStateOrBuilder>(
                  state_,
                  getParentForChildren(),
                  isClean());
          state_ = null;
        }
        return stateBuilder_;
      }

      // optional bool debug_info = 7 [default = false];
      private boolean debugInfo_ ;
      /**
       * <code>optional bool debug_info = 7 [default = false];</code>
       *
       * <pre>
       * Print debugging information about results while running Net::Forward,
       * Net::Backward, and Net::Update.
       * </pre>
       */
      public boolean hasDebugInfo() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional bool debug_info = 7 [default = false];</code>
       *
       * <pre>
       * Print debugging information about results while running Net::Forward,
       * Net::Backward, and Net::Update.
       * </pre>
       */
      public boolean getDebugInfo() {
        return debugInfo_;
      }
      /**
       * <code>optional bool debug_info = 7 [default = false];</code>
       *
       * <pre>
       * Print debugging information about results while running Net::Forward,
       * Net::Backward, and Net::Update.
       * </pre>
       */
      public Builder setDebugInfo(boolean value) {
        bitField0_ |= 0x00000040;
        debugInfo_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool debug_info = 7 [default = false];</code>
       *
       * <pre>
       * Print debugging information about results while running Net::Forward,
       * Net::Backward, and Net::Update.
       * </pre>
       */
      public Builder clearDebugInfo() {
        bitField0_ = (bitField0_ & ~0x00000040);
        debugInfo_ = false;
        onChanged();
        return this;
      }

      // repeated .caffe.LayerParameter layer = 100;
      private java.util.List<caffe.Caffe.LayerParameter> layer_ =
        java.util.Collections.emptyList();
      private void ensureLayerIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          layer_ = new java.util.ArrayList<caffe.Caffe.LayerParameter>(layer_);
          bitField0_ |= 0x00000080;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          caffe.Caffe.LayerParameter, caffe.Caffe.LayerParameter.Builder, caffe.Caffe.LayerParameterOrBuilder> layerBuilder_;

      /**
       * <code>repeated .caffe.LayerParameter layer = 100;</code>
       *
       * <pre>
       * The layers that make up the net.  Each of their configurations, including
       * connectivity and behavior, is specified as a LayerParameter.
       * </pre>
       */
      public java.util.List<caffe.Caffe.LayerParameter> getLayerList() {
        if (layerBuilder_ == null) {
          return java.util.Collections.unmodifiableList(layer_);
        } else {
          return layerBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .caffe.LayerParameter layer = 100;</code>
       *
       * <pre>
       * The layers that make up the net.  Each of their configurations, including
       * connectivity and behavior, is specified as a LayerParameter.
       * </pre>
       */
      public int getLayerCount() {
        if (layerBuilder_ == null) {
          return layer_.size();
        } else {
          return layerBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .caffe.LayerParameter layer = 100;</code>
       *
       * <pre>
       * The layers that make up the net.  Each of their configurations, including
       * connectivity and behavior, is specified as a LayerParameter.
       * </pre>
       */
      public caffe.Caffe.LayerParameter getLayer(int index) {
        if (layerBuilder_ == null) {
          return layer_.get(index);
        } else {
          return layerBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .caffe.LayerParameter layer = 100;</code>
       *
       * <pre>
       * The layers that make up the net.  Each of their configurations, including
       * connectivity and behavior, is specified as a LayerParameter.
       * </pre>
       */
      public Builder setLayer(
          int index, caffe.Caffe.LayerParameter value) {
        if (layerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLayerIsMutable();
          layer_.set(index, value);
          onChanged();
        } else {
          layerBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.LayerParameter layer = 100;</code>
       *
       * <pre>
       * The layers that make up the net.  Each of their configurations, including
       * connectivity and behavior, is specified as a LayerParameter.
       * </pre>
       */
      public Builder setLayer(
          int index, caffe.Caffe.LayerParameter.Builder builderForValue) {
        if (layerBuilder_ == null) {
          ensureLayerIsMutable();
          layer_.set(index, builderForValue.build());
          onChanged();
        } else {
          layerBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.LayerParameter layer = 100;</code>
       *
       * <pre>
       * The layers that make up the net.  Each of their configurations, including
       * connectivity and behavior, is specified as a LayerParameter.
       * </pre>
       */
      public Builder addLayer(caffe.Caffe.LayerParameter value) {
        if (layerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLayerIsMutable();
          layer_.add(value);
          onChanged();
        } else {
          layerBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.LayerParameter layer = 100;</code>
       *
       * <pre>
       * The layers that make up the net.  Each of their configurations, including
       * connectivity and behavior, is specified as a LayerParameter.
       * </pre>
       */
      public Builder addLayer(
          int index, caffe.Caffe.LayerParameter value) {
        if (layerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLayerIsMutable();
          layer_.add(index, value);
          onChanged();
        } else {
          layerBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.LayerParameter layer = 100;</code>
       *
       * <pre>
       * The layers that make up the net.  Each of their configurations, including
       * connectivity and behavior, is specified as a LayerParameter.
       * </pre>
       */
      public Builder addLayer(
          caffe.Caffe.LayerParameter.Builder builderForValue) {
        if (layerBuilder_ == null) {
          ensureLayerIsMutable();
          layer_.add(builderForValue.build());
          onChanged();
        } else {
          layerBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.LayerParameter layer = 100;</code>
       *
       * <pre>
       * The layers that make up the net.  Each of their configurations, including
       * connectivity and behavior, is specified as a LayerParameter.
       * </pre>
       */
      public Builder addLayer(
          int index, caffe.Caffe.LayerParameter.Builder builderForValue) {
        if (layerBuilder_ == null) {
          ensureLayerIsMutable();
          layer_.add(index, builderForValue.build());
          onChanged();
        } else {
          layerBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.LayerParameter layer = 100;</code>
       *
       * <pre>
       * The layers that make up the net.  Each of their configurations, including
       * connectivity and behavior, is specified as a LayerParameter.
       * </pre>
       */
      public Builder addAllLayer(
          java.lang.Iterable<? extends caffe.Caffe.LayerParameter> values) {
        if (layerBuilder_ == null) {
          ensureLayerIsMutable();
          super.addAll(values, layer_);
          onChanged();
        } else {
          layerBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.LayerParameter layer = 100;</code>
       *
       * <pre>
       * The layers that make up the net.  Each of their configurations, including
       * connectivity and behavior, is specified as a LayerParameter.
       * </pre>
       */
      public Builder clearLayer() {
        if (layerBuilder_ == null) {
          layer_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000080);
          onChanged();
        } else {
          layerBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .caffe.LayerParameter layer = 100;</code>
       *
       * <pre>
       * The layers that make up the net.  Each of their configurations, including
       * connectivity and behavior, is specified as a LayerParameter.
       * </pre>
       */
      public Builder removeLayer(int index) {
        if (layerBuilder_ == null) {
          ensureLayerIsMutable();
          layer_.remove(index);
          onChanged();
        } else {
          layerBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.LayerParameter layer = 100;</code>
       *
       * <pre>
       * The layers that make up the net.  Each of their configurations, including
       * connectivity and behavior, is specified as a LayerParameter.
       * </pre>
       */
      public caffe.Caffe.LayerParameter.Builder getLayerBuilder(
          int index) {
        return getLayerFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .caffe.LayerParameter layer = 100;</code>
       *
       * <pre>
       * The layers that make up the net.  Each of their configurations, including
       * connectivity and behavior, is specified as a LayerParameter.
       * </pre>
       */
      public caffe.Caffe.LayerParameterOrBuilder getLayerOrBuilder(
          int index) {
        if (layerBuilder_ == null) {
          return layer_.get(index);  } else {
          return layerBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .caffe.LayerParameter layer = 100;</code>
       *
       * <pre>
       * The layers that make up the net.  Each of their configurations, including
       * connectivity and behavior, is specified as a LayerParameter.
       * </pre>
       */
      public java.util.List<? extends caffe.Caffe.LayerParameterOrBuilder> 
           getLayerOrBuilderList() {
        if (layerBuilder_ != null) {
          return layerBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(layer_);
        }
      }
      /**
       * <code>repeated .caffe.LayerParameter layer = 100;</code>
       *
       * <pre>
       * The layers that make up the net.  Each of their configurations, including
       * connectivity and behavior, is specified as a LayerParameter.
       * </pre>
       */
      public caffe.Caffe.LayerParameter.Builder addLayerBuilder() {
        return getLayerFieldBuilder().addBuilder(
            caffe.Caffe.LayerParameter.getDefaultInstance());
      }
      /**
       * <code>repeated .caffe.LayerParameter layer = 100;</code>
       *
       * <pre>
       * The layers that make up the net.  Each of their configurations, including
       * connectivity and behavior, is specified as a LayerParameter.
       * </pre>
       */
      public caffe.Caffe.LayerParameter.Builder addLayerBuilder(
          int index) {
        return getLayerFieldBuilder().addBuilder(
            index, caffe.Caffe.LayerParameter.getDefaultInstance());
      }
      /**
       * <code>repeated .caffe.LayerParameter layer = 100;</code>
       *
       * <pre>
       * The layers that make up the net.  Each of their configurations, including
       * connectivity and behavior, is specified as a LayerParameter.
       * </pre>
       */
      public java.util.List<caffe.Caffe.LayerParameter.Builder> 
           getLayerBuilderList() {
        return getLayerFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          caffe.Caffe.LayerParameter, caffe.Caffe.LayerParameter.Builder, caffe.Caffe.LayerParameterOrBuilder> 
          getLayerFieldBuilder() {
        if (layerBuilder_ == null) {
          layerBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              caffe.Caffe.LayerParameter, caffe.Caffe.LayerParameter.Builder, caffe.Caffe.LayerParameterOrBuilder>(
                  layer_,
                  ((bitField0_ & 0x00000080) == 0x00000080),
                  getParentForChildren(),
                  isClean());
          layer_ = null;
        }
        return layerBuilder_;
      }

      // repeated .caffe.V1LayerParameter layers = 2;
      private java.util.List<caffe.Caffe.V1LayerParameter> layers_ =
        java.util.Collections.emptyList();
      private void ensureLayersIsMutable() {
        if (!((bitField0_ & 0x00000100) == 0x00000100)) {
          layers_ = new java.util.ArrayList<caffe.Caffe.V1LayerParameter>(layers_);
          bitField0_ |= 0x00000100;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          caffe.Caffe.V1LayerParameter, caffe.Caffe.V1LayerParameter.Builder, caffe.Caffe.V1LayerParameterOrBuilder> layersBuilder_;

      /**
       * <code>repeated .caffe.V1LayerParameter layers = 2;</code>
       *
       * <pre>
       * DEPRECATED: use 'layer' instead.
       * </pre>
       */
      public java.util.List<caffe.Caffe.V1LayerParameter> getLayersList() {
        if (layersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(layers_);
        } else {
          return layersBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .caffe.V1LayerParameter layers = 2;</code>
       *
       * <pre>
       * DEPRECATED: use 'layer' instead.
       * </pre>
       */
      public int getLayersCount() {
        if (layersBuilder_ == null) {
          return layers_.size();
        } else {
          return layersBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .caffe.V1LayerParameter layers = 2;</code>
       *
       * <pre>
       * DEPRECATED: use 'layer' instead.
       * </pre>
       */
      public caffe.Caffe.V1LayerParameter getLayers(int index) {
        if (layersBuilder_ == null) {
          return layers_.get(index);
        } else {
          return layersBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .caffe.V1LayerParameter layers = 2;</code>
       *
       * <pre>
       * DEPRECATED: use 'layer' instead.
       * </pre>
       */
      public Builder setLayers(
          int index, caffe.Caffe.V1LayerParameter value) {
        if (layersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLayersIsMutable();
          layers_.set(index, value);
          onChanged();
        } else {
          layersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.V1LayerParameter layers = 2;</code>
       *
       * <pre>
       * DEPRECATED: use 'layer' instead.
       * </pre>
       */
      public Builder setLayers(
          int index, caffe.Caffe.V1LayerParameter.Builder builderForValue) {
        if (layersBuilder_ == null) {
          ensureLayersIsMutable();
          layers_.set(index, builderForValue.build());
          onChanged();
        } else {
          layersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.V1LayerParameter layers = 2;</code>
       *
       * <pre>
       * DEPRECATED: use 'layer' instead.
       * </pre>
       */
      public Builder addLayers(caffe.Caffe.V1LayerParameter value) {
        if (layersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLayersIsMutable();
          layers_.add(value);
          onChanged();
        } else {
          layersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.V1LayerParameter layers = 2;</code>
       *
       * <pre>
       * DEPRECATED: use 'layer' instead.
       * </pre>
       */
      public Builder addLayers(
          int index, caffe.Caffe.V1LayerParameter value) {
        if (layersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLayersIsMutable();
          layers_.add(index, value);
          onChanged();
        } else {
          layersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.V1LayerParameter layers = 2;</code>
       *
       * <pre>
       * DEPRECATED: use 'layer' instead.
       * </pre>
       */
      public Builder addLayers(
          caffe.Caffe.V1LayerParameter.Builder builderForValue) {
        if (layersBuilder_ == null) {
          ensureLayersIsMutable();
          layers_.add(builderForValue.build());
          onChanged();
        } else {
          layersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.V1LayerParameter layers = 2;</code>
       *
       * <pre>
       * DEPRECATED: use 'layer' instead.
       * </pre>
       */
      public Builder addLayers(
          int index, caffe.Caffe.V1LayerParameter.Builder builderForValue) {
        if (layersBuilder_ == null) {
          ensureLayersIsMutable();
          layers_.add(index, builderForValue.build());
          onChanged();
        } else {
          layersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.V1LayerParameter layers = 2;</code>
       *
       * <pre>
       * DEPRECATED: use 'layer' instead.
       * </pre>
       */
      public Builder addAllLayers(
          java.lang.Iterable<? extends caffe.Caffe.V1LayerParameter> values) {
        if (layersBuilder_ == null) {
          ensureLayersIsMutable();
          super.addAll(values, layers_);
          onChanged();
        } else {
          layersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.V1LayerParameter layers = 2;</code>
       *
       * <pre>
       * DEPRECATED: use 'layer' instead.
       * </pre>
       */
      public Builder clearLayers() {
        if (layersBuilder_ == null) {
          layers_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000100);
          onChanged();
        } else {
          layersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .caffe.V1LayerParameter layers = 2;</code>
       *
       * <pre>
       * DEPRECATED: use 'layer' instead.
       * </pre>
       */
      public Builder removeLayers(int index) {
        if (layersBuilder_ == null) {
          ensureLayersIsMutable();
          layers_.remove(index);
          onChanged();
        } else {
          layersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.V1LayerParameter layers = 2;</code>
       *
       * <pre>
       * DEPRECATED: use 'layer' instead.
       * </pre>
       */
      public caffe.Caffe.V1LayerParameter.Builder getLayersBuilder(
          int index) {
        return getLayersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .caffe.V1LayerParameter layers = 2;</code>
       *
       * <pre>
       * DEPRECATED: use 'layer' instead.
       * </pre>
       */
      public caffe.Caffe.V1LayerParameterOrBuilder getLayersOrBuilder(
          int index) {
        if (layersBuilder_ == null) {
          return layers_.get(index);  } else {
          return layersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .caffe.V1LayerParameter layers = 2;</code>
       *
       * <pre>
       * DEPRECATED: use 'layer' instead.
       * </pre>
       */
      public java.util.List<? extends caffe.Caffe.V1LayerParameterOrBuilder> 
           getLayersOrBuilderList() {
        if (layersBuilder_ != null) {
          return layersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(layers_);
        }
      }
      /**
       * <code>repeated .caffe.V1LayerParameter layers = 2;</code>
       *
       * <pre>
       * DEPRECATED: use 'layer' instead.
       * </pre>
       */
      public caffe.Caffe.V1LayerParameter.Builder addLayersBuilder() {
        return getLayersFieldBuilder().addBuilder(
            caffe.Caffe.V1LayerParameter.getDefaultInstance());
      }
      /**
       * <code>repeated .caffe.V1LayerParameter layers = 2;</code>
       *
       * <pre>
       * DEPRECATED: use 'layer' instead.
       * </pre>
       */
      public caffe.Caffe.V1LayerParameter.Builder addLayersBuilder(
          int index) {
        return getLayersFieldBuilder().addBuilder(
            index, caffe.Caffe.V1LayerParameter.getDefaultInstance());
      }
      /**
       * <code>repeated .caffe.V1LayerParameter layers = 2;</code>
       *
       * <pre>
       * DEPRECATED: use 'layer' instead.
       * </pre>
       */
      public java.util.List<caffe.Caffe.V1LayerParameter.Builder> 
           getLayersBuilderList() {
        return getLayersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          caffe.Caffe.V1LayerParameter, caffe.Caffe.V1LayerParameter.Builder, caffe.Caffe.V1LayerParameterOrBuilder> 
          getLayersFieldBuilder() {
        if (layersBuilder_ == null) {
          layersBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              caffe.Caffe.V1LayerParameter, caffe.Caffe.V1LayerParameter.Builder, caffe.Caffe.V1LayerParameterOrBuilder>(
                  layers_,
                  ((bitField0_ & 0x00000100) == 0x00000100),
                  getParentForChildren(),
                  isClean());
          layers_ = null;
        }
        return layersBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:caffe.NetParameter)
    }

    static {
      defaultInstance = new NetParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.NetParameter)
  }

  public interface SolverParameterOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional string net = 24;
    /**
     * <code>optional string net = 24;</code>
     *
     * <pre>
     * Proto filename for the train net, possibly combined with one or more
     * test nets.
     * </pre>
     */
    boolean hasNet();
    /**
     * <code>optional string net = 24;</code>
     *
     * <pre>
     * Proto filename for the train net, possibly combined with one or more
     * test nets.
     * </pre>
     */
    java.lang.String getNet();
    /**
     * <code>optional string net = 24;</code>
     *
     * <pre>
     * Proto filename for the train net, possibly combined with one or more
     * test nets.
     * </pre>
     */
    com.google.protobuf.ByteString
        getNetBytes();

    // optional .caffe.NetParameter net_param = 25;
    /**
     * <code>optional .caffe.NetParameter net_param = 25;</code>
     *
     * <pre>
     * Inline train net param, possibly combined with one or more test nets.
     * </pre>
     */
    boolean hasNetParam();
    /**
     * <code>optional .caffe.NetParameter net_param = 25;</code>
     *
     * <pre>
     * Inline train net param, possibly combined with one or more test nets.
     * </pre>
     */
    caffe.Caffe.NetParameter getNetParam();
    /**
     * <code>optional .caffe.NetParameter net_param = 25;</code>
     *
     * <pre>
     * Inline train net param, possibly combined with one or more test nets.
     * </pre>
     */
    caffe.Caffe.NetParameterOrBuilder getNetParamOrBuilder();

    // optional string train_net = 1;
    /**
     * <code>optional string train_net = 1;</code>
     *
     * <pre>
     * Proto filename for the train net.
     * </pre>
     */
    boolean hasTrainNet();
    /**
     * <code>optional string train_net = 1;</code>
     *
     * <pre>
     * Proto filename for the train net.
     * </pre>
     */
    java.lang.String getTrainNet();
    /**
     * <code>optional string train_net = 1;</code>
     *
     * <pre>
     * Proto filename for the train net.
     * </pre>
     */
    com.google.protobuf.ByteString
        getTrainNetBytes();

    // repeated string test_net = 2;
    /**
     * <code>repeated string test_net = 2;</code>
     *
     * <pre>
     * Proto filenames for the test nets.
     * </pre>
     */
    java.util.List<java.lang.String>
    getTestNetList();
    /**
     * <code>repeated string test_net = 2;</code>
     *
     * <pre>
     * Proto filenames for the test nets.
     * </pre>
     */
    int getTestNetCount();
    /**
     * <code>repeated string test_net = 2;</code>
     *
     * <pre>
     * Proto filenames for the test nets.
     * </pre>
     */
    java.lang.String getTestNet(int index);
    /**
     * <code>repeated string test_net = 2;</code>
     *
     * <pre>
     * Proto filenames for the test nets.
     * </pre>
     */
    com.google.protobuf.ByteString
        getTestNetBytes(int index);

    // optional .caffe.NetParameter train_net_param = 21;
    /**
     * <code>optional .caffe.NetParameter train_net_param = 21;</code>
     *
     * <pre>
     * Inline train net params.
     * </pre>
     */
    boolean hasTrainNetParam();
    /**
     * <code>optional .caffe.NetParameter train_net_param = 21;</code>
     *
     * <pre>
     * Inline train net params.
     * </pre>
     */
    caffe.Caffe.NetParameter getTrainNetParam();
    /**
     * <code>optional .caffe.NetParameter train_net_param = 21;</code>
     *
     * <pre>
     * Inline train net params.
     * </pre>
     */
    caffe.Caffe.NetParameterOrBuilder getTrainNetParamOrBuilder();

    // repeated .caffe.NetParameter test_net_param = 22;
    /**
     * <code>repeated .caffe.NetParameter test_net_param = 22;</code>
     *
     * <pre>
     * Inline test net params.
     * </pre>
     */
    java.util.List<caffe.Caffe.NetParameter> 
        getTestNetParamList();
    /**
     * <code>repeated .caffe.NetParameter test_net_param = 22;</code>
     *
     * <pre>
     * Inline test net params.
     * </pre>
     */
    caffe.Caffe.NetParameter getTestNetParam(int index);
    /**
     * <code>repeated .caffe.NetParameter test_net_param = 22;</code>
     *
     * <pre>
     * Inline test net params.
     * </pre>
     */
    int getTestNetParamCount();
    /**
     * <code>repeated .caffe.NetParameter test_net_param = 22;</code>
     *
     * <pre>
     * Inline test net params.
     * </pre>
     */
    java.util.List<? extends caffe.Caffe.NetParameterOrBuilder> 
        getTestNetParamOrBuilderList();
    /**
     * <code>repeated .caffe.NetParameter test_net_param = 22;</code>
     *
     * <pre>
     * Inline test net params.
     * </pre>
     */
    caffe.Caffe.NetParameterOrBuilder getTestNetParamOrBuilder(
        int index);

    // optional .caffe.NetState train_state = 26;
    /**
     * <code>optional .caffe.NetState train_state = 26;</code>
     *
     * <pre>
     * The states for the train/test nets. Must be unspecified or
     * specified once per net.
     *
     * By default, all states will have solver = true;
     * train_state will have phase = TRAIN,
     * and all test_state's will have phase = TEST.
     * Other defaults are set according to the NetState defaults.
     * </pre>
     */
    boolean hasTrainState();
    /**
     * <code>optional .caffe.NetState train_state = 26;</code>
     *
     * <pre>
     * The states for the train/test nets. Must be unspecified or
     * specified once per net.
     *
     * By default, all states will have solver = true;
     * train_state will have phase = TRAIN,
     * and all test_state's will have phase = TEST.
     * Other defaults are set according to the NetState defaults.
     * </pre>
     */
    caffe.Caffe.NetState getTrainState();
    /**
     * <code>optional .caffe.NetState train_state = 26;</code>
     *
     * <pre>
     * The states for the train/test nets. Must be unspecified or
     * specified once per net.
     *
     * By default, all states will have solver = true;
     * train_state will have phase = TRAIN,
     * and all test_state's will have phase = TEST.
     * Other defaults are set according to the NetState defaults.
     * </pre>
     */
    caffe.Caffe.NetStateOrBuilder getTrainStateOrBuilder();

    // repeated .caffe.NetState test_state = 27;
    /**
     * <code>repeated .caffe.NetState test_state = 27;</code>
     */
    java.util.List<caffe.Caffe.NetState> 
        getTestStateList();
    /**
     * <code>repeated .caffe.NetState test_state = 27;</code>
     */
    caffe.Caffe.NetState getTestState(int index);
    /**
     * <code>repeated .caffe.NetState test_state = 27;</code>
     */
    int getTestStateCount();
    /**
     * <code>repeated .caffe.NetState test_state = 27;</code>
     */
    java.util.List<? extends caffe.Caffe.NetStateOrBuilder> 
        getTestStateOrBuilderList();
    /**
     * <code>repeated .caffe.NetState test_state = 27;</code>
     */
    caffe.Caffe.NetStateOrBuilder getTestStateOrBuilder(
        int index);

    // repeated int32 test_iter = 3;
    /**
     * <code>repeated int32 test_iter = 3;</code>
     *
     * <pre>
     * The number of iterations for each test net.
     * </pre>
     */
    java.util.List<java.lang.Integer> getTestIterList();
    /**
     * <code>repeated int32 test_iter = 3;</code>
     *
     * <pre>
     * The number of iterations for each test net.
     * </pre>
     */
    int getTestIterCount();
    /**
     * <code>repeated int32 test_iter = 3;</code>
     *
     * <pre>
     * The number of iterations for each test net.
     * </pre>
     */
    int getTestIter(int index);

    // optional int32 test_interval = 4 [default = 0];
    /**
     * <code>optional int32 test_interval = 4 [default = 0];</code>
     *
     * <pre>
     * The number of iterations between two testing phases.
     * </pre>
     */
    boolean hasTestInterval();
    /**
     * <code>optional int32 test_interval = 4 [default = 0];</code>
     *
     * <pre>
     * The number of iterations between two testing phases.
     * </pre>
     */
    int getTestInterval();

    // optional bool test_compute_loss = 19 [default = false];
    /**
     * <code>optional bool test_compute_loss = 19 [default = false];</code>
     */
    boolean hasTestComputeLoss();
    /**
     * <code>optional bool test_compute_loss = 19 [default = false];</code>
     */
    boolean getTestComputeLoss();

    // optional bool test_initialization = 32 [default = true];
    /**
     * <code>optional bool test_initialization = 32 [default = true];</code>
     *
     * <pre>
     * If true, run an initial test pass before the first iteration,
     * ensuring memory availability and printing the starting value of the loss.
     * </pre>
     */
    boolean hasTestInitialization();
    /**
     * <code>optional bool test_initialization = 32 [default = true];</code>
     *
     * <pre>
     * If true, run an initial test pass before the first iteration,
     * ensuring memory availability and printing the starting value of the loss.
     * </pre>
     */
    boolean getTestInitialization();

    // optional float base_lr = 5;
    /**
     * <code>optional float base_lr = 5;</code>
     *
     * <pre>
     * The base learning rate
     * </pre>
     */
    boolean hasBaseLr();
    /**
     * <code>optional float base_lr = 5;</code>
     *
     * <pre>
     * The base learning rate
     * </pre>
     */
    float getBaseLr();

    // optional int32 display = 6;
    /**
     * <code>optional int32 display = 6;</code>
     *
     * <pre>
     * the number of iterations between displaying info. If display = 0, no info
     * will be displayed.
     * </pre>
     */
    boolean hasDisplay();
    /**
     * <code>optional int32 display = 6;</code>
     *
     * <pre>
     * the number of iterations between displaying info. If display = 0, no info
     * will be displayed.
     * </pre>
     */
    int getDisplay();

    // optional int32 average_loss = 33 [default = 1];
    /**
     * <code>optional int32 average_loss = 33 [default = 1];</code>
     *
     * <pre>
     * Display the loss averaged over the last average_loss iterations
     * </pre>
     */
    boolean hasAverageLoss();
    /**
     * <code>optional int32 average_loss = 33 [default = 1];</code>
     *
     * <pre>
     * Display the loss averaged over the last average_loss iterations
     * </pre>
     */
    int getAverageLoss();

    // optional int32 max_iter = 7;
    /**
     * <code>optional int32 max_iter = 7;</code>
     *
     * <pre>
     * the maximum number of iterations
     * </pre>
     */
    boolean hasMaxIter();
    /**
     * <code>optional int32 max_iter = 7;</code>
     *
     * <pre>
     * the maximum number of iterations
     * </pre>
     */
    int getMaxIter();

    // optional int32 iter_size = 36 [default = 1];
    /**
     * <code>optional int32 iter_size = 36 [default = 1];</code>
     *
     * <pre>
     * accumulate gradients over `iter_size` x `batch_size` instances
     * </pre>
     */
    boolean hasIterSize();
    /**
     * <code>optional int32 iter_size = 36 [default = 1];</code>
     *
     * <pre>
     * accumulate gradients over `iter_size` x `batch_size` instances
     * </pre>
     */
    int getIterSize();

    // optional string lr_policy = 8;
    /**
     * <code>optional string lr_policy = 8;</code>
     *
     * <pre>
     * The learning rate decay policy. The currently implemented learning rate
     * policies are as follows:
     *    - fixed: always return base_lr.
     *    - step: return base_lr * gamma ^ (floor(iter / step))
     *    - exp: return base_lr * gamma ^ iter
     *    - inv: return base_lr * (1 + gamma * iter) ^ (- power)
     *    - multistep: similar to step but it allows non uniform steps defined by
     *      stepvalue
     *    - poly: the effective learning rate follows a polynomial decay, to be
     *      zero by the max_iter. return base_lr (1 - iter/max_iter) ^ (power)
     *    - sigmoid: the effective learning rate follows a sigmod decay
     *      return base_lr ( 1/(1 + exp(-gamma * (iter - stepsize))))
     *    - plateau: decreases lr
     *              if the minimum loss isn't updated for 'plateau_winsize' iters
     *
     * where base_lr, max_iter, gamma, step, stepvalue and power are defined
     * in the solver parameter protocol buffer, and iter is the current iteration.
     * </pre>
     */
    boolean hasLrPolicy();
    /**
     * <code>optional string lr_policy = 8;</code>
     *
     * <pre>
     * The learning rate decay policy. The currently implemented learning rate
     * policies are as follows:
     *    - fixed: always return base_lr.
     *    - step: return base_lr * gamma ^ (floor(iter / step))
     *    - exp: return base_lr * gamma ^ iter
     *    - inv: return base_lr * (1 + gamma * iter) ^ (- power)
     *    - multistep: similar to step but it allows non uniform steps defined by
     *      stepvalue
     *    - poly: the effective learning rate follows a polynomial decay, to be
     *      zero by the max_iter. return base_lr (1 - iter/max_iter) ^ (power)
     *    - sigmoid: the effective learning rate follows a sigmod decay
     *      return base_lr ( 1/(1 + exp(-gamma * (iter - stepsize))))
     *    - plateau: decreases lr
     *              if the minimum loss isn't updated for 'plateau_winsize' iters
     *
     * where base_lr, max_iter, gamma, step, stepvalue and power are defined
     * in the solver parameter protocol buffer, and iter is the current iteration.
     * </pre>
     */
    java.lang.String getLrPolicy();
    /**
     * <code>optional string lr_policy = 8;</code>
     *
     * <pre>
     * The learning rate decay policy. The currently implemented learning rate
     * policies are as follows:
     *    - fixed: always return base_lr.
     *    - step: return base_lr * gamma ^ (floor(iter / step))
     *    - exp: return base_lr * gamma ^ iter
     *    - inv: return base_lr * (1 + gamma * iter) ^ (- power)
     *    - multistep: similar to step but it allows non uniform steps defined by
     *      stepvalue
     *    - poly: the effective learning rate follows a polynomial decay, to be
     *      zero by the max_iter. return base_lr (1 - iter/max_iter) ^ (power)
     *    - sigmoid: the effective learning rate follows a sigmod decay
     *      return base_lr ( 1/(1 + exp(-gamma * (iter - stepsize))))
     *    - plateau: decreases lr
     *              if the minimum loss isn't updated for 'plateau_winsize' iters
     *
     * where base_lr, max_iter, gamma, step, stepvalue and power are defined
     * in the solver parameter protocol buffer, and iter is the current iteration.
     * </pre>
     */
    com.google.protobuf.ByteString
        getLrPolicyBytes();

    // optional float gamma = 9;
    /**
     * <code>optional float gamma = 9;</code>
     *
     * <pre>
     * The parameter to compute the learning rate.
     * </pre>
     */
    boolean hasGamma();
    /**
     * <code>optional float gamma = 9;</code>
     *
     * <pre>
     * The parameter to compute the learning rate.
     * </pre>
     */
    float getGamma();

    // optional float power = 10;
    /**
     * <code>optional float power = 10;</code>
     *
     * <pre>
     * The parameter to compute the learning rate.
     * </pre>
     */
    boolean hasPower();
    /**
     * <code>optional float power = 10;</code>
     *
     * <pre>
     * The parameter to compute the learning rate.
     * </pre>
     */
    float getPower();

    // optional float momentum = 11;
    /**
     * <code>optional float momentum = 11;</code>
     *
     * <pre>
     * The momentum value.
     * </pre>
     */
    boolean hasMomentum();
    /**
     * <code>optional float momentum = 11;</code>
     *
     * <pre>
     * The momentum value.
     * </pre>
     */
    float getMomentum();

    // optional float weight_decay = 12;
    /**
     * <code>optional float weight_decay = 12;</code>
     *
     * <pre>
     * The weight decay.
     * </pre>
     */
    boolean hasWeightDecay();
    /**
     * <code>optional float weight_decay = 12;</code>
     *
     * <pre>
     * The weight decay.
     * </pre>
     */
    float getWeightDecay();

    // optional string regularization_type = 29 [default = "L2"];
    /**
     * <code>optional string regularization_type = 29 [default = "L2"];</code>
     *
     * <pre>
     * regularization types supported: L1 and L2
     * controlled by weight_decay
     * </pre>
     */
    boolean hasRegularizationType();
    /**
     * <code>optional string regularization_type = 29 [default = "L2"];</code>
     *
     * <pre>
     * regularization types supported: L1 and L2
     * controlled by weight_decay
     * </pre>
     */
    java.lang.String getRegularizationType();
    /**
     * <code>optional string regularization_type = 29 [default = "L2"];</code>
     *
     * <pre>
     * regularization types supported: L1 and L2
     * controlled by weight_decay
     * </pre>
     */
    com.google.protobuf.ByteString
        getRegularizationTypeBytes();

    // optional int32 stepsize = 13;
    /**
     * <code>optional int32 stepsize = 13;</code>
     *
     * <pre>
     * the stepsize for learning rate policy "step"
     * </pre>
     */
    boolean hasStepsize();
    /**
     * <code>optional int32 stepsize = 13;</code>
     *
     * <pre>
     * the stepsize for learning rate policy "step"
     * </pre>
     */
    int getStepsize();

    // repeated int32 stepvalue = 34;
    /**
     * <code>repeated int32 stepvalue = 34;</code>
     *
     * <pre>
     * the stepsize for learning rate policy "multistep"
     * </pre>
     */
    java.util.List<java.lang.Integer> getStepvalueList();
    /**
     * <code>repeated int32 stepvalue = 34;</code>
     *
     * <pre>
     * the stepsize for learning rate policy "multistep"
     * </pre>
     */
    int getStepvalueCount();
    /**
     * <code>repeated int32 stepvalue = 34;</code>
     *
     * <pre>
     * the stepsize for learning rate policy "multistep"
     * </pre>
     */
    int getStepvalue(int index);

    // repeated int32 plateau_winsize = 41;
    /**
     * <code>repeated int32 plateau_winsize = 41;</code>
     *
     * <pre>
     * the stepsize for learning rate policy "plateau"
     * </pre>
     */
    java.util.List<java.lang.Integer> getPlateauWinsizeList();
    /**
     * <code>repeated int32 plateau_winsize = 41;</code>
     *
     * <pre>
     * the stepsize for learning rate policy "plateau"
     * </pre>
     */
    int getPlateauWinsizeCount();
    /**
     * <code>repeated int32 plateau_winsize = 41;</code>
     *
     * <pre>
     * the stepsize for learning rate policy "plateau"
     * </pre>
     */
    int getPlateauWinsize(int index);

    // optional float clip_gradients = 35 [default = -1];
    /**
     * <code>optional float clip_gradients = 35 [default = -1];</code>
     *
     * <pre>
     * Set clip_gradients to &gt;= 0 to clip parameter gradients to that L2 norm,
     * whenever their actual L2 norm is larger.
     * </pre>
     */
    boolean hasClipGradients();
    /**
     * <code>optional float clip_gradients = 35 [default = -1];</code>
     *
     * <pre>
     * Set clip_gradients to &gt;= 0 to clip parameter gradients to that L2 norm,
     * whenever their actual L2 norm is larger.
     * </pre>
     */
    float getClipGradients();

    // optional int32 snapshot = 14 [default = 0];
    /**
     * <code>optional int32 snapshot = 14 [default = 0];</code>
     *
     * <pre>
     * The snapshot interval
     * </pre>
     */
    boolean hasSnapshot();
    /**
     * <code>optional int32 snapshot = 14 [default = 0];</code>
     *
     * <pre>
     * The snapshot interval
     * </pre>
     */
    int getSnapshot();

    // optional string snapshot_prefix = 15;
    /**
     * <code>optional string snapshot_prefix = 15;</code>
     *
     * <pre>
     * The prefix for the snapshot.
     * </pre>
     */
    boolean hasSnapshotPrefix();
    /**
     * <code>optional string snapshot_prefix = 15;</code>
     *
     * <pre>
     * The prefix for the snapshot.
     * </pre>
     */
    java.lang.String getSnapshotPrefix();
    /**
     * <code>optional string snapshot_prefix = 15;</code>
     *
     * <pre>
     * The prefix for the snapshot.
     * </pre>
     */
    com.google.protobuf.ByteString
        getSnapshotPrefixBytes();

    // optional bool snapshot_diff = 16 [default = false];
    /**
     * <code>optional bool snapshot_diff = 16 [default = false];</code>
     *
     * <pre>
     * whether to snapshot diff in the results or not. Snapshotting diff will help
     * debugging but the final protocol buffer size will be much larger.
     * </pre>
     */
    boolean hasSnapshotDiff();
    /**
     * <code>optional bool snapshot_diff = 16 [default = false];</code>
     *
     * <pre>
     * whether to snapshot diff in the results or not. Snapshotting diff will help
     * debugging but the final protocol buffer size will be much larger.
     * </pre>
     */
    boolean getSnapshotDiff();

    // optional .caffe.SolverParameter.SnapshotFormat snapshot_format = 37 [default = BINARYPROTO];
    /**
     * <code>optional .caffe.SolverParameter.SnapshotFormat snapshot_format = 37 [default = BINARYPROTO];</code>
     */
    boolean hasSnapshotFormat();
    /**
     * <code>optional .caffe.SolverParameter.SnapshotFormat snapshot_format = 37 [default = BINARYPROTO];</code>
     */
    caffe.Caffe.SolverParameter.SnapshotFormat getSnapshotFormat();

    // optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];
    /**
     * <code>optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];</code>
     */
    boolean hasSolverMode();
    /**
     * <code>optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];</code>
     */
    caffe.Caffe.SolverParameter.SolverMode getSolverMode();

    // optional int32 device_id = 18 [default = 0];
    /**
     * <code>optional int32 device_id = 18 [default = 0];</code>
     *
     * <pre>
     * the device_id will that be used in GPU mode. Use device_id = 0 in default.
     * </pre>
     */
    boolean hasDeviceId();
    /**
     * <code>optional int32 device_id = 18 [default = 0];</code>
     *
     * <pre>
     * the device_id will that be used in GPU mode. Use device_id = 0 in default.
     * </pre>
     */
    int getDeviceId();

    // optional int64 random_seed = 20 [default = -1];
    /**
     * <code>optional int64 random_seed = 20 [default = -1];</code>
     *
     * <pre>
     * If non-negative, the seed with which the Solver will initialize the Caffe
     * random number generator -- useful for reproducible results. Otherwise,
     * (and by default) initialize using a seed derived from the system clock.
     * </pre>
     */
    boolean hasRandomSeed();
    /**
     * <code>optional int64 random_seed = 20 [default = -1];</code>
     *
     * <pre>
     * If non-negative, the seed with which the Solver will initialize the Caffe
     * random number generator -- useful for reproducible results. Otherwise,
     * (and by default) initialize using a seed derived from the system clock.
     * </pre>
     */
    long getRandomSeed();

    // optional string type = 40 [default = "SGD"];
    /**
     * <code>optional string type = 40 [default = "SGD"];</code>
     *
     * <pre>
     * type of the solver
     * </pre>
     */
    boolean hasType();
    /**
     * <code>optional string type = 40 [default = "SGD"];</code>
     *
     * <pre>
     * type of the solver
     * </pre>
     */
    java.lang.String getType();
    /**
     * <code>optional string type = 40 [default = "SGD"];</code>
     *
     * <pre>
     * type of the solver
     * </pre>
     */
    com.google.protobuf.ByteString
        getTypeBytes();

    // optional float delta = 31 [default = 1e-08];
    /**
     * <code>optional float delta = 31 [default = 1e-08];</code>
     *
     * <pre>
     * numerical stability for RMSProp, AdaGrad and AdaDelta and Adam
     * </pre>
     */
    boolean hasDelta();
    /**
     * <code>optional float delta = 31 [default = 1e-08];</code>
     *
     * <pre>
     * numerical stability for RMSProp, AdaGrad and AdaDelta and Adam
     * </pre>
     */
    float getDelta();

    // optional float momentum2 = 39 [default = 0.999];
    /**
     * <code>optional float momentum2 = 39 [default = 0.999];</code>
     *
     * <pre>
     * parameters for the Adam solver
     * </pre>
     */
    boolean hasMomentum2();
    /**
     * <code>optional float momentum2 = 39 [default = 0.999];</code>
     *
     * <pre>
     * parameters for the Adam solver
     * </pre>
     */
    float getMomentum2();

    // optional float rms_decay = 38 [default = 0.99];
    /**
     * <code>optional float rms_decay = 38 [default = 0.99];</code>
     *
     * <pre>
     * RMSProp decay value
     * MeanSquare(t) = rms_decay*MeanSquare(t-1) + (1-rms_decay)*SquareGradient(t)
     * </pre>
     */
    boolean hasRmsDecay();
    /**
     * <code>optional float rms_decay = 38 [default = 0.99];</code>
     *
     * <pre>
     * RMSProp decay value
     * MeanSquare(t) = rms_decay*MeanSquare(t-1) + (1-rms_decay)*SquareGradient(t)
     * </pre>
     */
    float getRmsDecay();

    // optional bool debug_info = 23 [default = false];
    /**
     * <code>optional bool debug_info = 23 [default = false];</code>
     *
     * <pre>
     * If true, print information about the state of the net that may help with
     * debugging learning problems.
     * </pre>
     */
    boolean hasDebugInfo();
    /**
     * <code>optional bool debug_info = 23 [default = false];</code>
     *
     * <pre>
     * If true, print information about the state of the net that may help with
     * debugging learning problems.
     * </pre>
     */
    boolean getDebugInfo();

    // optional bool snapshot_after_train = 28 [default = true];
    /**
     * <code>optional bool snapshot_after_train = 28 [default = true];</code>
     *
     * <pre>
     * If false, don't save a snapshot after training finishes.
     * </pre>
     */
    boolean hasSnapshotAfterTrain();
    /**
     * <code>optional bool snapshot_after_train = 28 [default = true];</code>
     *
     * <pre>
     * If false, don't save a snapshot after training finishes.
     * </pre>
     */
    boolean getSnapshotAfterTrain();

    // optional .caffe.SolverParameter.SolverType solver_type = 30 [default = SGD];
    /**
     * <code>optional .caffe.SolverParameter.SolverType solver_type = 30 [default = SGD];</code>
     *
     * <pre>
     * DEPRECATED: use type instead of solver_type
     * </pre>
     */
    boolean hasSolverType();
    /**
     * <code>optional .caffe.SolverParameter.SolverType solver_type = 30 [default = SGD];</code>
     *
     * <pre>
     * DEPRECATED: use type instead of solver_type
     * </pre>
     */
    caffe.Caffe.SolverParameter.SolverType getSolverType();
  }
  /**
   * Protobuf type {@code caffe.SolverParameter}
   *
   * <pre>
   * NOTE
   * Update the next available ID when you add a new SolverParameter field.
   *
   * SolverParameter next available ID: 42 (last added: plateau_winsize)
   * </pre>
   */
  public static final class SolverParameter extends
      com.google.protobuf.GeneratedMessage
      implements SolverParameterOrBuilder {
    // Use SolverParameter.newBuilder() to construct.
    private SolverParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private SolverParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final SolverParameter defaultInstance;
    public static SolverParameter getDefaultInstance() {
      return defaultInstance;
    }

    public SolverParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private SolverParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      int mutable_bitField1_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000004;
              trainNet_ = input.readBytes();
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                testNet_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000008;
              }
              testNet_.add(input.readBytes());
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                testIter_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000100;
              }
              testIter_.add(input.readInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100) && input.getBytesUntilLimit() > 0) {
                testIter_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000100;
              }
              while (input.getBytesUntilLimit() > 0) {
                testIter_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 32: {
              bitField0_ |= 0x00000020;
              testInterval_ = input.readInt32();
              break;
            }
            case 45: {
              bitField0_ |= 0x00000100;
              baseLr_ = input.readFloat();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000200;
              display_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000800;
              maxIter_ = input.readInt32();
              break;
            }
            case 66: {
              bitField0_ |= 0x00002000;
              lrPolicy_ = input.readBytes();
              break;
            }
            case 77: {
              bitField0_ |= 0x00004000;
              gamma_ = input.readFloat();
              break;
            }
            case 85: {
              bitField0_ |= 0x00008000;
              power_ = input.readFloat();
              break;
            }
            case 93: {
              bitField0_ |= 0x00010000;
              momentum_ = input.readFloat();
              break;
            }
            case 101: {
              bitField0_ |= 0x00020000;
              weightDecay_ = input.readFloat();
              break;
            }
            case 104: {
              bitField0_ |= 0x00080000;
              stepsize_ = input.readInt32();
              break;
            }
            case 112: {
              bitField0_ |= 0x00200000;
              snapshot_ = input.readInt32();
              break;
            }
            case 122: {
              bitField0_ |= 0x00400000;
              snapshotPrefix_ = input.readBytes();
              break;
            }
            case 128: {
              bitField0_ |= 0x00800000;
              snapshotDiff_ = input.readBool();
              break;
            }
            case 136: {
              int rawValue = input.readEnum();
              caffe.Caffe.SolverParameter.SolverMode value = caffe.Caffe.SolverParameter.SolverMode.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(17, rawValue);
              } else {
                bitField0_ |= 0x02000000;
                solverMode_ = value;
              }
              break;
            }
            case 144: {
              bitField0_ |= 0x04000000;
              deviceId_ = input.readInt32();
              break;
            }
            case 152: {
              bitField0_ |= 0x00000040;
              testComputeLoss_ = input.readBool();
              break;
            }
            case 160: {
              bitField0_ |= 0x08000000;
              randomSeed_ = input.readInt64();
              break;
            }
            case 170: {
              caffe.Caffe.NetParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = trainNetParam_.toBuilder();
              }
              trainNetParam_ = input.readMessage(caffe.Caffe.NetParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(trainNetParam_);
                trainNetParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 178: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                testNetParam_ = new java.util.ArrayList<caffe.Caffe.NetParameter>();
                mutable_bitField0_ |= 0x00000020;
              }
              testNetParam_.add(input.readMessage(caffe.Caffe.NetParameter.PARSER, extensionRegistry));
              break;
            }
            case 184: {
              bitField1_ |= 0x00000001;
              debugInfo_ = input.readBool();
              break;
            }
            case 194: {
              bitField0_ |= 0x00000001;
              net_ = input.readBytes();
              break;
            }
            case 202: {
              caffe.Caffe.NetParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = netParam_.toBuilder();
              }
              netParam_ = input.readMessage(caffe.Caffe.NetParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(netParam_);
                netParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 210: {
              caffe.Caffe.NetState.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = trainState_.toBuilder();
              }
              trainState_ = input.readMessage(caffe.Caffe.NetState.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(trainState_);
                trainState_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
            case 218: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                testState_ = new java.util.ArrayList<caffe.Caffe.NetState>();
                mutable_bitField0_ |= 0x00000080;
              }
              testState_.add(input.readMessage(caffe.Caffe.NetState.PARSER, extensionRegistry));
              break;
            }
            case 224: {
              bitField1_ |= 0x00000002;
              snapshotAfterTrain_ = input.readBool();
              break;
            }
            case 234: {
              bitField0_ |= 0x00040000;
              regularizationType_ = input.readBytes();
              break;
            }
            case 240: {
              int rawValue = input.readEnum();
              caffe.Caffe.SolverParameter.SolverType value = caffe.Caffe.SolverParameter.SolverType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(30, rawValue);
              } else {
                bitField1_ |= 0x00000004;
                solverType_ = value;
              }
              break;
            }
            case 253: {
              bitField0_ |= 0x20000000;
              delta_ = input.readFloat();
              break;
            }
            case 256: {
              bitField0_ |= 0x00000080;
              testInitialization_ = input.readBool();
              break;
            }
            case 264: {
              bitField0_ |= 0x00000400;
              averageLoss_ = input.readInt32();
              break;
            }
            case 272: {
              if (!((mutable_bitField0_ & 0x01000000) == 0x01000000)) {
                stepvalue_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x01000000;
              }
              stepvalue_.add(input.readInt32());
              break;
            }
            case 274: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x01000000) == 0x01000000) && input.getBytesUntilLimit() > 0) {
                stepvalue_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x01000000;
              }
              while (input.getBytesUntilLimit() > 0) {
                stepvalue_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 285: {
              bitField0_ |= 0x00100000;
              clipGradients_ = input.readFloat();
              break;
            }
            case 288: {
              bitField0_ |= 0x00001000;
              iterSize_ = input.readInt32();
              break;
            }
            case 296: {
              int rawValue = input.readEnum();
              caffe.Caffe.SolverParameter.SnapshotFormat value = caffe.Caffe.SolverParameter.SnapshotFormat.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(37, rawValue);
              } else {
                bitField0_ |= 0x01000000;
                snapshotFormat_ = value;
              }
              break;
            }
            case 309: {
              bitField0_ |= 0x80000000;
              rmsDecay_ = input.readFloat();
              break;
            }
            case 317: {
              bitField0_ |= 0x40000000;
              momentum2_ = input.readFloat();
              break;
            }
            case 322: {
              bitField0_ |= 0x10000000;
              type_ = input.readBytes();
              break;
            }
            case 328: {
              if (!((mutable_bitField0_ & 0x02000000) == 0x02000000)) {
                plateauWinsize_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x02000000;
              }
              plateauWinsize_.add(input.readInt32());
              break;
            }
            case 330: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x02000000) == 0x02000000) && input.getBytesUntilLimit() > 0) {
                plateauWinsize_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x02000000;
              }
              while (input.getBytesUntilLimit() > 0) {
                plateauWinsize_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          testNet_ = new com.google.protobuf.UnmodifiableLazyStringList(testNet_);
        }
        if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
          testIter_ = java.util.Collections.unmodifiableList(testIter_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          testNetParam_ = java.util.Collections.unmodifiableList(testNetParam_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          testState_ = java.util.Collections.unmodifiableList(testState_);
        }
        if (((mutable_bitField0_ & 0x01000000) == 0x01000000)) {
          stepvalue_ = java.util.Collections.unmodifiableList(stepvalue_);
        }
        if (((mutable_bitField0_ & 0x02000000) == 0x02000000)) {
          plateauWinsize_ = java.util.Collections.unmodifiableList(plateauWinsize_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_SolverParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_SolverParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.SolverParameter.class, caffe.Caffe.SolverParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<SolverParameter> PARSER =
        new com.google.protobuf.AbstractParser<SolverParameter>() {
      public SolverParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SolverParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<SolverParameter> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code caffe.SolverParameter.SnapshotFormat}
     */
    public enum SnapshotFormat
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>HDF5 = 0;</code>
       */
      HDF5(0, 0),
      /**
       * <code>BINARYPROTO = 1;</code>
       */
      BINARYPROTO(1, 1),
      ;

      /**
       * <code>HDF5 = 0;</code>
       */
      public static final int HDF5_VALUE = 0;
      /**
       * <code>BINARYPROTO = 1;</code>
       */
      public static final int BINARYPROTO_VALUE = 1;


      public final int getNumber() { return value; }

      public static SnapshotFormat valueOf(int value) {
        switch (value) {
          case 0: return HDF5;
          case 1: return BINARYPROTO;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<SnapshotFormat>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<SnapshotFormat>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<SnapshotFormat>() {
              public SnapshotFormat findValueByNumber(int number) {
                return SnapshotFormat.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return caffe.Caffe.SolverParameter.getDescriptor().getEnumTypes().get(0);
      }

      private static final SnapshotFormat[] VALUES = values();

      public static SnapshotFormat valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private SnapshotFormat(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:caffe.SolverParameter.SnapshotFormat)
    }

    /**
     * Protobuf enum {@code caffe.SolverParameter.SolverMode}
     *
     * <pre>
     * the mode solver will use: 0 for CPU and 1 for GPU. Use GPU in default.
     * </pre>
     */
    public enum SolverMode
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>CPU = 0;</code>
       */
      CPU(0, 0),
      /**
       * <code>GPU = 1;</code>
       */
      GPU(1, 1),
      ;

      /**
       * <code>CPU = 0;</code>
       */
      public static final int CPU_VALUE = 0;
      /**
       * <code>GPU = 1;</code>
       */
      public static final int GPU_VALUE = 1;


      public final int getNumber() { return value; }

      public static SolverMode valueOf(int value) {
        switch (value) {
          case 0: return CPU;
          case 1: return GPU;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<SolverMode>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<SolverMode>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<SolverMode>() {
              public SolverMode findValueByNumber(int number) {
                return SolverMode.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return caffe.Caffe.SolverParameter.getDescriptor().getEnumTypes().get(1);
      }

      private static final SolverMode[] VALUES = values();

      public static SolverMode valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private SolverMode(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:caffe.SolverParameter.SolverMode)
    }

    /**
     * Protobuf enum {@code caffe.SolverParameter.SolverType}
     *
     * <pre>
     * DEPRECATED: old solver enum types, use string instead
     * </pre>
     */
    public enum SolverType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>SGD = 0;</code>
       */
      SGD(0, 0),
      /**
       * <code>NESTEROV = 1;</code>
       */
      NESTEROV(1, 1),
      /**
       * <code>ADAGRAD = 2;</code>
       */
      ADAGRAD(2, 2),
      /**
       * <code>RMSPROP = 3;</code>
       */
      RMSPROP(3, 3),
      /**
       * <code>ADADELTA = 4;</code>
       */
      ADADELTA(4, 4),
      /**
       * <code>ADAM = 5;</code>
       */
      ADAM(5, 5),
      ;

      /**
       * <code>SGD = 0;</code>
       */
      public static final int SGD_VALUE = 0;
      /**
       * <code>NESTEROV = 1;</code>
       */
      public static final int NESTEROV_VALUE = 1;
      /**
       * <code>ADAGRAD = 2;</code>
       */
      public static final int ADAGRAD_VALUE = 2;
      /**
       * <code>RMSPROP = 3;</code>
       */
      public static final int RMSPROP_VALUE = 3;
      /**
       * <code>ADADELTA = 4;</code>
       */
      public static final int ADADELTA_VALUE = 4;
      /**
       * <code>ADAM = 5;</code>
       */
      public static final int ADAM_VALUE = 5;


      public final int getNumber() { return value; }

      public static SolverType valueOf(int value) {
        switch (value) {
          case 0: return SGD;
          case 1: return NESTEROV;
          case 2: return ADAGRAD;
          case 3: return RMSPROP;
          case 4: return ADADELTA;
          case 5: return ADAM;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<SolverType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<SolverType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<SolverType>() {
              public SolverType findValueByNumber(int number) {
                return SolverType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return caffe.Caffe.SolverParameter.getDescriptor().getEnumTypes().get(2);
      }

      private static final SolverType[] VALUES = values();

      public static SolverType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private SolverType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:caffe.SolverParameter.SolverType)
    }

    private int bitField0_;
    private int bitField1_;
    // optional string net = 24;
    public static final int NET_FIELD_NUMBER = 24;
    private java.lang.Object net_;
    /**
     * <code>optional string net = 24;</code>
     *
     * <pre>
     * Proto filename for the train net, possibly combined with one or more
     * test nets.
     * </pre>
     */
    public boolean hasNet() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string net = 24;</code>
     *
     * <pre>
     * Proto filename for the train net, possibly combined with one or more
     * test nets.
     * </pre>
     */
    public java.lang.String getNet() {
      java.lang.Object ref = net_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          net_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string net = 24;</code>
     *
     * <pre>
     * Proto filename for the train net, possibly combined with one or more
     * test nets.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getNetBytes() {
      java.lang.Object ref = net_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        net_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional .caffe.NetParameter net_param = 25;
    public static final int NET_PARAM_FIELD_NUMBER = 25;
    private caffe.Caffe.NetParameter netParam_;
    /**
     * <code>optional .caffe.NetParameter net_param = 25;</code>
     *
     * <pre>
     * Inline train net param, possibly combined with one or more test nets.
     * </pre>
     */
    public boolean hasNetParam() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .caffe.NetParameter net_param = 25;</code>
     *
     * <pre>
     * Inline train net param, possibly combined with one or more test nets.
     * </pre>
     */
    public caffe.Caffe.NetParameter getNetParam() {
      return netParam_;
    }
    /**
     * <code>optional .caffe.NetParameter net_param = 25;</code>
     *
     * <pre>
     * Inline train net param, possibly combined with one or more test nets.
     * </pre>
     */
    public caffe.Caffe.NetParameterOrBuilder getNetParamOrBuilder() {
      return netParam_;
    }

    // optional string train_net = 1;
    public static final int TRAIN_NET_FIELD_NUMBER = 1;
    private java.lang.Object trainNet_;
    /**
     * <code>optional string train_net = 1;</code>
     *
     * <pre>
     * Proto filename for the train net.
     * </pre>
     */
    public boolean hasTrainNet() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional string train_net = 1;</code>
     *
     * <pre>
     * Proto filename for the train net.
     * </pre>
     */
    public java.lang.String getTrainNet() {
      java.lang.Object ref = trainNet_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          trainNet_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string train_net = 1;</code>
     *
     * <pre>
     * Proto filename for the train net.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getTrainNetBytes() {
      java.lang.Object ref = trainNet_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        trainNet_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // repeated string test_net = 2;
    public static final int TEST_NET_FIELD_NUMBER = 2;
    private com.google.protobuf.LazyStringList testNet_;
    /**
     * <code>repeated string test_net = 2;</code>
     *
     * <pre>
     * Proto filenames for the test nets.
     * </pre>
     */
    public java.util.List<java.lang.String>
        getTestNetList() {
      return testNet_;
    }
    /**
     * <code>repeated string test_net = 2;</code>
     *
     * <pre>
     * Proto filenames for the test nets.
     * </pre>
     */
    public int getTestNetCount() {
      return testNet_.size();
    }
    /**
     * <code>repeated string test_net = 2;</code>
     *
     * <pre>
     * Proto filenames for the test nets.
     * </pre>
     */
    public java.lang.String getTestNet(int index) {
      return testNet_.get(index);
    }
    /**
     * <code>repeated string test_net = 2;</code>
     *
     * <pre>
     * Proto filenames for the test nets.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getTestNetBytes(int index) {
      return testNet_.getByteString(index);
    }

    // optional .caffe.NetParameter train_net_param = 21;
    public static final int TRAIN_NET_PARAM_FIELD_NUMBER = 21;
    private caffe.Caffe.NetParameter trainNetParam_;
    /**
     * <code>optional .caffe.NetParameter train_net_param = 21;</code>
     *
     * <pre>
     * Inline train net params.
     * </pre>
     */
    public boolean hasTrainNetParam() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .caffe.NetParameter train_net_param = 21;</code>
     *
     * <pre>
     * Inline train net params.
     * </pre>
     */
    public caffe.Caffe.NetParameter getTrainNetParam() {
      return trainNetParam_;
    }
    /**
     * <code>optional .caffe.NetParameter train_net_param = 21;</code>
     *
     * <pre>
     * Inline train net params.
     * </pre>
     */
    public caffe.Caffe.NetParameterOrBuilder getTrainNetParamOrBuilder() {
      return trainNetParam_;
    }

    // repeated .caffe.NetParameter test_net_param = 22;
    public static final int TEST_NET_PARAM_FIELD_NUMBER = 22;
    private java.util.List<caffe.Caffe.NetParameter> testNetParam_;
    /**
     * <code>repeated .caffe.NetParameter test_net_param = 22;</code>
     *
     * <pre>
     * Inline test net params.
     * </pre>
     */
    public java.util.List<caffe.Caffe.NetParameter> getTestNetParamList() {
      return testNetParam_;
    }
    /**
     * <code>repeated .caffe.NetParameter test_net_param = 22;</code>
     *
     * <pre>
     * Inline test net params.
     * </pre>
     */
    public java.util.List<? extends caffe.Caffe.NetParameterOrBuilder> 
        getTestNetParamOrBuilderList() {
      return testNetParam_;
    }
    /**
     * <code>repeated .caffe.NetParameter test_net_param = 22;</code>
     *
     * <pre>
     * Inline test net params.
     * </pre>
     */
    public int getTestNetParamCount() {
      return testNetParam_.size();
    }
    /**
     * <code>repeated .caffe.NetParameter test_net_param = 22;</code>
     *
     * <pre>
     * Inline test net params.
     * </pre>
     */
    public caffe.Caffe.NetParameter getTestNetParam(int index) {
      return testNetParam_.get(index);
    }
    /**
     * <code>repeated .caffe.NetParameter test_net_param = 22;</code>
     *
     * <pre>
     * Inline test net params.
     * </pre>
     */
    public caffe.Caffe.NetParameterOrBuilder getTestNetParamOrBuilder(
        int index) {
      return testNetParam_.get(index);
    }

    // optional .caffe.NetState train_state = 26;
    public static final int TRAIN_STATE_FIELD_NUMBER = 26;
    private caffe.Caffe.NetState trainState_;
    /**
     * <code>optional .caffe.NetState train_state = 26;</code>
     *
     * <pre>
     * The states for the train/test nets. Must be unspecified or
     * specified once per net.
     *
     * By default, all states will have solver = true;
     * train_state will have phase = TRAIN,
     * and all test_state's will have phase = TEST.
     * Other defaults are set according to the NetState defaults.
     * </pre>
     */
    public boolean hasTrainState() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .caffe.NetState train_state = 26;</code>
     *
     * <pre>
     * The states for the train/test nets. Must be unspecified or
     * specified once per net.
     *
     * By default, all states will have solver = true;
     * train_state will have phase = TRAIN,
     * and all test_state's will have phase = TEST.
     * Other defaults are set according to the NetState defaults.
     * </pre>
     */
    public caffe.Caffe.NetState getTrainState() {
      return trainState_;
    }
    /**
     * <code>optional .caffe.NetState train_state = 26;</code>
     *
     * <pre>
     * The states for the train/test nets. Must be unspecified or
     * specified once per net.
     *
     * By default, all states will have solver = true;
     * train_state will have phase = TRAIN,
     * and all test_state's will have phase = TEST.
     * Other defaults are set according to the NetState defaults.
     * </pre>
     */
    public caffe.Caffe.NetStateOrBuilder getTrainStateOrBuilder() {
      return trainState_;
    }

    // repeated .caffe.NetState test_state = 27;
    public static final int TEST_STATE_FIELD_NUMBER = 27;
    private java.util.List<caffe.Caffe.NetState> testState_;
    /**
     * <code>repeated .caffe.NetState test_state = 27;</code>
     */
    public java.util.List<caffe.Caffe.NetState> getTestStateList() {
      return testState_;
    }
    /**
     * <code>repeated .caffe.NetState test_state = 27;</code>
     */
    public java.util.List<? extends caffe.Caffe.NetStateOrBuilder> 
        getTestStateOrBuilderList() {
      return testState_;
    }
    /**
     * <code>repeated .caffe.NetState test_state = 27;</code>
     */
    public int getTestStateCount() {
      return testState_.size();
    }
    /**
     * <code>repeated .caffe.NetState test_state = 27;</code>
     */
    public caffe.Caffe.NetState getTestState(int index) {
      return testState_.get(index);
    }
    /**
     * <code>repeated .caffe.NetState test_state = 27;</code>
     */
    public caffe.Caffe.NetStateOrBuilder getTestStateOrBuilder(
        int index) {
      return testState_.get(index);
    }

    // repeated int32 test_iter = 3;
    public static final int TEST_ITER_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> testIter_;
    /**
     * <code>repeated int32 test_iter = 3;</code>
     *
     * <pre>
     * The number of iterations for each test net.
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getTestIterList() {
      return testIter_;
    }
    /**
     * <code>repeated int32 test_iter = 3;</code>
     *
     * <pre>
     * The number of iterations for each test net.
     * </pre>
     */
    public int getTestIterCount() {
      return testIter_.size();
    }
    /**
     * <code>repeated int32 test_iter = 3;</code>
     *
     * <pre>
     * The number of iterations for each test net.
     * </pre>
     */
    public int getTestIter(int index) {
      return testIter_.get(index);
    }

    // optional int32 test_interval = 4 [default = 0];
    public static final int TEST_INTERVAL_FIELD_NUMBER = 4;
    private int testInterval_;
    /**
     * <code>optional int32 test_interval = 4 [default = 0];</code>
     *
     * <pre>
     * The number of iterations between two testing phases.
     * </pre>
     */
    public boolean hasTestInterval() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 test_interval = 4 [default = 0];</code>
     *
     * <pre>
     * The number of iterations between two testing phases.
     * </pre>
     */
    public int getTestInterval() {
      return testInterval_;
    }

    // optional bool test_compute_loss = 19 [default = false];
    public static final int TEST_COMPUTE_LOSS_FIELD_NUMBER = 19;
    private boolean testComputeLoss_;
    /**
     * <code>optional bool test_compute_loss = 19 [default = false];</code>
     */
    public boolean hasTestComputeLoss() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional bool test_compute_loss = 19 [default = false];</code>
     */
    public boolean getTestComputeLoss() {
      return testComputeLoss_;
    }

    // optional bool test_initialization = 32 [default = true];
    public static final int TEST_INITIALIZATION_FIELD_NUMBER = 32;
    private boolean testInitialization_;
    /**
     * <code>optional bool test_initialization = 32 [default = true];</code>
     *
     * <pre>
     * If true, run an initial test pass before the first iteration,
     * ensuring memory availability and printing the starting value of the loss.
     * </pre>
     */
    public boolean hasTestInitialization() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional bool test_initialization = 32 [default = true];</code>
     *
     * <pre>
     * If true, run an initial test pass before the first iteration,
     * ensuring memory availability and printing the starting value of the loss.
     * </pre>
     */
    public boolean getTestInitialization() {
      return testInitialization_;
    }

    // optional float base_lr = 5;
    public static final int BASE_LR_FIELD_NUMBER = 5;
    private float baseLr_;
    /**
     * <code>optional float base_lr = 5;</code>
     *
     * <pre>
     * The base learning rate
     * </pre>
     */
    public boolean hasBaseLr() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional float base_lr = 5;</code>
     *
     * <pre>
     * The base learning rate
     * </pre>
     */
    public float getBaseLr() {
      return baseLr_;
    }

    // optional int32 display = 6;
    public static final int DISPLAY_FIELD_NUMBER = 6;
    private int display_;
    /**
     * <code>optional int32 display = 6;</code>
     *
     * <pre>
     * the number of iterations between displaying info. If display = 0, no info
     * will be displayed.
     * </pre>
     */
    public boolean hasDisplay() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional int32 display = 6;</code>
     *
     * <pre>
     * the number of iterations between displaying info. If display = 0, no info
     * will be displayed.
     * </pre>
     */
    public int getDisplay() {
      return display_;
    }

    // optional int32 average_loss = 33 [default = 1];
    public static final int AVERAGE_LOSS_FIELD_NUMBER = 33;
    private int averageLoss_;
    /**
     * <code>optional int32 average_loss = 33 [default = 1];</code>
     *
     * <pre>
     * Display the loss averaged over the last average_loss iterations
     * </pre>
     */
    public boolean hasAverageLoss() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional int32 average_loss = 33 [default = 1];</code>
     *
     * <pre>
     * Display the loss averaged over the last average_loss iterations
     * </pre>
     */
    public int getAverageLoss() {
      return averageLoss_;
    }

    // optional int32 max_iter = 7;
    public static final int MAX_ITER_FIELD_NUMBER = 7;
    private int maxIter_;
    /**
     * <code>optional int32 max_iter = 7;</code>
     *
     * <pre>
     * the maximum number of iterations
     * </pre>
     */
    public boolean hasMaxIter() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional int32 max_iter = 7;</code>
     *
     * <pre>
     * the maximum number of iterations
     * </pre>
     */
    public int getMaxIter() {
      return maxIter_;
    }

    // optional int32 iter_size = 36 [default = 1];
    public static final int ITER_SIZE_FIELD_NUMBER = 36;
    private int iterSize_;
    /**
     * <code>optional int32 iter_size = 36 [default = 1];</code>
     *
     * <pre>
     * accumulate gradients over `iter_size` x `batch_size` instances
     * </pre>
     */
    public boolean hasIterSize() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional int32 iter_size = 36 [default = 1];</code>
     *
     * <pre>
     * accumulate gradients over `iter_size` x `batch_size` instances
     * </pre>
     */
    public int getIterSize() {
      return iterSize_;
    }

    // optional string lr_policy = 8;
    public static final int LR_POLICY_FIELD_NUMBER = 8;
    private java.lang.Object lrPolicy_;
    /**
     * <code>optional string lr_policy = 8;</code>
     *
     * <pre>
     * The learning rate decay policy. The currently implemented learning rate
     * policies are as follows:
     *    - fixed: always return base_lr.
     *    - step: return base_lr * gamma ^ (floor(iter / step))
     *    - exp: return base_lr * gamma ^ iter
     *    - inv: return base_lr * (1 + gamma * iter) ^ (- power)
     *    - multistep: similar to step but it allows non uniform steps defined by
     *      stepvalue
     *    - poly: the effective learning rate follows a polynomial decay, to be
     *      zero by the max_iter. return base_lr (1 - iter/max_iter) ^ (power)
     *    - sigmoid: the effective learning rate follows a sigmod decay
     *      return base_lr ( 1/(1 + exp(-gamma * (iter - stepsize))))
     *    - plateau: decreases lr
     *              if the minimum loss isn't updated for 'plateau_winsize' iters
     *
     * where base_lr, max_iter, gamma, step, stepvalue and power are defined
     * in the solver parameter protocol buffer, and iter is the current iteration.
     * </pre>
     */
    public boolean hasLrPolicy() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional string lr_policy = 8;</code>
     *
     * <pre>
     * The learning rate decay policy. The currently implemented learning rate
     * policies are as follows:
     *    - fixed: always return base_lr.
     *    - step: return base_lr * gamma ^ (floor(iter / step))
     *    - exp: return base_lr * gamma ^ iter
     *    - inv: return base_lr * (1 + gamma * iter) ^ (- power)
     *    - multistep: similar to step but it allows non uniform steps defined by
     *      stepvalue
     *    - poly: the effective learning rate follows a polynomial decay, to be
     *      zero by the max_iter. return base_lr (1 - iter/max_iter) ^ (power)
     *    - sigmoid: the effective learning rate follows a sigmod decay
     *      return base_lr ( 1/(1 + exp(-gamma * (iter - stepsize))))
     *    - plateau: decreases lr
     *              if the minimum loss isn't updated for 'plateau_winsize' iters
     *
     * where base_lr, max_iter, gamma, step, stepvalue and power are defined
     * in the solver parameter protocol buffer, and iter is the current iteration.
     * </pre>
     */
    public java.lang.String getLrPolicy() {
      java.lang.Object ref = lrPolicy_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          lrPolicy_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string lr_policy = 8;</code>
     *
     * <pre>
     * The learning rate decay policy. The currently implemented learning rate
     * policies are as follows:
     *    - fixed: always return base_lr.
     *    - step: return base_lr * gamma ^ (floor(iter / step))
     *    - exp: return base_lr * gamma ^ iter
     *    - inv: return base_lr * (1 + gamma * iter) ^ (- power)
     *    - multistep: similar to step but it allows non uniform steps defined by
     *      stepvalue
     *    - poly: the effective learning rate follows a polynomial decay, to be
     *      zero by the max_iter. return base_lr (1 - iter/max_iter) ^ (power)
     *    - sigmoid: the effective learning rate follows a sigmod decay
     *      return base_lr ( 1/(1 + exp(-gamma * (iter - stepsize))))
     *    - plateau: decreases lr
     *              if the minimum loss isn't updated for 'plateau_winsize' iters
     *
     * where base_lr, max_iter, gamma, step, stepvalue and power are defined
     * in the solver parameter protocol buffer, and iter is the current iteration.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getLrPolicyBytes() {
      java.lang.Object ref = lrPolicy_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        lrPolicy_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional float gamma = 9;
    public static final int GAMMA_FIELD_NUMBER = 9;
    private float gamma_;
    /**
     * <code>optional float gamma = 9;</code>
     *
     * <pre>
     * The parameter to compute the learning rate.
     * </pre>
     */
    public boolean hasGamma() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional float gamma = 9;</code>
     *
     * <pre>
     * The parameter to compute the learning rate.
     * </pre>
     */
    public float getGamma() {
      return gamma_;
    }

    // optional float power = 10;
    public static final int POWER_FIELD_NUMBER = 10;
    private float power_;
    /**
     * <code>optional float power = 10;</code>
     *
     * <pre>
     * The parameter to compute the learning rate.
     * </pre>
     */
    public boolean hasPower() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional float power = 10;</code>
     *
     * <pre>
     * The parameter to compute the learning rate.
     * </pre>
     */
    public float getPower() {
      return power_;
    }

    // optional float momentum = 11;
    public static final int MOMENTUM_FIELD_NUMBER = 11;
    private float momentum_;
    /**
     * <code>optional float momentum = 11;</code>
     *
     * <pre>
     * The momentum value.
     * </pre>
     */
    public boolean hasMomentum() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional float momentum = 11;</code>
     *
     * <pre>
     * The momentum value.
     * </pre>
     */
    public float getMomentum() {
      return momentum_;
    }

    // optional float weight_decay = 12;
    public static final int WEIGHT_DECAY_FIELD_NUMBER = 12;
    private float weightDecay_;
    /**
     * <code>optional float weight_decay = 12;</code>
     *
     * <pre>
     * The weight decay.
     * </pre>
     */
    public boolean hasWeightDecay() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional float weight_decay = 12;</code>
     *
     * <pre>
     * The weight decay.
     * </pre>
     */
    public float getWeightDecay() {
      return weightDecay_;
    }

    // optional string regularization_type = 29 [default = "L2"];
    public static final int REGULARIZATION_TYPE_FIELD_NUMBER = 29;
    private java.lang.Object regularizationType_;
    /**
     * <code>optional string regularization_type = 29 [default = "L2"];</code>
     *
     * <pre>
     * regularization types supported: L1 and L2
     * controlled by weight_decay
     * </pre>
     */
    public boolean hasRegularizationType() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>optional string regularization_type = 29 [default = "L2"];</code>
     *
     * <pre>
     * regularization types supported: L1 and L2
     * controlled by weight_decay
     * </pre>
     */
    public java.lang.String getRegularizationType() {
      java.lang.Object ref = regularizationType_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          regularizationType_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string regularization_type = 29 [default = "L2"];</code>
     *
     * <pre>
     * regularization types supported: L1 and L2
     * controlled by weight_decay
     * </pre>
     */
    public com.google.protobuf.ByteString
        getRegularizationTypeBytes() {
      java.lang.Object ref = regularizationType_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        regularizationType_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional int32 stepsize = 13;
    public static final int STEPSIZE_FIELD_NUMBER = 13;
    private int stepsize_;
    /**
     * <code>optional int32 stepsize = 13;</code>
     *
     * <pre>
     * the stepsize for learning rate policy "step"
     * </pre>
     */
    public boolean hasStepsize() {
      return ((bitField0_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>optional int32 stepsize = 13;</code>
     *
     * <pre>
     * the stepsize for learning rate policy "step"
     * </pre>
     */
    public int getStepsize() {
      return stepsize_;
    }

    // repeated int32 stepvalue = 34;
    public static final int STEPVALUE_FIELD_NUMBER = 34;
    private java.util.List<java.lang.Integer> stepvalue_;
    /**
     * <code>repeated int32 stepvalue = 34;</code>
     *
     * <pre>
     * the stepsize for learning rate policy "multistep"
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getStepvalueList() {
      return stepvalue_;
    }
    /**
     * <code>repeated int32 stepvalue = 34;</code>
     *
     * <pre>
     * the stepsize for learning rate policy "multistep"
     * </pre>
     */
    public int getStepvalueCount() {
      return stepvalue_.size();
    }
    /**
     * <code>repeated int32 stepvalue = 34;</code>
     *
     * <pre>
     * the stepsize for learning rate policy "multistep"
     * </pre>
     */
    public int getStepvalue(int index) {
      return stepvalue_.get(index);
    }

    // repeated int32 plateau_winsize = 41;
    public static final int PLATEAU_WINSIZE_FIELD_NUMBER = 41;
    private java.util.List<java.lang.Integer> plateauWinsize_;
    /**
     * <code>repeated int32 plateau_winsize = 41;</code>
     *
     * <pre>
     * the stepsize for learning rate policy "plateau"
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPlateauWinsizeList() {
      return plateauWinsize_;
    }
    /**
     * <code>repeated int32 plateau_winsize = 41;</code>
     *
     * <pre>
     * the stepsize for learning rate policy "plateau"
     * </pre>
     */
    public int getPlateauWinsizeCount() {
      return plateauWinsize_.size();
    }
    /**
     * <code>repeated int32 plateau_winsize = 41;</code>
     *
     * <pre>
     * the stepsize for learning rate policy "plateau"
     * </pre>
     */
    public int getPlateauWinsize(int index) {
      return plateauWinsize_.get(index);
    }

    // optional float clip_gradients = 35 [default = -1];
    public static final int CLIP_GRADIENTS_FIELD_NUMBER = 35;
    private float clipGradients_;
    /**
     * <code>optional float clip_gradients = 35 [default = -1];</code>
     *
     * <pre>
     * Set clip_gradients to &gt;= 0 to clip parameter gradients to that L2 norm,
     * whenever their actual L2 norm is larger.
     * </pre>
     */
    public boolean hasClipGradients() {
      return ((bitField0_ & 0x00100000) == 0x00100000);
    }
    /**
     * <code>optional float clip_gradients = 35 [default = -1];</code>
     *
     * <pre>
     * Set clip_gradients to &gt;= 0 to clip parameter gradients to that L2 norm,
     * whenever their actual L2 norm is larger.
     * </pre>
     */
    public float getClipGradients() {
      return clipGradients_;
    }

    // optional int32 snapshot = 14 [default = 0];
    public static final int SNAPSHOT_FIELD_NUMBER = 14;
    private int snapshot_;
    /**
     * <code>optional int32 snapshot = 14 [default = 0];</code>
     *
     * <pre>
     * The snapshot interval
     * </pre>
     */
    public boolean hasSnapshot() {
      return ((bitField0_ & 0x00200000) == 0x00200000);
    }
    /**
     * <code>optional int32 snapshot = 14 [default = 0];</code>
     *
     * <pre>
     * The snapshot interval
     * </pre>
     */
    public int getSnapshot() {
      return snapshot_;
    }

    // optional string snapshot_prefix = 15;
    public static final int SNAPSHOT_PREFIX_FIELD_NUMBER = 15;
    private java.lang.Object snapshotPrefix_;
    /**
     * <code>optional string snapshot_prefix = 15;</code>
     *
     * <pre>
     * The prefix for the snapshot.
     * </pre>
     */
    public boolean hasSnapshotPrefix() {
      return ((bitField0_ & 0x00400000) == 0x00400000);
    }
    /**
     * <code>optional string snapshot_prefix = 15;</code>
     *
     * <pre>
     * The prefix for the snapshot.
     * </pre>
     */
    public java.lang.String getSnapshotPrefix() {
      java.lang.Object ref = snapshotPrefix_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          snapshotPrefix_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string snapshot_prefix = 15;</code>
     *
     * <pre>
     * The prefix for the snapshot.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getSnapshotPrefixBytes() {
      java.lang.Object ref = snapshotPrefix_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        snapshotPrefix_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional bool snapshot_diff = 16 [default = false];
    public static final int SNAPSHOT_DIFF_FIELD_NUMBER = 16;
    private boolean snapshotDiff_;
    /**
     * <code>optional bool snapshot_diff = 16 [default = false];</code>
     *
     * <pre>
     * whether to snapshot diff in the results or not. Snapshotting diff will help
     * debugging but the final protocol buffer size will be much larger.
     * </pre>
     */
    public boolean hasSnapshotDiff() {
      return ((bitField0_ & 0x00800000) == 0x00800000);
    }
    /**
     * <code>optional bool snapshot_diff = 16 [default = false];</code>
     *
     * <pre>
     * whether to snapshot diff in the results or not. Snapshotting diff will help
     * debugging but the final protocol buffer size will be much larger.
     * </pre>
     */
    public boolean getSnapshotDiff() {
      return snapshotDiff_;
    }

    // optional .caffe.SolverParameter.SnapshotFormat snapshot_format = 37 [default = BINARYPROTO];
    public static final int SNAPSHOT_FORMAT_FIELD_NUMBER = 37;
    private caffe.Caffe.SolverParameter.SnapshotFormat snapshotFormat_;
    /**
     * <code>optional .caffe.SolverParameter.SnapshotFormat snapshot_format = 37 [default = BINARYPROTO];</code>
     */
    public boolean hasSnapshotFormat() {
      return ((bitField0_ & 0x01000000) == 0x01000000);
    }
    /**
     * <code>optional .caffe.SolverParameter.SnapshotFormat snapshot_format = 37 [default = BINARYPROTO];</code>
     */
    public caffe.Caffe.SolverParameter.SnapshotFormat getSnapshotFormat() {
      return snapshotFormat_;
    }

    // optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];
    public static final int SOLVER_MODE_FIELD_NUMBER = 17;
    private caffe.Caffe.SolverParameter.SolverMode solverMode_;
    /**
     * <code>optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];</code>
     */
    public boolean hasSolverMode() {
      return ((bitField0_ & 0x02000000) == 0x02000000);
    }
    /**
     * <code>optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];</code>
     */
    public caffe.Caffe.SolverParameter.SolverMode getSolverMode() {
      return solverMode_;
    }

    // optional int32 device_id = 18 [default = 0];
    public static final int DEVICE_ID_FIELD_NUMBER = 18;
    private int deviceId_;
    /**
     * <code>optional int32 device_id = 18 [default = 0];</code>
     *
     * <pre>
     * the device_id will that be used in GPU mode. Use device_id = 0 in default.
     * </pre>
     */
    public boolean hasDeviceId() {
      return ((bitField0_ & 0x04000000) == 0x04000000);
    }
    /**
     * <code>optional int32 device_id = 18 [default = 0];</code>
     *
     * <pre>
     * the device_id will that be used in GPU mode. Use device_id = 0 in default.
     * </pre>
     */
    public int getDeviceId() {
      return deviceId_;
    }

    // optional int64 random_seed = 20 [default = -1];
    public static final int RANDOM_SEED_FIELD_NUMBER = 20;
    private long randomSeed_;
    /**
     * <code>optional int64 random_seed = 20 [default = -1];</code>
     *
     * <pre>
     * If non-negative, the seed with which the Solver will initialize the Caffe
     * random number generator -- useful for reproducible results. Otherwise,
     * (and by default) initialize using a seed derived from the system clock.
     * </pre>
     */
    public boolean hasRandomSeed() {
      return ((bitField0_ & 0x08000000) == 0x08000000);
    }
    /**
     * <code>optional int64 random_seed = 20 [default = -1];</code>
     *
     * <pre>
     * If non-negative, the seed with which the Solver will initialize the Caffe
     * random number generator -- useful for reproducible results. Otherwise,
     * (and by default) initialize using a seed derived from the system clock.
     * </pre>
     */
    public long getRandomSeed() {
      return randomSeed_;
    }

    // optional string type = 40 [default = "SGD"];
    public static final int TYPE_FIELD_NUMBER = 40;
    private java.lang.Object type_;
    /**
     * <code>optional string type = 40 [default = "SGD"];</code>
     *
     * <pre>
     * type of the solver
     * </pre>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x10000000) == 0x10000000);
    }
    /**
     * <code>optional string type = 40 [default = "SGD"];</code>
     *
     * <pre>
     * type of the solver
     * </pre>
     */
    public java.lang.String getType() {
      java.lang.Object ref = type_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          type_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string type = 40 [default = "SGD"];</code>
     *
     * <pre>
     * type of the solver
     * </pre>
     */
    public com.google.protobuf.ByteString
        getTypeBytes() {
      java.lang.Object ref = type_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        type_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional float delta = 31 [default = 1e-08];
    public static final int DELTA_FIELD_NUMBER = 31;
    private float delta_;
    /**
     * <code>optional float delta = 31 [default = 1e-08];</code>
     *
     * <pre>
     * numerical stability for RMSProp, AdaGrad and AdaDelta and Adam
     * </pre>
     */
    public boolean hasDelta() {
      return ((bitField0_ & 0x20000000) == 0x20000000);
    }
    /**
     * <code>optional float delta = 31 [default = 1e-08];</code>
     *
     * <pre>
     * numerical stability for RMSProp, AdaGrad and AdaDelta and Adam
     * </pre>
     */
    public float getDelta() {
      return delta_;
    }

    // optional float momentum2 = 39 [default = 0.999];
    public static final int MOMENTUM2_FIELD_NUMBER = 39;
    private float momentum2_;
    /**
     * <code>optional float momentum2 = 39 [default = 0.999];</code>
     *
     * <pre>
     * parameters for the Adam solver
     * </pre>
     */
    public boolean hasMomentum2() {
      return ((bitField0_ & 0x40000000) == 0x40000000);
    }
    /**
     * <code>optional float momentum2 = 39 [default = 0.999];</code>
     *
     * <pre>
     * parameters for the Adam solver
     * </pre>
     */
    public float getMomentum2() {
      return momentum2_;
    }

    // optional float rms_decay = 38 [default = 0.99];
    public static final int RMS_DECAY_FIELD_NUMBER = 38;
    private float rmsDecay_;
    /**
     * <code>optional float rms_decay = 38 [default = 0.99];</code>
     *
     * <pre>
     * RMSProp decay value
     * MeanSquare(t) = rms_decay*MeanSquare(t-1) + (1-rms_decay)*SquareGradient(t)
     * </pre>
     */
    public boolean hasRmsDecay() {
      return ((bitField0_ & 0x80000000) == 0x80000000);
    }
    /**
     * <code>optional float rms_decay = 38 [default = 0.99];</code>
     *
     * <pre>
     * RMSProp decay value
     * MeanSquare(t) = rms_decay*MeanSquare(t-1) + (1-rms_decay)*SquareGradient(t)
     * </pre>
     */
    public float getRmsDecay() {
      return rmsDecay_;
    }

    // optional bool debug_info = 23 [default = false];
    public static final int DEBUG_INFO_FIELD_NUMBER = 23;
    private boolean debugInfo_;
    /**
     * <code>optional bool debug_info = 23 [default = false];</code>
     *
     * <pre>
     * If true, print information about the state of the net that may help with
     * debugging learning problems.
     * </pre>
     */
    public boolean hasDebugInfo() {
      return ((bitField1_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional bool debug_info = 23 [default = false];</code>
     *
     * <pre>
     * If true, print information about the state of the net that may help with
     * debugging learning problems.
     * </pre>
     */
    public boolean getDebugInfo() {
      return debugInfo_;
    }

    // optional bool snapshot_after_train = 28 [default = true];
    public static final int SNAPSHOT_AFTER_TRAIN_FIELD_NUMBER = 28;
    private boolean snapshotAfterTrain_;
    /**
     * <code>optional bool snapshot_after_train = 28 [default = true];</code>
     *
     * <pre>
     * If false, don't save a snapshot after training finishes.
     * </pre>
     */
    public boolean hasSnapshotAfterTrain() {
      return ((bitField1_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional bool snapshot_after_train = 28 [default = true];</code>
     *
     * <pre>
     * If false, don't save a snapshot after training finishes.
     * </pre>
     */
    public boolean getSnapshotAfterTrain() {
      return snapshotAfterTrain_;
    }

    // optional .caffe.SolverParameter.SolverType solver_type = 30 [default = SGD];
    public static final int SOLVER_TYPE_FIELD_NUMBER = 30;
    private caffe.Caffe.SolverParameter.SolverType solverType_;
    /**
     * <code>optional .caffe.SolverParameter.SolverType solver_type = 30 [default = SGD];</code>
     *
     * <pre>
     * DEPRECATED: use type instead of solver_type
     * </pre>
     */
    public boolean hasSolverType() {
      return ((bitField1_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .caffe.SolverParameter.SolverType solver_type = 30 [default = SGD];</code>
     *
     * <pre>
     * DEPRECATED: use type instead of solver_type
     * </pre>
     */
    public caffe.Caffe.SolverParameter.SolverType getSolverType() {
      return solverType_;
    }

    private void initFields() {
      net_ = "";
      netParam_ = caffe.Caffe.NetParameter.getDefaultInstance();
      trainNet_ = "";
      testNet_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      trainNetParam_ = caffe.Caffe.NetParameter.getDefaultInstance();
      testNetParam_ = java.util.Collections.emptyList();
      trainState_ = caffe.Caffe.NetState.getDefaultInstance();
      testState_ = java.util.Collections.emptyList();
      testIter_ = java.util.Collections.emptyList();
      testInterval_ = 0;
      testComputeLoss_ = false;
      testInitialization_ = true;
      baseLr_ = 0F;
      display_ = 0;
      averageLoss_ = 1;
      maxIter_ = 0;
      iterSize_ = 1;
      lrPolicy_ = "";
      gamma_ = 0F;
      power_ = 0F;
      momentum_ = 0F;
      weightDecay_ = 0F;
      regularizationType_ = "L2";
      stepsize_ = 0;
      stepvalue_ = java.util.Collections.emptyList();
      plateauWinsize_ = java.util.Collections.emptyList();
      clipGradients_ = -1F;
      snapshot_ = 0;
      snapshotPrefix_ = "";
      snapshotDiff_ = false;
      snapshotFormat_ = caffe.Caffe.SolverParameter.SnapshotFormat.BINARYPROTO;
      solverMode_ = caffe.Caffe.SolverParameter.SolverMode.GPU;
      deviceId_ = 0;
      randomSeed_ = -1L;
      type_ = "SGD";
      delta_ = 1e-08F;
      momentum2_ = 0.999F;
      rmsDecay_ = 0.99F;
      debugInfo_ = false;
      snapshotAfterTrain_ = true;
      solverType_ = caffe.Caffe.SolverParameter.SolverType.SGD;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(1, getTrainNetBytes());
      }
      for (int i = 0; i < testNet_.size(); i++) {
        output.writeBytes(2, testNet_.getByteString(i));
      }
      for (int i = 0; i < testIter_.size(); i++) {
        output.writeInt32(3, testIter_.get(i));
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(4, testInterval_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeFloat(5, baseLr_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(6, display_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeInt32(7, maxIter_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeBytes(8, getLrPolicyBytes());
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeFloat(9, gamma_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeFloat(10, power_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeFloat(11, momentum_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeFloat(12, weightDecay_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        output.writeInt32(13, stepsize_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        output.writeInt32(14, snapshot_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        output.writeBytes(15, getSnapshotPrefixBytes());
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        output.writeBool(16, snapshotDiff_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        output.writeEnum(17, solverMode_.getNumber());
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        output.writeInt32(18, deviceId_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeBool(19, testComputeLoss_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        output.writeInt64(20, randomSeed_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(21, trainNetParam_);
      }
      for (int i = 0; i < testNetParam_.size(); i++) {
        output.writeMessage(22, testNetParam_.get(i));
      }
      if (((bitField1_ & 0x00000001) == 0x00000001)) {
        output.writeBool(23, debugInfo_);
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(24, getNetBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(25, netParam_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(26, trainState_);
      }
      for (int i = 0; i < testState_.size(); i++) {
        output.writeMessage(27, testState_.get(i));
      }
      if (((bitField1_ & 0x00000002) == 0x00000002)) {
        output.writeBool(28, snapshotAfterTrain_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeBytes(29, getRegularizationTypeBytes());
      }
      if (((bitField1_ & 0x00000004) == 0x00000004)) {
        output.writeEnum(30, solverType_.getNumber());
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        output.writeFloat(31, delta_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeBool(32, testInitialization_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeInt32(33, averageLoss_);
      }
      for (int i = 0; i < stepvalue_.size(); i++) {
        output.writeInt32(34, stepvalue_.get(i));
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        output.writeFloat(35, clipGradients_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeInt32(36, iterSize_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        output.writeEnum(37, snapshotFormat_.getNumber());
      }
      if (((bitField0_ & 0x80000000) == 0x80000000)) {
        output.writeFloat(38, rmsDecay_);
      }
      if (((bitField0_ & 0x40000000) == 0x40000000)) {
        output.writeFloat(39, momentum2_);
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        output.writeBytes(40, getTypeBytes());
      }
      for (int i = 0; i < plateauWinsize_.size(); i++) {
        output.writeInt32(41, plateauWinsize_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getTrainNetBytes());
      }
      {
        int dataSize = 0;
        for (int i = 0; i < testNet_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(testNet_.getByteString(i));
        }
        size += dataSize;
        size += 1 * getTestNetList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < testIter_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(testIter_.get(i));
        }
        size += dataSize;
        size += 1 * getTestIterList().size();
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, testInterval_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(5, baseLr_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, display_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, maxIter_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(8, getLrPolicyBytes());
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(9, gamma_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(10, power_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(11, momentum_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(12, weightDecay_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(13, stepsize_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(14, snapshot_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(15, getSnapshotPrefixBytes());
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(16, snapshotDiff_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(17, solverMode_.getNumber());
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(18, deviceId_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(19, testComputeLoss_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(20, randomSeed_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(21, trainNetParam_);
      }
      for (int i = 0; i < testNetParam_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(22, testNetParam_.get(i));
      }
      if (((bitField1_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(23, debugInfo_);
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(24, getNetBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(25, netParam_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(26, trainState_);
      }
      for (int i = 0; i < testState_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(27, testState_.get(i));
      }
      if (((bitField1_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(28, snapshotAfterTrain_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(29, getRegularizationTypeBytes());
      }
      if (((bitField1_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(30, solverType_.getNumber());
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(31, delta_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(32, testInitialization_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(33, averageLoss_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < stepvalue_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(stepvalue_.get(i));
        }
        size += dataSize;
        size += 2 * getStepvalueList().size();
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(35, clipGradients_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(36, iterSize_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(37, snapshotFormat_.getNumber());
      }
      if (((bitField0_ & 0x80000000) == 0x80000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(38, rmsDecay_);
      }
      if (((bitField0_ & 0x40000000) == 0x40000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(39, momentum2_);
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(40, getTypeBytes());
      }
      {
        int dataSize = 0;
        for (int i = 0; i < plateauWinsize_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(plateauWinsize_.get(i));
        }
        size += dataSize;
        size += 2 * getPlateauWinsizeList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.SolverParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.SolverParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.SolverParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.SolverParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.SolverParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.SolverParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.SolverParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.SolverParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.SolverParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.SolverParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.SolverParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.SolverParameter}
     *
     * <pre>
     * NOTE
     * Update the next available ID when you add a new SolverParameter field.
     *
     * SolverParameter next available ID: 42 (last added: plateau_winsize)
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements caffe.Caffe.SolverParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_SolverParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_SolverParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.SolverParameter.class, caffe.Caffe.SolverParameter.Builder.class);
      }

      // Construct using caffe.Caffe.SolverParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getNetParamFieldBuilder();
          getTrainNetParamFieldBuilder();
          getTestNetParamFieldBuilder();
          getTrainStateFieldBuilder();
          getTestStateFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        net_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        if (netParamBuilder_ == null) {
          netParam_ = caffe.Caffe.NetParameter.getDefaultInstance();
        } else {
          netParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        trainNet_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        testNet_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000008);
        if (trainNetParamBuilder_ == null) {
          trainNetParam_ = caffe.Caffe.NetParameter.getDefaultInstance();
        } else {
          trainNetParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        if (testNetParamBuilder_ == null) {
          testNetParam_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
        } else {
          testNetParamBuilder_.clear();
        }
        if (trainStateBuilder_ == null) {
          trainState_ = caffe.Caffe.NetState.getDefaultInstance();
        } else {
          trainStateBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        if (testStateBuilder_ == null) {
          testState_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000080);
        } else {
          testStateBuilder_.clear();
        }
        testIter_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        testInterval_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        testComputeLoss_ = false;
        bitField0_ = (bitField0_ & ~0x00000400);
        testInitialization_ = true;
        bitField0_ = (bitField0_ & ~0x00000800);
        baseLr_ = 0F;
        bitField0_ = (bitField0_ & ~0x00001000);
        display_ = 0;
        bitField0_ = (bitField0_ & ~0x00002000);
        averageLoss_ = 1;
        bitField0_ = (bitField0_ & ~0x00004000);
        maxIter_ = 0;
        bitField0_ = (bitField0_ & ~0x00008000);
        iterSize_ = 1;
        bitField0_ = (bitField0_ & ~0x00010000);
        lrPolicy_ = "";
        bitField0_ = (bitField0_ & ~0x00020000);
        gamma_ = 0F;
        bitField0_ = (bitField0_ & ~0x00040000);
        power_ = 0F;
        bitField0_ = (bitField0_ & ~0x00080000);
        momentum_ = 0F;
        bitField0_ = (bitField0_ & ~0x00100000);
        weightDecay_ = 0F;
        bitField0_ = (bitField0_ & ~0x00200000);
        regularizationType_ = "L2";
        bitField0_ = (bitField0_ & ~0x00400000);
        stepsize_ = 0;
        bitField0_ = (bitField0_ & ~0x00800000);
        stepvalue_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x01000000);
        plateauWinsize_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x02000000);
        clipGradients_ = -1F;
        bitField0_ = (bitField0_ & ~0x04000000);
        snapshot_ = 0;
        bitField0_ = (bitField0_ & ~0x08000000);
        snapshotPrefix_ = "";
        bitField0_ = (bitField0_ & ~0x10000000);
        snapshotDiff_ = false;
        bitField0_ = (bitField0_ & ~0x20000000);
        snapshotFormat_ = caffe.Caffe.SolverParameter.SnapshotFormat.BINARYPROTO;
        bitField0_ = (bitField0_ & ~0x40000000);
        solverMode_ = caffe.Caffe.SolverParameter.SolverMode.GPU;
        bitField0_ = (bitField0_ & ~0x80000000);
        deviceId_ = 0;
        bitField1_ = (bitField1_ & ~0x00000001);
        randomSeed_ = -1L;
        bitField1_ = (bitField1_ & ~0x00000002);
        type_ = "SGD";
        bitField1_ = (bitField1_ & ~0x00000004);
        delta_ = 1e-08F;
        bitField1_ = (bitField1_ & ~0x00000008);
        momentum2_ = 0.999F;
        bitField1_ = (bitField1_ & ~0x00000010);
        rmsDecay_ = 0.99F;
        bitField1_ = (bitField1_ & ~0x00000020);
        debugInfo_ = false;
        bitField1_ = (bitField1_ & ~0x00000040);
        snapshotAfterTrain_ = true;
        bitField1_ = (bitField1_ & ~0x00000080);
        solverType_ = caffe.Caffe.SolverParameter.SolverType.SGD;
        bitField1_ = (bitField1_ & ~0x00000100);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_SolverParameter_descriptor;
      }

      public caffe.Caffe.SolverParameter getDefaultInstanceForType() {
        return caffe.Caffe.SolverParameter.getDefaultInstance();
      }

      public caffe.Caffe.SolverParameter build() {
        caffe.Caffe.SolverParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.SolverParameter buildPartial() {
        caffe.Caffe.SolverParameter result = new caffe.Caffe.SolverParameter(this);
        int from_bitField0_ = bitField0_;
        int from_bitField1_ = bitField1_;
        int to_bitField0_ = 0;
        int to_bitField1_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.net_ = net_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (netParamBuilder_ == null) {
          result.netParam_ = netParam_;
        } else {
          result.netParam_ = netParamBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.trainNet_ = trainNet_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          testNet_ = new com.google.protobuf.UnmodifiableLazyStringList(
              testNet_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.testNet_ = testNet_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        if (trainNetParamBuilder_ == null) {
          result.trainNetParam_ = trainNetParam_;
        } else {
          result.trainNetParam_ = trainNetParamBuilder_.build();
        }
        if (testNetParamBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020)) {
            testNetParam_ = java.util.Collections.unmodifiableList(testNetParam_);
            bitField0_ = (bitField0_ & ~0x00000020);
          }
          result.testNetParam_ = testNetParam_;
        } else {
          result.testNetParam_ = testNetParamBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000010;
        }
        if (trainStateBuilder_ == null) {
          result.trainState_ = trainState_;
        } else {
          result.trainState_ = trainStateBuilder_.build();
        }
        if (testStateBuilder_ == null) {
          if (((bitField0_ & 0x00000080) == 0x00000080)) {
            testState_ = java.util.Collections.unmodifiableList(testState_);
            bitField0_ = (bitField0_ & ~0x00000080);
          }
          result.testState_ = testState_;
        } else {
          result.testState_ = testStateBuilder_.build();
        }
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
          testIter_ = java.util.Collections.unmodifiableList(testIter_);
          bitField0_ = (bitField0_ & ~0x00000100);
        }
        result.testIter_ = testIter_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000020;
        }
        result.testInterval_ = testInterval_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000040;
        }
        result.testComputeLoss_ = testComputeLoss_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000080;
        }
        result.testInitialization_ = testInitialization_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00000100;
        }
        result.baseLr_ = baseLr_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00000200;
        }
        result.display_ = display_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00000400;
        }
        result.averageLoss_ = averageLoss_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00000800;
        }
        result.maxIter_ = maxIter_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.iterSize_ = iterSize_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.lrPolicy_ = lrPolicy_;
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.gamma_ = gamma_;
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.power_ = power_;
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.momentum_ = momentum_;
        if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
          to_bitField0_ |= 0x00020000;
        }
        result.weightDecay_ = weightDecay_;
        if (((from_bitField0_ & 0x00400000) == 0x00400000)) {
          to_bitField0_ |= 0x00040000;
        }
        result.regularizationType_ = regularizationType_;
        if (((from_bitField0_ & 0x00800000) == 0x00800000)) {
          to_bitField0_ |= 0x00080000;
        }
        result.stepsize_ = stepsize_;
        if (((bitField0_ & 0x01000000) == 0x01000000)) {
          stepvalue_ = java.util.Collections.unmodifiableList(stepvalue_);
          bitField0_ = (bitField0_ & ~0x01000000);
        }
        result.stepvalue_ = stepvalue_;
        if (((bitField0_ & 0x02000000) == 0x02000000)) {
          plateauWinsize_ = java.util.Collections.unmodifiableList(plateauWinsize_);
          bitField0_ = (bitField0_ & ~0x02000000);
        }
        result.plateauWinsize_ = plateauWinsize_;
        if (((from_bitField0_ & 0x04000000) == 0x04000000)) {
          to_bitField0_ |= 0x00100000;
        }
        result.clipGradients_ = clipGradients_;
        if (((from_bitField0_ & 0x08000000) == 0x08000000)) {
          to_bitField0_ |= 0x00200000;
        }
        result.snapshot_ = snapshot_;
        if (((from_bitField0_ & 0x10000000) == 0x10000000)) {
          to_bitField0_ |= 0x00400000;
        }
        result.snapshotPrefix_ = snapshotPrefix_;
        if (((from_bitField0_ & 0x20000000) == 0x20000000)) {
          to_bitField0_ |= 0x00800000;
        }
        result.snapshotDiff_ = snapshotDiff_;
        if (((from_bitField0_ & 0x40000000) == 0x40000000)) {
          to_bitField0_ |= 0x01000000;
        }
        result.snapshotFormat_ = snapshotFormat_;
        if (((from_bitField0_ & 0x80000000) == 0x80000000)) {
          to_bitField0_ |= 0x02000000;
        }
        result.solverMode_ = solverMode_;
        if (((from_bitField1_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x04000000;
        }
        result.deviceId_ = deviceId_;
        if (((from_bitField1_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x08000000;
        }
        result.randomSeed_ = randomSeed_;
        if (((from_bitField1_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x10000000;
        }
        result.type_ = type_;
        if (((from_bitField1_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x20000000;
        }
        result.delta_ = delta_;
        if (((from_bitField1_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x40000000;
        }
        result.momentum2_ = momentum2_;
        if (((from_bitField1_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x80000000;
        }
        result.rmsDecay_ = rmsDecay_;
        if (((from_bitField1_ & 0x00000040) == 0x00000040)) {
          to_bitField1_ |= 0x00000001;
        }
        result.debugInfo_ = debugInfo_;
        if (((from_bitField1_ & 0x00000080) == 0x00000080)) {
          to_bitField1_ |= 0x00000002;
        }
        result.snapshotAfterTrain_ = snapshotAfterTrain_;
        if (((from_bitField1_ & 0x00000100) == 0x00000100)) {
          to_bitField1_ |= 0x00000004;
        }
        result.solverType_ = solverType_;
        result.bitField0_ = to_bitField0_;
        result.bitField1_ = to_bitField1_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.SolverParameter) {
          return mergeFrom((caffe.Caffe.SolverParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.SolverParameter other) {
        if (other == caffe.Caffe.SolverParameter.getDefaultInstance()) return this;
        if (other.hasNet()) {
          bitField0_ |= 0x00000001;
          net_ = other.net_;
          onChanged();
        }
        if (other.hasNetParam()) {
          mergeNetParam(other.getNetParam());
        }
        if (other.hasTrainNet()) {
          bitField0_ |= 0x00000004;
          trainNet_ = other.trainNet_;
          onChanged();
        }
        if (!other.testNet_.isEmpty()) {
          if (testNet_.isEmpty()) {
            testNet_ = other.testNet_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureTestNetIsMutable();
            testNet_.addAll(other.testNet_);
          }
          onChanged();
        }
        if (other.hasTrainNetParam()) {
          mergeTrainNetParam(other.getTrainNetParam());
        }
        if (testNetParamBuilder_ == null) {
          if (!other.testNetParam_.isEmpty()) {
            if (testNetParam_.isEmpty()) {
              testNetParam_ = other.testNetParam_;
              bitField0_ = (bitField0_ & ~0x00000020);
            } else {
              ensureTestNetParamIsMutable();
              testNetParam_.addAll(other.testNetParam_);
            }
            onChanged();
          }
        } else {
          if (!other.testNetParam_.isEmpty()) {
            if (testNetParamBuilder_.isEmpty()) {
              testNetParamBuilder_.dispose();
              testNetParamBuilder_ = null;
              testNetParam_ = other.testNetParam_;
              bitField0_ = (bitField0_ & ~0x00000020);
              testNetParamBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getTestNetParamFieldBuilder() : null;
            } else {
              testNetParamBuilder_.addAllMessages(other.testNetParam_);
            }
          }
        }
        if (other.hasTrainState()) {
          mergeTrainState(other.getTrainState());
        }
        if (testStateBuilder_ == null) {
          if (!other.testState_.isEmpty()) {
            if (testState_.isEmpty()) {
              testState_ = other.testState_;
              bitField0_ = (bitField0_ & ~0x00000080);
            } else {
              ensureTestStateIsMutable();
              testState_.addAll(other.testState_);
            }
            onChanged();
          }
        } else {
          if (!other.testState_.isEmpty()) {
            if (testStateBuilder_.isEmpty()) {
              testStateBuilder_.dispose();
              testStateBuilder_ = null;
              testState_ = other.testState_;
              bitField0_ = (bitField0_ & ~0x00000080);
              testStateBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getTestStateFieldBuilder() : null;
            } else {
              testStateBuilder_.addAllMessages(other.testState_);
            }
          }
        }
        if (!other.testIter_.isEmpty()) {
          if (testIter_.isEmpty()) {
            testIter_ = other.testIter_;
            bitField0_ = (bitField0_ & ~0x00000100);
          } else {
            ensureTestIterIsMutable();
            testIter_.addAll(other.testIter_);
          }
          onChanged();
        }
        if (other.hasTestInterval()) {
          setTestInterval(other.getTestInterval());
        }
        if (other.hasTestComputeLoss()) {
          setTestComputeLoss(other.getTestComputeLoss());
        }
        if (other.hasTestInitialization()) {
          setTestInitialization(other.getTestInitialization());
        }
        if (other.hasBaseLr()) {
          setBaseLr(other.getBaseLr());
        }
        if (other.hasDisplay()) {
          setDisplay(other.getDisplay());
        }
        if (other.hasAverageLoss()) {
          setAverageLoss(other.getAverageLoss());
        }
        if (other.hasMaxIter()) {
          setMaxIter(other.getMaxIter());
        }
        if (other.hasIterSize()) {
          setIterSize(other.getIterSize());
        }
        if (other.hasLrPolicy()) {
          bitField0_ |= 0x00020000;
          lrPolicy_ = other.lrPolicy_;
          onChanged();
        }
        if (other.hasGamma()) {
          setGamma(other.getGamma());
        }
        if (other.hasPower()) {
          setPower(other.getPower());
        }
        if (other.hasMomentum()) {
          setMomentum(other.getMomentum());
        }
        if (other.hasWeightDecay()) {
          setWeightDecay(other.getWeightDecay());
        }
        if (other.hasRegularizationType()) {
          bitField0_ |= 0x00400000;
          regularizationType_ = other.regularizationType_;
          onChanged();
        }
        if (other.hasStepsize()) {
          setStepsize(other.getStepsize());
        }
        if (!other.stepvalue_.isEmpty()) {
          if (stepvalue_.isEmpty()) {
            stepvalue_ = other.stepvalue_;
            bitField0_ = (bitField0_ & ~0x01000000);
          } else {
            ensureStepvalueIsMutable();
            stepvalue_.addAll(other.stepvalue_);
          }
          onChanged();
        }
        if (!other.plateauWinsize_.isEmpty()) {
          if (plateauWinsize_.isEmpty()) {
            plateauWinsize_ = other.plateauWinsize_;
            bitField0_ = (bitField0_ & ~0x02000000);
          } else {
            ensurePlateauWinsizeIsMutable();
            plateauWinsize_.addAll(other.plateauWinsize_);
          }
          onChanged();
        }
        if (other.hasClipGradients()) {
          setClipGradients(other.getClipGradients());
        }
        if (other.hasSnapshot()) {
          setSnapshot(other.getSnapshot());
        }
        if (other.hasSnapshotPrefix()) {
          bitField0_ |= 0x10000000;
          snapshotPrefix_ = other.snapshotPrefix_;
          onChanged();
        }
        if (other.hasSnapshotDiff()) {
          setSnapshotDiff(other.getSnapshotDiff());
        }
        if (other.hasSnapshotFormat()) {
          setSnapshotFormat(other.getSnapshotFormat());
        }
        if (other.hasSolverMode()) {
          setSolverMode(other.getSolverMode());
        }
        if (other.hasDeviceId()) {
          setDeviceId(other.getDeviceId());
        }
        if (other.hasRandomSeed()) {
          setRandomSeed(other.getRandomSeed());
        }
        if (other.hasType()) {
          bitField1_ |= 0x00000004;
          type_ = other.type_;
          onChanged();
        }
        if (other.hasDelta()) {
          setDelta(other.getDelta());
        }
        if (other.hasMomentum2()) {
          setMomentum2(other.getMomentum2());
        }
        if (other.hasRmsDecay()) {
          setRmsDecay(other.getRmsDecay());
        }
        if (other.hasDebugInfo()) {
          setDebugInfo(other.getDebugInfo());
        }
        if (other.hasSnapshotAfterTrain()) {
          setSnapshotAfterTrain(other.getSnapshotAfterTrain());
        }
        if (other.hasSolverType()) {
          setSolverType(other.getSolverType());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.SolverParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.SolverParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;
      private int bitField1_;

      // optional string net = 24;
      private java.lang.Object net_ = "";
      /**
       * <code>optional string net = 24;</code>
       *
       * <pre>
       * Proto filename for the train net, possibly combined with one or more
       * test nets.
       * </pre>
       */
      public boolean hasNet() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string net = 24;</code>
       *
       * <pre>
       * Proto filename for the train net, possibly combined with one or more
       * test nets.
       * </pre>
       */
      public java.lang.String getNet() {
        java.lang.Object ref = net_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          net_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string net = 24;</code>
       *
       * <pre>
       * Proto filename for the train net, possibly combined with one or more
       * test nets.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getNetBytes() {
        java.lang.Object ref = net_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          net_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string net = 24;</code>
       *
       * <pre>
       * Proto filename for the train net, possibly combined with one or more
       * test nets.
       * </pre>
       */
      public Builder setNet(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        net_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string net = 24;</code>
       *
       * <pre>
       * Proto filename for the train net, possibly combined with one or more
       * test nets.
       * </pre>
       */
      public Builder clearNet() {
        bitField0_ = (bitField0_ & ~0x00000001);
        net_ = getDefaultInstance().getNet();
        onChanged();
        return this;
      }
      /**
       * <code>optional string net = 24;</code>
       *
       * <pre>
       * Proto filename for the train net, possibly combined with one or more
       * test nets.
       * </pre>
       */
      public Builder setNetBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        net_ = value;
        onChanged();
        return this;
      }

      // optional .caffe.NetParameter net_param = 25;
      private caffe.Caffe.NetParameter netParam_ = caffe.Caffe.NetParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.NetParameter, caffe.Caffe.NetParameter.Builder, caffe.Caffe.NetParameterOrBuilder> netParamBuilder_;
      /**
       * <code>optional .caffe.NetParameter net_param = 25;</code>
       *
       * <pre>
       * Inline train net param, possibly combined with one or more test nets.
       * </pre>
       */
      public boolean hasNetParam() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .caffe.NetParameter net_param = 25;</code>
       *
       * <pre>
       * Inline train net param, possibly combined with one or more test nets.
       * </pre>
       */
      public caffe.Caffe.NetParameter getNetParam() {
        if (netParamBuilder_ == null) {
          return netParam_;
        } else {
          return netParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.NetParameter net_param = 25;</code>
       *
       * <pre>
       * Inline train net param, possibly combined with one or more test nets.
       * </pre>
       */
      public Builder setNetParam(caffe.Caffe.NetParameter value) {
        if (netParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          netParam_ = value;
          onChanged();
        } else {
          netParamBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .caffe.NetParameter net_param = 25;</code>
       *
       * <pre>
       * Inline train net param, possibly combined with one or more test nets.
       * </pre>
       */
      public Builder setNetParam(
          caffe.Caffe.NetParameter.Builder builderForValue) {
        if (netParamBuilder_ == null) {
          netParam_ = builderForValue.build();
          onChanged();
        } else {
          netParamBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .caffe.NetParameter net_param = 25;</code>
       *
       * <pre>
       * Inline train net param, possibly combined with one or more test nets.
       * </pre>
       */
      public Builder mergeNetParam(caffe.Caffe.NetParameter value) {
        if (netParamBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              netParam_ != caffe.Caffe.NetParameter.getDefaultInstance()) {
            netParam_ =
              caffe.Caffe.NetParameter.newBuilder(netParam_).mergeFrom(value).buildPartial();
          } else {
            netParam_ = value;
          }
          onChanged();
        } else {
          netParamBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .caffe.NetParameter net_param = 25;</code>
       *
       * <pre>
       * Inline train net param, possibly combined with one or more test nets.
       * </pre>
       */
      public Builder clearNetParam() {
        if (netParamBuilder_ == null) {
          netParam_ = caffe.Caffe.NetParameter.getDefaultInstance();
          onChanged();
        } else {
          netParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>optional .caffe.NetParameter net_param = 25;</code>
       *
       * <pre>
       * Inline train net param, possibly combined with one or more test nets.
       * </pre>
       */
      public caffe.Caffe.NetParameter.Builder getNetParamBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getNetParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.NetParameter net_param = 25;</code>
       *
       * <pre>
       * Inline train net param, possibly combined with one or more test nets.
       * </pre>
       */
      public caffe.Caffe.NetParameterOrBuilder getNetParamOrBuilder() {
        if (netParamBuilder_ != null) {
          return netParamBuilder_.getMessageOrBuilder();
        } else {
          return netParam_;
        }
      }
      /**
       * <code>optional .caffe.NetParameter net_param = 25;</code>
       *
       * <pre>
       * Inline train net param, possibly combined with one or more test nets.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.NetParameter, caffe.Caffe.NetParameter.Builder, caffe.Caffe.NetParameterOrBuilder> 
          getNetParamFieldBuilder() {
        if (netParamBuilder_ == null) {
          netParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.NetParameter, caffe.Caffe.NetParameter.Builder, caffe.Caffe.NetParameterOrBuilder>(
                  netParam_,
                  getParentForChildren(),
                  isClean());
          netParam_ = null;
        }
        return netParamBuilder_;
      }

      // optional string train_net = 1;
      private java.lang.Object trainNet_ = "";
      /**
       * <code>optional string train_net = 1;</code>
       *
       * <pre>
       * Proto filename for the train net.
       * </pre>
       */
      public boolean hasTrainNet() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional string train_net = 1;</code>
       *
       * <pre>
       * Proto filename for the train net.
       * </pre>
       */
      public java.lang.String getTrainNet() {
        java.lang.Object ref = trainNet_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          trainNet_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string train_net = 1;</code>
       *
       * <pre>
       * Proto filename for the train net.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getTrainNetBytes() {
        java.lang.Object ref = trainNet_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          trainNet_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string train_net = 1;</code>
       *
       * <pre>
       * Proto filename for the train net.
       * </pre>
       */
      public Builder setTrainNet(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        trainNet_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string train_net = 1;</code>
       *
       * <pre>
       * Proto filename for the train net.
       * </pre>
       */
      public Builder clearTrainNet() {
        bitField0_ = (bitField0_ & ~0x00000004);
        trainNet_ = getDefaultInstance().getTrainNet();
        onChanged();
        return this;
      }
      /**
       * <code>optional string train_net = 1;</code>
       *
       * <pre>
       * Proto filename for the train net.
       * </pre>
       */
      public Builder setTrainNetBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        trainNet_ = value;
        onChanged();
        return this;
      }

      // repeated string test_net = 2;
      private com.google.protobuf.LazyStringList testNet_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureTestNetIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          testNet_ = new com.google.protobuf.LazyStringArrayList(testNet_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated string test_net = 2;</code>
       *
       * <pre>
       * Proto filenames for the test nets.
       * </pre>
       */
      public java.util.List<java.lang.String>
          getTestNetList() {
        return java.util.Collections.unmodifiableList(testNet_);
      }
      /**
       * <code>repeated string test_net = 2;</code>
       *
       * <pre>
       * Proto filenames for the test nets.
       * </pre>
       */
      public int getTestNetCount() {
        return testNet_.size();
      }
      /**
       * <code>repeated string test_net = 2;</code>
       *
       * <pre>
       * Proto filenames for the test nets.
       * </pre>
       */
      public java.lang.String getTestNet(int index) {
        return testNet_.get(index);
      }
      /**
       * <code>repeated string test_net = 2;</code>
       *
       * <pre>
       * Proto filenames for the test nets.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getTestNetBytes(int index) {
        return testNet_.getByteString(index);
      }
      /**
       * <code>repeated string test_net = 2;</code>
       *
       * <pre>
       * Proto filenames for the test nets.
       * </pre>
       */
      public Builder setTestNet(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureTestNetIsMutable();
        testNet_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string test_net = 2;</code>
       *
       * <pre>
       * Proto filenames for the test nets.
       * </pre>
       */
      public Builder addTestNet(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureTestNetIsMutable();
        testNet_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string test_net = 2;</code>
       *
       * <pre>
       * Proto filenames for the test nets.
       * </pre>
       */
      public Builder addAllTestNet(
          java.lang.Iterable<java.lang.String> values) {
        ensureTestNetIsMutable();
        super.addAll(values, testNet_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string test_net = 2;</code>
       *
       * <pre>
       * Proto filenames for the test nets.
       * </pre>
       */
      public Builder clearTestNet() {
        testNet_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string test_net = 2;</code>
       *
       * <pre>
       * Proto filenames for the test nets.
       * </pre>
       */
      public Builder addTestNetBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureTestNetIsMutable();
        testNet_.add(value);
        onChanged();
        return this;
      }

      // optional .caffe.NetParameter train_net_param = 21;
      private caffe.Caffe.NetParameter trainNetParam_ = caffe.Caffe.NetParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.NetParameter, caffe.Caffe.NetParameter.Builder, caffe.Caffe.NetParameterOrBuilder> trainNetParamBuilder_;
      /**
       * <code>optional .caffe.NetParameter train_net_param = 21;</code>
       *
       * <pre>
       * Inline train net params.
       * </pre>
       */
      public boolean hasTrainNetParam() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .caffe.NetParameter train_net_param = 21;</code>
       *
       * <pre>
       * Inline train net params.
       * </pre>
       */
      public caffe.Caffe.NetParameter getTrainNetParam() {
        if (trainNetParamBuilder_ == null) {
          return trainNetParam_;
        } else {
          return trainNetParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.NetParameter train_net_param = 21;</code>
       *
       * <pre>
       * Inline train net params.
       * </pre>
       */
      public Builder setTrainNetParam(caffe.Caffe.NetParameter value) {
        if (trainNetParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          trainNetParam_ = value;
          onChanged();
        } else {
          trainNetParamBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .caffe.NetParameter train_net_param = 21;</code>
       *
       * <pre>
       * Inline train net params.
       * </pre>
       */
      public Builder setTrainNetParam(
          caffe.Caffe.NetParameter.Builder builderForValue) {
        if (trainNetParamBuilder_ == null) {
          trainNetParam_ = builderForValue.build();
          onChanged();
        } else {
          trainNetParamBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .caffe.NetParameter train_net_param = 21;</code>
       *
       * <pre>
       * Inline train net params.
       * </pre>
       */
      public Builder mergeTrainNetParam(caffe.Caffe.NetParameter value) {
        if (trainNetParamBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              trainNetParam_ != caffe.Caffe.NetParameter.getDefaultInstance()) {
            trainNetParam_ =
              caffe.Caffe.NetParameter.newBuilder(trainNetParam_).mergeFrom(value).buildPartial();
          } else {
            trainNetParam_ = value;
          }
          onChanged();
        } else {
          trainNetParamBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .caffe.NetParameter train_net_param = 21;</code>
       *
       * <pre>
       * Inline train net params.
       * </pre>
       */
      public Builder clearTrainNetParam() {
        if (trainNetParamBuilder_ == null) {
          trainNetParam_ = caffe.Caffe.NetParameter.getDefaultInstance();
          onChanged();
        } else {
          trainNetParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      /**
       * <code>optional .caffe.NetParameter train_net_param = 21;</code>
       *
       * <pre>
       * Inline train net params.
       * </pre>
       */
      public caffe.Caffe.NetParameter.Builder getTrainNetParamBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getTrainNetParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.NetParameter train_net_param = 21;</code>
       *
       * <pre>
       * Inline train net params.
       * </pre>
       */
      public caffe.Caffe.NetParameterOrBuilder getTrainNetParamOrBuilder() {
        if (trainNetParamBuilder_ != null) {
          return trainNetParamBuilder_.getMessageOrBuilder();
        } else {
          return trainNetParam_;
        }
      }
      /**
       * <code>optional .caffe.NetParameter train_net_param = 21;</code>
       *
       * <pre>
       * Inline train net params.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.NetParameter, caffe.Caffe.NetParameter.Builder, caffe.Caffe.NetParameterOrBuilder> 
          getTrainNetParamFieldBuilder() {
        if (trainNetParamBuilder_ == null) {
          trainNetParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.NetParameter, caffe.Caffe.NetParameter.Builder, caffe.Caffe.NetParameterOrBuilder>(
                  trainNetParam_,
                  getParentForChildren(),
                  isClean());
          trainNetParam_ = null;
        }
        return trainNetParamBuilder_;
      }

      // repeated .caffe.NetParameter test_net_param = 22;
      private java.util.List<caffe.Caffe.NetParameter> testNetParam_ =
        java.util.Collections.emptyList();
      private void ensureTestNetParamIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          testNetParam_ = new java.util.ArrayList<caffe.Caffe.NetParameter>(testNetParam_);
          bitField0_ |= 0x00000020;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          caffe.Caffe.NetParameter, caffe.Caffe.NetParameter.Builder, caffe.Caffe.NetParameterOrBuilder> testNetParamBuilder_;

      /**
       * <code>repeated .caffe.NetParameter test_net_param = 22;</code>
       *
       * <pre>
       * Inline test net params.
       * </pre>
       */
      public java.util.List<caffe.Caffe.NetParameter> getTestNetParamList() {
        if (testNetParamBuilder_ == null) {
          return java.util.Collections.unmodifiableList(testNetParam_);
        } else {
          return testNetParamBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .caffe.NetParameter test_net_param = 22;</code>
       *
       * <pre>
       * Inline test net params.
       * </pre>
       */
      public int getTestNetParamCount() {
        if (testNetParamBuilder_ == null) {
          return testNetParam_.size();
        } else {
          return testNetParamBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .caffe.NetParameter test_net_param = 22;</code>
       *
       * <pre>
       * Inline test net params.
       * </pre>
       */
      public caffe.Caffe.NetParameter getTestNetParam(int index) {
        if (testNetParamBuilder_ == null) {
          return testNetParam_.get(index);
        } else {
          return testNetParamBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .caffe.NetParameter test_net_param = 22;</code>
       *
       * <pre>
       * Inline test net params.
       * </pre>
       */
      public Builder setTestNetParam(
          int index, caffe.Caffe.NetParameter value) {
        if (testNetParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTestNetParamIsMutable();
          testNetParam_.set(index, value);
          onChanged();
        } else {
          testNetParamBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.NetParameter test_net_param = 22;</code>
       *
       * <pre>
       * Inline test net params.
       * </pre>
       */
      public Builder setTestNetParam(
          int index, caffe.Caffe.NetParameter.Builder builderForValue) {
        if (testNetParamBuilder_ == null) {
          ensureTestNetParamIsMutable();
          testNetParam_.set(index, builderForValue.build());
          onChanged();
        } else {
          testNetParamBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.NetParameter test_net_param = 22;</code>
       *
       * <pre>
       * Inline test net params.
       * </pre>
       */
      public Builder addTestNetParam(caffe.Caffe.NetParameter value) {
        if (testNetParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTestNetParamIsMutable();
          testNetParam_.add(value);
          onChanged();
        } else {
          testNetParamBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.NetParameter test_net_param = 22;</code>
       *
       * <pre>
       * Inline test net params.
       * </pre>
       */
      public Builder addTestNetParam(
          int index, caffe.Caffe.NetParameter value) {
        if (testNetParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTestNetParamIsMutable();
          testNetParam_.add(index, value);
          onChanged();
        } else {
          testNetParamBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.NetParameter test_net_param = 22;</code>
       *
       * <pre>
       * Inline test net params.
       * </pre>
       */
      public Builder addTestNetParam(
          caffe.Caffe.NetParameter.Builder builderForValue) {
        if (testNetParamBuilder_ == null) {
          ensureTestNetParamIsMutable();
          testNetParam_.add(builderForValue.build());
          onChanged();
        } else {
          testNetParamBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.NetParameter test_net_param = 22;</code>
       *
       * <pre>
       * Inline test net params.
       * </pre>
       */
      public Builder addTestNetParam(
          int index, caffe.Caffe.NetParameter.Builder builderForValue) {
        if (testNetParamBuilder_ == null) {
          ensureTestNetParamIsMutable();
          testNetParam_.add(index, builderForValue.build());
          onChanged();
        } else {
          testNetParamBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.NetParameter test_net_param = 22;</code>
       *
       * <pre>
       * Inline test net params.
       * </pre>
       */
      public Builder addAllTestNetParam(
          java.lang.Iterable<? extends caffe.Caffe.NetParameter> values) {
        if (testNetParamBuilder_ == null) {
          ensureTestNetParamIsMutable();
          super.addAll(values, testNetParam_);
          onChanged();
        } else {
          testNetParamBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.NetParameter test_net_param = 22;</code>
       *
       * <pre>
       * Inline test net params.
       * </pre>
       */
      public Builder clearTestNetParam() {
        if (testNetParamBuilder_ == null) {
          testNetParam_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
          onChanged();
        } else {
          testNetParamBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .caffe.NetParameter test_net_param = 22;</code>
       *
       * <pre>
       * Inline test net params.
       * </pre>
       */
      public Builder removeTestNetParam(int index) {
        if (testNetParamBuilder_ == null) {
          ensureTestNetParamIsMutable();
          testNetParam_.remove(index);
          onChanged();
        } else {
          testNetParamBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.NetParameter test_net_param = 22;</code>
       *
       * <pre>
       * Inline test net params.
       * </pre>
       */
      public caffe.Caffe.NetParameter.Builder getTestNetParamBuilder(
          int index) {
        return getTestNetParamFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .caffe.NetParameter test_net_param = 22;</code>
       *
       * <pre>
       * Inline test net params.
       * </pre>
       */
      public caffe.Caffe.NetParameterOrBuilder getTestNetParamOrBuilder(
          int index) {
        if (testNetParamBuilder_ == null) {
          return testNetParam_.get(index);  } else {
          return testNetParamBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .caffe.NetParameter test_net_param = 22;</code>
       *
       * <pre>
       * Inline test net params.
       * </pre>
       */
      public java.util.List<? extends caffe.Caffe.NetParameterOrBuilder> 
           getTestNetParamOrBuilderList() {
        if (testNetParamBuilder_ != null) {
          return testNetParamBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(testNetParam_);
        }
      }
      /**
       * <code>repeated .caffe.NetParameter test_net_param = 22;</code>
       *
       * <pre>
       * Inline test net params.
       * </pre>
       */
      public caffe.Caffe.NetParameter.Builder addTestNetParamBuilder() {
        return getTestNetParamFieldBuilder().addBuilder(
            caffe.Caffe.NetParameter.getDefaultInstance());
      }
      /**
       * <code>repeated .caffe.NetParameter test_net_param = 22;</code>
       *
       * <pre>
       * Inline test net params.
       * </pre>
       */
      public caffe.Caffe.NetParameter.Builder addTestNetParamBuilder(
          int index) {
        return getTestNetParamFieldBuilder().addBuilder(
            index, caffe.Caffe.NetParameter.getDefaultInstance());
      }
      /**
       * <code>repeated .caffe.NetParameter test_net_param = 22;</code>
       *
       * <pre>
       * Inline test net params.
       * </pre>
       */
      public java.util.List<caffe.Caffe.NetParameter.Builder> 
           getTestNetParamBuilderList() {
        return getTestNetParamFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          caffe.Caffe.NetParameter, caffe.Caffe.NetParameter.Builder, caffe.Caffe.NetParameterOrBuilder> 
          getTestNetParamFieldBuilder() {
        if (testNetParamBuilder_ == null) {
          testNetParamBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              caffe.Caffe.NetParameter, caffe.Caffe.NetParameter.Builder, caffe.Caffe.NetParameterOrBuilder>(
                  testNetParam_,
                  ((bitField0_ & 0x00000020) == 0x00000020),
                  getParentForChildren(),
                  isClean());
          testNetParam_ = null;
        }
        return testNetParamBuilder_;
      }

      // optional .caffe.NetState train_state = 26;
      private caffe.Caffe.NetState trainState_ = caffe.Caffe.NetState.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.NetState, caffe.Caffe.NetState.Builder, caffe.Caffe.NetStateOrBuilder> trainStateBuilder_;
      /**
       * <code>optional .caffe.NetState train_state = 26;</code>
       *
       * <pre>
       * The states for the train/test nets. Must be unspecified or
       * specified once per net.
       *
       * By default, all states will have solver = true;
       * train_state will have phase = TRAIN,
       * and all test_state's will have phase = TEST.
       * Other defaults are set according to the NetState defaults.
       * </pre>
       */
      public boolean hasTrainState() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional .caffe.NetState train_state = 26;</code>
       *
       * <pre>
       * The states for the train/test nets. Must be unspecified or
       * specified once per net.
       *
       * By default, all states will have solver = true;
       * train_state will have phase = TRAIN,
       * and all test_state's will have phase = TEST.
       * Other defaults are set according to the NetState defaults.
       * </pre>
       */
      public caffe.Caffe.NetState getTrainState() {
        if (trainStateBuilder_ == null) {
          return trainState_;
        } else {
          return trainStateBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.NetState train_state = 26;</code>
       *
       * <pre>
       * The states for the train/test nets. Must be unspecified or
       * specified once per net.
       *
       * By default, all states will have solver = true;
       * train_state will have phase = TRAIN,
       * and all test_state's will have phase = TEST.
       * Other defaults are set according to the NetState defaults.
       * </pre>
       */
      public Builder setTrainState(caffe.Caffe.NetState value) {
        if (trainStateBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          trainState_ = value;
          onChanged();
        } else {
          trainStateBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .caffe.NetState train_state = 26;</code>
       *
       * <pre>
       * The states for the train/test nets. Must be unspecified or
       * specified once per net.
       *
       * By default, all states will have solver = true;
       * train_state will have phase = TRAIN,
       * and all test_state's will have phase = TEST.
       * Other defaults are set according to the NetState defaults.
       * </pre>
       */
      public Builder setTrainState(
          caffe.Caffe.NetState.Builder builderForValue) {
        if (trainStateBuilder_ == null) {
          trainState_ = builderForValue.build();
          onChanged();
        } else {
          trainStateBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .caffe.NetState train_state = 26;</code>
       *
       * <pre>
       * The states for the train/test nets. Must be unspecified or
       * specified once per net.
       *
       * By default, all states will have solver = true;
       * train_state will have phase = TRAIN,
       * and all test_state's will have phase = TEST.
       * Other defaults are set according to the NetState defaults.
       * </pre>
       */
      public Builder mergeTrainState(caffe.Caffe.NetState value) {
        if (trainStateBuilder_ == null) {
          if (((bitField0_ & 0x00000040) == 0x00000040) &&
              trainState_ != caffe.Caffe.NetState.getDefaultInstance()) {
            trainState_ =
              caffe.Caffe.NetState.newBuilder(trainState_).mergeFrom(value).buildPartial();
          } else {
            trainState_ = value;
          }
          onChanged();
        } else {
          trainStateBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .caffe.NetState train_state = 26;</code>
       *
       * <pre>
       * The states for the train/test nets. Must be unspecified or
       * specified once per net.
       *
       * By default, all states will have solver = true;
       * train_state will have phase = TRAIN,
       * and all test_state's will have phase = TEST.
       * Other defaults are set according to the NetState defaults.
       * </pre>
       */
      public Builder clearTrainState() {
        if (trainStateBuilder_ == null) {
          trainState_ = caffe.Caffe.NetState.getDefaultInstance();
          onChanged();
        } else {
          trainStateBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }
      /**
       * <code>optional .caffe.NetState train_state = 26;</code>
       *
       * <pre>
       * The states for the train/test nets. Must be unspecified or
       * specified once per net.
       *
       * By default, all states will have solver = true;
       * train_state will have phase = TRAIN,
       * and all test_state's will have phase = TEST.
       * Other defaults are set according to the NetState defaults.
       * </pre>
       */
      public caffe.Caffe.NetState.Builder getTrainStateBuilder() {
        bitField0_ |= 0x00000040;
        onChanged();
        return getTrainStateFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.NetState train_state = 26;</code>
       *
       * <pre>
       * The states for the train/test nets. Must be unspecified or
       * specified once per net.
       *
       * By default, all states will have solver = true;
       * train_state will have phase = TRAIN,
       * and all test_state's will have phase = TEST.
       * Other defaults are set according to the NetState defaults.
       * </pre>
       */
      public caffe.Caffe.NetStateOrBuilder getTrainStateOrBuilder() {
        if (trainStateBuilder_ != null) {
          return trainStateBuilder_.getMessageOrBuilder();
        } else {
          return trainState_;
        }
      }
      /**
       * <code>optional .caffe.NetState train_state = 26;</code>
       *
       * <pre>
       * The states for the train/test nets. Must be unspecified or
       * specified once per net.
       *
       * By default, all states will have solver = true;
       * train_state will have phase = TRAIN,
       * and all test_state's will have phase = TEST.
       * Other defaults are set according to the NetState defaults.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.NetState, caffe.Caffe.NetState.Builder, caffe.Caffe.NetStateOrBuilder> 
          getTrainStateFieldBuilder() {
        if (trainStateBuilder_ == null) {
          trainStateBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.NetState, caffe.Caffe.NetState.Builder, caffe.Caffe.NetStateOrBuilder>(
                  trainState_,
                  getParentForChildren(),
                  isClean());
          trainState_ = null;
        }
        return trainStateBuilder_;
      }

      // repeated .caffe.NetState test_state = 27;
      private java.util.List<caffe.Caffe.NetState> testState_ =
        java.util.Collections.emptyList();
      private void ensureTestStateIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          testState_ = new java.util.ArrayList<caffe.Caffe.NetState>(testState_);
          bitField0_ |= 0x00000080;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          caffe.Caffe.NetState, caffe.Caffe.NetState.Builder, caffe.Caffe.NetStateOrBuilder> testStateBuilder_;

      /**
       * <code>repeated .caffe.NetState test_state = 27;</code>
       */
      public java.util.List<caffe.Caffe.NetState> getTestStateList() {
        if (testStateBuilder_ == null) {
          return java.util.Collections.unmodifiableList(testState_);
        } else {
          return testStateBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .caffe.NetState test_state = 27;</code>
       */
      public int getTestStateCount() {
        if (testStateBuilder_ == null) {
          return testState_.size();
        } else {
          return testStateBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .caffe.NetState test_state = 27;</code>
       */
      public caffe.Caffe.NetState getTestState(int index) {
        if (testStateBuilder_ == null) {
          return testState_.get(index);
        } else {
          return testStateBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .caffe.NetState test_state = 27;</code>
       */
      public Builder setTestState(
          int index, caffe.Caffe.NetState value) {
        if (testStateBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTestStateIsMutable();
          testState_.set(index, value);
          onChanged();
        } else {
          testStateBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.NetState test_state = 27;</code>
       */
      public Builder setTestState(
          int index, caffe.Caffe.NetState.Builder builderForValue) {
        if (testStateBuilder_ == null) {
          ensureTestStateIsMutable();
          testState_.set(index, builderForValue.build());
          onChanged();
        } else {
          testStateBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.NetState test_state = 27;</code>
       */
      public Builder addTestState(caffe.Caffe.NetState value) {
        if (testStateBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTestStateIsMutable();
          testState_.add(value);
          onChanged();
        } else {
          testStateBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.NetState test_state = 27;</code>
       */
      public Builder addTestState(
          int index, caffe.Caffe.NetState value) {
        if (testStateBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTestStateIsMutable();
          testState_.add(index, value);
          onChanged();
        } else {
          testStateBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.NetState test_state = 27;</code>
       */
      public Builder addTestState(
          caffe.Caffe.NetState.Builder builderForValue) {
        if (testStateBuilder_ == null) {
          ensureTestStateIsMutable();
          testState_.add(builderForValue.build());
          onChanged();
        } else {
          testStateBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.NetState test_state = 27;</code>
       */
      public Builder addTestState(
          int index, caffe.Caffe.NetState.Builder builderForValue) {
        if (testStateBuilder_ == null) {
          ensureTestStateIsMutable();
          testState_.add(index, builderForValue.build());
          onChanged();
        } else {
          testStateBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.NetState test_state = 27;</code>
       */
      public Builder addAllTestState(
          java.lang.Iterable<? extends caffe.Caffe.NetState> values) {
        if (testStateBuilder_ == null) {
          ensureTestStateIsMutable();
          super.addAll(values, testState_);
          onChanged();
        } else {
          testStateBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.NetState test_state = 27;</code>
       */
      public Builder clearTestState() {
        if (testStateBuilder_ == null) {
          testState_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000080);
          onChanged();
        } else {
          testStateBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .caffe.NetState test_state = 27;</code>
       */
      public Builder removeTestState(int index) {
        if (testStateBuilder_ == null) {
          ensureTestStateIsMutable();
          testState_.remove(index);
          onChanged();
        } else {
          testStateBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.NetState test_state = 27;</code>
       */
      public caffe.Caffe.NetState.Builder getTestStateBuilder(
          int index) {
        return getTestStateFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .caffe.NetState test_state = 27;</code>
       */
      public caffe.Caffe.NetStateOrBuilder getTestStateOrBuilder(
          int index) {
        if (testStateBuilder_ == null) {
          return testState_.get(index);  } else {
          return testStateBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .caffe.NetState test_state = 27;</code>
       */
      public java.util.List<? extends caffe.Caffe.NetStateOrBuilder> 
           getTestStateOrBuilderList() {
        if (testStateBuilder_ != null) {
          return testStateBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(testState_);
        }
      }
      /**
       * <code>repeated .caffe.NetState test_state = 27;</code>
       */
      public caffe.Caffe.NetState.Builder addTestStateBuilder() {
        return getTestStateFieldBuilder().addBuilder(
            caffe.Caffe.NetState.getDefaultInstance());
      }
      /**
       * <code>repeated .caffe.NetState test_state = 27;</code>
       */
      public caffe.Caffe.NetState.Builder addTestStateBuilder(
          int index) {
        return getTestStateFieldBuilder().addBuilder(
            index, caffe.Caffe.NetState.getDefaultInstance());
      }
      /**
       * <code>repeated .caffe.NetState test_state = 27;</code>
       */
      public java.util.List<caffe.Caffe.NetState.Builder> 
           getTestStateBuilderList() {
        return getTestStateFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          caffe.Caffe.NetState, caffe.Caffe.NetState.Builder, caffe.Caffe.NetStateOrBuilder> 
          getTestStateFieldBuilder() {
        if (testStateBuilder_ == null) {
          testStateBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              caffe.Caffe.NetState, caffe.Caffe.NetState.Builder, caffe.Caffe.NetStateOrBuilder>(
                  testState_,
                  ((bitField0_ & 0x00000080) == 0x00000080),
                  getParentForChildren(),
                  isClean());
          testState_ = null;
        }
        return testStateBuilder_;
      }

      // repeated int32 test_iter = 3;
      private java.util.List<java.lang.Integer> testIter_ = java.util.Collections.emptyList();
      private void ensureTestIterIsMutable() {
        if (!((bitField0_ & 0x00000100) == 0x00000100)) {
          testIter_ = new java.util.ArrayList<java.lang.Integer>(testIter_);
          bitField0_ |= 0x00000100;
         }
      }
      /**
       * <code>repeated int32 test_iter = 3;</code>
       *
       * <pre>
       * The number of iterations for each test net.
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getTestIterList() {
        return java.util.Collections.unmodifiableList(testIter_);
      }
      /**
       * <code>repeated int32 test_iter = 3;</code>
       *
       * <pre>
       * The number of iterations for each test net.
       * </pre>
       */
      public int getTestIterCount() {
        return testIter_.size();
      }
      /**
       * <code>repeated int32 test_iter = 3;</code>
       *
       * <pre>
       * The number of iterations for each test net.
       * </pre>
       */
      public int getTestIter(int index) {
        return testIter_.get(index);
      }
      /**
       * <code>repeated int32 test_iter = 3;</code>
       *
       * <pre>
       * The number of iterations for each test net.
       * </pre>
       */
      public Builder setTestIter(
          int index, int value) {
        ensureTestIterIsMutable();
        testIter_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 test_iter = 3;</code>
       *
       * <pre>
       * The number of iterations for each test net.
       * </pre>
       */
      public Builder addTestIter(int value) {
        ensureTestIterIsMutable();
        testIter_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 test_iter = 3;</code>
       *
       * <pre>
       * The number of iterations for each test net.
       * </pre>
       */
      public Builder addAllTestIter(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureTestIterIsMutable();
        super.addAll(values, testIter_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 test_iter = 3;</code>
       *
       * <pre>
       * The number of iterations for each test net.
       * </pre>
       */
      public Builder clearTestIter() {
        testIter_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        onChanged();
        return this;
      }

      // optional int32 test_interval = 4 [default = 0];
      private int testInterval_ ;
      /**
       * <code>optional int32 test_interval = 4 [default = 0];</code>
       *
       * <pre>
       * The number of iterations between two testing phases.
       * </pre>
       */
      public boolean hasTestInterval() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional int32 test_interval = 4 [default = 0];</code>
       *
       * <pre>
       * The number of iterations between two testing phases.
       * </pre>
       */
      public int getTestInterval() {
        return testInterval_;
      }
      /**
       * <code>optional int32 test_interval = 4 [default = 0];</code>
       *
       * <pre>
       * The number of iterations between two testing phases.
       * </pre>
       */
      public Builder setTestInterval(int value) {
        bitField0_ |= 0x00000200;
        testInterval_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 test_interval = 4 [default = 0];</code>
       *
       * <pre>
       * The number of iterations between two testing phases.
       * </pre>
       */
      public Builder clearTestInterval() {
        bitField0_ = (bitField0_ & ~0x00000200);
        testInterval_ = 0;
        onChanged();
        return this;
      }

      // optional bool test_compute_loss = 19 [default = false];
      private boolean testComputeLoss_ ;
      /**
       * <code>optional bool test_compute_loss = 19 [default = false];</code>
       */
      public boolean hasTestComputeLoss() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional bool test_compute_loss = 19 [default = false];</code>
       */
      public boolean getTestComputeLoss() {
        return testComputeLoss_;
      }
      /**
       * <code>optional bool test_compute_loss = 19 [default = false];</code>
       */
      public Builder setTestComputeLoss(boolean value) {
        bitField0_ |= 0x00000400;
        testComputeLoss_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool test_compute_loss = 19 [default = false];</code>
       */
      public Builder clearTestComputeLoss() {
        bitField0_ = (bitField0_ & ~0x00000400);
        testComputeLoss_ = false;
        onChanged();
        return this;
      }

      // optional bool test_initialization = 32 [default = true];
      private boolean testInitialization_ = true;
      /**
       * <code>optional bool test_initialization = 32 [default = true];</code>
       *
       * <pre>
       * If true, run an initial test pass before the first iteration,
       * ensuring memory availability and printing the starting value of the loss.
       * </pre>
       */
      public boolean hasTestInitialization() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional bool test_initialization = 32 [default = true];</code>
       *
       * <pre>
       * If true, run an initial test pass before the first iteration,
       * ensuring memory availability and printing the starting value of the loss.
       * </pre>
       */
      public boolean getTestInitialization() {
        return testInitialization_;
      }
      /**
       * <code>optional bool test_initialization = 32 [default = true];</code>
       *
       * <pre>
       * If true, run an initial test pass before the first iteration,
       * ensuring memory availability and printing the starting value of the loss.
       * </pre>
       */
      public Builder setTestInitialization(boolean value) {
        bitField0_ |= 0x00000800;
        testInitialization_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool test_initialization = 32 [default = true];</code>
       *
       * <pre>
       * If true, run an initial test pass before the first iteration,
       * ensuring memory availability and printing the starting value of the loss.
       * </pre>
       */
      public Builder clearTestInitialization() {
        bitField0_ = (bitField0_ & ~0x00000800);
        testInitialization_ = true;
        onChanged();
        return this;
      }

      // optional float base_lr = 5;
      private float baseLr_ ;
      /**
       * <code>optional float base_lr = 5;</code>
       *
       * <pre>
       * The base learning rate
       * </pre>
       */
      public boolean hasBaseLr() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional float base_lr = 5;</code>
       *
       * <pre>
       * The base learning rate
       * </pre>
       */
      public float getBaseLr() {
        return baseLr_;
      }
      /**
       * <code>optional float base_lr = 5;</code>
       *
       * <pre>
       * The base learning rate
       * </pre>
       */
      public Builder setBaseLr(float value) {
        bitField0_ |= 0x00001000;
        baseLr_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float base_lr = 5;</code>
       *
       * <pre>
       * The base learning rate
       * </pre>
       */
      public Builder clearBaseLr() {
        bitField0_ = (bitField0_ & ~0x00001000);
        baseLr_ = 0F;
        onChanged();
        return this;
      }

      // optional int32 display = 6;
      private int display_ ;
      /**
       * <code>optional int32 display = 6;</code>
       *
       * <pre>
       * the number of iterations between displaying info. If display = 0, no info
       * will be displayed.
       * </pre>
       */
      public boolean hasDisplay() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional int32 display = 6;</code>
       *
       * <pre>
       * the number of iterations between displaying info. If display = 0, no info
       * will be displayed.
       * </pre>
       */
      public int getDisplay() {
        return display_;
      }
      /**
       * <code>optional int32 display = 6;</code>
       *
       * <pre>
       * the number of iterations between displaying info. If display = 0, no info
       * will be displayed.
       * </pre>
       */
      public Builder setDisplay(int value) {
        bitField0_ |= 0x00002000;
        display_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display = 6;</code>
       *
       * <pre>
       * the number of iterations between displaying info. If display = 0, no info
       * will be displayed.
       * </pre>
       */
      public Builder clearDisplay() {
        bitField0_ = (bitField0_ & ~0x00002000);
        display_ = 0;
        onChanged();
        return this;
      }

      // optional int32 average_loss = 33 [default = 1];
      private int averageLoss_ = 1;
      /**
       * <code>optional int32 average_loss = 33 [default = 1];</code>
       *
       * <pre>
       * Display the loss averaged over the last average_loss iterations
       * </pre>
       */
      public boolean hasAverageLoss() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional int32 average_loss = 33 [default = 1];</code>
       *
       * <pre>
       * Display the loss averaged over the last average_loss iterations
       * </pre>
       */
      public int getAverageLoss() {
        return averageLoss_;
      }
      /**
       * <code>optional int32 average_loss = 33 [default = 1];</code>
       *
       * <pre>
       * Display the loss averaged over the last average_loss iterations
       * </pre>
       */
      public Builder setAverageLoss(int value) {
        bitField0_ |= 0x00004000;
        averageLoss_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 average_loss = 33 [default = 1];</code>
       *
       * <pre>
       * Display the loss averaged over the last average_loss iterations
       * </pre>
       */
      public Builder clearAverageLoss() {
        bitField0_ = (bitField0_ & ~0x00004000);
        averageLoss_ = 1;
        onChanged();
        return this;
      }

      // optional int32 max_iter = 7;
      private int maxIter_ ;
      /**
       * <code>optional int32 max_iter = 7;</code>
       *
       * <pre>
       * the maximum number of iterations
       * </pre>
       */
      public boolean hasMaxIter() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional int32 max_iter = 7;</code>
       *
       * <pre>
       * the maximum number of iterations
       * </pre>
       */
      public int getMaxIter() {
        return maxIter_;
      }
      /**
       * <code>optional int32 max_iter = 7;</code>
       *
       * <pre>
       * the maximum number of iterations
       * </pre>
       */
      public Builder setMaxIter(int value) {
        bitField0_ |= 0x00008000;
        maxIter_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 max_iter = 7;</code>
       *
       * <pre>
       * the maximum number of iterations
       * </pre>
       */
      public Builder clearMaxIter() {
        bitField0_ = (bitField0_ & ~0x00008000);
        maxIter_ = 0;
        onChanged();
        return this;
      }

      // optional int32 iter_size = 36 [default = 1];
      private int iterSize_ = 1;
      /**
       * <code>optional int32 iter_size = 36 [default = 1];</code>
       *
       * <pre>
       * accumulate gradients over `iter_size` x `batch_size` instances
       * </pre>
       */
      public boolean hasIterSize() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional int32 iter_size = 36 [default = 1];</code>
       *
       * <pre>
       * accumulate gradients over `iter_size` x `batch_size` instances
       * </pre>
       */
      public int getIterSize() {
        return iterSize_;
      }
      /**
       * <code>optional int32 iter_size = 36 [default = 1];</code>
       *
       * <pre>
       * accumulate gradients over `iter_size` x `batch_size` instances
       * </pre>
       */
      public Builder setIterSize(int value) {
        bitField0_ |= 0x00010000;
        iterSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 iter_size = 36 [default = 1];</code>
       *
       * <pre>
       * accumulate gradients over `iter_size` x `batch_size` instances
       * </pre>
       */
      public Builder clearIterSize() {
        bitField0_ = (bitField0_ & ~0x00010000);
        iterSize_ = 1;
        onChanged();
        return this;
      }

      // optional string lr_policy = 8;
      private java.lang.Object lrPolicy_ = "";
      /**
       * <code>optional string lr_policy = 8;</code>
       *
       * <pre>
       * The learning rate decay policy. The currently implemented learning rate
       * policies are as follows:
       *    - fixed: always return base_lr.
       *    - step: return base_lr * gamma ^ (floor(iter / step))
       *    - exp: return base_lr * gamma ^ iter
       *    - inv: return base_lr * (1 + gamma * iter) ^ (- power)
       *    - multistep: similar to step but it allows non uniform steps defined by
       *      stepvalue
       *    - poly: the effective learning rate follows a polynomial decay, to be
       *      zero by the max_iter. return base_lr (1 - iter/max_iter) ^ (power)
       *    - sigmoid: the effective learning rate follows a sigmod decay
       *      return base_lr ( 1/(1 + exp(-gamma * (iter - stepsize))))
       *    - plateau: decreases lr
       *              if the minimum loss isn't updated for 'plateau_winsize' iters
       *
       * where base_lr, max_iter, gamma, step, stepvalue and power are defined
       * in the solver parameter protocol buffer, and iter is the current iteration.
       * </pre>
       */
      public boolean hasLrPolicy() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional string lr_policy = 8;</code>
       *
       * <pre>
       * The learning rate decay policy. The currently implemented learning rate
       * policies are as follows:
       *    - fixed: always return base_lr.
       *    - step: return base_lr * gamma ^ (floor(iter / step))
       *    - exp: return base_lr * gamma ^ iter
       *    - inv: return base_lr * (1 + gamma * iter) ^ (- power)
       *    - multistep: similar to step but it allows non uniform steps defined by
       *      stepvalue
       *    - poly: the effective learning rate follows a polynomial decay, to be
       *      zero by the max_iter. return base_lr (1 - iter/max_iter) ^ (power)
       *    - sigmoid: the effective learning rate follows a sigmod decay
       *      return base_lr ( 1/(1 + exp(-gamma * (iter - stepsize))))
       *    - plateau: decreases lr
       *              if the minimum loss isn't updated for 'plateau_winsize' iters
       *
       * where base_lr, max_iter, gamma, step, stepvalue and power are defined
       * in the solver parameter protocol buffer, and iter is the current iteration.
       * </pre>
       */
      public java.lang.String getLrPolicy() {
        java.lang.Object ref = lrPolicy_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          lrPolicy_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string lr_policy = 8;</code>
       *
       * <pre>
       * The learning rate decay policy. The currently implemented learning rate
       * policies are as follows:
       *    - fixed: always return base_lr.
       *    - step: return base_lr * gamma ^ (floor(iter / step))
       *    - exp: return base_lr * gamma ^ iter
       *    - inv: return base_lr * (1 + gamma * iter) ^ (- power)
       *    - multistep: similar to step but it allows non uniform steps defined by
       *      stepvalue
       *    - poly: the effective learning rate follows a polynomial decay, to be
       *      zero by the max_iter. return base_lr (1 - iter/max_iter) ^ (power)
       *    - sigmoid: the effective learning rate follows a sigmod decay
       *      return base_lr ( 1/(1 + exp(-gamma * (iter - stepsize))))
       *    - plateau: decreases lr
       *              if the minimum loss isn't updated for 'plateau_winsize' iters
       *
       * where base_lr, max_iter, gamma, step, stepvalue and power are defined
       * in the solver parameter protocol buffer, and iter is the current iteration.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getLrPolicyBytes() {
        java.lang.Object ref = lrPolicy_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          lrPolicy_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string lr_policy = 8;</code>
       *
       * <pre>
       * The learning rate decay policy. The currently implemented learning rate
       * policies are as follows:
       *    - fixed: always return base_lr.
       *    - step: return base_lr * gamma ^ (floor(iter / step))
       *    - exp: return base_lr * gamma ^ iter
       *    - inv: return base_lr * (1 + gamma * iter) ^ (- power)
       *    - multistep: similar to step but it allows non uniform steps defined by
       *      stepvalue
       *    - poly: the effective learning rate follows a polynomial decay, to be
       *      zero by the max_iter. return base_lr (1 - iter/max_iter) ^ (power)
       *    - sigmoid: the effective learning rate follows a sigmod decay
       *      return base_lr ( 1/(1 + exp(-gamma * (iter - stepsize))))
       *    - plateau: decreases lr
       *              if the minimum loss isn't updated for 'plateau_winsize' iters
       *
       * where base_lr, max_iter, gamma, step, stepvalue and power are defined
       * in the solver parameter protocol buffer, and iter is the current iteration.
       * </pre>
       */
      public Builder setLrPolicy(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00020000;
        lrPolicy_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string lr_policy = 8;</code>
       *
       * <pre>
       * The learning rate decay policy. The currently implemented learning rate
       * policies are as follows:
       *    - fixed: always return base_lr.
       *    - step: return base_lr * gamma ^ (floor(iter / step))
       *    - exp: return base_lr * gamma ^ iter
       *    - inv: return base_lr * (1 + gamma * iter) ^ (- power)
       *    - multistep: similar to step but it allows non uniform steps defined by
       *      stepvalue
       *    - poly: the effective learning rate follows a polynomial decay, to be
       *      zero by the max_iter. return base_lr (1 - iter/max_iter) ^ (power)
       *    - sigmoid: the effective learning rate follows a sigmod decay
       *      return base_lr ( 1/(1 + exp(-gamma * (iter - stepsize))))
       *    - plateau: decreases lr
       *              if the minimum loss isn't updated for 'plateau_winsize' iters
       *
       * where base_lr, max_iter, gamma, step, stepvalue and power are defined
       * in the solver parameter protocol buffer, and iter is the current iteration.
       * </pre>
       */
      public Builder clearLrPolicy() {
        bitField0_ = (bitField0_ & ~0x00020000);
        lrPolicy_ = getDefaultInstance().getLrPolicy();
        onChanged();
        return this;
      }
      /**
       * <code>optional string lr_policy = 8;</code>
       *
       * <pre>
       * The learning rate decay policy. The currently implemented learning rate
       * policies are as follows:
       *    - fixed: always return base_lr.
       *    - step: return base_lr * gamma ^ (floor(iter / step))
       *    - exp: return base_lr * gamma ^ iter
       *    - inv: return base_lr * (1 + gamma * iter) ^ (- power)
       *    - multistep: similar to step but it allows non uniform steps defined by
       *      stepvalue
       *    - poly: the effective learning rate follows a polynomial decay, to be
       *      zero by the max_iter. return base_lr (1 - iter/max_iter) ^ (power)
       *    - sigmoid: the effective learning rate follows a sigmod decay
       *      return base_lr ( 1/(1 + exp(-gamma * (iter - stepsize))))
       *    - plateau: decreases lr
       *              if the minimum loss isn't updated for 'plateau_winsize' iters
       *
       * where base_lr, max_iter, gamma, step, stepvalue and power are defined
       * in the solver parameter protocol buffer, and iter is the current iteration.
       * </pre>
       */
      public Builder setLrPolicyBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00020000;
        lrPolicy_ = value;
        onChanged();
        return this;
      }

      // optional float gamma = 9;
      private float gamma_ ;
      /**
       * <code>optional float gamma = 9;</code>
       *
       * <pre>
       * The parameter to compute the learning rate.
       * </pre>
       */
      public boolean hasGamma() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional float gamma = 9;</code>
       *
       * <pre>
       * The parameter to compute the learning rate.
       * </pre>
       */
      public float getGamma() {
        return gamma_;
      }
      /**
       * <code>optional float gamma = 9;</code>
       *
       * <pre>
       * The parameter to compute the learning rate.
       * </pre>
       */
      public Builder setGamma(float value) {
        bitField0_ |= 0x00040000;
        gamma_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float gamma = 9;</code>
       *
       * <pre>
       * The parameter to compute the learning rate.
       * </pre>
       */
      public Builder clearGamma() {
        bitField0_ = (bitField0_ & ~0x00040000);
        gamma_ = 0F;
        onChanged();
        return this;
      }

      // optional float power = 10;
      private float power_ ;
      /**
       * <code>optional float power = 10;</code>
       *
       * <pre>
       * The parameter to compute the learning rate.
       * </pre>
       */
      public boolean hasPower() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional float power = 10;</code>
       *
       * <pre>
       * The parameter to compute the learning rate.
       * </pre>
       */
      public float getPower() {
        return power_;
      }
      /**
       * <code>optional float power = 10;</code>
       *
       * <pre>
       * The parameter to compute the learning rate.
       * </pre>
       */
      public Builder setPower(float value) {
        bitField0_ |= 0x00080000;
        power_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float power = 10;</code>
       *
       * <pre>
       * The parameter to compute the learning rate.
       * </pre>
       */
      public Builder clearPower() {
        bitField0_ = (bitField0_ & ~0x00080000);
        power_ = 0F;
        onChanged();
        return this;
      }

      // optional float momentum = 11;
      private float momentum_ ;
      /**
       * <code>optional float momentum = 11;</code>
       *
       * <pre>
       * The momentum value.
       * </pre>
       */
      public boolean hasMomentum() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional float momentum = 11;</code>
       *
       * <pre>
       * The momentum value.
       * </pre>
       */
      public float getMomentum() {
        return momentum_;
      }
      /**
       * <code>optional float momentum = 11;</code>
       *
       * <pre>
       * The momentum value.
       * </pre>
       */
      public Builder setMomentum(float value) {
        bitField0_ |= 0x00100000;
        momentum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float momentum = 11;</code>
       *
       * <pre>
       * The momentum value.
       * </pre>
       */
      public Builder clearMomentum() {
        bitField0_ = (bitField0_ & ~0x00100000);
        momentum_ = 0F;
        onChanged();
        return this;
      }

      // optional float weight_decay = 12;
      private float weightDecay_ ;
      /**
       * <code>optional float weight_decay = 12;</code>
       *
       * <pre>
       * The weight decay.
       * </pre>
       */
      public boolean hasWeightDecay() {
        return ((bitField0_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>optional float weight_decay = 12;</code>
       *
       * <pre>
       * The weight decay.
       * </pre>
       */
      public float getWeightDecay() {
        return weightDecay_;
      }
      /**
       * <code>optional float weight_decay = 12;</code>
       *
       * <pre>
       * The weight decay.
       * </pre>
       */
      public Builder setWeightDecay(float value) {
        bitField0_ |= 0x00200000;
        weightDecay_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float weight_decay = 12;</code>
       *
       * <pre>
       * The weight decay.
       * </pre>
       */
      public Builder clearWeightDecay() {
        bitField0_ = (bitField0_ & ~0x00200000);
        weightDecay_ = 0F;
        onChanged();
        return this;
      }

      // optional string regularization_type = 29 [default = "L2"];
      private java.lang.Object regularizationType_ = "L2";
      /**
       * <code>optional string regularization_type = 29 [default = "L2"];</code>
       *
       * <pre>
       * regularization types supported: L1 and L2
       * controlled by weight_decay
       * </pre>
       */
      public boolean hasRegularizationType() {
        return ((bitField0_ & 0x00400000) == 0x00400000);
      }
      /**
       * <code>optional string regularization_type = 29 [default = "L2"];</code>
       *
       * <pre>
       * regularization types supported: L1 and L2
       * controlled by weight_decay
       * </pre>
       */
      public java.lang.String getRegularizationType() {
        java.lang.Object ref = regularizationType_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          regularizationType_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string regularization_type = 29 [default = "L2"];</code>
       *
       * <pre>
       * regularization types supported: L1 and L2
       * controlled by weight_decay
       * </pre>
       */
      public com.google.protobuf.ByteString
          getRegularizationTypeBytes() {
        java.lang.Object ref = regularizationType_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          regularizationType_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string regularization_type = 29 [default = "L2"];</code>
       *
       * <pre>
       * regularization types supported: L1 and L2
       * controlled by weight_decay
       * </pre>
       */
      public Builder setRegularizationType(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00400000;
        regularizationType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string regularization_type = 29 [default = "L2"];</code>
       *
       * <pre>
       * regularization types supported: L1 and L2
       * controlled by weight_decay
       * </pre>
       */
      public Builder clearRegularizationType() {
        bitField0_ = (bitField0_ & ~0x00400000);
        regularizationType_ = getDefaultInstance().getRegularizationType();
        onChanged();
        return this;
      }
      /**
       * <code>optional string regularization_type = 29 [default = "L2"];</code>
       *
       * <pre>
       * regularization types supported: L1 and L2
       * controlled by weight_decay
       * </pre>
       */
      public Builder setRegularizationTypeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00400000;
        regularizationType_ = value;
        onChanged();
        return this;
      }

      // optional int32 stepsize = 13;
      private int stepsize_ ;
      /**
       * <code>optional int32 stepsize = 13;</code>
       *
       * <pre>
       * the stepsize for learning rate policy "step"
       * </pre>
       */
      public boolean hasStepsize() {
        return ((bitField0_ & 0x00800000) == 0x00800000);
      }
      /**
       * <code>optional int32 stepsize = 13;</code>
       *
       * <pre>
       * the stepsize for learning rate policy "step"
       * </pre>
       */
      public int getStepsize() {
        return stepsize_;
      }
      /**
       * <code>optional int32 stepsize = 13;</code>
       *
       * <pre>
       * the stepsize for learning rate policy "step"
       * </pre>
       */
      public Builder setStepsize(int value) {
        bitField0_ |= 0x00800000;
        stepsize_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 stepsize = 13;</code>
       *
       * <pre>
       * the stepsize for learning rate policy "step"
       * </pre>
       */
      public Builder clearStepsize() {
        bitField0_ = (bitField0_ & ~0x00800000);
        stepsize_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 stepvalue = 34;
      private java.util.List<java.lang.Integer> stepvalue_ = java.util.Collections.emptyList();
      private void ensureStepvalueIsMutable() {
        if (!((bitField0_ & 0x01000000) == 0x01000000)) {
          stepvalue_ = new java.util.ArrayList<java.lang.Integer>(stepvalue_);
          bitField0_ |= 0x01000000;
         }
      }
      /**
       * <code>repeated int32 stepvalue = 34;</code>
       *
       * <pre>
       * the stepsize for learning rate policy "multistep"
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getStepvalueList() {
        return java.util.Collections.unmodifiableList(stepvalue_);
      }
      /**
       * <code>repeated int32 stepvalue = 34;</code>
       *
       * <pre>
       * the stepsize for learning rate policy "multistep"
       * </pre>
       */
      public int getStepvalueCount() {
        return stepvalue_.size();
      }
      /**
       * <code>repeated int32 stepvalue = 34;</code>
       *
       * <pre>
       * the stepsize for learning rate policy "multistep"
       * </pre>
       */
      public int getStepvalue(int index) {
        return stepvalue_.get(index);
      }
      /**
       * <code>repeated int32 stepvalue = 34;</code>
       *
       * <pre>
       * the stepsize for learning rate policy "multistep"
       * </pre>
       */
      public Builder setStepvalue(
          int index, int value) {
        ensureStepvalueIsMutable();
        stepvalue_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 stepvalue = 34;</code>
       *
       * <pre>
       * the stepsize for learning rate policy "multistep"
       * </pre>
       */
      public Builder addStepvalue(int value) {
        ensureStepvalueIsMutable();
        stepvalue_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 stepvalue = 34;</code>
       *
       * <pre>
       * the stepsize for learning rate policy "multistep"
       * </pre>
       */
      public Builder addAllStepvalue(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureStepvalueIsMutable();
        super.addAll(values, stepvalue_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 stepvalue = 34;</code>
       *
       * <pre>
       * the stepsize for learning rate policy "multistep"
       * </pre>
       */
      public Builder clearStepvalue() {
        stepvalue_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x01000000);
        onChanged();
        return this;
      }

      // repeated int32 plateau_winsize = 41;
      private java.util.List<java.lang.Integer> plateauWinsize_ = java.util.Collections.emptyList();
      private void ensurePlateauWinsizeIsMutable() {
        if (!((bitField0_ & 0x02000000) == 0x02000000)) {
          plateauWinsize_ = new java.util.ArrayList<java.lang.Integer>(plateauWinsize_);
          bitField0_ |= 0x02000000;
         }
      }
      /**
       * <code>repeated int32 plateau_winsize = 41;</code>
       *
       * <pre>
       * the stepsize for learning rate policy "plateau"
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPlateauWinsizeList() {
        return java.util.Collections.unmodifiableList(plateauWinsize_);
      }
      /**
       * <code>repeated int32 plateau_winsize = 41;</code>
       *
       * <pre>
       * the stepsize for learning rate policy "plateau"
       * </pre>
       */
      public int getPlateauWinsizeCount() {
        return plateauWinsize_.size();
      }
      /**
       * <code>repeated int32 plateau_winsize = 41;</code>
       *
       * <pre>
       * the stepsize for learning rate policy "plateau"
       * </pre>
       */
      public int getPlateauWinsize(int index) {
        return plateauWinsize_.get(index);
      }
      /**
       * <code>repeated int32 plateau_winsize = 41;</code>
       *
       * <pre>
       * the stepsize for learning rate policy "plateau"
       * </pre>
       */
      public Builder setPlateauWinsize(
          int index, int value) {
        ensurePlateauWinsizeIsMutable();
        plateauWinsize_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 plateau_winsize = 41;</code>
       *
       * <pre>
       * the stepsize for learning rate policy "plateau"
       * </pre>
       */
      public Builder addPlateauWinsize(int value) {
        ensurePlateauWinsizeIsMutable();
        plateauWinsize_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 plateau_winsize = 41;</code>
       *
       * <pre>
       * the stepsize for learning rate policy "plateau"
       * </pre>
       */
      public Builder addAllPlateauWinsize(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePlateauWinsizeIsMutable();
        super.addAll(values, plateauWinsize_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 plateau_winsize = 41;</code>
       *
       * <pre>
       * the stepsize for learning rate policy "plateau"
       * </pre>
       */
      public Builder clearPlateauWinsize() {
        plateauWinsize_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x02000000);
        onChanged();
        return this;
      }

      // optional float clip_gradients = 35 [default = -1];
      private float clipGradients_ = -1F;
      /**
       * <code>optional float clip_gradients = 35 [default = -1];</code>
       *
       * <pre>
       * Set clip_gradients to &gt;= 0 to clip parameter gradients to that L2 norm,
       * whenever their actual L2 norm is larger.
       * </pre>
       */
      public boolean hasClipGradients() {
        return ((bitField0_ & 0x04000000) == 0x04000000);
      }
      /**
       * <code>optional float clip_gradients = 35 [default = -1];</code>
       *
       * <pre>
       * Set clip_gradients to &gt;= 0 to clip parameter gradients to that L2 norm,
       * whenever their actual L2 norm is larger.
       * </pre>
       */
      public float getClipGradients() {
        return clipGradients_;
      }
      /**
       * <code>optional float clip_gradients = 35 [default = -1];</code>
       *
       * <pre>
       * Set clip_gradients to &gt;= 0 to clip parameter gradients to that L2 norm,
       * whenever their actual L2 norm is larger.
       * </pre>
       */
      public Builder setClipGradients(float value) {
        bitField0_ |= 0x04000000;
        clipGradients_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float clip_gradients = 35 [default = -1];</code>
       *
       * <pre>
       * Set clip_gradients to &gt;= 0 to clip parameter gradients to that L2 norm,
       * whenever their actual L2 norm is larger.
       * </pre>
       */
      public Builder clearClipGradients() {
        bitField0_ = (bitField0_ & ~0x04000000);
        clipGradients_ = -1F;
        onChanged();
        return this;
      }

      // optional int32 snapshot = 14 [default = 0];
      private int snapshot_ ;
      /**
       * <code>optional int32 snapshot = 14 [default = 0];</code>
       *
       * <pre>
       * The snapshot interval
       * </pre>
       */
      public boolean hasSnapshot() {
        return ((bitField0_ & 0x08000000) == 0x08000000);
      }
      /**
       * <code>optional int32 snapshot = 14 [default = 0];</code>
       *
       * <pre>
       * The snapshot interval
       * </pre>
       */
      public int getSnapshot() {
        return snapshot_;
      }
      /**
       * <code>optional int32 snapshot = 14 [default = 0];</code>
       *
       * <pre>
       * The snapshot interval
       * </pre>
       */
      public Builder setSnapshot(int value) {
        bitField0_ |= 0x08000000;
        snapshot_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 snapshot = 14 [default = 0];</code>
       *
       * <pre>
       * The snapshot interval
       * </pre>
       */
      public Builder clearSnapshot() {
        bitField0_ = (bitField0_ & ~0x08000000);
        snapshot_ = 0;
        onChanged();
        return this;
      }

      // optional string snapshot_prefix = 15;
      private java.lang.Object snapshotPrefix_ = "";
      /**
       * <code>optional string snapshot_prefix = 15;</code>
       *
       * <pre>
       * The prefix for the snapshot.
       * </pre>
       */
      public boolean hasSnapshotPrefix() {
        return ((bitField0_ & 0x10000000) == 0x10000000);
      }
      /**
       * <code>optional string snapshot_prefix = 15;</code>
       *
       * <pre>
       * The prefix for the snapshot.
       * </pre>
       */
      public java.lang.String getSnapshotPrefix() {
        java.lang.Object ref = snapshotPrefix_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          snapshotPrefix_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string snapshot_prefix = 15;</code>
       *
       * <pre>
       * The prefix for the snapshot.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getSnapshotPrefixBytes() {
        java.lang.Object ref = snapshotPrefix_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          snapshotPrefix_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string snapshot_prefix = 15;</code>
       *
       * <pre>
       * The prefix for the snapshot.
       * </pre>
       */
      public Builder setSnapshotPrefix(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x10000000;
        snapshotPrefix_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string snapshot_prefix = 15;</code>
       *
       * <pre>
       * The prefix for the snapshot.
       * </pre>
       */
      public Builder clearSnapshotPrefix() {
        bitField0_ = (bitField0_ & ~0x10000000);
        snapshotPrefix_ = getDefaultInstance().getSnapshotPrefix();
        onChanged();
        return this;
      }
      /**
       * <code>optional string snapshot_prefix = 15;</code>
       *
       * <pre>
       * The prefix for the snapshot.
       * </pre>
       */
      public Builder setSnapshotPrefixBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x10000000;
        snapshotPrefix_ = value;
        onChanged();
        return this;
      }

      // optional bool snapshot_diff = 16 [default = false];
      private boolean snapshotDiff_ ;
      /**
       * <code>optional bool snapshot_diff = 16 [default = false];</code>
       *
       * <pre>
       * whether to snapshot diff in the results or not. Snapshotting diff will help
       * debugging but the final protocol buffer size will be much larger.
       * </pre>
       */
      public boolean hasSnapshotDiff() {
        return ((bitField0_ & 0x20000000) == 0x20000000);
      }
      /**
       * <code>optional bool snapshot_diff = 16 [default = false];</code>
       *
       * <pre>
       * whether to snapshot diff in the results or not. Snapshotting diff will help
       * debugging but the final protocol buffer size will be much larger.
       * </pre>
       */
      public boolean getSnapshotDiff() {
        return snapshotDiff_;
      }
      /**
       * <code>optional bool snapshot_diff = 16 [default = false];</code>
       *
       * <pre>
       * whether to snapshot diff in the results or not. Snapshotting diff will help
       * debugging but the final protocol buffer size will be much larger.
       * </pre>
       */
      public Builder setSnapshotDiff(boolean value) {
        bitField0_ |= 0x20000000;
        snapshotDiff_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool snapshot_diff = 16 [default = false];</code>
       *
       * <pre>
       * whether to snapshot diff in the results or not. Snapshotting diff will help
       * debugging but the final protocol buffer size will be much larger.
       * </pre>
       */
      public Builder clearSnapshotDiff() {
        bitField0_ = (bitField0_ & ~0x20000000);
        snapshotDiff_ = false;
        onChanged();
        return this;
      }

      // optional .caffe.SolverParameter.SnapshotFormat snapshot_format = 37 [default = BINARYPROTO];
      private caffe.Caffe.SolverParameter.SnapshotFormat snapshotFormat_ = caffe.Caffe.SolverParameter.SnapshotFormat.BINARYPROTO;
      /**
       * <code>optional .caffe.SolverParameter.SnapshotFormat snapshot_format = 37 [default = BINARYPROTO];</code>
       */
      public boolean hasSnapshotFormat() {
        return ((bitField0_ & 0x40000000) == 0x40000000);
      }
      /**
       * <code>optional .caffe.SolverParameter.SnapshotFormat snapshot_format = 37 [default = BINARYPROTO];</code>
       */
      public caffe.Caffe.SolverParameter.SnapshotFormat getSnapshotFormat() {
        return snapshotFormat_;
      }
      /**
       * <code>optional .caffe.SolverParameter.SnapshotFormat snapshot_format = 37 [default = BINARYPROTO];</code>
       */
      public Builder setSnapshotFormat(caffe.Caffe.SolverParameter.SnapshotFormat value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x40000000;
        snapshotFormat_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .caffe.SolverParameter.SnapshotFormat snapshot_format = 37 [default = BINARYPROTO];</code>
       */
      public Builder clearSnapshotFormat() {
        bitField0_ = (bitField0_ & ~0x40000000);
        snapshotFormat_ = caffe.Caffe.SolverParameter.SnapshotFormat.BINARYPROTO;
        onChanged();
        return this;
      }

      // optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];
      private caffe.Caffe.SolverParameter.SolverMode solverMode_ = caffe.Caffe.SolverParameter.SolverMode.GPU;
      /**
       * <code>optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];</code>
       */
      public boolean hasSolverMode() {
        return ((bitField0_ & 0x80000000) == 0x80000000);
      }
      /**
       * <code>optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];</code>
       */
      public caffe.Caffe.SolverParameter.SolverMode getSolverMode() {
        return solverMode_;
      }
      /**
       * <code>optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];</code>
       */
      public Builder setSolverMode(caffe.Caffe.SolverParameter.SolverMode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x80000000;
        solverMode_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];</code>
       */
      public Builder clearSolverMode() {
        bitField0_ = (bitField0_ & ~0x80000000);
        solverMode_ = caffe.Caffe.SolverParameter.SolverMode.GPU;
        onChanged();
        return this;
      }

      // optional int32 device_id = 18 [default = 0];
      private int deviceId_ ;
      /**
       * <code>optional int32 device_id = 18 [default = 0];</code>
       *
       * <pre>
       * the device_id will that be used in GPU mode. Use device_id = 0 in default.
       * </pre>
       */
      public boolean hasDeviceId() {
        return ((bitField1_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 device_id = 18 [default = 0];</code>
       *
       * <pre>
       * the device_id will that be used in GPU mode. Use device_id = 0 in default.
       * </pre>
       */
      public int getDeviceId() {
        return deviceId_;
      }
      /**
       * <code>optional int32 device_id = 18 [default = 0];</code>
       *
       * <pre>
       * the device_id will that be used in GPU mode. Use device_id = 0 in default.
       * </pre>
       */
      public Builder setDeviceId(int value) {
        bitField1_ |= 0x00000001;
        deviceId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 device_id = 18 [default = 0];</code>
       *
       * <pre>
       * the device_id will that be used in GPU mode. Use device_id = 0 in default.
       * </pre>
       */
      public Builder clearDeviceId() {
        bitField1_ = (bitField1_ & ~0x00000001);
        deviceId_ = 0;
        onChanged();
        return this;
      }

      // optional int64 random_seed = 20 [default = -1];
      private long randomSeed_ = -1L;
      /**
       * <code>optional int64 random_seed = 20 [default = -1];</code>
       *
       * <pre>
       * If non-negative, the seed with which the Solver will initialize the Caffe
       * random number generator -- useful for reproducible results. Otherwise,
       * (and by default) initialize using a seed derived from the system clock.
       * </pre>
       */
      public boolean hasRandomSeed() {
        return ((bitField1_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int64 random_seed = 20 [default = -1];</code>
       *
       * <pre>
       * If non-negative, the seed with which the Solver will initialize the Caffe
       * random number generator -- useful for reproducible results. Otherwise,
       * (and by default) initialize using a seed derived from the system clock.
       * </pre>
       */
      public long getRandomSeed() {
        return randomSeed_;
      }
      /**
       * <code>optional int64 random_seed = 20 [default = -1];</code>
       *
       * <pre>
       * If non-negative, the seed with which the Solver will initialize the Caffe
       * random number generator -- useful for reproducible results. Otherwise,
       * (and by default) initialize using a seed derived from the system clock.
       * </pre>
       */
      public Builder setRandomSeed(long value) {
        bitField1_ |= 0x00000002;
        randomSeed_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 random_seed = 20 [default = -1];</code>
       *
       * <pre>
       * If non-negative, the seed with which the Solver will initialize the Caffe
       * random number generator -- useful for reproducible results. Otherwise,
       * (and by default) initialize using a seed derived from the system clock.
       * </pre>
       */
      public Builder clearRandomSeed() {
        bitField1_ = (bitField1_ & ~0x00000002);
        randomSeed_ = -1L;
        onChanged();
        return this;
      }

      // optional string type = 40 [default = "SGD"];
      private java.lang.Object type_ = "SGD";
      /**
       * <code>optional string type = 40 [default = "SGD"];</code>
       *
       * <pre>
       * type of the solver
       * </pre>
       */
      public boolean hasType() {
        return ((bitField1_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional string type = 40 [default = "SGD"];</code>
       *
       * <pre>
       * type of the solver
       * </pre>
       */
      public java.lang.String getType() {
        java.lang.Object ref = type_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          type_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string type = 40 [default = "SGD"];</code>
       *
       * <pre>
       * type of the solver
       * </pre>
       */
      public com.google.protobuf.ByteString
          getTypeBytes() {
        java.lang.Object ref = type_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          type_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string type = 40 [default = "SGD"];</code>
       *
       * <pre>
       * type of the solver
       * </pre>
       */
      public Builder setType(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField1_ |= 0x00000004;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string type = 40 [default = "SGD"];</code>
       *
       * <pre>
       * type of the solver
       * </pre>
       */
      public Builder clearType() {
        bitField1_ = (bitField1_ & ~0x00000004);
        type_ = getDefaultInstance().getType();
        onChanged();
        return this;
      }
      /**
       * <code>optional string type = 40 [default = "SGD"];</code>
       *
       * <pre>
       * type of the solver
       * </pre>
       */
      public Builder setTypeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField1_ |= 0x00000004;
        type_ = value;
        onChanged();
        return this;
      }

      // optional float delta = 31 [default = 1e-08];
      private float delta_ = 1e-08F;
      /**
       * <code>optional float delta = 31 [default = 1e-08];</code>
       *
       * <pre>
       * numerical stability for RMSProp, AdaGrad and AdaDelta and Adam
       * </pre>
       */
      public boolean hasDelta() {
        return ((bitField1_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional float delta = 31 [default = 1e-08];</code>
       *
       * <pre>
       * numerical stability for RMSProp, AdaGrad and AdaDelta and Adam
       * </pre>
       */
      public float getDelta() {
        return delta_;
      }
      /**
       * <code>optional float delta = 31 [default = 1e-08];</code>
       *
       * <pre>
       * numerical stability for RMSProp, AdaGrad and AdaDelta and Adam
       * </pre>
       */
      public Builder setDelta(float value) {
        bitField1_ |= 0x00000008;
        delta_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float delta = 31 [default = 1e-08];</code>
       *
       * <pre>
       * numerical stability for RMSProp, AdaGrad and AdaDelta and Adam
       * </pre>
       */
      public Builder clearDelta() {
        bitField1_ = (bitField1_ & ~0x00000008);
        delta_ = 1e-08F;
        onChanged();
        return this;
      }

      // optional float momentum2 = 39 [default = 0.999];
      private float momentum2_ = 0.999F;
      /**
       * <code>optional float momentum2 = 39 [default = 0.999];</code>
       *
       * <pre>
       * parameters for the Adam solver
       * </pre>
       */
      public boolean hasMomentum2() {
        return ((bitField1_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional float momentum2 = 39 [default = 0.999];</code>
       *
       * <pre>
       * parameters for the Adam solver
       * </pre>
       */
      public float getMomentum2() {
        return momentum2_;
      }
      /**
       * <code>optional float momentum2 = 39 [default = 0.999];</code>
       *
       * <pre>
       * parameters for the Adam solver
       * </pre>
       */
      public Builder setMomentum2(float value) {
        bitField1_ |= 0x00000010;
        momentum2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float momentum2 = 39 [default = 0.999];</code>
       *
       * <pre>
       * parameters for the Adam solver
       * </pre>
       */
      public Builder clearMomentum2() {
        bitField1_ = (bitField1_ & ~0x00000010);
        momentum2_ = 0.999F;
        onChanged();
        return this;
      }

      // optional float rms_decay = 38 [default = 0.99];
      private float rmsDecay_ = 0.99F;
      /**
       * <code>optional float rms_decay = 38 [default = 0.99];</code>
       *
       * <pre>
       * RMSProp decay value
       * MeanSquare(t) = rms_decay*MeanSquare(t-1) + (1-rms_decay)*SquareGradient(t)
       * </pre>
       */
      public boolean hasRmsDecay() {
        return ((bitField1_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional float rms_decay = 38 [default = 0.99];</code>
       *
       * <pre>
       * RMSProp decay value
       * MeanSquare(t) = rms_decay*MeanSquare(t-1) + (1-rms_decay)*SquareGradient(t)
       * </pre>
       */
      public float getRmsDecay() {
        return rmsDecay_;
      }
      /**
       * <code>optional float rms_decay = 38 [default = 0.99];</code>
       *
       * <pre>
       * RMSProp decay value
       * MeanSquare(t) = rms_decay*MeanSquare(t-1) + (1-rms_decay)*SquareGradient(t)
       * </pre>
       */
      public Builder setRmsDecay(float value) {
        bitField1_ |= 0x00000020;
        rmsDecay_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float rms_decay = 38 [default = 0.99];</code>
       *
       * <pre>
       * RMSProp decay value
       * MeanSquare(t) = rms_decay*MeanSquare(t-1) + (1-rms_decay)*SquareGradient(t)
       * </pre>
       */
      public Builder clearRmsDecay() {
        bitField1_ = (bitField1_ & ~0x00000020);
        rmsDecay_ = 0.99F;
        onChanged();
        return this;
      }

      // optional bool debug_info = 23 [default = false];
      private boolean debugInfo_ ;
      /**
       * <code>optional bool debug_info = 23 [default = false];</code>
       *
       * <pre>
       * If true, print information about the state of the net that may help with
       * debugging learning problems.
       * </pre>
       */
      public boolean hasDebugInfo() {
        return ((bitField1_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional bool debug_info = 23 [default = false];</code>
       *
       * <pre>
       * If true, print information about the state of the net that may help with
       * debugging learning problems.
       * </pre>
       */
      public boolean getDebugInfo() {
        return debugInfo_;
      }
      /**
       * <code>optional bool debug_info = 23 [default = false];</code>
       *
       * <pre>
       * If true, print information about the state of the net that may help with
       * debugging learning problems.
       * </pre>
       */
      public Builder setDebugInfo(boolean value) {
        bitField1_ |= 0x00000040;
        debugInfo_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool debug_info = 23 [default = false];</code>
       *
       * <pre>
       * If true, print information about the state of the net that may help with
       * debugging learning problems.
       * </pre>
       */
      public Builder clearDebugInfo() {
        bitField1_ = (bitField1_ & ~0x00000040);
        debugInfo_ = false;
        onChanged();
        return this;
      }

      // optional bool snapshot_after_train = 28 [default = true];
      private boolean snapshotAfterTrain_ = true;
      /**
       * <code>optional bool snapshot_after_train = 28 [default = true];</code>
       *
       * <pre>
       * If false, don't save a snapshot after training finishes.
       * </pre>
       */
      public boolean hasSnapshotAfterTrain() {
        return ((bitField1_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional bool snapshot_after_train = 28 [default = true];</code>
       *
       * <pre>
       * If false, don't save a snapshot after training finishes.
       * </pre>
       */
      public boolean getSnapshotAfterTrain() {
        return snapshotAfterTrain_;
      }
      /**
       * <code>optional bool snapshot_after_train = 28 [default = true];</code>
       *
       * <pre>
       * If false, don't save a snapshot after training finishes.
       * </pre>
       */
      public Builder setSnapshotAfterTrain(boolean value) {
        bitField1_ |= 0x00000080;
        snapshotAfterTrain_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool snapshot_after_train = 28 [default = true];</code>
       *
       * <pre>
       * If false, don't save a snapshot after training finishes.
       * </pre>
       */
      public Builder clearSnapshotAfterTrain() {
        bitField1_ = (bitField1_ & ~0x00000080);
        snapshotAfterTrain_ = true;
        onChanged();
        return this;
      }

      // optional .caffe.SolverParameter.SolverType solver_type = 30 [default = SGD];
      private caffe.Caffe.SolverParameter.SolverType solverType_ = caffe.Caffe.SolverParameter.SolverType.SGD;
      /**
       * <code>optional .caffe.SolverParameter.SolverType solver_type = 30 [default = SGD];</code>
       *
       * <pre>
       * DEPRECATED: use type instead of solver_type
       * </pre>
       */
      public boolean hasSolverType() {
        return ((bitField1_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional .caffe.SolverParameter.SolverType solver_type = 30 [default = SGD];</code>
       *
       * <pre>
       * DEPRECATED: use type instead of solver_type
       * </pre>
       */
      public caffe.Caffe.SolverParameter.SolverType getSolverType() {
        return solverType_;
      }
      /**
       * <code>optional .caffe.SolverParameter.SolverType solver_type = 30 [default = SGD];</code>
       *
       * <pre>
       * DEPRECATED: use type instead of solver_type
       * </pre>
       */
      public Builder setSolverType(caffe.Caffe.SolverParameter.SolverType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField1_ |= 0x00000100;
        solverType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .caffe.SolverParameter.SolverType solver_type = 30 [default = SGD];</code>
       *
       * <pre>
       * DEPRECATED: use type instead of solver_type
       * </pre>
       */
      public Builder clearSolverType() {
        bitField1_ = (bitField1_ & ~0x00000100);
        solverType_ = caffe.Caffe.SolverParameter.SolverType.SGD;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.SolverParameter)
    }

    static {
      defaultInstance = new SolverParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.SolverParameter)
  }

  public interface SolverStateOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 iter = 1;
    /**
     * <code>optional int32 iter = 1;</code>
     *
     * <pre>
     * The current iteration
     * </pre>
     */
    boolean hasIter();
    /**
     * <code>optional int32 iter = 1;</code>
     *
     * <pre>
     * The current iteration
     * </pre>
     */
    int getIter();

    // optional string learned_net = 2;
    /**
     * <code>optional string learned_net = 2;</code>
     *
     * <pre>
     * The file that stores the learned net.
     * </pre>
     */
    boolean hasLearnedNet();
    /**
     * <code>optional string learned_net = 2;</code>
     *
     * <pre>
     * The file that stores the learned net.
     * </pre>
     */
    java.lang.String getLearnedNet();
    /**
     * <code>optional string learned_net = 2;</code>
     *
     * <pre>
     * The file that stores the learned net.
     * </pre>
     */
    com.google.protobuf.ByteString
        getLearnedNetBytes();

    // repeated .caffe.BlobProto history = 3;
    /**
     * <code>repeated .caffe.BlobProto history = 3;</code>
     *
     * <pre>
     * The history for sgd solvers
     * </pre>
     */
    java.util.List<caffe.Caffe.BlobProto> 
        getHistoryList();
    /**
     * <code>repeated .caffe.BlobProto history = 3;</code>
     *
     * <pre>
     * The history for sgd solvers
     * </pre>
     */
    caffe.Caffe.BlobProto getHistory(int index);
    /**
     * <code>repeated .caffe.BlobProto history = 3;</code>
     *
     * <pre>
     * The history for sgd solvers
     * </pre>
     */
    int getHistoryCount();
    /**
     * <code>repeated .caffe.BlobProto history = 3;</code>
     *
     * <pre>
     * The history for sgd solvers
     * </pre>
     */
    java.util.List<? extends caffe.Caffe.BlobProtoOrBuilder> 
        getHistoryOrBuilderList();
    /**
     * <code>repeated .caffe.BlobProto history = 3;</code>
     *
     * <pre>
     * The history for sgd solvers
     * </pre>
     */
    caffe.Caffe.BlobProtoOrBuilder getHistoryOrBuilder(
        int index);

    // optional int32 current_step = 4 [default = 0];
    /**
     * <code>optional int32 current_step = 4 [default = 0];</code>
     *
     * <pre>
     * The current step for learning rate
     * </pre>
     */
    boolean hasCurrentStep();
    /**
     * <code>optional int32 current_step = 4 [default = 0];</code>
     *
     * <pre>
     * The current step for learning rate
     * </pre>
     */
    int getCurrentStep();

    // optional float minimum_loss = 5 [default = 1e+38];
    /**
     * <code>optional float minimum_loss = 5 [default = 1e+38];</code>
     *
     * <pre>
     * Historical minimum loss
     * </pre>
     */
    boolean hasMinimumLoss();
    /**
     * <code>optional float minimum_loss = 5 [default = 1e+38];</code>
     *
     * <pre>
     * Historical minimum loss
     * </pre>
     */
    float getMinimumLoss();

    // optional int32 iter_last_event = 6 [default = 0];
    /**
     * <code>optional int32 iter_last_event = 6 [default = 0];</code>
     *
     * <pre>
     * The iteration when last lr-update or min_loss-update happend
     * </pre>
     */
    boolean hasIterLastEvent();
    /**
     * <code>optional int32 iter_last_event = 6 [default = 0];</code>
     *
     * <pre>
     * The iteration when last lr-update or min_loss-update happend
     * </pre>
     */
    int getIterLastEvent();
  }
  /**
   * Protobuf type {@code caffe.SolverState}
   *
   * <pre>
   * A message that stores the solver snapshots
   * </pre>
   */
  public static final class SolverState extends
      com.google.protobuf.GeneratedMessage
      implements SolverStateOrBuilder {
    // Use SolverState.newBuilder() to construct.
    private SolverState(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private SolverState(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final SolverState defaultInstance;
    public static SolverState getDefaultInstance() {
      return defaultInstance;
    }

    public SolverState getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private SolverState(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              iter_ = input.readInt32();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              learnedNet_ = input.readBytes();
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                history_ = new java.util.ArrayList<caffe.Caffe.BlobProto>();
                mutable_bitField0_ |= 0x00000004;
              }
              history_.add(input.readMessage(caffe.Caffe.BlobProto.PARSER, extensionRegistry));
              break;
            }
            case 32: {
              bitField0_ |= 0x00000004;
              currentStep_ = input.readInt32();
              break;
            }
            case 45: {
              bitField0_ |= 0x00000008;
              minimumLoss_ = input.readFloat();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000010;
              iterLastEvent_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          history_ = java.util.Collections.unmodifiableList(history_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_SolverState_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_SolverState_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.SolverState.class, caffe.Caffe.SolverState.Builder.class);
    }

    public static com.google.protobuf.Parser<SolverState> PARSER =
        new com.google.protobuf.AbstractParser<SolverState>() {
      public SolverState parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SolverState(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<SolverState> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 iter = 1;
    public static final int ITER_FIELD_NUMBER = 1;
    private int iter_;
    /**
     * <code>optional int32 iter = 1;</code>
     *
     * <pre>
     * The current iteration
     * </pre>
     */
    public boolean hasIter() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 iter = 1;</code>
     *
     * <pre>
     * The current iteration
     * </pre>
     */
    public int getIter() {
      return iter_;
    }

    // optional string learned_net = 2;
    public static final int LEARNED_NET_FIELD_NUMBER = 2;
    private java.lang.Object learnedNet_;
    /**
     * <code>optional string learned_net = 2;</code>
     *
     * <pre>
     * The file that stores the learned net.
     * </pre>
     */
    public boolean hasLearnedNet() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string learned_net = 2;</code>
     *
     * <pre>
     * The file that stores the learned net.
     * </pre>
     */
    public java.lang.String getLearnedNet() {
      java.lang.Object ref = learnedNet_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          learnedNet_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string learned_net = 2;</code>
     *
     * <pre>
     * The file that stores the learned net.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getLearnedNetBytes() {
      java.lang.Object ref = learnedNet_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        learnedNet_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // repeated .caffe.BlobProto history = 3;
    public static final int HISTORY_FIELD_NUMBER = 3;
    private java.util.List<caffe.Caffe.BlobProto> history_;
    /**
     * <code>repeated .caffe.BlobProto history = 3;</code>
     *
     * <pre>
     * The history for sgd solvers
     * </pre>
     */
    public java.util.List<caffe.Caffe.BlobProto> getHistoryList() {
      return history_;
    }
    /**
     * <code>repeated .caffe.BlobProto history = 3;</code>
     *
     * <pre>
     * The history for sgd solvers
     * </pre>
     */
    public java.util.List<? extends caffe.Caffe.BlobProtoOrBuilder> 
        getHistoryOrBuilderList() {
      return history_;
    }
    /**
     * <code>repeated .caffe.BlobProto history = 3;</code>
     *
     * <pre>
     * The history for sgd solvers
     * </pre>
     */
    public int getHistoryCount() {
      return history_.size();
    }
    /**
     * <code>repeated .caffe.BlobProto history = 3;</code>
     *
     * <pre>
     * The history for sgd solvers
     * </pre>
     */
    public caffe.Caffe.BlobProto getHistory(int index) {
      return history_.get(index);
    }
    /**
     * <code>repeated .caffe.BlobProto history = 3;</code>
     *
     * <pre>
     * The history for sgd solvers
     * </pre>
     */
    public caffe.Caffe.BlobProtoOrBuilder getHistoryOrBuilder(
        int index) {
      return history_.get(index);
    }

    // optional int32 current_step = 4 [default = 0];
    public static final int CURRENT_STEP_FIELD_NUMBER = 4;
    private int currentStep_;
    /**
     * <code>optional int32 current_step = 4 [default = 0];</code>
     *
     * <pre>
     * The current step for learning rate
     * </pre>
     */
    public boolean hasCurrentStep() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 current_step = 4 [default = 0];</code>
     *
     * <pre>
     * The current step for learning rate
     * </pre>
     */
    public int getCurrentStep() {
      return currentStep_;
    }

    // optional float minimum_loss = 5 [default = 1e+38];
    public static final int MINIMUM_LOSS_FIELD_NUMBER = 5;
    private float minimumLoss_;
    /**
     * <code>optional float minimum_loss = 5 [default = 1e+38];</code>
     *
     * <pre>
     * Historical minimum loss
     * </pre>
     */
    public boolean hasMinimumLoss() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional float minimum_loss = 5 [default = 1e+38];</code>
     *
     * <pre>
     * Historical minimum loss
     * </pre>
     */
    public float getMinimumLoss() {
      return minimumLoss_;
    }

    // optional int32 iter_last_event = 6 [default = 0];
    public static final int ITER_LAST_EVENT_FIELD_NUMBER = 6;
    private int iterLastEvent_;
    /**
     * <code>optional int32 iter_last_event = 6 [default = 0];</code>
     *
     * <pre>
     * The iteration when last lr-update or min_loss-update happend
     * </pre>
     */
    public boolean hasIterLastEvent() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 iter_last_event = 6 [default = 0];</code>
     *
     * <pre>
     * The iteration when last lr-update or min_loss-update happend
     * </pre>
     */
    public int getIterLastEvent() {
      return iterLastEvent_;
    }

    private void initFields() {
      iter_ = 0;
      learnedNet_ = "";
      history_ = java.util.Collections.emptyList();
      currentStep_ = 0;
      minimumLoss_ = 1e+38F;
      iterLastEvent_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, iter_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getLearnedNetBytes());
      }
      for (int i = 0; i < history_.size(); i++) {
        output.writeMessage(3, history_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(4, currentStep_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeFloat(5, minimumLoss_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(6, iterLastEvent_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, iter_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getLearnedNetBytes());
      }
      for (int i = 0; i < history_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, history_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, currentStep_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(5, minimumLoss_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, iterLastEvent_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.SolverState parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.SolverState parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.SolverState parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.SolverState parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.SolverState parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.SolverState parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.SolverState parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.SolverState parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.SolverState parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.SolverState parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.SolverState prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.SolverState}
     *
     * <pre>
     * A message that stores the solver snapshots
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements caffe.Caffe.SolverStateOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_SolverState_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_SolverState_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.SolverState.class, caffe.Caffe.SolverState.Builder.class);
      }

      // Construct using caffe.Caffe.SolverState.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getHistoryFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        iter_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        learnedNet_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        if (historyBuilder_ == null) {
          history_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          historyBuilder_.clear();
        }
        currentStep_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        minimumLoss_ = 1e+38F;
        bitField0_ = (bitField0_ & ~0x00000010);
        iterLastEvent_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_SolverState_descriptor;
      }

      public caffe.Caffe.SolverState getDefaultInstanceForType() {
        return caffe.Caffe.SolverState.getDefaultInstance();
      }

      public caffe.Caffe.SolverState build() {
        caffe.Caffe.SolverState result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.SolverState buildPartial() {
        caffe.Caffe.SolverState result = new caffe.Caffe.SolverState(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.iter_ = iter_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.learnedNet_ = learnedNet_;
        if (historyBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            history_ = java.util.Collections.unmodifiableList(history_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.history_ = history_;
        } else {
          result.history_ = historyBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        result.currentStep_ = currentStep_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        result.minimumLoss_ = minimumLoss_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000010;
        }
        result.iterLastEvent_ = iterLastEvent_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.SolverState) {
          return mergeFrom((caffe.Caffe.SolverState)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.SolverState other) {
        if (other == caffe.Caffe.SolverState.getDefaultInstance()) return this;
        if (other.hasIter()) {
          setIter(other.getIter());
        }
        if (other.hasLearnedNet()) {
          bitField0_ |= 0x00000002;
          learnedNet_ = other.learnedNet_;
          onChanged();
        }
        if (historyBuilder_ == null) {
          if (!other.history_.isEmpty()) {
            if (history_.isEmpty()) {
              history_ = other.history_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureHistoryIsMutable();
              history_.addAll(other.history_);
            }
            onChanged();
          }
        } else {
          if (!other.history_.isEmpty()) {
            if (historyBuilder_.isEmpty()) {
              historyBuilder_.dispose();
              historyBuilder_ = null;
              history_ = other.history_;
              bitField0_ = (bitField0_ & ~0x00000004);
              historyBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getHistoryFieldBuilder() : null;
            } else {
              historyBuilder_.addAllMessages(other.history_);
            }
          }
        }
        if (other.hasCurrentStep()) {
          setCurrentStep(other.getCurrentStep());
        }
        if (other.hasMinimumLoss()) {
          setMinimumLoss(other.getMinimumLoss());
        }
        if (other.hasIterLastEvent()) {
          setIterLastEvent(other.getIterLastEvent());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.SolverState parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.SolverState) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 iter = 1;
      private int iter_ ;
      /**
       * <code>optional int32 iter = 1;</code>
       *
       * <pre>
       * The current iteration
       * </pre>
       */
      public boolean hasIter() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 iter = 1;</code>
       *
       * <pre>
       * The current iteration
       * </pre>
       */
      public int getIter() {
        return iter_;
      }
      /**
       * <code>optional int32 iter = 1;</code>
       *
       * <pre>
       * The current iteration
       * </pre>
       */
      public Builder setIter(int value) {
        bitField0_ |= 0x00000001;
        iter_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 iter = 1;</code>
       *
       * <pre>
       * The current iteration
       * </pre>
       */
      public Builder clearIter() {
        bitField0_ = (bitField0_ & ~0x00000001);
        iter_ = 0;
        onChanged();
        return this;
      }

      // optional string learned_net = 2;
      private java.lang.Object learnedNet_ = "";
      /**
       * <code>optional string learned_net = 2;</code>
       *
       * <pre>
       * The file that stores the learned net.
       * </pre>
       */
      public boolean hasLearnedNet() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string learned_net = 2;</code>
       *
       * <pre>
       * The file that stores the learned net.
       * </pre>
       */
      public java.lang.String getLearnedNet() {
        java.lang.Object ref = learnedNet_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          learnedNet_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string learned_net = 2;</code>
       *
       * <pre>
       * The file that stores the learned net.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getLearnedNetBytes() {
        java.lang.Object ref = learnedNet_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          learnedNet_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string learned_net = 2;</code>
       *
       * <pre>
       * The file that stores the learned net.
       * </pre>
       */
      public Builder setLearnedNet(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        learnedNet_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string learned_net = 2;</code>
       *
       * <pre>
       * The file that stores the learned net.
       * </pre>
       */
      public Builder clearLearnedNet() {
        bitField0_ = (bitField0_ & ~0x00000002);
        learnedNet_ = getDefaultInstance().getLearnedNet();
        onChanged();
        return this;
      }
      /**
       * <code>optional string learned_net = 2;</code>
       *
       * <pre>
       * The file that stores the learned net.
       * </pre>
       */
      public Builder setLearnedNetBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        learnedNet_ = value;
        onChanged();
        return this;
      }

      // repeated .caffe.BlobProto history = 3;
      private java.util.List<caffe.Caffe.BlobProto> history_ =
        java.util.Collections.emptyList();
      private void ensureHistoryIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          history_ = new java.util.ArrayList<caffe.Caffe.BlobProto>(history_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          caffe.Caffe.BlobProto, caffe.Caffe.BlobProto.Builder, caffe.Caffe.BlobProtoOrBuilder> historyBuilder_;

      /**
       * <code>repeated .caffe.BlobProto history = 3;</code>
       *
       * <pre>
       * The history for sgd solvers
       * </pre>
       */
      public java.util.List<caffe.Caffe.BlobProto> getHistoryList() {
        if (historyBuilder_ == null) {
          return java.util.Collections.unmodifiableList(history_);
        } else {
          return historyBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .caffe.BlobProto history = 3;</code>
       *
       * <pre>
       * The history for sgd solvers
       * </pre>
       */
      public int getHistoryCount() {
        if (historyBuilder_ == null) {
          return history_.size();
        } else {
          return historyBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .caffe.BlobProto history = 3;</code>
       *
       * <pre>
       * The history for sgd solvers
       * </pre>
       */
      public caffe.Caffe.BlobProto getHistory(int index) {
        if (historyBuilder_ == null) {
          return history_.get(index);
        } else {
          return historyBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .caffe.BlobProto history = 3;</code>
       *
       * <pre>
       * The history for sgd solvers
       * </pre>
       */
      public Builder setHistory(
          int index, caffe.Caffe.BlobProto value) {
        if (historyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHistoryIsMutable();
          history_.set(index, value);
          onChanged();
        } else {
          historyBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto history = 3;</code>
       *
       * <pre>
       * The history for sgd solvers
       * </pre>
       */
      public Builder setHistory(
          int index, caffe.Caffe.BlobProto.Builder builderForValue) {
        if (historyBuilder_ == null) {
          ensureHistoryIsMutable();
          history_.set(index, builderForValue.build());
          onChanged();
        } else {
          historyBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto history = 3;</code>
       *
       * <pre>
       * The history for sgd solvers
       * </pre>
       */
      public Builder addHistory(caffe.Caffe.BlobProto value) {
        if (historyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHistoryIsMutable();
          history_.add(value);
          onChanged();
        } else {
          historyBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto history = 3;</code>
       *
       * <pre>
       * The history for sgd solvers
       * </pre>
       */
      public Builder addHistory(
          int index, caffe.Caffe.BlobProto value) {
        if (historyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHistoryIsMutable();
          history_.add(index, value);
          onChanged();
        } else {
          historyBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto history = 3;</code>
       *
       * <pre>
       * The history for sgd solvers
       * </pre>
       */
      public Builder addHistory(
          caffe.Caffe.BlobProto.Builder builderForValue) {
        if (historyBuilder_ == null) {
          ensureHistoryIsMutable();
          history_.add(builderForValue.build());
          onChanged();
        } else {
          historyBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto history = 3;</code>
       *
       * <pre>
       * The history for sgd solvers
       * </pre>
       */
      public Builder addHistory(
          int index, caffe.Caffe.BlobProto.Builder builderForValue) {
        if (historyBuilder_ == null) {
          ensureHistoryIsMutable();
          history_.add(index, builderForValue.build());
          onChanged();
        } else {
          historyBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto history = 3;</code>
       *
       * <pre>
       * The history for sgd solvers
       * </pre>
       */
      public Builder addAllHistory(
          java.lang.Iterable<? extends caffe.Caffe.BlobProto> values) {
        if (historyBuilder_ == null) {
          ensureHistoryIsMutable();
          super.addAll(values, history_);
          onChanged();
        } else {
          historyBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto history = 3;</code>
       *
       * <pre>
       * The history for sgd solvers
       * </pre>
       */
      public Builder clearHistory() {
        if (historyBuilder_ == null) {
          history_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          historyBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto history = 3;</code>
       *
       * <pre>
       * The history for sgd solvers
       * </pre>
       */
      public Builder removeHistory(int index) {
        if (historyBuilder_ == null) {
          ensureHistoryIsMutable();
          history_.remove(index);
          onChanged();
        } else {
          historyBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto history = 3;</code>
       *
       * <pre>
       * The history for sgd solvers
       * </pre>
       */
      public caffe.Caffe.BlobProto.Builder getHistoryBuilder(
          int index) {
        return getHistoryFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .caffe.BlobProto history = 3;</code>
       *
       * <pre>
       * The history for sgd solvers
       * </pre>
       */
      public caffe.Caffe.BlobProtoOrBuilder getHistoryOrBuilder(
          int index) {
        if (historyBuilder_ == null) {
          return history_.get(index);  } else {
          return historyBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .caffe.BlobProto history = 3;</code>
       *
       * <pre>
       * The history for sgd solvers
       * </pre>
       */
      public java.util.List<? extends caffe.Caffe.BlobProtoOrBuilder> 
           getHistoryOrBuilderList() {
        if (historyBuilder_ != null) {
          return historyBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(history_);
        }
      }
      /**
       * <code>repeated .caffe.BlobProto history = 3;</code>
       *
       * <pre>
       * The history for sgd solvers
       * </pre>
       */
      public caffe.Caffe.BlobProto.Builder addHistoryBuilder() {
        return getHistoryFieldBuilder().addBuilder(
            caffe.Caffe.BlobProto.getDefaultInstance());
      }
      /**
       * <code>repeated .caffe.BlobProto history = 3;</code>
       *
       * <pre>
       * The history for sgd solvers
       * </pre>
       */
      public caffe.Caffe.BlobProto.Builder addHistoryBuilder(
          int index) {
        return getHistoryFieldBuilder().addBuilder(
            index, caffe.Caffe.BlobProto.getDefaultInstance());
      }
      /**
       * <code>repeated .caffe.BlobProto history = 3;</code>
       *
       * <pre>
       * The history for sgd solvers
       * </pre>
       */
      public java.util.List<caffe.Caffe.BlobProto.Builder> 
           getHistoryBuilderList() {
        return getHistoryFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          caffe.Caffe.BlobProto, caffe.Caffe.BlobProto.Builder, caffe.Caffe.BlobProtoOrBuilder> 
          getHistoryFieldBuilder() {
        if (historyBuilder_ == null) {
          historyBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              caffe.Caffe.BlobProto, caffe.Caffe.BlobProto.Builder, caffe.Caffe.BlobProtoOrBuilder>(
                  history_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          history_ = null;
        }
        return historyBuilder_;
      }

      // optional int32 current_step = 4 [default = 0];
      private int currentStep_ ;
      /**
       * <code>optional int32 current_step = 4 [default = 0];</code>
       *
       * <pre>
       * The current step for learning rate
       * </pre>
       */
      public boolean hasCurrentStep() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 current_step = 4 [default = 0];</code>
       *
       * <pre>
       * The current step for learning rate
       * </pre>
       */
      public int getCurrentStep() {
        return currentStep_;
      }
      /**
       * <code>optional int32 current_step = 4 [default = 0];</code>
       *
       * <pre>
       * The current step for learning rate
       * </pre>
       */
      public Builder setCurrentStep(int value) {
        bitField0_ |= 0x00000008;
        currentStep_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 current_step = 4 [default = 0];</code>
       *
       * <pre>
       * The current step for learning rate
       * </pre>
       */
      public Builder clearCurrentStep() {
        bitField0_ = (bitField0_ & ~0x00000008);
        currentStep_ = 0;
        onChanged();
        return this;
      }

      // optional float minimum_loss = 5 [default = 1e+38];
      private float minimumLoss_ = 1e+38F;
      /**
       * <code>optional float minimum_loss = 5 [default = 1e+38];</code>
       *
       * <pre>
       * Historical minimum loss
       * </pre>
       */
      public boolean hasMinimumLoss() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional float minimum_loss = 5 [default = 1e+38];</code>
       *
       * <pre>
       * Historical minimum loss
       * </pre>
       */
      public float getMinimumLoss() {
        return minimumLoss_;
      }
      /**
       * <code>optional float minimum_loss = 5 [default = 1e+38];</code>
       *
       * <pre>
       * Historical minimum loss
       * </pre>
       */
      public Builder setMinimumLoss(float value) {
        bitField0_ |= 0x00000010;
        minimumLoss_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float minimum_loss = 5 [default = 1e+38];</code>
       *
       * <pre>
       * Historical minimum loss
       * </pre>
       */
      public Builder clearMinimumLoss() {
        bitField0_ = (bitField0_ & ~0x00000010);
        minimumLoss_ = 1e+38F;
        onChanged();
        return this;
      }

      // optional int32 iter_last_event = 6 [default = 0];
      private int iterLastEvent_ ;
      /**
       * <code>optional int32 iter_last_event = 6 [default = 0];</code>
       *
       * <pre>
       * The iteration when last lr-update or min_loss-update happend
       * </pre>
       */
      public boolean hasIterLastEvent() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 iter_last_event = 6 [default = 0];</code>
       *
       * <pre>
       * The iteration when last lr-update or min_loss-update happend
       * </pre>
       */
      public int getIterLastEvent() {
        return iterLastEvent_;
      }
      /**
       * <code>optional int32 iter_last_event = 6 [default = 0];</code>
       *
       * <pre>
       * The iteration when last lr-update or min_loss-update happend
       * </pre>
       */
      public Builder setIterLastEvent(int value) {
        bitField0_ |= 0x00000020;
        iterLastEvent_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 iter_last_event = 6 [default = 0];</code>
       *
       * <pre>
       * The iteration when last lr-update or min_loss-update happend
       * </pre>
       */
      public Builder clearIterLastEvent() {
        bitField0_ = (bitField0_ & ~0x00000020);
        iterLastEvent_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.SolverState)
    }

    static {
      defaultInstance = new SolverState(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.SolverState)
  }

  public interface NetStateOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional .caffe.Phase phase = 1 [default = TEST];
    /**
     * <code>optional .caffe.Phase phase = 1 [default = TEST];</code>
     */
    boolean hasPhase();
    /**
     * <code>optional .caffe.Phase phase = 1 [default = TEST];</code>
     */
    caffe.Caffe.Phase getPhase();

    // optional int32 level = 2 [default = 0];
    /**
     * <code>optional int32 level = 2 [default = 0];</code>
     */
    boolean hasLevel();
    /**
     * <code>optional int32 level = 2 [default = 0];</code>
     */
    int getLevel();

    // repeated string stage = 3;
    /**
     * <code>repeated string stage = 3;</code>
     */
    java.util.List<java.lang.String>
    getStageList();
    /**
     * <code>repeated string stage = 3;</code>
     */
    int getStageCount();
    /**
     * <code>repeated string stage = 3;</code>
     */
    java.lang.String getStage(int index);
    /**
     * <code>repeated string stage = 3;</code>
     */
    com.google.protobuf.ByteString
        getStageBytes(int index);
  }
  /**
   * Protobuf type {@code caffe.NetState}
   */
  public static final class NetState extends
      com.google.protobuf.GeneratedMessage
      implements NetStateOrBuilder {
    // Use NetState.newBuilder() to construct.
    private NetState(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private NetState(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final NetState defaultInstance;
    public static NetState getDefaultInstance() {
      return defaultInstance;
    }

    public NetState getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private NetState(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              caffe.Caffe.Phase value = caffe.Caffe.Phase.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                phase_ = value;
              }
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              level_ = input.readInt32();
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                stage_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000004;
              }
              stage_.add(input.readBytes());
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          stage_ = new com.google.protobuf.UnmodifiableLazyStringList(stage_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_NetState_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_NetState_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.NetState.class, caffe.Caffe.NetState.Builder.class);
    }

    public static com.google.protobuf.Parser<NetState> PARSER =
        new com.google.protobuf.AbstractParser<NetState>() {
      public NetState parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new NetState(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<NetState> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional .caffe.Phase phase = 1 [default = TEST];
    public static final int PHASE_FIELD_NUMBER = 1;
    private caffe.Caffe.Phase phase_;
    /**
     * <code>optional .caffe.Phase phase = 1 [default = TEST];</code>
     */
    public boolean hasPhase() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .caffe.Phase phase = 1 [default = TEST];</code>
     */
    public caffe.Caffe.Phase getPhase() {
      return phase_;
    }

    // optional int32 level = 2 [default = 0];
    public static final int LEVEL_FIELD_NUMBER = 2;
    private int level_;
    /**
     * <code>optional int32 level = 2 [default = 0];</code>
     */
    public boolean hasLevel() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 level = 2 [default = 0];</code>
     */
    public int getLevel() {
      return level_;
    }

    // repeated string stage = 3;
    public static final int STAGE_FIELD_NUMBER = 3;
    private com.google.protobuf.LazyStringList stage_;
    /**
     * <code>repeated string stage = 3;</code>
     */
    public java.util.List<java.lang.String>
        getStageList() {
      return stage_;
    }
    /**
     * <code>repeated string stage = 3;</code>
     */
    public int getStageCount() {
      return stage_.size();
    }
    /**
     * <code>repeated string stage = 3;</code>
     */
    public java.lang.String getStage(int index) {
      return stage_.get(index);
    }
    /**
     * <code>repeated string stage = 3;</code>
     */
    public com.google.protobuf.ByteString
        getStageBytes(int index) {
      return stage_.getByteString(index);
    }

    private void initFields() {
      phase_ = caffe.Caffe.Phase.TEST;
      level_ = 0;
      stage_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, phase_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, level_);
      }
      for (int i = 0; i < stage_.size(); i++) {
        output.writeBytes(3, stage_.getByteString(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, phase_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, level_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < stage_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(stage_.getByteString(i));
        }
        size += dataSize;
        size += 1 * getStageList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.NetState parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.NetState parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.NetState parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.NetState parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.NetState parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.NetState parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.NetState parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.NetState parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.NetState parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.NetState parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.NetState prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.NetState}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements caffe.Caffe.NetStateOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_NetState_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_NetState_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.NetState.class, caffe.Caffe.NetState.Builder.class);
      }

      // Construct using caffe.Caffe.NetState.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        phase_ = caffe.Caffe.Phase.TEST;
        bitField0_ = (bitField0_ & ~0x00000001);
        level_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        stage_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_NetState_descriptor;
      }

      public caffe.Caffe.NetState getDefaultInstanceForType() {
        return caffe.Caffe.NetState.getDefaultInstance();
      }

      public caffe.Caffe.NetState build() {
        caffe.Caffe.NetState result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.NetState buildPartial() {
        caffe.Caffe.NetState result = new caffe.Caffe.NetState(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.phase_ = phase_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.level_ = level_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          stage_ = new com.google.protobuf.UnmodifiableLazyStringList(
              stage_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.stage_ = stage_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.NetState) {
          return mergeFrom((caffe.Caffe.NetState)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.NetState other) {
        if (other == caffe.Caffe.NetState.getDefaultInstance()) return this;
        if (other.hasPhase()) {
          setPhase(other.getPhase());
        }
        if (other.hasLevel()) {
          setLevel(other.getLevel());
        }
        if (!other.stage_.isEmpty()) {
          if (stage_.isEmpty()) {
            stage_ = other.stage_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureStageIsMutable();
            stage_.addAll(other.stage_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.NetState parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.NetState) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .caffe.Phase phase = 1 [default = TEST];
      private caffe.Caffe.Phase phase_ = caffe.Caffe.Phase.TEST;
      /**
       * <code>optional .caffe.Phase phase = 1 [default = TEST];</code>
       */
      public boolean hasPhase() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .caffe.Phase phase = 1 [default = TEST];</code>
       */
      public caffe.Caffe.Phase getPhase() {
        return phase_;
      }
      /**
       * <code>optional .caffe.Phase phase = 1 [default = TEST];</code>
       */
      public Builder setPhase(caffe.Caffe.Phase value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        phase_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .caffe.Phase phase = 1 [default = TEST];</code>
       */
      public Builder clearPhase() {
        bitField0_ = (bitField0_ & ~0x00000001);
        phase_ = caffe.Caffe.Phase.TEST;
        onChanged();
        return this;
      }

      // optional int32 level = 2 [default = 0];
      private int level_ ;
      /**
       * <code>optional int32 level = 2 [default = 0];</code>
       */
      public boolean hasLevel() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 level = 2 [default = 0];</code>
       */
      public int getLevel() {
        return level_;
      }
      /**
       * <code>optional int32 level = 2 [default = 0];</code>
       */
      public Builder setLevel(int value) {
        bitField0_ |= 0x00000002;
        level_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 level = 2 [default = 0];</code>
       */
      public Builder clearLevel() {
        bitField0_ = (bitField0_ & ~0x00000002);
        level_ = 0;
        onChanged();
        return this;
      }

      // repeated string stage = 3;
      private com.google.protobuf.LazyStringList stage_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureStageIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          stage_ = new com.google.protobuf.LazyStringArrayList(stage_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated string stage = 3;</code>
       */
      public java.util.List<java.lang.String>
          getStageList() {
        return java.util.Collections.unmodifiableList(stage_);
      }
      /**
       * <code>repeated string stage = 3;</code>
       */
      public int getStageCount() {
        return stage_.size();
      }
      /**
       * <code>repeated string stage = 3;</code>
       */
      public java.lang.String getStage(int index) {
        return stage_.get(index);
      }
      /**
       * <code>repeated string stage = 3;</code>
       */
      public com.google.protobuf.ByteString
          getStageBytes(int index) {
        return stage_.getByteString(index);
      }
      /**
       * <code>repeated string stage = 3;</code>
       */
      public Builder setStage(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureStageIsMutable();
        stage_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string stage = 3;</code>
       */
      public Builder addStage(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureStageIsMutable();
        stage_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string stage = 3;</code>
       */
      public Builder addAllStage(
          java.lang.Iterable<java.lang.String> values) {
        ensureStageIsMutable();
        super.addAll(values, stage_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string stage = 3;</code>
       */
      public Builder clearStage() {
        stage_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string stage = 3;</code>
       */
      public Builder addStageBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureStageIsMutable();
        stage_.add(value);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.NetState)
    }

    static {
      defaultInstance = new NetState(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.NetState)
  }

  public interface NetStateRuleOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional .caffe.Phase phase = 1;
    /**
     * <code>optional .caffe.Phase phase = 1;</code>
     *
     * <pre>
     * Set phase to require the NetState have a particular phase (TRAIN or TEST)
     * to meet this rule.
     * </pre>
     */
    boolean hasPhase();
    /**
     * <code>optional .caffe.Phase phase = 1;</code>
     *
     * <pre>
     * Set phase to require the NetState have a particular phase (TRAIN or TEST)
     * to meet this rule.
     * </pre>
     */
    caffe.Caffe.Phase getPhase();

    // optional int32 min_level = 2;
    /**
     * <code>optional int32 min_level = 2;</code>
     *
     * <pre>
     * Set the minimum and/or maximum levels in which the layer should be used.
     * Leave undefined to meet the rule regardless of level.
     * </pre>
     */
    boolean hasMinLevel();
    /**
     * <code>optional int32 min_level = 2;</code>
     *
     * <pre>
     * Set the minimum and/or maximum levels in which the layer should be used.
     * Leave undefined to meet the rule regardless of level.
     * </pre>
     */
    int getMinLevel();

    // optional int32 max_level = 3;
    /**
     * <code>optional int32 max_level = 3;</code>
     */
    boolean hasMaxLevel();
    /**
     * <code>optional int32 max_level = 3;</code>
     */
    int getMaxLevel();

    // repeated string stage = 4;
    /**
     * <code>repeated string stage = 4;</code>
     *
     * <pre>
     * Customizable sets of stages to include or exclude.
     * The net must have ALL of the specified stages and NONE of the specified
     * "not_stage"s to meet the rule.
     * (Use multiple NetStateRules to specify conjunctions of stages.)
     * </pre>
     */
    java.util.List<java.lang.String>
    getStageList();
    /**
     * <code>repeated string stage = 4;</code>
     *
     * <pre>
     * Customizable sets of stages to include or exclude.
     * The net must have ALL of the specified stages and NONE of the specified
     * "not_stage"s to meet the rule.
     * (Use multiple NetStateRules to specify conjunctions of stages.)
     * </pre>
     */
    int getStageCount();
    /**
     * <code>repeated string stage = 4;</code>
     *
     * <pre>
     * Customizable sets of stages to include or exclude.
     * The net must have ALL of the specified stages and NONE of the specified
     * "not_stage"s to meet the rule.
     * (Use multiple NetStateRules to specify conjunctions of stages.)
     * </pre>
     */
    java.lang.String getStage(int index);
    /**
     * <code>repeated string stage = 4;</code>
     *
     * <pre>
     * Customizable sets of stages to include or exclude.
     * The net must have ALL of the specified stages and NONE of the specified
     * "not_stage"s to meet the rule.
     * (Use multiple NetStateRules to specify conjunctions of stages.)
     * </pre>
     */
    com.google.protobuf.ByteString
        getStageBytes(int index);

    // repeated string not_stage = 5;
    /**
     * <code>repeated string not_stage = 5;</code>
     */
    java.util.List<java.lang.String>
    getNotStageList();
    /**
     * <code>repeated string not_stage = 5;</code>
     */
    int getNotStageCount();
    /**
     * <code>repeated string not_stage = 5;</code>
     */
    java.lang.String getNotStage(int index);
    /**
     * <code>repeated string not_stage = 5;</code>
     */
    com.google.protobuf.ByteString
        getNotStageBytes(int index);
  }
  /**
   * Protobuf type {@code caffe.NetStateRule}
   */
  public static final class NetStateRule extends
      com.google.protobuf.GeneratedMessage
      implements NetStateRuleOrBuilder {
    // Use NetStateRule.newBuilder() to construct.
    private NetStateRule(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private NetStateRule(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final NetStateRule defaultInstance;
    public static NetStateRule getDefaultInstance() {
      return defaultInstance;
    }

    public NetStateRule getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private NetStateRule(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              caffe.Caffe.Phase value = caffe.Caffe.Phase.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                phase_ = value;
              }
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              minLevel_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              maxLevel_ = input.readInt32();
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                stage_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000008;
              }
              stage_.add(input.readBytes());
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                notStage_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000010;
              }
              notStage_.add(input.readBytes());
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          stage_ = new com.google.protobuf.UnmodifiableLazyStringList(stage_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          notStage_ = new com.google.protobuf.UnmodifiableLazyStringList(notStage_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_NetStateRule_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_NetStateRule_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.NetStateRule.class, caffe.Caffe.NetStateRule.Builder.class);
    }

    public static com.google.protobuf.Parser<NetStateRule> PARSER =
        new com.google.protobuf.AbstractParser<NetStateRule>() {
      public NetStateRule parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new NetStateRule(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<NetStateRule> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional .caffe.Phase phase = 1;
    public static final int PHASE_FIELD_NUMBER = 1;
    private caffe.Caffe.Phase phase_;
    /**
     * <code>optional .caffe.Phase phase = 1;</code>
     *
     * <pre>
     * Set phase to require the NetState have a particular phase (TRAIN or TEST)
     * to meet this rule.
     * </pre>
     */
    public boolean hasPhase() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .caffe.Phase phase = 1;</code>
     *
     * <pre>
     * Set phase to require the NetState have a particular phase (TRAIN or TEST)
     * to meet this rule.
     * </pre>
     */
    public caffe.Caffe.Phase getPhase() {
      return phase_;
    }

    // optional int32 min_level = 2;
    public static final int MIN_LEVEL_FIELD_NUMBER = 2;
    private int minLevel_;
    /**
     * <code>optional int32 min_level = 2;</code>
     *
     * <pre>
     * Set the minimum and/or maximum levels in which the layer should be used.
     * Leave undefined to meet the rule regardless of level.
     * </pre>
     */
    public boolean hasMinLevel() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 min_level = 2;</code>
     *
     * <pre>
     * Set the minimum and/or maximum levels in which the layer should be used.
     * Leave undefined to meet the rule regardless of level.
     * </pre>
     */
    public int getMinLevel() {
      return minLevel_;
    }

    // optional int32 max_level = 3;
    public static final int MAX_LEVEL_FIELD_NUMBER = 3;
    private int maxLevel_;
    /**
     * <code>optional int32 max_level = 3;</code>
     */
    public boolean hasMaxLevel() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 max_level = 3;</code>
     */
    public int getMaxLevel() {
      return maxLevel_;
    }

    // repeated string stage = 4;
    public static final int STAGE_FIELD_NUMBER = 4;
    private com.google.protobuf.LazyStringList stage_;
    /**
     * <code>repeated string stage = 4;</code>
     *
     * <pre>
     * Customizable sets of stages to include or exclude.
     * The net must have ALL of the specified stages and NONE of the specified
     * "not_stage"s to meet the rule.
     * (Use multiple NetStateRules to specify conjunctions of stages.)
     * </pre>
     */
    public java.util.List<java.lang.String>
        getStageList() {
      return stage_;
    }
    /**
     * <code>repeated string stage = 4;</code>
     *
     * <pre>
     * Customizable sets of stages to include or exclude.
     * The net must have ALL of the specified stages and NONE of the specified
     * "not_stage"s to meet the rule.
     * (Use multiple NetStateRules to specify conjunctions of stages.)
     * </pre>
     */
    public int getStageCount() {
      return stage_.size();
    }
    /**
     * <code>repeated string stage = 4;</code>
     *
     * <pre>
     * Customizable sets of stages to include or exclude.
     * The net must have ALL of the specified stages and NONE of the specified
     * "not_stage"s to meet the rule.
     * (Use multiple NetStateRules to specify conjunctions of stages.)
     * </pre>
     */
    public java.lang.String getStage(int index) {
      return stage_.get(index);
    }
    /**
     * <code>repeated string stage = 4;</code>
     *
     * <pre>
     * Customizable sets of stages to include or exclude.
     * The net must have ALL of the specified stages and NONE of the specified
     * "not_stage"s to meet the rule.
     * (Use multiple NetStateRules to specify conjunctions of stages.)
     * </pre>
     */
    public com.google.protobuf.ByteString
        getStageBytes(int index) {
      return stage_.getByteString(index);
    }

    // repeated string not_stage = 5;
    public static final int NOT_STAGE_FIELD_NUMBER = 5;
    private com.google.protobuf.LazyStringList notStage_;
    /**
     * <code>repeated string not_stage = 5;</code>
     */
    public java.util.List<java.lang.String>
        getNotStageList() {
      return notStage_;
    }
    /**
     * <code>repeated string not_stage = 5;</code>
     */
    public int getNotStageCount() {
      return notStage_.size();
    }
    /**
     * <code>repeated string not_stage = 5;</code>
     */
    public java.lang.String getNotStage(int index) {
      return notStage_.get(index);
    }
    /**
     * <code>repeated string not_stage = 5;</code>
     */
    public com.google.protobuf.ByteString
        getNotStageBytes(int index) {
      return notStage_.getByteString(index);
    }

    private void initFields() {
      phase_ = caffe.Caffe.Phase.TRAIN;
      minLevel_ = 0;
      maxLevel_ = 0;
      stage_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      notStage_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, phase_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, minLevel_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, maxLevel_);
      }
      for (int i = 0; i < stage_.size(); i++) {
        output.writeBytes(4, stage_.getByteString(i));
      }
      for (int i = 0; i < notStage_.size(); i++) {
        output.writeBytes(5, notStage_.getByteString(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, phase_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, minLevel_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, maxLevel_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < stage_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(stage_.getByteString(i));
        }
        size += dataSize;
        size += 1 * getStageList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < notStage_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(notStage_.getByteString(i));
        }
        size += dataSize;
        size += 1 * getNotStageList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.NetStateRule parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.NetStateRule parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.NetStateRule parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.NetStateRule parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.NetStateRule parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.NetStateRule parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.NetStateRule parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.NetStateRule parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.NetStateRule parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.NetStateRule parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.NetStateRule prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.NetStateRule}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements caffe.Caffe.NetStateRuleOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_NetStateRule_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_NetStateRule_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.NetStateRule.class, caffe.Caffe.NetStateRule.Builder.class);
      }

      // Construct using caffe.Caffe.NetStateRule.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        phase_ = caffe.Caffe.Phase.TRAIN;
        bitField0_ = (bitField0_ & ~0x00000001);
        minLevel_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        maxLevel_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        stage_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000008);
        notStage_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_NetStateRule_descriptor;
      }

      public caffe.Caffe.NetStateRule getDefaultInstanceForType() {
        return caffe.Caffe.NetStateRule.getDefaultInstance();
      }

      public caffe.Caffe.NetStateRule build() {
        caffe.Caffe.NetStateRule result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.NetStateRule buildPartial() {
        caffe.Caffe.NetStateRule result = new caffe.Caffe.NetStateRule(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.phase_ = phase_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.minLevel_ = minLevel_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.maxLevel_ = maxLevel_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          stage_ = new com.google.protobuf.UnmodifiableLazyStringList(
              stage_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.stage_ = stage_;
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          notStage_ = new com.google.protobuf.UnmodifiableLazyStringList(
              notStage_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.notStage_ = notStage_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.NetStateRule) {
          return mergeFrom((caffe.Caffe.NetStateRule)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.NetStateRule other) {
        if (other == caffe.Caffe.NetStateRule.getDefaultInstance()) return this;
        if (other.hasPhase()) {
          setPhase(other.getPhase());
        }
        if (other.hasMinLevel()) {
          setMinLevel(other.getMinLevel());
        }
        if (other.hasMaxLevel()) {
          setMaxLevel(other.getMaxLevel());
        }
        if (!other.stage_.isEmpty()) {
          if (stage_.isEmpty()) {
            stage_ = other.stage_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureStageIsMutable();
            stage_.addAll(other.stage_);
          }
          onChanged();
        }
        if (!other.notStage_.isEmpty()) {
          if (notStage_.isEmpty()) {
            notStage_ = other.notStage_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureNotStageIsMutable();
            notStage_.addAll(other.notStage_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.NetStateRule parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.NetStateRule) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .caffe.Phase phase = 1;
      private caffe.Caffe.Phase phase_ = caffe.Caffe.Phase.TRAIN;
      /**
       * <code>optional .caffe.Phase phase = 1;</code>
       *
       * <pre>
       * Set phase to require the NetState have a particular phase (TRAIN or TEST)
       * to meet this rule.
       * </pre>
       */
      public boolean hasPhase() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .caffe.Phase phase = 1;</code>
       *
       * <pre>
       * Set phase to require the NetState have a particular phase (TRAIN or TEST)
       * to meet this rule.
       * </pre>
       */
      public caffe.Caffe.Phase getPhase() {
        return phase_;
      }
      /**
       * <code>optional .caffe.Phase phase = 1;</code>
       *
       * <pre>
       * Set phase to require the NetState have a particular phase (TRAIN or TEST)
       * to meet this rule.
       * </pre>
       */
      public Builder setPhase(caffe.Caffe.Phase value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        phase_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .caffe.Phase phase = 1;</code>
       *
       * <pre>
       * Set phase to require the NetState have a particular phase (TRAIN or TEST)
       * to meet this rule.
       * </pre>
       */
      public Builder clearPhase() {
        bitField0_ = (bitField0_ & ~0x00000001);
        phase_ = caffe.Caffe.Phase.TRAIN;
        onChanged();
        return this;
      }

      // optional int32 min_level = 2;
      private int minLevel_ ;
      /**
       * <code>optional int32 min_level = 2;</code>
       *
       * <pre>
       * Set the minimum and/or maximum levels in which the layer should be used.
       * Leave undefined to meet the rule regardless of level.
       * </pre>
       */
      public boolean hasMinLevel() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 min_level = 2;</code>
       *
       * <pre>
       * Set the minimum and/or maximum levels in which the layer should be used.
       * Leave undefined to meet the rule regardless of level.
       * </pre>
       */
      public int getMinLevel() {
        return minLevel_;
      }
      /**
       * <code>optional int32 min_level = 2;</code>
       *
       * <pre>
       * Set the minimum and/or maximum levels in which the layer should be used.
       * Leave undefined to meet the rule regardless of level.
       * </pre>
       */
      public Builder setMinLevel(int value) {
        bitField0_ |= 0x00000002;
        minLevel_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 min_level = 2;</code>
       *
       * <pre>
       * Set the minimum and/or maximum levels in which the layer should be used.
       * Leave undefined to meet the rule regardless of level.
       * </pre>
       */
      public Builder clearMinLevel() {
        bitField0_ = (bitField0_ & ~0x00000002);
        minLevel_ = 0;
        onChanged();
        return this;
      }

      // optional int32 max_level = 3;
      private int maxLevel_ ;
      /**
       * <code>optional int32 max_level = 3;</code>
       */
      public boolean hasMaxLevel() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 max_level = 3;</code>
       */
      public int getMaxLevel() {
        return maxLevel_;
      }
      /**
       * <code>optional int32 max_level = 3;</code>
       */
      public Builder setMaxLevel(int value) {
        bitField0_ |= 0x00000004;
        maxLevel_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 max_level = 3;</code>
       */
      public Builder clearMaxLevel() {
        bitField0_ = (bitField0_ & ~0x00000004);
        maxLevel_ = 0;
        onChanged();
        return this;
      }

      // repeated string stage = 4;
      private com.google.protobuf.LazyStringList stage_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureStageIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          stage_ = new com.google.protobuf.LazyStringArrayList(stage_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated string stage = 4;</code>
       *
       * <pre>
       * Customizable sets of stages to include or exclude.
       * The net must have ALL of the specified stages and NONE of the specified
       * "not_stage"s to meet the rule.
       * (Use multiple NetStateRules to specify conjunctions of stages.)
       * </pre>
       */
      public java.util.List<java.lang.String>
          getStageList() {
        return java.util.Collections.unmodifiableList(stage_);
      }
      /**
       * <code>repeated string stage = 4;</code>
       *
       * <pre>
       * Customizable sets of stages to include or exclude.
       * The net must have ALL of the specified stages and NONE of the specified
       * "not_stage"s to meet the rule.
       * (Use multiple NetStateRules to specify conjunctions of stages.)
       * </pre>
       */
      public int getStageCount() {
        return stage_.size();
      }
      /**
       * <code>repeated string stage = 4;</code>
       *
       * <pre>
       * Customizable sets of stages to include or exclude.
       * The net must have ALL of the specified stages and NONE of the specified
       * "not_stage"s to meet the rule.
       * (Use multiple NetStateRules to specify conjunctions of stages.)
       * </pre>
       */
      public java.lang.String getStage(int index) {
        return stage_.get(index);
      }
      /**
       * <code>repeated string stage = 4;</code>
       *
       * <pre>
       * Customizable sets of stages to include or exclude.
       * The net must have ALL of the specified stages and NONE of the specified
       * "not_stage"s to meet the rule.
       * (Use multiple NetStateRules to specify conjunctions of stages.)
       * </pre>
       */
      public com.google.protobuf.ByteString
          getStageBytes(int index) {
        return stage_.getByteString(index);
      }
      /**
       * <code>repeated string stage = 4;</code>
       *
       * <pre>
       * Customizable sets of stages to include or exclude.
       * The net must have ALL of the specified stages and NONE of the specified
       * "not_stage"s to meet the rule.
       * (Use multiple NetStateRules to specify conjunctions of stages.)
       * </pre>
       */
      public Builder setStage(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureStageIsMutable();
        stage_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string stage = 4;</code>
       *
       * <pre>
       * Customizable sets of stages to include or exclude.
       * The net must have ALL of the specified stages and NONE of the specified
       * "not_stage"s to meet the rule.
       * (Use multiple NetStateRules to specify conjunctions of stages.)
       * </pre>
       */
      public Builder addStage(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureStageIsMutable();
        stage_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string stage = 4;</code>
       *
       * <pre>
       * Customizable sets of stages to include or exclude.
       * The net must have ALL of the specified stages and NONE of the specified
       * "not_stage"s to meet the rule.
       * (Use multiple NetStateRules to specify conjunctions of stages.)
       * </pre>
       */
      public Builder addAllStage(
          java.lang.Iterable<java.lang.String> values) {
        ensureStageIsMutable();
        super.addAll(values, stage_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string stage = 4;</code>
       *
       * <pre>
       * Customizable sets of stages to include or exclude.
       * The net must have ALL of the specified stages and NONE of the specified
       * "not_stage"s to meet the rule.
       * (Use multiple NetStateRules to specify conjunctions of stages.)
       * </pre>
       */
      public Builder clearStage() {
        stage_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string stage = 4;</code>
       *
       * <pre>
       * Customizable sets of stages to include or exclude.
       * The net must have ALL of the specified stages and NONE of the specified
       * "not_stage"s to meet the rule.
       * (Use multiple NetStateRules to specify conjunctions of stages.)
       * </pre>
       */
      public Builder addStageBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureStageIsMutable();
        stage_.add(value);
        onChanged();
        return this;
      }

      // repeated string not_stage = 5;
      private com.google.protobuf.LazyStringList notStage_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureNotStageIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          notStage_ = new com.google.protobuf.LazyStringArrayList(notStage_);
          bitField0_ |= 0x00000010;
         }
      }
      /**
       * <code>repeated string not_stage = 5;</code>
       */
      public java.util.List<java.lang.String>
          getNotStageList() {
        return java.util.Collections.unmodifiableList(notStage_);
      }
      /**
       * <code>repeated string not_stage = 5;</code>
       */
      public int getNotStageCount() {
        return notStage_.size();
      }
      /**
       * <code>repeated string not_stage = 5;</code>
       */
      public java.lang.String getNotStage(int index) {
        return notStage_.get(index);
      }
      /**
       * <code>repeated string not_stage = 5;</code>
       */
      public com.google.protobuf.ByteString
          getNotStageBytes(int index) {
        return notStage_.getByteString(index);
      }
      /**
       * <code>repeated string not_stage = 5;</code>
       */
      public Builder setNotStage(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureNotStageIsMutable();
        notStage_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string not_stage = 5;</code>
       */
      public Builder addNotStage(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureNotStageIsMutable();
        notStage_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string not_stage = 5;</code>
       */
      public Builder addAllNotStage(
          java.lang.Iterable<java.lang.String> values) {
        ensureNotStageIsMutable();
        super.addAll(values, notStage_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string not_stage = 5;</code>
       */
      public Builder clearNotStage() {
        notStage_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string not_stage = 5;</code>
       */
      public Builder addNotStageBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureNotStageIsMutable();
        notStage_.add(value);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.NetStateRule)
    }

    static {
      defaultInstance = new NetStateRule(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.NetStateRule)
  }

  public interface ParamSpecOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional string name = 1;
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * The names of the parameter blobs -- useful for sharing parameters among
     * layers, but never required otherwise.  To share a parameter between two
     * layers, give it a (non-empty) name.
     * </pre>
     */
    boolean hasName();
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * The names of the parameter blobs -- useful for sharing parameters among
     * layers, but never required otherwise.  To share a parameter between two
     * layers, give it a (non-empty) name.
     * </pre>
     */
    java.lang.String getName();
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * The names of the parameter blobs -- useful for sharing parameters among
     * layers, but never required otherwise.  To share a parameter between two
     * layers, give it a (non-empty) name.
     * </pre>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    // optional .caffe.ParamSpec.DimCheckMode share_mode = 2;
    /**
     * <code>optional .caffe.ParamSpec.DimCheckMode share_mode = 2;</code>
     *
     * <pre>
     * Whether to require shared weights to have the same shape, or just the same
     * count -- defaults to STRICT if unspecified.
     * </pre>
     */
    boolean hasShareMode();
    /**
     * <code>optional .caffe.ParamSpec.DimCheckMode share_mode = 2;</code>
     *
     * <pre>
     * Whether to require shared weights to have the same shape, or just the same
     * count -- defaults to STRICT if unspecified.
     * </pre>
     */
    caffe.Caffe.ParamSpec.DimCheckMode getShareMode();

    // optional float lr_mult = 3 [default = 1];
    /**
     * <code>optional float lr_mult = 3 [default = 1];</code>
     *
     * <pre>
     * The multiplier on the global learning rate for this parameter.
     * </pre>
     */
    boolean hasLrMult();
    /**
     * <code>optional float lr_mult = 3 [default = 1];</code>
     *
     * <pre>
     * The multiplier on the global learning rate for this parameter.
     * </pre>
     */
    float getLrMult();

    // optional float decay_mult = 4 [default = 1];
    /**
     * <code>optional float decay_mult = 4 [default = 1];</code>
     *
     * <pre>
     * The multiplier on the global weight decay for this parameter.
     * </pre>
     */
    boolean hasDecayMult();
    /**
     * <code>optional float decay_mult = 4 [default = 1];</code>
     *
     * <pre>
     * The multiplier on the global weight decay for this parameter.
     * </pre>
     */
    float getDecayMult();
  }
  /**
   * Protobuf type {@code caffe.ParamSpec}
   *
   * <pre>
   * Specifies training parameters (multipliers on global learning constants,
   * and the name and other settings used for weight sharing).
   * </pre>
   */
  public static final class ParamSpec extends
      com.google.protobuf.GeneratedMessage
      implements ParamSpecOrBuilder {
    // Use ParamSpec.newBuilder() to construct.
    private ParamSpec(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ParamSpec(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ParamSpec defaultInstance;
    public static ParamSpec getDefaultInstance() {
      return defaultInstance;
    }

    public ParamSpec getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ParamSpec(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              name_ = input.readBytes();
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
              caffe.Caffe.ParamSpec.DimCheckMode value = caffe.Caffe.ParamSpec.DimCheckMode.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(2, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                shareMode_ = value;
              }
              break;
            }
            case 29: {
              bitField0_ |= 0x00000004;
              lrMult_ = input.readFloat();
              break;
            }
            case 37: {
              bitField0_ |= 0x00000008;
              decayMult_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_ParamSpec_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_ParamSpec_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.ParamSpec.class, caffe.Caffe.ParamSpec.Builder.class);
    }

    public static com.google.protobuf.Parser<ParamSpec> PARSER =
        new com.google.protobuf.AbstractParser<ParamSpec>() {
      public ParamSpec parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ParamSpec(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ParamSpec> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code caffe.ParamSpec.DimCheckMode}
     */
    public enum DimCheckMode
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>STRICT = 0;</code>
       *
       * <pre>
       * STRICT (default) requires that num, channels, height, width each match.
       * </pre>
       */
      STRICT(0, 0),
      /**
       * <code>PERMISSIVE = 1;</code>
       *
       * <pre>
       * PERMISSIVE requires only the count (num*channels*height*width) to match.
       * </pre>
       */
      PERMISSIVE(1, 1),
      ;

      /**
       * <code>STRICT = 0;</code>
       *
       * <pre>
       * STRICT (default) requires that num, channels, height, width each match.
       * </pre>
       */
      public static final int STRICT_VALUE = 0;
      /**
       * <code>PERMISSIVE = 1;</code>
       *
       * <pre>
       * PERMISSIVE requires only the count (num*channels*height*width) to match.
       * </pre>
       */
      public static final int PERMISSIVE_VALUE = 1;


      public final int getNumber() { return value; }

      public static DimCheckMode valueOf(int value) {
        switch (value) {
          case 0: return STRICT;
          case 1: return PERMISSIVE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<DimCheckMode>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<DimCheckMode>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<DimCheckMode>() {
              public DimCheckMode findValueByNumber(int number) {
                return DimCheckMode.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return caffe.Caffe.ParamSpec.getDescriptor().getEnumTypes().get(0);
      }

      private static final DimCheckMode[] VALUES = values();

      public static DimCheckMode valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private DimCheckMode(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:caffe.ParamSpec.DimCheckMode)
    }

    private int bitField0_;
    // optional string name = 1;
    public static final int NAME_FIELD_NUMBER = 1;
    private java.lang.Object name_;
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * The names of the parameter blobs -- useful for sharing parameters among
     * layers, but never required otherwise.  To share a parameter between two
     * layers, give it a (non-empty) name.
     * </pre>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * The names of the parameter blobs -- useful for sharing parameters among
     * layers, but never required otherwise.  To share a parameter between two
     * layers, give it a (non-empty) name.
     * </pre>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * The names of the parameter blobs -- useful for sharing parameters among
     * layers, but never required otherwise.  To share a parameter between two
     * layers, give it a (non-empty) name.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional .caffe.ParamSpec.DimCheckMode share_mode = 2;
    public static final int SHARE_MODE_FIELD_NUMBER = 2;
    private caffe.Caffe.ParamSpec.DimCheckMode shareMode_;
    /**
     * <code>optional .caffe.ParamSpec.DimCheckMode share_mode = 2;</code>
     *
     * <pre>
     * Whether to require shared weights to have the same shape, or just the same
     * count -- defaults to STRICT if unspecified.
     * </pre>
     */
    public boolean hasShareMode() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .caffe.ParamSpec.DimCheckMode share_mode = 2;</code>
     *
     * <pre>
     * Whether to require shared weights to have the same shape, or just the same
     * count -- defaults to STRICT if unspecified.
     * </pre>
     */
    public caffe.Caffe.ParamSpec.DimCheckMode getShareMode() {
      return shareMode_;
    }

    // optional float lr_mult = 3 [default = 1];
    public static final int LR_MULT_FIELD_NUMBER = 3;
    private float lrMult_;
    /**
     * <code>optional float lr_mult = 3 [default = 1];</code>
     *
     * <pre>
     * The multiplier on the global learning rate for this parameter.
     * </pre>
     */
    public boolean hasLrMult() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional float lr_mult = 3 [default = 1];</code>
     *
     * <pre>
     * The multiplier on the global learning rate for this parameter.
     * </pre>
     */
    public float getLrMult() {
      return lrMult_;
    }

    // optional float decay_mult = 4 [default = 1];
    public static final int DECAY_MULT_FIELD_NUMBER = 4;
    private float decayMult_;
    /**
     * <code>optional float decay_mult = 4 [default = 1];</code>
     *
     * <pre>
     * The multiplier on the global weight decay for this parameter.
     * </pre>
     */
    public boolean hasDecayMult() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional float decay_mult = 4 [default = 1];</code>
     *
     * <pre>
     * The multiplier on the global weight decay for this parameter.
     * </pre>
     */
    public float getDecayMult() {
      return decayMult_;
    }

    private void initFields() {
      name_ = "";
      shareMode_ = caffe.Caffe.ParamSpec.DimCheckMode.STRICT;
      lrMult_ = 1F;
      decayMult_ = 1F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getNameBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(2, shareMode_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFloat(3, lrMult_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeFloat(4, decayMult_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getNameBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, shareMode_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(3, lrMult_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(4, decayMult_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.ParamSpec parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.ParamSpec parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.ParamSpec parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.ParamSpec parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.ParamSpec parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.ParamSpec parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.ParamSpec parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.ParamSpec parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.ParamSpec parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.ParamSpec parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.ParamSpec prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.ParamSpec}
     *
     * <pre>
     * Specifies training parameters (multipliers on global learning constants,
     * and the name and other settings used for weight sharing).
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements caffe.Caffe.ParamSpecOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_ParamSpec_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_ParamSpec_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.ParamSpec.class, caffe.Caffe.ParamSpec.Builder.class);
      }

      // Construct using caffe.Caffe.ParamSpec.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        shareMode_ = caffe.Caffe.ParamSpec.DimCheckMode.STRICT;
        bitField0_ = (bitField0_ & ~0x00000002);
        lrMult_ = 1F;
        bitField0_ = (bitField0_ & ~0x00000004);
        decayMult_ = 1F;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_ParamSpec_descriptor;
      }

      public caffe.Caffe.ParamSpec getDefaultInstanceForType() {
        return caffe.Caffe.ParamSpec.getDefaultInstance();
      }

      public caffe.Caffe.ParamSpec build() {
        caffe.Caffe.ParamSpec result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.ParamSpec buildPartial() {
        caffe.Caffe.ParamSpec result = new caffe.Caffe.ParamSpec(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.name_ = name_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.shareMode_ = shareMode_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.lrMult_ = lrMult_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.decayMult_ = decayMult_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.ParamSpec) {
          return mergeFrom((caffe.Caffe.ParamSpec)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.ParamSpec other) {
        if (other == caffe.Caffe.ParamSpec.getDefaultInstance()) return this;
        if (other.hasName()) {
          bitField0_ |= 0x00000001;
          name_ = other.name_;
          onChanged();
        }
        if (other.hasShareMode()) {
          setShareMode(other.getShareMode());
        }
        if (other.hasLrMult()) {
          setLrMult(other.getLrMult());
        }
        if (other.hasDecayMult()) {
          setDecayMult(other.getDecayMult());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.ParamSpec parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.ParamSpec) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional string name = 1;
      private java.lang.Object name_ = "";
      /**
       * <code>optional string name = 1;</code>
       *
       * <pre>
       * The names of the parameter blobs -- useful for sharing parameters among
       * layers, but never required otherwise.  To share a parameter between two
       * layers, give it a (non-empty) name.
       * </pre>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string name = 1;</code>
       *
       * <pre>
       * The names of the parameter blobs -- useful for sharing parameters among
       * layers, but never required otherwise.  To share a parameter between two
       * layers, give it a (non-empty) name.
       * </pre>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string name = 1;</code>
       *
       * <pre>
       * The names of the parameter blobs -- useful for sharing parameters among
       * layers, but never required otherwise.  To share a parameter between two
       * layers, give it a (non-empty) name.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string name = 1;</code>
       *
       * <pre>
       * The names of the parameter blobs -- useful for sharing parameters among
       * layers, but never required otherwise.  To share a parameter between two
       * layers, give it a (non-empty) name.
       * </pre>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 1;</code>
       *
       * <pre>
       * The names of the parameter blobs -- useful for sharing parameters among
       * layers, but never required otherwise.  To share a parameter between two
       * layers, give it a (non-empty) name.
       * </pre>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 1;</code>
       *
       * <pre>
       * The names of the parameter blobs -- useful for sharing parameters among
       * layers, but never required otherwise.  To share a parameter between two
       * layers, give it a (non-empty) name.
       * </pre>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }

      // optional .caffe.ParamSpec.DimCheckMode share_mode = 2;
      private caffe.Caffe.ParamSpec.DimCheckMode shareMode_ = caffe.Caffe.ParamSpec.DimCheckMode.STRICT;
      /**
       * <code>optional .caffe.ParamSpec.DimCheckMode share_mode = 2;</code>
       *
       * <pre>
       * Whether to require shared weights to have the same shape, or just the same
       * count -- defaults to STRICT if unspecified.
       * </pre>
       */
      public boolean hasShareMode() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .caffe.ParamSpec.DimCheckMode share_mode = 2;</code>
       *
       * <pre>
       * Whether to require shared weights to have the same shape, or just the same
       * count -- defaults to STRICT if unspecified.
       * </pre>
       */
      public caffe.Caffe.ParamSpec.DimCheckMode getShareMode() {
        return shareMode_;
      }
      /**
       * <code>optional .caffe.ParamSpec.DimCheckMode share_mode = 2;</code>
       *
       * <pre>
       * Whether to require shared weights to have the same shape, or just the same
       * count -- defaults to STRICT if unspecified.
       * </pre>
       */
      public Builder setShareMode(caffe.Caffe.ParamSpec.DimCheckMode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        shareMode_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .caffe.ParamSpec.DimCheckMode share_mode = 2;</code>
       *
       * <pre>
       * Whether to require shared weights to have the same shape, or just the same
       * count -- defaults to STRICT if unspecified.
       * </pre>
       */
      public Builder clearShareMode() {
        bitField0_ = (bitField0_ & ~0x00000002);
        shareMode_ = caffe.Caffe.ParamSpec.DimCheckMode.STRICT;
        onChanged();
        return this;
      }

      // optional float lr_mult = 3 [default = 1];
      private float lrMult_ = 1F;
      /**
       * <code>optional float lr_mult = 3 [default = 1];</code>
       *
       * <pre>
       * The multiplier on the global learning rate for this parameter.
       * </pre>
       */
      public boolean hasLrMult() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional float lr_mult = 3 [default = 1];</code>
       *
       * <pre>
       * The multiplier on the global learning rate for this parameter.
       * </pre>
       */
      public float getLrMult() {
        return lrMult_;
      }
      /**
       * <code>optional float lr_mult = 3 [default = 1];</code>
       *
       * <pre>
       * The multiplier on the global learning rate for this parameter.
       * </pre>
       */
      public Builder setLrMult(float value) {
        bitField0_ |= 0x00000004;
        lrMult_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float lr_mult = 3 [default = 1];</code>
       *
       * <pre>
       * The multiplier on the global learning rate for this parameter.
       * </pre>
       */
      public Builder clearLrMult() {
        bitField0_ = (bitField0_ & ~0x00000004);
        lrMult_ = 1F;
        onChanged();
        return this;
      }

      // optional float decay_mult = 4 [default = 1];
      private float decayMult_ = 1F;
      /**
       * <code>optional float decay_mult = 4 [default = 1];</code>
       *
       * <pre>
       * The multiplier on the global weight decay for this parameter.
       * </pre>
       */
      public boolean hasDecayMult() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional float decay_mult = 4 [default = 1];</code>
       *
       * <pre>
       * The multiplier on the global weight decay for this parameter.
       * </pre>
       */
      public float getDecayMult() {
        return decayMult_;
      }
      /**
       * <code>optional float decay_mult = 4 [default = 1];</code>
       *
       * <pre>
       * The multiplier on the global weight decay for this parameter.
       * </pre>
       */
      public Builder setDecayMult(float value) {
        bitField0_ |= 0x00000008;
        decayMult_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float decay_mult = 4 [default = 1];</code>
       *
       * <pre>
       * The multiplier on the global weight decay for this parameter.
       * </pre>
       */
      public Builder clearDecayMult() {
        bitField0_ = (bitField0_ & ~0x00000008);
        decayMult_ = 1F;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.ParamSpec)
    }

    static {
      defaultInstance = new ParamSpec(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.ParamSpec)
  }

  public interface LayerParameterOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional string name = 1;
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * the layer name
     * </pre>
     */
    boolean hasName();
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * the layer name
     * </pre>
     */
    java.lang.String getName();
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * the layer name
     * </pre>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    // optional string type = 2;
    /**
     * <code>optional string type = 2;</code>
     *
     * <pre>
     * the layer type
     * </pre>
     */
    boolean hasType();
    /**
     * <code>optional string type = 2;</code>
     *
     * <pre>
     * the layer type
     * </pre>
     */
    java.lang.String getType();
    /**
     * <code>optional string type = 2;</code>
     *
     * <pre>
     * the layer type
     * </pre>
     */
    com.google.protobuf.ByteString
        getTypeBytes();

    // repeated string bottom = 3;
    /**
     * <code>repeated string bottom = 3;</code>
     *
     * <pre>
     * the name of each bottom blob
     * </pre>
     */
    java.util.List<java.lang.String>
    getBottomList();
    /**
     * <code>repeated string bottom = 3;</code>
     *
     * <pre>
     * the name of each bottom blob
     * </pre>
     */
    int getBottomCount();
    /**
     * <code>repeated string bottom = 3;</code>
     *
     * <pre>
     * the name of each bottom blob
     * </pre>
     */
    java.lang.String getBottom(int index);
    /**
     * <code>repeated string bottom = 3;</code>
     *
     * <pre>
     * the name of each bottom blob
     * </pre>
     */
    com.google.protobuf.ByteString
        getBottomBytes(int index);

    // repeated string top = 4;
    /**
     * <code>repeated string top = 4;</code>
     *
     * <pre>
     * the name of each top blob
     * </pre>
     */
    java.util.List<java.lang.String>
    getTopList();
    /**
     * <code>repeated string top = 4;</code>
     *
     * <pre>
     * the name of each top blob
     * </pre>
     */
    int getTopCount();
    /**
     * <code>repeated string top = 4;</code>
     *
     * <pre>
     * the name of each top blob
     * </pre>
     */
    java.lang.String getTop(int index);
    /**
     * <code>repeated string top = 4;</code>
     *
     * <pre>
     * the name of each top blob
     * </pre>
     */
    com.google.protobuf.ByteString
        getTopBytes(int index);

    // optional .caffe.Phase phase = 10;
    /**
     * <code>optional .caffe.Phase phase = 10;</code>
     *
     * <pre>
     * The train / test phase for computation.
     * </pre>
     */
    boolean hasPhase();
    /**
     * <code>optional .caffe.Phase phase = 10;</code>
     *
     * <pre>
     * The train / test phase for computation.
     * </pre>
     */
    caffe.Caffe.Phase getPhase();

    // repeated float loss_weight = 5;
    /**
     * <code>repeated float loss_weight = 5;</code>
     *
     * <pre>
     * The amount of weight to assign each top blob in the objective.
     * Each layer assigns a default value, usually of either 0 or 1,
     * to each top blob.
     * </pre>
     */
    java.util.List<java.lang.Float> getLossWeightList();
    /**
     * <code>repeated float loss_weight = 5;</code>
     *
     * <pre>
     * The amount of weight to assign each top blob in the objective.
     * Each layer assigns a default value, usually of either 0 or 1,
     * to each top blob.
     * </pre>
     */
    int getLossWeightCount();
    /**
     * <code>repeated float loss_weight = 5;</code>
     *
     * <pre>
     * The amount of weight to assign each top blob in the objective.
     * Each layer assigns a default value, usually of either 0 or 1,
     * to each top blob.
     * </pre>
     */
    float getLossWeight(int index);

    // repeated .caffe.ParamSpec param = 6;
    /**
     * <code>repeated .caffe.ParamSpec param = 6;</code>
     *
     * <pre>
     * Specifies training parameters (multipliers on global learning constants,
     * and the name and other settings used for weight sharing).
     * </pre>
     */
    java.util.List<caffe.Caffe.ParamSpec> 
        getParamList();
    /**
     * <code>repeated .caffe.ParamSpec param = 6;</code>
     *
     * <pre>
     * Specifies training parameters (multipliers on global learning constants,
     * and the name and other settings used for weight sharing).
     * </pre>
     */
    caffe.Caffe.ParamSpec getParam(int index);
    /**
     * <code>repeated .caffe.ParamSpec param = 6;</code>
     *
     * <pre>
     * Specifies training parameters (multipliers on global learning constants,
     * and the name and other settings used for weight sharing).
     * </pre>
     */
    int getParamCount();
    /**
     * <code>repeated .caffe.ParamSpec param = 6;</code>
     *
     * <pre>
     * Specifies training parameters (multipliers on global learning constants,
     * and the name and other settings used for weight sharing).
     * </pre>
     */
    java.util.List<? extends caffe.Caffe.ParamSpecOrBuilder> 
        getParamOrBuilderList();
    /**
     * <code>repeated .caffe.ParamSpec param = 6;</code>
     *
     * <pre>
     * Specifies training parameters (multipliers on global learning constants,
     * and the name and other settings used for weight sharing).
     * </pre>
     */
    caffe.Caffe.ParamSpecOrBuilder getParamOrBuilder(
        int index);

    // repeated .caffe.BlobProto blobs = 7;
    /**
     * <code>repeated .caffe.BlobProto blobs = 7;</code>
     *
     * <pre>
     * The blobs containing the numeric parameters of the layer.
     * </pre>
     */
    java.util.List<caffe.Caffe.BlobProto> 
        getBlobsList();
    /**
     * <code>repeated .caffe.BlobProto blobs = 7;</code>
     *
     * <pre>
     * The blobs containing the numeric parameters of the layer.
     * </pre>
     */
    caffe.Caffe.BlobProto getBlobs(int index);
    /**
     * <code>repeated .caffe.BlobProto blobs = 7;</code>
     *
     * <pre>
     * The blobs containing the numeric parameters of the layer.
     * </pre>
     */
    int getBlobsCount();
    /**
     * <code>repeated .caffe.BlobProto blobs = 7;</code>
     *
     * <pre>
     * The blobs containing the numeric parameters of the layer.
     * </pre>
     */
    java.util.List<? extends caffe.Caffe.BlobProtoOrBuilder> 
        getBlobsOrBuilderList();
    /**
     * <code>repeated .caffe.BlobProto blobs = 7;</code>
     *
     * <pre>
     * The blobs containing the numeric parameters of the layer.
     * </pre>
     */
    caffe.Caffe.BlobProtoOrBuilder getBlobsOrBuilder(
        int index);

    // repeated bool propagate_down = 11;
    /**
     * <code>repeated bool propagate_down = 11;</code>
     *
     * <pre>
     * Specifies whether to backpropagate to each bottom. If unspecified,
     * Caffe will automatically infer whether each input needs backpropagation
     * to compute parameter gradients. If set to true for some inputs,
     * backpropagation to those inputs is forced; if set false for some inputs,
     * backpropagation to those inputs is skipped.
     *
     * The size must be either 0 or equal to the number of bottoms.
     * </pre>
     */
    java.util.List<java.lang.Boolean> getPropagateDownList();
    /**
     * <code>repeated bool propagate_down = 11;</code>
     *
     * <pre>
     * Specifies whether to backpropagate to each bottom. If unspecified,
     * Caffe will automatically infer whether each input needs backpropagation
     * to compute parameter gradients. If set to true for some inputs,
     * backpropagation to those inputs is forced; if set false for some inputs,
     * backpropagation to those inputs is skipped.
     *
     * The size must be either 0 or equal to the number of bottoms.
     * </pre>
     */
    int getPropagateDownCount();
    /**
     * <code>repeated bool propagate_down = 11;</code>
     *
     * <pre>
     * Specifies whether to backpropagate to each bottom. If unspecified,
     * Caffe will automatically infer whether each input needs backpropagation
     * to compute parameter gradients. If set to true for some inputs,
     * backpropagation to those inputs is forced; if set false for some inputs,
     * backpropagation to those inputs is skipped.
     *
     * The size must be either 0 or equal to the number of bottoms.
     * </pre>
     */
    boolean getPropagateDown(int index);

    // repeated .caffe.NetStateRule include = 8;
    /**
     * <code>repeated .caffe.NetStateRule include = 8;</code>
     *
     * <pre>
     * Rules controlling whether and when a layer is included in the network,
     * based on the current NetState.  You may specify a non-zero number of rules
     * to include OR exclude, but not both.  If no include or exclude rules are
     * specified, the layer is always included.  If the current NetState meets
     * ANY (i.e., one or more) of the specified rules, the layer is
     * included/excluded.
     * </pre>
     */
    java.util.List<caffe.Caffe.NetStateRule> 
        getIncludeList();
    /**
     * <code>repeated .caffe.NetStateRule include = 8;</code>
     *
     * <pre>
     * Rules controlling whether and when a layer is included in the network,
     * based on the current NetState.  You may specify a non-zero number of rules
     * to include OR exclude, but not both.  If no include or exclude rules are
     * specified, the layer is always included.  If the current NetState meets
     * ANY (i.e., one or more) of the specified rules, the layer is
     * included/excluded.
     * </pre>
     */
    caffe.Caffe.NetStateRule getInclude(int index);
    /**
     * <code>repeated .caffe.NetStateRule include = 8;</code>
     *
     * <pre>
     * Rules controlling whether and when a layer is included in the network,
     * based on the current NetState.  You may specify a non-zero number of rules
     * to include OR exclude, but not both.  If no include or exclude rules are
     * specified, the layer is always included.  If the current NetState meets
     * ANY (i.e., one or more) of the specified rules, the layer is
     * included/excluded.
     * </pre>
     */
    int getIncludeCount();
    /**
     * <code>repeated .caffe.NetStateRule include = 8;</code>
     *
     * <pre>
     * Rules controlling whether and when a layer is included in the network,
     * based on the current NetState.  You may specify a non-zero number of rules
     * to include OR exclude, but not both.  If no include or exclude rules are
     * specified, the layer is always included.  If the current NetState meets
     * ANY (i.e., one or more) of the specified rules, the layer is
     * included/excluded.
     * </pre>
     */
    java.util.List<? extends caffe.Caffe.NetStateRuleOrBuilder> 
        getIncludeOrBuilderList();
    /**
     * <code>repeated .caffe.NetStateRule include = 8;</code>
     *
     * <pre>
     * Rules controlling whether and when a layer is included in the network,
     * based on the current NetState.  You may specify a non-zero number of rules
     * to include OR exclude, but not both.  If no include or exclude rules are
     * specified, the layer is always included.  If the current NetState meets
     * ANY (i.e., one or more) of the specified rules, the layer is
     * included/excluded.
     * </pre>
     */
    caffe.Caffe.NetStateRuleOrBuilder getIncludeOrBuilder(
        int index);

    // repeated .caffe.NetStateRule exclude = 9;
    /**
     * <code>repeated .caffe.NetStateRule exclude = 9;</code>
     */
    java.util.List<caffe.Caffe.NetStateRule> 
        getExcludeList();
    /**
     * <code>repeated .caffe.NetStateRule exclude = 9;</code>
     */
    caffe.Caffe.NetStateRule getExclude(int index);
    /**
     * <code>repeated .caffe.NetStateRule exclude = 9;</code>
     */
    int getExcludeCount();
    /**
     * <code>repeated .caffe.NetStateRule exclude = 9;</code>
     */
    java.util.List<? extends caffe.Caffe.NetStateRuleOrBuilder> 
        getExcludeOrBuilderList();
    /**
     * <code>repeated .caffe.NetStateRule exclude = 9;</code>
     */
    caffe.Caffe.NetStateRuleOrBuilder getExcludeOrBuilder(
        int index);

    // optional .caffe.TransformationParameter transform_param = 100;
    /**
     * <code>optional .caffe.TransformationParameter transform_param = 100;</code>
     *
     * <pre>
     * Parameters for data pre-processing.
     * </pre>
     */
    boolean hasTransformParam();
    /**
     * <code>optional .caffe.TransformationParameter transform_param = 100;</code>
     *
     * <pre>
     * Parameters for data pre-processing.
     * </pre>
     */
    caffe.Caffe.TransformationParameter getTransformParam();
    /**
     * <code>optional .caffe.TransformationParameter transform_param = 100;</code>
     *
     * <pre>
     * Parameters for data pre-processing.
     * </pre>
     */
    caffe.Caffe.TransformationParameterOrBuilder getTransformParamOrBuilder();

    // optional .caffe.LossParameter loss_param = 101;
    /**
     * <code>optional .caffe.LossParameter loss_param = 101;</code>
     *
     * <pre>
     * Parameters shared by loss layers.
     * </pre>
     */
    boolean hasLossParam();
    /**
     * <code>optional .caffe.LossParameter loss_param = 101;</code>
     *
     * <pre>
     * Parameters shared by loss layers.
     * </pre>
     */
    caffe.Caffe.LossParameter getLossParam();
    /**
     * <code>optional .caffe.LossParameter loss_param = 101;</code>
     *
     * <pre>
     * Parameters shared by loss layers.
     * </pre>
     */
    caffe.Caffe.LossParameterOrBuilder getLossParamOrBuilder();

    // optional .caffe.AccuracyParameter accuracy_param = 102;
    /**
     * <code>optional .caffe.AccuracyParameter accuracy_param = 102;</code>
     *
     * <pre>
     * Layer type-specific parameters.
     *
     * Note: certain layers may have more than one computational engine
     * for their implementation. These layers include an Engine type and
     * engine parameter for selecting the implementation.
     * The default for the engine is set by the ENGINE switch at compile-time.
     * </pre>
     */
    boolean hasAccuracyParam();
    /**
     * <code>optional .caffe.AccuracyParameter accuracy_param = 102;</code>
     *
     * <pre>
     * Layer type-specific parameters.
     *
     * Note: certain layers may have more than one computational engine
     * for their implementation. These layers include an Engine type and
     * engine parameter for selecting the implementation.
     * The default for the engine is set by the ENGINE switch at compile-time.
     * </pre>
     */
    caffe.Caffe.AccuracyParameter getAccuracyParam();
    /**
     * <code>optional .caffe.AccuracyParameter accuracy_param = 102;</code>
     *
     * <pre>
     * Layer type-specific parameters.
     *
     * Note: certain layers may have more than one computational engine
     * for their implementation. These layers include an Engine type and
     * engine parameter for selecting the implementation.
     * The default for the engine is set by the ENGINE switch at compile-time.
     * </pre>
     */
    caffe.Caffe.AccuracyParameterOrBuilder getAccuracyParamOrBuilder();

    // optional .caffe.ArgMaxParameter argmax_param = 103;
    /**
     * <code>optional .caffe.ArgMaxParameter argmax_param = 103;</code>
     */
    boolean hasArgmaxParam();
    /**
     * <code>optional .caffe.ArgMaxParameter argmax_param = 103;</code>
     */
    caffe.Caffe.ArgMaxParameter getArgmaxParam();
    /**
     * <code>optional .caffe.ArgMaxParameter argmax_param = 103;</code>
     */
    caffe.Caffe.ArgMaxParameterOrBuilder getArgmaxParamOrBuilder();

    // optional .caffe.BatchNormParameter batch_norm_param = 139;
    /**
     * <code>optional .caffe.BatchNormParameter batch_norm_param = 139;</code>
     */
    boolean hasBatchNormParam();
    /**
     * <code>optional .caffe.BatchNormParameter batch_norm_param = 139;</code>
     */
    caffe.Caffe.BatchNormParameter getBatchNormParam();
    /**
     * <code>optional .caffe.BatchNormParameter batch_norm_param = 139;</code>
     */
    caffe.Caffe.BatchNormParameterOrBuilder getBatchNormParamOrBuilder();

    // optional .caffe.BiasParameter bias_param = 141;
    /**
     * <code>optional .caffe.BiasParameter bias_param = 141;</code>
     */
    boolean hasBiasParam();
    /**
     * <code>optional .caffe.BiasParameter bias_param = 141;</code>
     */
    caffe.Caffe.BiasParameter getBiasParam();
    /**
     * <code>optional .caffe.BiasParameter bias_param = 141;</code>
     */
    caffe.Caffe.BiasParameterOrBuilder getBiasParamOrBuilder();

    // optional .caffe.ConcatParameter concat_param = 104;
    /**
     * <code>optional .caffe.ConcatParameter concat_param = 104;</code>
     */
    boolean hasConcatParam();
    /**
     * <code>optional .caffe.ConcatParameter concat_param = 104;</code>
     */
    caffe.Caffe.ConcatParameter getConcatParam();
    /**
     * <code>optional .caffe.ConcatParameter concat_param = 104;</code>
     */
    caffe.Caffe.ConcatParameterOrBuilder getConcatParamOrBuilder();

    // optional .caffe.ContrastiveLossParameter contrastive_loss_param = 105;
    /**
     * <code>optional .caffe.ContrastiveLossParameter contrastive_loss_param = 105;</code>
     */
    boolean hasContrastiveLossParam();
    /**
     * <code>optional .caffe.ContrastiveLossParameter contrastive_loss_param = 105;</code>
     */
    caffe.Caffe.ContrastiveLossParameter getContrastiveLossParam();
    /**
     * <code>optional .caffe.ContrastiveLossParameter contrastive_loss_param = 105;</code>
     */
    caffe.Caffe.ContrastiveLossParameterOrBuilder getContrastiveLossParamOrBuilder();

    // optional .caffe.ConvolutionParameter convolution_param = 106;
    /**
     * <code>optional .caffe.ConvolutionParameter convolution_param = 106;</code>
     */
    boolean hasConvolutionParam();
    /**
     * <code>optional .caffe.ConvolutionParameter convolution_param = 106;</code>
     */
    caffe.Caffe.ConvolutionParameter getConvolutionParam();
    /**
     * <code>optional .caffe.ConvolutionParameter convolution_param = 106;</code>
     */
    caffe.Caffe.ConvolutionParameterOrBuilder getConvolutionParamOrBuilder();

    // optional .caffe.CropParameter crop_param = 144;
    /**
     * <code>optional .caffe.CropParameter crop_param = 144;</code>
     */
    boolean hasCropParam();
    /**
     * <code>optional .caffe.CropParameter crop_param = 144;</code>
     */
    caffe.Caffe.CropParameter getCropParam();
    /**
     * <code>optional .caffe.CropParameter crop_param = 144;</code>
     */
    caffe.Caffe.CropParameterOrBuilder getCropParamOrBuilder();

    // optional .caffe.DataParameter data_param = 107;
    /**
     * <code>optional .caffe.DataParameter data_param = 107;</code>
     */
    boolean hasDataParam();
    /**
     * <code>optional .caffe.DataParameter data_param = 107;</code>
     */
    caffe.Caffe.DataParameter getDataParam();
    /**
     * <code>optional .caffe.DataParameter data_param = 107;</code>
     */
    caffe.Caffe.DataParameterOrBuilder getDataParamOrBuilder();

    // optional .caffe.DropoutParameter dropout_param = 108;
    /**
     * <code>optional .caffe.DropoutParameter dropout_param = 108;</code>
     */
    boolean hasDropoutParam();
    /**
     * <code>optional .caffe.DropoutParameter dropout_param = 108;</code>
     */
    caffe.Caffe.DropoutParameter getDropoutParam();
    /**
     * <code>optional .caffe.DropoutParameter dropout_param = 108;</code>
     */
    caffe.Caffe.DropoutParameterOrBuilder getDropoutParamOrBuilder();

    // optional .caffe.DummyDataParameter dummy_data_param = 109;
    /**
     * <code>optional .caffe.DummyDataParameter dummy_data_param = 109;</code>
     */
    boolean hasDummyDataParam();
    /**
     * <code>optional .caffe.DummyDataParameter dummy_data_param = 109;</code>
     */
    caffe.Caffe.DummyDataParameter getDummyDataParam();
    /**
     * <code>optional .caffe.DummyDataParameter dummy_data_param = 109;</code>
     */
    caffe.Caffe.DummyDataParameterOrBuilder getDummyDataParamOrBuilder();

    // optional .caffe.EltwiseParameter eltwise_param = 110;
    /**
     * <code>optional .caffe.EltwiseParameter eltwise_param = 110;</code>
     */
    boolean hasEltwiseParam();
    /**
     * <code>optional .caffe.EltwiseParameter eltwise_param = 110;</code>
     */
    caffe.Caffe.EltwiseParameter getEltwiseParam();
    /**
     * <code>optional .caffe.EltwiseParameter eltwise_param = 110;</code>
     */
    caffe.Caffe.EltwiseParameterOrBuilder getEltwiseParamOrBuilder();

    // optional .caffe.ELUParameter elu_param = 140;
    /**
     * <code>optional .caffe.ELUParameter elu_param = 140;</code>
     */
    boolean hasEluParam();
    /**
     * <code>optional .caffe.ELUParameter elu_param = 140;</code>
     */
    caffe.Caffe.ELUParameter getEluParam();
    /**
     * <code>optional .caffe.ELUParameter elu_param = 140;</code>
     */
    caffe.Caffe.ELUParameterOrBuilder getEluParamOrBuilder();

    // optional .caffe.EmbedParameter embed_param = 137;
    /**
     * <code>optional .caffe.EmbedParameter embed_param = 137;</code>
     */
    boolean hasEmbedParam();
    /**
     * <code>optional .caffe.EmbedParameter embed_param = 137;</code>
     */
    caffe.Caffe.EmbedParameter getEmbedParam();
    /**
     * <code>optional .caffe.EmbedParameter embed_param = 137;</code>
     */
    caffe.Caffe.EmbedParameterOrBuilder getEmbedParamOrBuilder();

    // optional .caffe.ExpParameter exp_param = 111;
    /**
     * <code>optional .caffe.ExpParameter exp_param = 111;</code>
     */
    boolean hasExpParam();
    /**
     * <code>optional .caffe.ExpParameter exp_param = 111;</code>
     */
    caffe.Caffe.ExpParameter getExpParam();
    /**
     * <code>optional .caffe.ExpParameter exp_param = 111;</code>
     */
    caffe.Caffe.ExpParameterOrBuilder getExpParamOrBuilder();

    // optional .caffe.FlattenParameter flatten_param = 135;
    /**
     * <code>optional .caffe.FlattenParameter flatten_param = 135;</code>
     */
    boolean hasFlattenParam();
    /**
     * <code>optional .caffe.FlattenParameter flatten_param = 135;</code>
     */
    caffe.Caffe.FlattenParameter getFlattenParam();
    /**
     * <code>optional .caffe.FlattenParameter flatten_param = 135;</code>
     */
    caffe.Caffe.FlattenParameterOrBuilder getFlattenParamOrBuilder();

    // optional .caffe.HDF5DataParameter hdf5_data_param = 112;
    /**
     * <code>optional .caffe.HDF5DataParameter hdf5_data_param = 112;</code>
     */
    boolean hasHdf5DataParam();
    /**
     * <code>optional .caffe.HDF5DataParameter hdf5_data_param = 112;</code>
     */
    caffe.Caffe.HDF5DataParameter getHdf5DataParam();
    /**
     * <code>optional .caffe.HDF5DataParameter hdf5_data_param = 112;</code>
     */
    caffe.Caffe.HDF5DataParameterOrBuilder getHdf5DataParamOrBuilder();

    // optional .caffe.HDF5OutputParameter hdf5_output_param = 113;
    /**
     * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 113;</code>
     */
    boolean hasHdf5OutputParam();
    /**
     * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 113;</code>
     */
    caffe.Caffe.HDF5OutputParameter getHdf5OutputParam();
    /**
     * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 113;</code>
     */
    caffe.Caffe.HDF5OutputParameterOrBuilder getHdf5OutputParamOrBuilder();

    // optional .caffe.HingeLossParameter hinge_loss_param = 114;
    /**
     * <code>optional .caffe.HingeLossParameter hinge_loss_param = 114;</code>
     */
    boolean hasHingeLossParam();
    /**
     * <code>optional .caffe.HingeLossParameter hinge_loss_param = 114;</code>
     */
    caffe.Caffe.HingeLossParameter getHingeLossParam();
    /**
     * <code>optional .caffe.HingeLossParameter hinge_loss_param = 114;</code>
     */
    caffe.Caffe.HingeLossParameterOrBuilder getHingeLossParamOrBuilder();

    // optional .caffe.ImageDataParameter image_data_param = 115;
    /**
     * <code>optional .caffe.ImageDataParameter image_data_param = 115;</code>
     */
    boolean hasImageDataParam();
    /**
     * <code>optional .caffe.ImageDataParameter image_data_param = 115;</code>
     */
    caffe.Caffe.ImageDataParameter getImageDataParam();
    /**
     * <code>optional .caffe.ImageDataParameter image_data_param = 115;</code>
     */
    caffe.Caffe.ImageDataParameterOrBuilder getImageDataParamOrBuilder();

    // optional .caffe.InfogainLossParameter infogain_loss_param = 116;
    /**
     * <code>optional .caffe.InfogainLossParameter infogain_loss_param = 116;</code>
     */
    boolean hasInfogainLossParam();
    /**
     * <code>optional .caffe.InfogainLossParameter infogain_loss_param = 116;</code>
     */
    caffe.Caffe.InfogainLossParameter getInfogainLossParam();
    /**
     * <code>optional .caffe.InfogainLossParameter infogain_loss_param = 116;</code>
     */
    caffe.Caffe.InfogainLossParameterOrBuilder getInfogainLossParamOrBuilder();

    // optional .caffe.InnerProductParameter inner_product_param = 117;
    /**
     * <code>optional .caffe.InnerProductParameter inner_product_param = 117;</code>
     */
    boolean hasInnerProductParam();
    /**
     * <code>optional .caffe.InnerProductParameter inner_product_param = 117;</code>
     */
    caffe.Caffe.InnerProductParameter getInnerProductParam();
    /**
     * <code>optional .caffe.InnerProductParameter inner_product_param = 117;</code>
     */
    caffe.Caffe.InnerProductParameterOrBuilder getInnerProductParamOrBuilder();

    // optional .caffe.InputParameter input_param = 143;
    /**
     * <code>optional .caffe.InputParameter input_param = 143;</code>
     */
    boolean hasInputParam();
    /**
     * <code>optional .caffe.InputParameter input_param = 143;</code>
     */
    caffe.Caffe.InputParameter getInputParam();
    /**
     * <code>optional .caffe.InputParameter input_param = 143;</code>
     */
    caffe.Caffe.InputParameterOrBuilder getInputParamOrBuilder();

    // optional .caffe.LogParameter log_param = 134;
    /**
     * <code>optional .caffe.LogParameter log_param = 134;</code>
     */
    boolean hasLogParam();
    /**
     * <code>optional .caffe.LogParameter log_param = 134;</code>
     */
    caffe.Caffe.LogParameter getLogParam();
    /**
     * <code>optional .caffe.LogParameter log_param = 134;</code>
     */
    caffe.Caffe.LogParameterOrBuilder getLogParamOrBuilder();

    // optional .caffe.LRNParameter lrn_param = 118;
    /**
     * <code>optional .caffe.LRNParameter lrn_param = 118;</code>
     */
    boolean hasLrnParam();
    /**
     * <code>optional .caffe.LRNParameter lrn_param = 118;</code>
     */
    caffe.Caffe.LRNParameter getLrnParam();
    /**
     * <code>optional .caffe.LRNParameter lrn_param = 118;</code>
     */
    caffe.Caffe.LRNParameterOrBuilder getLrnParamOrBuilder();

    // optional .caffe.MemoryDataParameter memory_data_param = 119;
    /**
     * <code>optional .caffe.MemoryDataParameter memory_data_param = 119;</code>
     */
    boolean hasMemoryDataParam();
    /**
     * <code>optional .caffe.MemoryDataParameter memory_data_param = 119;</code>
     */
    caffe.Caffe.MemoryDataParameter getMemoryDataParam();
    /**
     * <code>optional .caffe.MemoryDataParameter memory_data_param = 119;</code>
     */
    caffe.Caffe.MemoryDataParameterOrBuilder getMemoryDataParamOrBuilder();

    // optional .caffe.MVNParameter mvn_param = 120;
    /**
     * <code>optional .caffe.MVNParameter mvn_param = 120;</code>
     */
    boolean hasMvnParam();
    /**
     * <code>optional .caffe.MVNParameter mvn_param = 120;</code>
     */
    caffe.Caffe.MVNParameter getMvnParam();
    /**
     * <code>optional .caffe.MVNParameter mvn_param = 120;</code>
     */
    caffe.Caffe.MVNParameterOrBuilder getMvnParamOrBuilder();

    // optional .caffe.ParameterParameter parameter_param = 145;
    /**
     * <code>optional .caffe.ParameterParameter parameter_param = 145;</code>
     */
    boolean hasParameterParam();
    /**
     * <code>optional .caffe.ParameterParameter parameter_param = 145;</code>
     */
    caffe.Caffe.ParameterParameter getParameterParam();
    /**
     * <code>optional .caffe.ParameterParameter parameter_param = 145;</code>
     */
    caffe.Caffe.ParameterParameterOrBuilder getParameterParamOrBuilder();

    // optional .caffe.PoolingParameter pooling_param = 121;
    /**
     * <code>optional .caffe.PoolingParameter pooling_param = 121;</code>
     */
    boolean hasPoolingParam();
    /**
     * <code>optional .caffe.PoolingParameter pooling_param = 121;</code>
     */
    caffe.Caffe.PoolingParameter getPoolingParam();
    /**
     * <code>optional .caffe.PoolingParameter pooling_param = 121;</code>
     */
    caffe.Caffe.PoolingParameterOrBuilder getPoolingParamOrBuilder();

    // optional .caffe.PowerParameter power_param = 122;
    /**
     * <code>optional .caffe.PowerParameter power_param = 122;</code>
     */
    boolean hasPowerParam();
    /**
     * <code>optional .caffe.PowerParameter power_param = 122;</code>
     */
    caffe.Caffe.PowerParameter getPowerParam();
    /**
     * <code>optional .caffe.PowerParameter power_param = 122;</code>
     */
    caffe.Caffe.PowerParameterOrBuilder getPowerParamOrBuilder();

    // optional .caffe.PReLUParameter prelu_param = 131;
    /**
     * <code>optional .caffe.PReLUParameter prelu_param = 131;</code>
     */
    boolean hasPreluParam();
    /**
     * <code>optional .caffe.PReLUParameter prelu_param = 131;</code>
     */
    caffe.Caffe.PReLUParameter getPreluParam();
    /**
     * <code>optional .caffe.PReLUParameter prelu_param = 131;</code>
     */
    caffe.Caffe.PReLUParameterOrBuilder getPreluParamOrBuilder();

    // optional .caffe.PythonParameter python_param = 130;
    /**
     * <code>optional .caffe.PythonParameter python_param = 130;</code>
     */
    boolean hasPythonParam();
    /**
     * <code>optional .caffe.PythonParameter python_param = 130;</code>
     */
    caffe.Caffe.PythonParameter getPythonParam();
    /**
     * <code>optional .caffe.PythonParameter python_param = 130;</code>
     */
    caffe.Caffe.PythonParameterOrBuilder getPythonParamOrBuilder();

    // optional .caffe.RecurrentParameter recurrent_param = 146;
    /**
     * <code>optional .caffe.RecurrentParameter recurrent_param = 146;</code>
     */
    boolean hasRecurrentParam();
    /**
     * <code>optional .caffe.RecurrentParameter recurrent_param = 146;</code>
     */
    caffe.Caffe.RecurrentParameter getRecurrentParam();
    /**
     * <code>optional .caffe.RecurrentParameter recurrent_param = 146;</code>
     */
    caffe.Caffe.RecurrentParameterOrBuilder getRecurrentParamOrBuilder();

    // optional .caffe.ReductionParameter reduction_param = 136;
    /**
     * <code>optional .caffe.ReductionParameter reduction_param = 136;</code>
     */
    boolean hasReductionParam();
    /**
     * <code>optional .caffe.ReductionParameter reduction_param = 136;</code>
     */
    caffe.Caffe.ReductionParameter getReductionParam();
    /**
     * <code>optional .caffe.ReductionParameter reduction_param = 136;</code>
     */
    caffe.Caffe.ReductionParameterOrBuilder getReductionParamOrBuilder();

    // optional .caffe.ReLUParameter relu_param = 123;
    /**
     * <code>optional .caffe.ReLUParameter relu_param = 123;</code>
     */
    boolean hasReluParam();
    /**
     * <code>optional .caffe.ReLUParameter relu_param = 123;</code>
     */
    caffe.Caffe.ReLUParameter getReluParam();
    /**
     * <code>optional .caffe.ReLUParameter relu_param = 123;</code>
     */
    caffe.Caffe.ReLUParameterOrBuilder getReluParamOrBuilder();

    // optional .caffe.ReshapeParameter reshape_param = 133;
    /**
     * <code>optional .caffe.ReshapeParameter reshape_param = 133;</code>
     */
    boolean hasReshapeParam();
    /**
     * <code>optional .caffe.ReshapeParameter reshape_param = 133;</code>
     */
    caffe.Caffe.ReshapeParameter getReshapeParam();
    /**
     * <code>optional .caffe.ReshapeParameter reshape_param = 133;</code>
     */
    caffe.Caffe.ReshapeParameterOrBuilder getReshapeParamOrBuilder();

    // optional .caffe.ScaleParameter scale_param = 142;
    /**
     * <code>optional .caffe.ScaleParameter scale_param = 142;</code>
     */
    boolean hasScaleParam();
    /**
     * <code>optional .caffe.ScaleParameter scale_param = 142;</code>
     */
    caffe.Caffe.ScaleParameter getScaleParam();
    /**
     * <code>optional .caffe.ScaleParameter scale_param = 142;</code>
     */
    caffe.Caffe.ScaleParameterOrBuilder getScaleParamOrBuilder();

    // optional .caffe.SigmoidParameter sigmoid_param = 124;
    /**
     * <code>optional .caffe.SigmoidParameter sigmoid_param = 124;</code>
     */
    boolean hasSigmoidParam();
    /**
     * <code>optional .caffe.SigmoidParameter sigmoid_param = 124;</code>
     */
    caffe.Caffe.SigmoidParameter getSigmoidParam();
    /**
     * <code>optional .caffe.SigmoidParameter sigmoid_param = 124;</code>
     */
    caffe.Caffe.SigmoidParameterOrBuilder getSigmoidParamOrBuilder();

    // optional .caffe.SoftmaxParameter softmax_param = 125;
    /**
     * <code>optional .caffe.SoftmaxParameter softmax_param = 125;</code>
     */
    boolean hasSoftmaxParam();
    /**
     * <code>optional .caffe.SoftmaxParameter softmax_param = 125;</code>
     */
    caffe.Caffe.SoftmaxParameter getSoftmaxParam();
    /**
     * <code>optional .caffe.SoftmaxParameter softmax_param = 125;</code>
     */
    caffe.Caffe.SoftmaxParameterOrBuilder getSoftmaxParamOrBuilder();

    // optional .caffe.SPPParameter spp_param = 132;
    /**
     * <code>optional .caffe.SPPParameter spp_param = 132;</code>
     */
    boolean hasSppParam();
    /**
     * <code>optional .caffe.SPPParameter spp_param = 132;</code>
     */
    caffe.Caffe.SPPParameter getSppParam();
    /**
     * <code>optional .caffe.SPPParameter spp_param = 132;</code>
     */
    caffe.Caffe.SPPParameterOrBuilder getSppParamOrBuilder();

    // optional .caffe.SliceParameter slice_param = 126;
    /**
     * <code>optional .caffe.SliceParameter slice_param = 126;</code>
     */
    boolean hasSliceParam();
    /**
     * <code>optional .caffe.SliceParameter slice_param = 126;</code>
     */
    caffe.Caffe.SliceParameter getSliceParam();
    /**
     * <code>optional .caffe.SliceParameter slice_param = 126;</code>
     */
    caffe.Caffe.SliceParameterOrBuilder getSliceParamOrBuilder();

    // optional .caffe.TanHParameter tanh_param = 127;
    /**
     * <code>optional .caffe.TanHParameter tanh_param = 127;</code>
     */
    boolean hasTanhParam();
    /**
     * <code>optional .caffe.TanHParameter tanh_param = 127;</code>
     */
    caffe.Caffe.TanHParameter getTanhParam();
    /**
     * <code>optional .caffe.TanHParameter tanh_param = 127;</code>
     */
    caffe.Caffe.TanHParameterOrBuilder getTanhParamOrBuilder();

    // optional .caffe.ThresholdParameter threshold_param = 128;
    /**
     * <code>optional .caffe.ThresholdParameter threshold_param = 128;</code>
     */
    boolean hasThresholdParam();
    /**
     * <code>optional .caffe.ThresholdParameter threshold_param = 128;</code>
     */
    caffe.Caffe.ThresholdParameter getThresholdParam();
    /**
     * <code>optional .caffe.ThresholdParameter threshold_param = 128;</code>
     */
    caffe.Caffe.ThresholdParameterOrBuilder getThresholdParamOrBuilder();

    // optional .caffe.TileParameter tile_param = 138;
    /**
     * <code>optional .caffe.TileParameter tile_param = 138;</code>
     */
    boolean hasTileParam();
    /**
     * <code>optional .caffe.TileParameter tile_param = 138;</code>
     */
    caffe.Caffe.TileParameter getTileParam();
    /**
     * <code>optional .caffe.TileParameter tile_param = 138;</code>
     */
    caffe.Caffe.TileParameterOrBuilder getTileParamOrBuilder();

    // optional .caffe.WindowDataParameter window_data_param = 129;
    /**
     * <code>optional .caffe.WindowDataParameter window_data_param = 129;</code>
     */
    boolean hasWindowDataParam();
    /**
     * <code>optional .caffe.WindowDataParameter window_data_param = 129;</code>
     */
    caffe.Caffe.WindowDataParameter getWindowDataParam();
    /**
     * <code>optional .caffe.WindowDataParameter window_data_param = 129;</code>
     */
    caffe.Caffe.WindowDataParameterOrBuilder getWindowDataParamOrBuilder();

    // optional .caffe.ROIPoolingParameter roi_pooling_param = 8266711;
    /**
     * <code>optional .caffe.ROIPoolingParameter roi_pooling_param = 8266711;</code>
     */
    boolean hasRoiPoolingParam();
    /**
     * <code>optional .caffe.ROIPoolingParameter roi_pooling_param = 8266711;</code>
     */
    caffe.Caffe.ROIPoolingParameter getRoiPoolingParam();
    /**
     * <code>optional .caffe.ROIPoolingParameter roi_pooling_param = 8266711;</code>
     */
    caffe.Caffe.ROIPoolingParameterOrBuilder getRoiPoolingParamOrBuilder();

    // optional .caffe.SmoothL1LossParameter smooth_l1_loss_param = 8266712;
    /**
     * <code>optional .caffe.SmoothL1LossParameter smooth_l1_loss_param = 8266712;</code>
     */
    boolean hasSmoothL1LossParam();
    /**
     * <code>optional .caffe.SmoothL1LossParameter smooth_l1_loss_param = 8266712;</code>
     */
    caffe.Caffe.SmoothL1LossParameter getSmoothL1LossParam();
    /**
     * <code>optional .caffe.SmoothL1LossParameter smooth_l1_loss_param = 8266712;</code>
     */
    caffe.Caffe.SmoothL1LossParameterOrBuilder getSmoothL1LossParamOrBuilder();

    // optional .caffe.ProposalParameter proposal_param = 8266713;
    /**
     * <code>optional .caffe.ProposalParameter proposal_param = 8266713;</code>
     */
    boolean hasProposalParam();
    /**
     * <code>optional .caffe.ProposalParameter proposal_param = 8266713;</code>
     */
    caffe.Caffe.ProposalParameter getProposalParam();
    /**
     * <code>optional .caffe.ProposalParameter proposal_param = 8266713;</code>
     */
    caffe.Caffe.ProposalParameterOrBuilder getProposalParamOrBuilder();
  }
  /**
   * Protobuf type {@code caffe.LayerParameter}
   *
   * <pre>
   * NOTE
   * Update the next available ID when you add a new LayerParameter field.
   *
   * LayerParameter next available layer-specific ID: 147 (last added: recurrent_param)
   * </pre>
   */
  public static final class LayerParameter extends
      com.google.protobuf.GeneratedMessage
      implements LayerParameterOrBuilder {
    // Use LayerParameter.newBuilder() to construct.
    private LayerParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private LayerParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final LayerParameter defaultInstance;
    public static LayerParameter getDefaultInstance() {
      return defaultInstance;
    }

    public LayerParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private LayerParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      int mutable_bitField1_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              name_ = input.readBytes();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              type_ = input.readBytes();
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                bottom_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000004;
              }
              bottom_.add(input.readBytes());
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                top_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000008;
              }
              top_.add(input.readBytes());
              break;
            }
            case 45: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                lossWeight_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000020;
              }
              lossWeight_.add(input.readFloat());
              break;
            }
            case 42: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                lossWeight_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                lossWeight_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 50: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                param_ = new java.util.ArrayList<caffe.Caffe.ParamSpec>();
                mutable_bitField0_ |= 0x00000040;
              }
              param_.add(input.readMessage(caffe.Caffe.ParamSpec.PARSER, extensionRegistry));
              break;
            }
            case 58: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                blobs_ = new java.util.ArrayList<caffe.Caffe.BlobProto>();
                mutable_bitField0_ |= 0x00000080;
              }
              blobs_.add(input.readMessage(caffe.Caffe.BlobProto.PARSER, extensionRegistry));
              break;
            }
            case 66: {
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                include_ = new java.util.ArrayList<caffe.Caffe.NetStateRule>();
                mutable_bitField0_ |= 0x00000200;
              }
              include_.add(input.readMessage(caffe.Caffe.NetStateRule.PARSER, extensionRegistry));
              break;
            }
            case 74: {
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
                exclude_ = new java.util.ArrayList<caffe.Caffe.NetStateRule>();
                mutable_bitField0_ |= 0x00000400;
              }
              exclude_.add(input.readMessage(caffe.Caffe.NetStateRule.PARSER, extensionRegistry));
              break;
            }
            case 80: {
              int rawValue = input.readEnum();
              caffe.Caffe.Phase value = caffe.Caffe.Phase.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(10, rawValue);
              } else {
                bitField0_ |= 0x00000004;
                phase_ = value;
              }
              break;
            }
            case 88: {
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                propagateDown_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00000100;
              }
              propagateDown_.add(input.readBool());
              break;
            }
            case 90: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100) && input.getBytesUntilLimit() > 0) {
                propagateDown_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00000100;
              }
              while (input.getBytesUntilLimit() > 0) {
                propagateDown_.add(input.readBool());
              }
              input.popLimit(limit);
              break;
            }
            case 802: {
              caffe.Caffe.TransformationParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = transformParam_.toBuilder();
              }
              transformParam_ = input.readMessage(caffe.Caffe.TransformationParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(transformParam_);
                transformParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 810: {
              caffe.Caffe.LossParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = lossParam_.toBuilder();
              }
              lossParam_ = input.readMessage(caffe.Caffe.LossParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(lossParam_);
                lossParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
            case 818: {
              caffe.Caffe.AccuracyParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00000020) == 0x00000020)) {
                subBuilder = accuracyParam_.toBuilder();
              }
              accuracyParam_ = input.readMessage(caffe.Caffe.AccuracyParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(accuracyParam_);
                accuracyParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000020;
              break;
            }
            case 826: {
              caffe.Caffe.ArgMaxParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00000040) == 0x00000040)) {
                subBuilder = argmaxParam_.toBuilder();
              }
              argmaxParam_ = input.readMessage(caffe.Caffe.ArgMaxParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(argmaxParam_);
                argmaxParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000040;
              break;
            }
            case 834: {
              caffe.Caffe.ConcatParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00000200) == 0x00000200)) {
                subBuilder = concatParam_.toBuilder();
              }
              concatParam_ = input.readMessage(caffe.Caffe.ConcatParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(concatParam_);
                concatParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000200;
              break;
            }
            case 842: {
              caffe.Caffe.ContrastiveLossParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00000400) == 0x00000400)) {
                subBuilder = contrastiveLossParam_.toBuilder();
              }
              contrastiveLossParam_ = input.readMessage(caffe.Caffe.ContrastiveLossParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(contrastiveLossParam_);
                contrastiveLossParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000400;
              break;
            }
            case 850: {
              caffe.Caffe.ConvolutionParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00000800) == 0x00000800)) {
                subBuilder = convolutionParam_.toBuilder();
              }
              convolutionParam_ = input.readMessage(caffe.Caffe.ConvolutionParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(convolutionParam_);
                convolutionParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000800;
              break;
            }
            case 858: {
              caffe.Caffe.DataParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00002000) == 0x00002000)) {
                subBuilder = dataParam_.toBuilder();
              }
              dataParam_ = input.readMessage(caffe.Caffe.DataParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(dataParam_);
                dataParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00002000;
              break;
            }
            case 866: {
              caffe.Caffe.DropoutParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00004000) == 0x00004000)) {
                subBuilder = dropoutParam_.toBuilder();
              }
              dropoutParam_ = input.readMessage(caffe.Caffe.DropoutParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(dropoutParam_);
                dropoutParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00004000;
              break;
            }
            case 874: {
              caffe.Caffe.DummyDataParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00008000) == 0x00008000)) {
                subBuilder = dummyDataParam_.toBuilder();
              }
              dummyDataParam_ = input.readMessage(caffe.Caffe.DummyDataParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(dummyDataParam_);
                dummyDataParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00008000;
              break;
            }
            case 882: {
              caffe.Caffe.EltwiseParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00010000) == 0x00010000)) {
                subBuilder = eltwiseParam_.toBuilder();
              }
              eltwiseParam_ = input.readMessage(caffe.Caffe.EltwiseParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(eltwiseParam_);
                eltwiseParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00010000;
              break;
            }
            case 890: {
              caffe.Caffe.ExpParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00080000) == 0x00080000)) {
                subBuilder = expParam_.toBuilder();
              }
              expParam_ = input.readMessage(caffe.Caffe.ExpParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(expParam_);
                expParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00080000;
              break;
            }
            case 898: {
              caffe.Caffe.HDF5DataParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00200000) == 0x00200000)) {
                subBuilder = hdf5DataParam_.toBuilder();
              }
              hdf5DataParam_ = input.readMessage(caffe.Caffe.HDF5DataParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(hdf5DataParam_);
                hdf5DataParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00200000;
              break;
            }
            case 906: {
              caffe.Caffe.HDF5OutputParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00400000) == 0x00400000)) {
                subBuilder = hdf5OutputParam_.toBuilder();
              }
              hdf5OutputParam_ = input.readMessage(caffe.Caffe.HDF5OutputParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(hdf5OutputParam_);
                hdf5OutputParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00400000;
              break;
            }
            case 914: {
              caffe.Caffe.HingeLossParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00800000) == 0x00800000)) {
                subBuilder = hingeLossParam_.toBuilder();
              }
              hingeLossParam_ = input.readMessage(caffe.Caffe.HingeLossParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(hingeLossParam_);
                hingeLossParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00800000;
              break;
            }
            case 922: {
              caffe.Caffe.ImageDataParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x01000000) == 0x01000000)) {
                subBuilder = imageDataParam_.toBuilder();
              }
              imageDataParam_ = input.readMessage(caffe.Caffe.ImageDataParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(imageDataParam_);
                imageDataParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x01000000;
              break;
            }
            case 930: {
              caffe.Caffe.InfogainLossParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x02000000) == 0x02000000)) {
                subBuilder = infogainLossParam_.toBuilder();
              }
              infogainLossParam_ = input.readMessage(caffe.Caffe.InfogainLossParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(infogainLossParam_);
                infogainLossParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x02000000;
              break;
            }
            case 938: {
              caffe.Caffe.InnerProductParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x04000000) == 0x04000000)) {
                subBuilder = innerProductParam_.toBuilder();
              }
              innerProductParam_ = input.readMessage(caffe.Caffe.InnerProductParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(innerProductParam_);
                innerProductParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x04000000;
              break;
            }
            case 946: {
              caffe.Caffe.LRNParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x20000000) == 0x20000000)) {
                subBuilder = lrnParam_.toBuilder();
              }
              lrnParam_ = input.readMessage(caffe.Caffe.LRNParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(lrnParam_);
                lrnParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x20000000;
              break;
            }
            case 954: {
              caffe.Caffe.MemoryDataParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x40000000) == 0x40000000)) {
                subBuilder = memoryDataParam_.toBuilder();
              }
              memoryDataParam_ = input.readMessage(caffe.Caffe.MemoryDataParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(memoryDataParam_);
                memoryDataParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x40000000;
              break;
            }
            case 962: {
              caffe.Caffe.MVNParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x80000000) == 0x80000000)) {
                subBuilder = mvnParam_.toBuilder();
              }
              mvnParam_ = input.readMessage(caffe.Caffe.MVNParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mvnParam_);
                mvnParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x80000000;
              break;
            }
            case 970: {
              caffe.Caffe.PoolingParameter.Builder subBuilder = null;
              if (((bitField1_ & 0x00000002) == 0x00000002)) {
                subBuilder = poolingParam_.toBuilder();
              }
              poolingParam_ = input.readMessage(caffe.Caffe.PoolingParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(poolingParam_);
                poolingParam_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00000002;
              break;
            }
            case 978: {
              caffe.Caffe.PowerParameter.Builder subBuilder = null;
              if (((bitField1_ & 0x00000004) == 0x00000004)) {
                subBuilder = powerParam_.toBuilder();
              }
              powerParam_ = input.readMessage(caffe.Caffe.PowerParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(powerParam_);
                powerParam_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00000004;
              break;
            }
            case 986: {
              caffe.Caffe.ReLUParameter.Builder subBuilder = null;
              if (((bitField1_ & 0x00000080) == 0x00000080)) {
                subBuilder = reluParam_.toBuilder();
              }
              reluParam_ = input.readMessage(caffe.Caffe.ReLUParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(reluParam_);
                reluParam_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00000080;
              break;
            }
            case 994: {
              caffe.Caffe.SigmoidParameter.Builder subBuilder = null;
              if (((bitField1_ & 0x00000400) == 0x00000400)) {
                subBuilder = sigmoidParam_.toBuilder();
              }
              sigmoidParam_ = input.readMessage(caffe.Caffe.SigmoidParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(sigmoidParam_);
                sigmoidParam_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00000400;
              break;
            }
            case 1002: {
              caffe.Caffe.SoftmaxParameter.Builder subBuilder = null;
              if (((bitField1_ & 0x00000800) == 0x00000800)) {
                subBuilder = softmaxParam_.toBuilder();
              }
              softmaxParam_ = input.readMessage(caffe.Caffe.SoftmaxParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(softmaxParam_);
                softmaxParam_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00000800;
              break;
            }
            case 1010: {
              caffe.Caffe.SliceParameter.Builder subBuilder = null;
              if (((bitField1_ & 0x00002000) == 0x00002000)) {
                subBuilder = sliceParam_.toBuilder();
              }
              sliceParam_ = input.readMessage(caffe.Caffe.SliceParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(sliceParam_);
                sliceParam_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00002000;
              break;
            }
            case 1018: {
              caffe.Caffe.TanHParameter.Builder subBuilder = null;
              if (((bitField1_ & 0x00004000) == 0x00004000)) {
                subBuilder = tanhParam_.toBuilder();
              }
              tanhParam_ = input.readMessage(caffe.Caffe.TanHParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(tanhParam_);
                tanhParam_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00004000;
              break;
            }
            case 1026: {
              caffe.Caffe.ThresholdParameter.Builder subBuilder = null;
              if (((bitField1_ & 0x00008000) == 0x00008000)) {
                subBuilder = thresholdParam_.toBuilder();
              }
              thresholdParam_ = input.readMessage(caffe.Caffe.ThresholdParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(thresholdParam_);
                thresholdParam_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00008000;
              break;
            }
            case 1034: {
              caffe.Caffe.WindowDataParameter.Builder subBuilder = null;
              if (((bitField1_ & 0x00020000) == 0x00020000)) {
                subBuilder = windowDataParam_.toBuilder();
              }
              windowDataParam_ = input.readMessage(caffe.Caffe.WindowDataParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(windowDataParam_);
                windowDataParam_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00020000;
              break;
            }
            case 1042: {
              caffe.Caffe.PythonParameter.Builder subBuilder = null;
              if (((bitField1_ & 0x00000010) == 0x00000010)) {
                subBuilder = pythonParam_.toBuilder();
              }
              pythonParam_ = input.readMessage(caffe.Caffe.PythonParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(pythonParam_);
                pythonParam_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00000010;
              break;
            }
            case 1050: {
              caffe.Caffe.PReLUParameter.Builder subBuilder = null;
              if (((bitField1_ & 0x00000008) == 0x00000008)) {
                subBuilder = preluParam_.toBuilder();
              }
              preluParam_ = input.readMessage(caffe.Caffe.PReLUParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(preluParam_);
                preluParam_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00000008;
              break;
            }
            case 1058: {
              caffe.Caffe.SPPParameter.Builder subBuilder = null;
              if (((bitField1_ & 0x00001000) == 0x00001000)) {
                subBuilder = sppParam_.toBuilder();
              }
              sppParam_ = input.readMessage(caffe.Caffe.SPPParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(sppParam_);
                sppParam_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00001000;
              break;
            }
            case 1066: {
              caffe.Caffe.ReshapeParameter.Builder subBuilder = null;
              if (((bitField1_ & 0x00000100) == 0x00000100)) {
                subBuilder = reshapeParam_.toBuilder();
              }
              reshapeParam_ = input.readMessage(caffe.Caffe.ReshapeParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(reshapeParam_);
                reshapeParam_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00000100;
              break;
            }
            case 1074: {
              caffe.Caffe.LogParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x10000000) == 0x10000000)) {
                subBuilder = logParam_.toBuilder();
              }
              logParam_ = input.readMessage(caffe.Caffe.LogParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(logParam_);
                logParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x10000000;
              break;
            }
            case 1082: {
              caffe.Caffe.FlattenParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00100000) == 0x00100000)) {
                subBuilder = flattenParam_.toBuilder();
              }
              flattenParam_ = input.readMessage(caffe.Caffe.FlattenParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(flattenParam_);
                flattenParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00100000;
              break;
            }
            case 1090: {
              caffe.Caffe.ReductionParameter.Builder subBuilder = null;
              if (((bitField1_ & 0x00000040) == 0x00000040)) {
                subBuilder = reductionParam_.toBuilder();
              }
              reductionParam_ = input.readMessage(caffe.Caffe.ReductionParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(reductionParam_);
                reductionParam_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00000040;
              break;
            }
            case 1098: {
              caffe.Caffe.EmbedParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00040000) == 0x00040000)) {
                subBuilder = embedParam_.toBuilder();
              }
              embedParam_ = input.readMessage(caffe.Caffe.EmbedParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(embedParam_);
                embedParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00040000;
              break;
            }
            case 1106: {
              caffe.Caffe.TileParameter.Builder subBuilder = null;
              if (((bitField1_ & 0x00010000) == 0x00010000)) {
                subBuilder = tileParam_.toBuilder();
              }
              tileParam_ = input.readMessage(caffe.Caffe.TileParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(tileParam_);
                tileParam_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00010000;
              break;
            }
            case 1114: {
              caffe.Caffe.BatchNormParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00000080) == 0x00000080)) {
                subBuilder = batchNormParam_.toBuilder();
              }
              batchNormParam_ = input.readMessage(caffe.Caffe.BatchNormParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(batchNormParam_);
                batchNormParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000080;
              break;
            }
            case 1122: {
              caffe.Caffe.ELUParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00020000) == 0x00020000)) {
                subBuilder = eluParam_.toBuilder();
              }
              eluParam_ = input.readMessage(caffe.Caffe.ELUParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(eluParam_);
                eluParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00020000;
              break;
            }
            case 1130: {
              caffe.Caffe.BiasParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00000100) == 0x00000100)) {
                subBuilder = biasParam_.toBuilder();
              }
              biasParam_ = input.readMessage(caffe.Caffe.BiasParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(biasParam_);
                biasParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000100;
              break;
            }
            case 1138: {
              caffe.Caffe.ScaleParameter.Builder subBuilder = null;
              if (((bitField1_ & 0x00000200) == 0x00000200)) {
                subBuilder = scaleParam_.toBuilder();
              }
              scaleParam_ = input.readMessage(caffe.Caffe.ScaleParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(scaleParam_);
                scaleParam_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00000200;
              break;
            }
            case 1146: {
              caffe.Caffe.InputParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x08000000) == 0x08000000)) {
                subBuilder = inputParam_.toBuilder();
              }
              inputParam_ = input.readMessage(caffe.Caffe.InputParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(inputParam_);
                inputParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x08000000;
              break;
            }
            case 1154: {
              caffe.Caffe.CropParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00001000) == 0x00001000)) {
                subBuilder = cropParam_.toBuilder();
              }
              cropParam_ = input.readMessage(caffe.Caffe.CropParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(cropParam_);
                cropParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00001000;
              break;
            }
            case 1162: {
              caffe.Caffe.ParameterParameter.Builder subBuilder = null;
              if (((bitField1_ & 0x00000001) == 0x00000001)) {
                subBuilder = parameterParam_.toBuilder();
              }
              parameterParam_ = input.readMessage(caffe.Caffe.ParameterParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(parameterParam_);
                parameterParam_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00000001;
              break;
            }
            case 1170: {
              caffe.Caffe.RecurrentParameter.Builder subBuilder = null;
              if (((bitField1_ & 0x00000020) == 0x00000020)) {
                subBuilder = recurrentParam_.toBuilder();
              }
              recurrentParam_ = input.readMessage(caffe.Caffe.RecurrentParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(recurrentParam_);
                recurrentParam_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00000020;
              break;
            }
            case 66133690: {
              caffe.Caffe.ROIPoolingParameter.Builder subBuilder = null;
              if (((bitField1_ & 0x00040000) == 0x00040000)) {
                subBuilder = roiPoolingParam_.toBuilder();
              }
              roiPoolingParam_ = input.readMessage(caffe.Caffe.ROIPoolingParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(roiPoolingParam_);
                roiPoolingParam_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00040000;
              break;
            }
            case 66133698: {
              caffe.Caffe.SmoothL1LossParameter.Builder subBuilder = null;
              if (((bitField1_ & 0x00080000) == 0x00080000)) {
                subBuilder = smoothL1LossParam_.toBuilder();
              }
              smoothL1LossParam_ = input.readMessage(caffe.Caffe.SmoothL1LossParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(smoothL1LossParam_);
                smoothL1LossParam_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00080000;
              break;
            }
            case 66133706: {
              caffe.Caffe.ProposalParameter.Builder subBuilder = null;
              if (((bitField1_ & 0x00100000) == 0x00100000)) {
                subBuilder = proposalParam_.toBuilder();
              }
              proposalParam_ = input.readMessage(caffe.Caffe.ProposalParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(proposalParam_);
                proposalParam_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00100000;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          bottom_ = new com.google.protobuf.UnmodifiableLazyStringList(bottom_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          top_ = new com.google.protobuf.UnmodifiableLazyStringList(top_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          lossWeight_ = java.util.Collections.unmodifiableList(lossWeight_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          param_ = java.util.Collections.unmodifiableList(param_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          blobs_ = java.util.Collections.unmodifiableList(blobs_);
        }
        if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
          include_ = java.util.Collections.unmodifiableList(include_);
        }
        if (((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
          exclude_ = java.util.Collections.unmodifiableList(exclude_);
        }
        if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
          propagateDown_ = java.util.Collections.unmodifiableList(propagateDown_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_LayerParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_LayerParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.LayerParameter.class, caffe.Caffe.LayerParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<LayerParameter> PARSER =
        new com.google.protobuf.AbstractParser<LayerParameter>() {
      public LayerParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new LayerParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<LayerParameter> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    private int bitField1_;
    // optional string name = 1;
    public static final int NAME_FIELD_NUMBER = 1;
    private java.lang.Object name_;
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * the layer name
     * </pre>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * the layer name
     * </pre>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * the layer name
     * </pre>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional string type = 2;
    public static final int TYPE_FIELD_NUMBER = 2;
    private java.lang.Object type_;
    /**
     * <code>optional string type = 2;</code>
     *
     * <pre>
     * the layer type
     * </pre>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string type = 2;</code>
     *
     * <pre>
     * the layer type
     * </pre>
     */
    public java.lang.String getType() {
      java.lang.Object ref = type_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          type_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string type = 2;</code>
     *
     * <pre>
     * the layer type
     * </pre>
     */
    public com.google.protobuf.ByteString
        getTypeBytes() {
      java.lang.Object ref = type_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        type_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // repeated string bottom = 3;
    public static final int BOTTOM_FIELD_NUMBER = 3;
    private com.google.protobuf.LazyStringList bottom_;
    /**
     * <code>repeated string bottom = 3;</code>
     *
     * <pre>
     * the name of each bottom blob
     * </pre>
     */
    public java.util.List<java.lang.String>
        getBottomList() {
      return bottom_;
    }
    /**
     * <code>repeated string bottom = 3;</code>
     *
     * <pre>
     * the name of each bottom blob
     * </pre>
     */
    public int getBottomCount() {
      return bottom_.size();
    }
    /**
     * <code>repeated string bottom = 3;</code>
     *
     * <pre>
     * the name of each bottom blob
     * </pre>
     */
    public java.lang.String getBottom(int index) {
      return bottom_.get(index);
    }
    /**
     * <code>repeated string bottom = 3;</code>
     *
     * <pre>
     * the name of each bottom blob
     * </pre>
     */
    public com.google.protobuf.ByteString
        getBottomBytes(int index) {
      return bottom_.getByteString(index);
    }

    // repeated string top = 4;
    public static final int TOP_FIELD_NUMBER = 4;
    private com.google.protobuf.LazyStringList top_;
    /**
     * <code>repeated string top = 4;</code>
     *
     * <pre>
     * the name of each top blob
     * </pre>
     */
    public java.util.List<java.lang.String>
        getTopList() {
      return top_;
    }
    /**
     * <code>repeated string top = 4;</code>
     *
     * <pre>
     * the name of each top blob
     * </pre>
     */
    public int getTopCount() {
      return top_.size();
    }
    /**
     * <code>repeated string top = 4;</code>
     *
     * <pre>
     * the name of each top blob
     * </pre>
     */
    public java.lang.String getTop(int index) {
      return top_.get(index);
    }
    /**
     * <code>repeated string top = 4;</code>
     *
     * <pre>
     * the name of each top blob
     * </pre>
     */
    public com.google.protobuf.ByteString
        getTopBytes(int index) {
      return top_.getByteString(index);
    }

    // optional .caffe.Phase phase = 10;
    public static final int PHASE_FIELD_NUMBER = 10;
    private caffe.Caffe.Phase phase_;
    /**
     * <code>optional .caffe.Phase phase = 10;</code>
     *
     * <pre>
     * The train / test phase for computation.
     * </pre>
     */
    public boolean hasPhase() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .caffe.Phase phase = 10;</code>
     *
     * <pre>
     * The train / test phase for computation.
     * </pre>
     */
    public caffe.Caffe.Phase getPhase() {
      return phase_;
    }

    // repeated float loss_weight = 5;
    public static final int LOSS_WEIGHT_FIELD_NUMBER = 5;
    private java.util.List<java.lang.Float> lossWeight_;
    /**
     * <code>repeated float loss_weight = 5;</code>
     *
     * <pre>
     * The amount of weight to assign each top blob in the objective.
     * Each layer assigns a default value, usually of either 0 or 1,
     * to each top blob.
     * </pre>
     */
    public java.util.List<java.lang.Float>
        getLossWeightList() {
      return lossWeight_;
    }
    /**
     * <code>repeated float loss_weight = 5;</code>
     *
     * <pre>
     * The amount of weight to assign each top blob in the objective.
     * Each layer assigns a default value, usually of either 0 or 1,
     * to each top blob.
     * </pre>
     */
    public int getLossWeightCount() {
      return lossWeight_.size();
    }
    /**
     * <code>repeated float loss_weight = 5;</code>
     *
     * <pre>
     * The amount of weight to assign each top blob in the objective.
     * Each layer assigns a default value, usually of either 0 or 1,
     * to each top blob.
     * </pre>
     */
    public float getLossWeight(int index) {
      return lossWeight_.get(index);
    }

    // repeated .caffe.ParamSpec param = 6;
    public static final int PARAM_FIELD_NUMBER = 6;
    private java.util.List<caffe.Caffe.ParamSpec> param_;
    /**
     * <code>repeated .caffe.ParamSpec param = 6;</code>
     *
     * <pre>
     * Specifies training parameters (multipliers on global learning constants,
     * and the name and other settings used for weight sharing).
     * </pre>
     */
    public java.util.List<caffe.Caffe.ParamSpec> getParamList() {
      return param_;
    }
    /**
     * <code>repeated .caffe.ParamSpec param = 6;</code>
     *
     * <pre>
     * Specifies training parameters (multipliers on global learning constants,
     * and the name and other settings used for weight sharing).
     * </pre>
     */
    public java.util.List<? extends caffe.Caffe.ParamSpecOrBuilder> 
        getParamOrBuilderList() {
      return param_;
    }
    /**
     * <code>repeated .caffe.ParamSpec param = 6;</code>
     *
     * <pre>
     * Specifies training parameters (multipliers on global learning constants,
     * and the name and other settings used for weight sharing).
     * </pre>
     */
    public int getParamCount() {
      return param_.size();
    }
    /**
     * <code>repeated .caffe.ParamSpec param = 6;</code>
     *
     * <pre>
     * Specifies training parameters (multipliers on global learning constants,
     * and the name and other settings used for weight sharing).
     * </pre>
     */
    public caffe.Caffe.ParamSpec getParam(int index) {
      return param_.get(index);
    }
    /**
     * <code>repeated .caffe.ParamSpec param = 6;</code>
     *
     * <pre>
     * Specifies training parameters (multipliers on global learning constants,
     * and the name and other settings used for weight sharing).
     * </pre>
     */
    public caffe.Caffe.ParamSpecOrBuilder getParamOrBuilder(
        int index) {
      return param_.get(index);
    }

    // repeated .caffe.BlobProto blobs = 7;
    public static final int BLOBS_FIELD_NUMBER = 7;
    private java.util.List<caffe.Caffe.BlobProto> blobs_;
    /**
     * <code>repeated .caffe.BlobProto blobs = 7;</code>
     *
     * <pre>
     * The blobs containing the numeric parameters of the layer.
     * </pre>
     */
    public java.util.List<caffe.Caffe.BlobProto> getBlobsList() {
      return blobs_;
    }
    /**
     * <code>repeated .caffe.BlobProto blobs = 7;</code>
     *
     * <pre>
     * The blobs containing the numeric parameters of the layer.
     * </pre>
     */
    public java.util.List<? extends caffe.Caffe.BlobProtoOrBuilder> 
        getBlobsOrBuilderList() {
      return blobs_;
    }
    /**
     * <code>repeated .caffe.BlobProto blobs = 7;</code>
     *
     * <pre>
     * The blobs containing the numeric parameters of the layer.
     * </pre>
     */
    public int getBlobsCount() {
      return blobs_.size();
    }
    /**
     * <code>repeated .caffe.BlobProto blobs = 7;</code>
     *
     * <pre>
     * The blobs containing the numeric parameters of the layer.
     * </pre>
     */
    public caffe.Caffe.BlobProto getBlobs(int index) {
      return blobs_.get(index);
    }
    /**
     * <code>repeated .caffe.BlobProto blobs = 7;</code>
     *
     * <pre>
     * The blobs containing the numeric parameters of the layer.
     * </pre>
     */
    public caffe.Caffe.BlobProtoOrBuilder getBlobsOrBuilder(
        int index) {
      return blobs_.get(index);
    }

    // repeated bool propagate_down = 11;
    public static final int PROPAGATE_DOWN_FIELD_NUMBER = 11;
    private java.util.List<java.lang.Boolean> propagateDown_;
    /**
     * <code>repeated bool propagate_down = 11;</code>
     *
     * <pre>
     * Specifies whether to backpropagate to each bottom. If unspecified,
     * Caffe will automatically infer whether each input needs backpropagation
     * to compute parameter gradients. If set to true for some inputs,
     * backpropagation to those inputs is forced; if set false for some inputs,
     * backpropagation to those inputs is skipped.
     *
     * The size must be either 0 or equal to the number of bottoms.
     * </pre>
     */
    public java.util.List<java.lang.Boolean>
        getPropagateDownList() {
      return propagateDown_;
    }
    /**
     * <code>repeated bool propagate_down = 11;</code>
     *
     * <pre>
     * Specifies whether to backpropagate to each bottom. If unspecified,
     * Caffe will automatically infer whether each input needs backpropagation
     * to compute parameter gradients. If set to true for some inputs,
     * backpropagation to those inputs is forced; if set false for some inputs,
     * backpropagation to those inputs is skipped.
     *
     * The size must be either 0 or equal to the number of bottoms.
     * </pre>
     */
    public int getPropagateDownCount() {
      return propagateDown_.size();
    }
    /**
     * <code>repeated bool propagate_down = 11;</code>
     *
     * <pre>
     * Specifies whether to backpropagate to each bottom. If unspecified,
     * Caffe will automatically infer whether each input needs backpropagation
     * to compute parameter gradients. If set to true for some inputs,
     * backpropagation to those inputs is forced; if set false for some inputs,
     * backpropagation to those inputs is skipped.
     *
     * The size must be either 0 or equal to the number of bottoms.
     * </pre>
     */
    public boolean getPropagateDown(int index) {
      return propagateDown_.get(index);
    }

    // repeated .caffe.NetStateRule include = 8;
    public static final int INCLUDE_FIELD_NUMBER = 8;
    private java.util.List<caffe.Caffe.NetStateRule> include_;
    /**
     * <code>repeated .caffe.NetStateRule include = 8;</code>
     *
     * <pre>
     * Rules controlling whether and when a layer is included in the network,
     * based on the current NetState.  You may specify a non-zero number of rules
     * to include OR exclude, but not both.  If no include or exclude rules are
     * specified, the layer is always included.  If the current NetState meets
     * ANY (i.e., one or more) of the specified rules, the layer is
     * included/excluded.
     * </pre>
     */
    public java.util.List<caffe.Caffe.NetStateRule> getIncludeList() {
      return include_;
    }
    /**
     * <code>repeated .caffe.NetStateRule include = 8;</code>
     *
     * <pre>
     * Rules controlling whether and when a layer is included in the network,
     * based on the current NetState.  You may specify a non-zero number of rules
     * to include OR exclude, but not both.  If no include or exclude rules are
     * specified, the layer is always included.  If the current NetState meets
     * ANY (i.e., one or more) of the specified rules, the layer is
     * included/excluded.
     * </pre>
     */
    public java.util.List<? extends caffe.Caffe.NetStateRuleOrBuilder> 
        getIncludeOrBuilderList() {
      return include_;
    }
    /**
     * <code>repeated .caffe.NetStateRule include = 8;</code>
     *
     * <pre>
     * Rules controlling whether and when a layer is included in the network,
     * based on the current NetState.  You may specify a non-zero number of rules
     * to include OR exclude, but not both.  If no include or exclude rules are
     * specified, the layer is always included.  If the current NetState meets
     * ANY (i.e., one or more) of the specified rules, the layer is
     * included/excluded.
     * </pre>
     */
    public int getIncludeCount() {
      return include_.size();
    }
    /**
     * <code>repeated .caffe.NetStateRule include = 8;</code>
     *
     * <pre>
     * Rules controlling whether and when a layer is included in the network,
     * based on the current NetState.  You may specify a non-zero number of rules
     * to include OR exclude, but not both.  If no include or exclude rules are
     * specified, the layer is always included.  If the current NetState meets
     * ANY (i.e., one or more) of the specified rules, the layer is
     * included/excluded.
     * </pre>
     */
    public caffe.Caffe.NetStateRule getInclude(int index) {
      return include_.get(index);
    }
    /**
     * <code>repeated .caffe.NetStateRule include = 8;</code>
     *
     * <pre>
     * Rules controlling whether and when a layer is included in the network,
     * based on the current NetState.  You may specify a non-zero number of rules
     * to include OR exclude, but not both.  If no include or exclude rules are
     * specified, the layer is always included.  If the current NetState meets
     * ANY (i.e., one or more) of the specified rules, the layer is
     * included/excluded.
     * </pre>
     */
    public caffe.Caffe.NetStateRuleOrBuilder getIncludeOrBuilder(
        int index) {
      return include_.get(index);
    }

    // repeated .caffe.NetStateRule exclude = 9;
    public static final int EXCLUDE_FIELD_NUMBER = 9;
    private java.util.List<caffe.Caffe.NetStateRule> exclude_;
    /**
     * <code>repeated .caffe.NetStateRule exclude = 9;</code>
     */
    public java.util.List<caffe.Caffe.NetStateRule> getExcludeList() {
      return exclude_;
    }
    /**
     * <code>repeated .caffe.NetStateRule exclude = 9;</code>
     */
    public java.util.List<? extends caffe.Caffe.NetStateRuleOrBuilder> 
        getExcludeOrBuilderList() {
      return exclude_;
    }
    /**
     * <code>repeated .caffe.NetStateRule exclude = 9;</code>
     */
    public int getExcludeCount() {
      return exclude_.size();
    }
    /**
     * <code>repeated .caffe.NetStateRule exclude = 9;</code>
     */
    public caffe.Caffe.NetStateRule getExclude(int index) {
      return exclude_.get(index);
    }
    /**
     * <code>repeated .caffe.NetStateRule exclude = 9;</code>
     */
    public caffe.Caffe.NetStateRuleOrBuilder getExcludeOrBuilder(
        int index) {
      return exclude_.get(index);
    }

    // optional .caffe.TransformationParameter transform_param = 100;
    public static final int TRANSFORM_PARAM_FIELD_NUMBER = 100;
    private caffe.Caffe.TransformationParameter transformParam_;
    /**
     * <code>optional .caffe.TransformationParameter transform_param = 100;</code>
     *
     * <pre>
     * Parameters for data pre-processing.
     * </pre>
     */
    public boolean hasTransformParam() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .caffe.TransformationParameter transform_param = 100;</code>
     *
     * <pre>
     * Parameters for data pre-processing.
     * </pre>
     */
    public caffe.Caffe.TransformationParameter getTransformParam() {
      return transformParam_;
    }
    /**
     * <code>optional .caffe.TransformationParameter transform_param = 100;</code>
     *
     * <pre>
     * Parameters for data pre-processing.
     * </pre>
     */
    public caffe.Caffe.TransformationParameterOrBuilder getTransformParamOrBuilder() {
      return transformParam_;
    }

    // optional .caffe.LossParameter loss_param = 101;
    public static final int LOSS_PARAM_FIELD_NUMBER = 101;
    private caffe.Caffe.LossParameter lossParam_;
    /**
     * <code>optional .caffe.LossParameter loss_param = 101;</code>
     *
     * <pre>
     * Parameters shared by loss layers.
     * </pre>
     */
    public boolean hasLossParam() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .caffe.LossParameter loss_param = 101;</code>
     *
     * <pre>
     * Parameters shared by loss layers.
     * </pre>
     */
    public caffe.Caffe.LossParameter getLossParam() {
      return lossParam_;
    }
    /**
     * <code>optional .caffe.LossParameter loss_param = 101;</code>
     *
     * <pre>
     * Parameters shared by loss layers.
     * </pre>
     */
    public caffe.Caffe.LossParameterOrBuilder getLossParamOrBuilder() {
      return lossParam_;
    }

    // optional .caffe.AccuracyParameter accuracy_param = 102;
    public static final int ACCURACY_PARAM_FIELD_NUMBER = 102;
    private caffe.Caffe.AccuracyParameter accuracyParam_;
    /**
     * <code>optional .caffe.AccuracyParameter accuracy_param = 102;</code>
     *
     * <pre>
     * Layer type-specific parameters.
     *
     * Note: certain layers may have more than one computational engine
     * for their implementation. These layers include an Engine type and
     * engine parameter for selecting the implementation.
     * The default for the engine is set by the ENGINE switch at compile-time.
     * </pre>
     */
    public boolean hasAccuracyParam() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .caffe.AccuracyParameter accuracy_param = 102;</code>
     *
     * <pre>
     * Layer type-specific parameters.
     *
     * Note: certain layers may have more than one computational engine
     * for their implementation. These layers include an Engine type and
     * engine parameter for selecting the implementation.
     * The default for the engine is set by the ENGINE switch at compile-time.
     * </pre>
     */
    public caffe.Caffe.AccuracyParameter getAccuracyParam() {
      return accuracyParam_;
    }
    /**
     * <code>optional .caffe.AccuracyParameter accuracy_param = 102;</code>
     *
     * <pre>
     * Layer type-specific parameters.
     *
     * Note: certain layers may have more than one computational engine
     * for their implementation. These layers include an Engine type and
     * engine parameter for selecting the implementation.
     * The default for the engine is set by the ENGINE switch at compile-time.
     * </pre>
     */
    public caffe.Caffe.AccuracyParameterOrBuilder getAccuracyParamOrBuilder() {
      return accuracyParam_;
    }

    // optional .caffe.ArgMaxParameter argmax_param = 103;
    public static final int ARGMAX_PARAM_FIELD_NUMBER = 103;
    private caffe.Caffe.ArgMaxParameter argmaxParam_;
    /**
     * <code>optional .caffe.ArgMaxParameter argmax_param = 103;</code>
     */
    public boolean hasArgmaxParam() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional .caffe.ArgMaxParameter argmax_param = 103;</code>
     */
    public caffe.Caffe.ArgMaxParameter getArgmaxParam() {
      return argmaxParam_;
    }
    /**
     * <code>optional .caffe.ArgMaxParameter argmax_param = 103;</code>
     */
    public caffe.Caffe.ArgMaxParameterOrBuilder getArgmaxParamOrBuilder() {
      return argmaxParam_;
    }

    // optional .caffe.BatchNormParameter batch_norm_param = 139;
    public static final int BATCH_NORM_PARAM_FIELD_NUMBER = 139;
    private caffe.Caffe.BatchNormParameter batchNormParam_;
    /**
     * <code>optional .caffe.BatchNormParameter batch_norm_param = 139;</code>
     */
    public boolean hasBatchNormParam() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional .caffe.BatchNormParameter batch_norm_param = 139;</code>
     */
    public caffe.Caffe.BatchNormParameter getBatchNormParam() {
      return batchNormParam_;
    }
    /**
     * <code>optional .caffe.BatchNormParameter batch_norm_param = 139;</code>
     */
    public caffe.Caffe.BatchNormParameterOrBuilder getBatchNormParamOrBuilder() {
      return batchNormParam_;
    }

    // optional .caffe.BiasParameter bias_param = 141;
    public static final int BIAS_PARAM_FIELD_NUMBER = 141;
    private caffe.Caffe.BiasParameter biasParam_;
    /**
     * <code>optional .caffe.BiasParameter bias_param = 141;</code>
     */
    public boolean hasBiasParam() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional .caffe.BiasParameter bias_param = 141;</code>
     */
    public caffe.Caffe.BiasParameter getBiasParam() {
      return biasParam_;
    }
    /**
     * <code>optional .caffe.BiasParameter bias_param = 141;</code>
     */
    public caffe.Caffe.BiasParameterOrBuilder getBiasParamOrBuilder() {
      return biasParam_;
    }

    // optional .caffe.ConcatParameter concat_param = 104;
    public static final int CONCAT_PARAM_FIELD_NUMBER = 104;
    private caffe.Caffe.ConcatParameter concatParam_;
    /**
     * <code>optional .caffe.ConcatParameter concat_param = 104;</code>
     */
    public boolean hasConcatParam() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional .caffe.ConcatParameter concat_param = 104;</code>
     */
    public caffe.Caffe.ConcatParameter getConcatParam() {
      return concatParam_;
    }
    /**
     * <code>optional .caffe.ConcatParameter concat_param = 104;</code>
     */
    public caffe.Caffe.ConcatParameterOrBuilder getConcatParamOrBuilder() {
      return concatParam_;
    }

    // optional .caffe.ContrastiveLossParameter contrastive_loss_param = 105;
    public static final int CONTRASTIVE_LOSS_PARAM_FIELD_NUMBER = 105;
    private caffe.Caffe.ContrastiveLossParameter contrastiveLossParam_;
    /**
     * <code>optional .caffe.ContrastiveLossParameter contrastive_loss_param = 105;</code>
     */
    public boolean hasContrastiveLossParam() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional .caffe.ContrastiveLossParameter contrastive_loss_param = 105;</code>
     */
    public caffe.Caffe.ContrastiveLossParameter getContrastiveLossParam() {
      return contrastiveLossParam_;
    }
    /**
     * <code>optional .caffe.ContrastiveLossParameter contrastive_loss_param = 105;</code>
     */
    public caffe.Caffe.ContrastiveLossParameterOrBuilder getContrastiveLossParamOrBuilder() {
      return contrastiveLossParam_;
    }

    // optional .caffe.ConvolutionParameter convolution_param = 106;
    public static final int CONVOLUTION_PARAM_FIELD_NUMBER = 106;
    private caffe.Caffe.ConvolutionParameter convolutionParam_;
    /**
     * <code>optional .caffe.ConvolutionParameter convolution_param = 106;</code>
     */
    public boolean hasConvolutionParam() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional .caffe.ConvolutionParameter convolution_param = 106;</code>
     */
    public caffe.Caffe.ConvolutionParameter getConvolutionParam() {
      return convolutionParam_;
    }
    /**
     * <code>optional .caffe.ConvolutionParameter convolution_param = 106;</code>
     */
    public caffe.Caffe.ConvolutionParameterOrBuilder getConvolutionParamOrBuilder() {
      return convolutionParam_;
    }

    // optional .caffe.CropParameter crop_param = 144;
    public static final int CROP_PARAM_FIELD_NUMBER = 144;
    private caffe.Caffe.CropParameter cropParam_;
    /**
     * <code>optional .caffe.CropParameter crop_param = 144;</code>
     */
    public boolean hasCropParam() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional .caffe.CropParameter crop_param = 144;</code>
     */
    public caffe.Caffe.CropParameter getCropParam() {
      return cropParam_;
    }
    /**
     * <code>optional .caffe.CropParameter crop_param = 144;</code>
     */
    public caffe.Caffe.CropParameterOrBuilder getCropParamOrBuilder() {
      return cropParam_;
    }

    // optional .caffe.DataParameter data_param = 107;
    public static final int DATA_PARAM_FIELD_NUMBER = 107;
    private caffe.Caffe.DataParameter dataParam_;
    /**
     * <code>optional .caffe.DataParameter data_param = 107;</code>
     */
    public boolean hasDataParam() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional .caffe.DataParameter data_param = 107;</code>
     */
    public caffe.Caffe.DataParameter getDataParam() {
      return dataParam_;
    }
    /**
     * <code>optional .caffe.DataParameter data_param = 107;</code>
     */
    public caffe.Caffe.DataParameterOrBuilder getDataParamOrBuilder() {
      return dataParam_;
    }

    // optional .caffe.DropoutParameter dropout_param = 108;
    public static final int DROPOUT_PARAM_FIELD_NUMBER = 108;
    private caffe.Caffe.DropoutParameter dropoutParam_;
    /**
     * <code>optional .caffe.DropoutParameter dropout_param = 108;</code>
     */
    public boolean hasDropoutParam() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional .caffe.DropoutParameter dropout_param = 108;</code>
     */
    public caffe.Caffe.DropoutParameter getDropoutParam() {
      return dropoutParam_;
    }
    /**
     * <code>optional .caffe.DropoutParameter dropout_param = 108;</code>
     */
    public caffe.Caffe.DropoutParameterOrBuilder getDropoutParamOrBuilder() {
      return dropoutParam_;
    }

    // optional .caffe.DummyDataParameter dummy_data_param = 109;
    public static final int DUMMY_DATA_PARAM_FIELD_NUMBER = 109;
    private caffe.Caffe.DummyDataParameter dummyDataParam_;
    /**
     * <code>optional .caffe.DummyDataParameter dummy_data_param = 109;</code>
     */
    public boolean hasDummyDataParam() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional .caffe.DummyDataParameter dummy_data_param = 109;</code>
     */
    public caffe.Caffe.DummyDataParameter getDummyDataParam() {
      return dummyDataParam_;
    }
    /**
     * <code>optional .caffe.DummyDataParameter dummy_data_param = 109;</code>
     */
    public caffe.Caffe.DummyDataParameterOrBuilder getDummyDataParamOrBuilder() {
      return dummyDataParam_;
    }

    // optional .caffe.EltwiseParameter eltwise_param = 110;
    public static final int ELTWISE_PARAM_FIELD_NUMBER = 110;
    private caffe.Caffe.EltwiseParameter eltwiseParam_;
    /**
     * <code>optional .caffe.EltwiseParameter eltwise_param = 110;</code>
     */
    public boolean hasEltwiseParam() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional .caffe.EltwiseParameter eltwise_param = 110;</code>
     */
    public caffe.Caffe.EltwiseParameter getEltwiseParam() {
      return eltwiseParam_;
    }
    /**
     * <code>optional .caffe.EltwiseParameter eltwise_param = 110;</code>
     */
    public caffe.Caffe.EltwiseParameterOrBuilder getEltwiseParamOrBuilder() {
      return eltwiseParam_;
    }

    // optional .caffe.ELUParameter elu_param = 140;
    public static final int ELU_PARAM_FIELD_NUMBER = 140;
    private caffe.Caffe.ELUParameter eluParam_;
    /**
     * <code>optional .caffe.ELUParameter elu_param = 140;</code>
     */
    public boolean hasEluParam() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional .caffe.ELUParameter elu_param = 140;</code>
     */
    public caffe.Caffe.ELUParameter getEluParam() {
      return eluParam_;
    }
    /**
     * <code>optional .caffe.ELUParameter elu_param = 140;</code>
     */
    public caffe.Caffe.ELUParameterOrBuilder getEluParamOrBuilder() {
      return eluParam_;
    }

    // optional .caffe.EmbedParameter embed_param = 137;
    public static final int EMBED_PARAM_FIELD_NUMBER = 137;
    private caffe.Caffe.EmbedParameter embedParam_;
    /**
     * <code>optional .caffe.EmbedParameter embed_param = 137;</code>
     */
    public boolean hasEmbedParam() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>optional .caffe.EmbedParameter embed_param = 137;</code>
     */
    public caffe.Caffe.EmbedParameter getEmbedParam() {
      return embedParam_;
    }
    /**
     * <code>optional .caffe.EmbedParameter embed_param = 137;</code>
     */
    public caffe.Caffe.EmbedParameterOrBuilder getEmbedParamOrBuilder() {
      return embedParam_;
    }

    // optional .caffe.ExpParameter exp_param = 111;
    public static final int EXP_PARAM_FIELD_NUMBER = 111;
    private caffe.Caffe.ExpParameter expParam_;
    /**
     * <code>optional .caffe.ExpParameter exp_param = 111;</code>
     */
    public boolean hasExpParam() {
      return ((bitField0_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>optional .caffe.ExpParameter exp_param = 111;</code>
     */
    public caffe.Caffe.ExpParameter getExpParam() {
      return expParam_;
    }
    /**
     * <code>optional .caffe.ExpParameter exp_param = 111;</code>
     */
    public caffe.Caffe.ExpParameterOrBuilder getExpParamOrBuilder() {
      return expParam_;
    }

    // optional .caffe.FlattenParameter flatten_param = 135;
    public static final int FLATTEN_PARAM_FIELD_NUMBER = 135;
    private caffe.Caffe.FlattenParameter flattenParam_;
    /**
     * <code>optional .caffe.FlattenParameter flatten_param = 135;</code>
     */
    public boolean hasFlattenParam() {
      return ((bitField0_ & 0x00100000) == 0x00100000);
    }
    /**
     * <code>optional .caffe.FlattenParameter flatten_param = 135;</code>
     */
    public caffe.Caffe.FlattenParameter getFlattenParam() {
      return flattenParam_;
    }
    /**
     * <code>optional .caffe.FlattenParameter flatten_param = 135;</code>
     */
    public caffe.Caffe.FlattenParameterOrBuilder getFlattenParamOrBuilder() {
      return flattenParam_;
    }

    // optional .caffe.HDF5DataParameter hdf5_data_param = 112;
    public static final int HDF5_DATA_PARAM_FIELD_NUMBER = 112;
    private caffe.Caffe.HDF5DataParameter hdf5DataParam_;
    /**
     * <code>optional .caffe.HDF5DataParameter hdf5_data_param = 112;</code>
     */
    public boolean hasHdf5DataParam() {
      return ((bitField0_ & 0x00200000) == 0x00200000);
    }
    /**
     * <code>optional .caffe.HDF5DataParameter hdf5_data_param = 112;</code>
     */
    public caffe.Caffe.HDF5DataParameter getHdf5DataParam() {
      return hdf5DataParam_;
    }
    /**
     * <code>optional .caffe.HDF5DataParameter hdf5_data_param = 112;</code>
     */
    public caffe.Caffe.HDF5DataParameterOrBuilder getHdf5DataParamOrBuilder() {
      return hdf5DataParam_;
    }

    // optional .caffe.HDF5OutputParameter hdf5_output_param = 113;
    public static final int HDF5_OUTPUT_PARAM_FIELD_NUMBER = 113;
    private caffe.Caffe.HDF5OutputParameter hdf5OutputParam_;
    /**
     * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 113;</code>
     */
    public boolean hasHdf5OutputParam() {
      return ((bitField0_ & 0x00400000) == 0x00400000);
    }
    /**
     * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 113;</code>
     */
    public caffe.Caffe.HDF5OutputParameter getHdf5OutputParam() {
      return hdf5OutputParam_;
    }
    /**
     * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 113;</code>
     */
    public caffe.Caffe.HDF5OutputParameterOrBuilder getHdf5OutputParamOrBuilder() {
      return hdf5OutputParam_;
    }

    // optional .caffe.HingeLossParameter hinge_loss_param = 114;
    public static final int HINGE_LOSS_PARAM_FIELD_NUMBER = 114;
    private caffe.Caffe.HingeLossParameter hingeLossParam_;
    /**
     * <code>optional .caffe.HingeLossParameter hinge_loss_param = 114;</code>
     */
    public boolean hasHingeLossParam() {
      return ((bitField0_ & 0x00800000) == 0x00800000);
    }
    /**
     * <code>optional .caffe.HingeLossParameter hinge_loss_param = 114;</code>
     */
    public caffe.Caffe.HingeLossParameter getHingeLossParam() {
      return hingeLossParam_;
    }
    /**
     * <code>optional .caffe.HingeLossParameter hinge_loss_param = 114;</code>
     */
    public caffe.Caffe.HingeLossParameterOrBuilder getHingeLossParamOrBuilder() {
      return hingeLossParam_;
    }

    // optional .caffe.ImageDataParameter image_data_param = 115;
    public static final int IMAGE_DATA_PARAM_FIELD_NUMBER = 115;
    private caffe.Caffe.ImageDataParameter imageDataParam_;
    /**
     * <code>optional .caffe.ImageDataParameter image_data_param = 115;</code>
     */
    public boolean hasImageDataParam() {
      return ((bitField0_ & 0x01000000) == 0x01000000);
    }
    /**
     * <code>optional .caffe.ImageDataParameter image_data_param = 115;</code>
     */
    public caffe.Caffe.ImageDataParameter getImageDataParam() {
      return imageDataParam_;
    }
    /**
     * <code>optional .caffe.ImageDataParameter image_data_param = 115;</code>
     */
    public caffe.Caffe.ImageDataParameterOrBuilder getImageDataParamOrBuilder() {
      return imageDataParam_;
    }

    // optional .caffe.InfogainLossParameter infogain_loss_param = 116;
    public static final int INFOGAIN_LOSS_PARAM_FIELD_NUMBER = 116;
    private caffe.Caffe.InfogainLossParameter infogainLossParam_;
    /**
     * <code>optional .caffe.InfogainLossParameter infogain_loss_param = 116;</code>
     */
    public boolean hasInfogainLossParam() {
      return ((bitField0_ & 0x02000000) == 0x02000000);
    }
    /**
     * <code>optional .caffe.InfogainLossParameter infogain_loss_param = 116;</code>
     */
    public caffe.Caffe.InfogainLossParameter getInfogainLossParam() {
      return infogainLossParam_;
    }
    /**
     * <code>optional .caffe.InfogainLossParameter infogain_loss_param = 116;</code>
     */
    public caffe.Caffe.InfogainLossParameterOrBuilder getInfogainLossParamOrBuilder() {
      return infogainLossParam_;
    }

    // optional .caffe.InnerProductParameter inner_product_param = 117;
    public static final int INNER_PRODUCT_PARAM_FIELD_NUMBER = 117;
    private caffe.Caffe.InnerProductParameter innerProductParam_;
    /**
     * <code>optional .caffe.InnerProductParameter inner_product_param = 117;</code>
     */
    public boolean hasInnerProductParam() {
      return ((bitField0_ & 0x04000000) == 0x04000000);
    }
    /**
     * <code>optional .caffe.InnerProductParameter inner_product_param = 117;</code>
     */
    public caffe.Caffe.InnerProductParameter getInnerProductParam() {
      return innerProductParam_;
    }
    /**
     * <code>optional .caffe.InnerProductParameter inner_product_param = 117;</code>
     */
    public caffe.Caffe.InnerProductParameterOrBuilder getInnerProductParamOrBuilder() {
      return innerProductParam_;
    }

    // optional .caffe.InputParameter input_param = 143;
    public static final int INPUT_PARAM_FIELD_NUMBER = 143;
    private caffe.Caffe.InputParameter inputParam_;
    /**
     * <code>optional .caffe.InputParameter input_param = 143;</code>
     */
    public boolean hasInputParam() {
      return ((bitField0_ & 0x08000000) == 0x08000000);
    }
    /**
     * <code>optional .caffe.InputParameter input_param = 143;</code>
     */
    public caffe.Caffe.InputParameter getInputParam() {
      return inputParam_;
    }
    /**
     * <code>optional .caffe.InputParameter input_param = 143;</code>
     */
    public caffe.Caffe.InputParameterOrBuilder getInputParamOrBuilder() {
      return inputParam_;
    }

    // optional .caffe.LogParameter log_param = 134;
    public static final int LOG_PARAM_FIELD_NUMBER = 134;
    private caffe.Caffe.LogParameter logParam_;
    /**
     * <code>optional .caffe.LogParameter log_param = 134;</code>
     */
    public boolean hasLogParam() {
      return ((bitField0_ & 0x10000000) == 0x10000000);
    }
    /**
     * <code>optional .caffe.LogParameter log_param = 134;</code>
     */
    public caffe.Caffe.LogParameter getLogParam() {
      return logParam_;
    }
    /**
     * <code>optional .caffe.LogParameter log_param = 134;</code>
     */
    public caffe.Caffe.LogParameterOrBuilder getLogParamOrBuilder() {
      return logParam_;
    }

    // optional .caffe.LRNParameter lrn_param = 118;
    public static final int LRN_PARAM_FIELD_NUMBER = 118;
    private caffe.Caffe.LRNParameter lrnParam_;
    /**
     * <code>optional .caffe.LRNParameter lrn_param = 118;</code>
     */
    public boolean hasLrnParam() {
      return ((bitField0_ & 0x20000000) == 0x20000000);
    }
    /**
     * <code>optional .caffe.LRNParameter lrn_param = 118;</code>
     */
    public caffe.Caffe.LRNParameter getLrnParam() {
      return lrnParam_;
    }
    /**
     * <code>optional .caffe.LRNParameter lrn_param = 118;</code>
     */
    public caffe.Caffe.LRNParameterOrBuilder getLrnParamOrBuilder() {
      return lrnParam_;
    }

    // optional .caffe.MemoryDataParameter memory_data_param = 119;
    public static final int MEMORY_DATA_PARAM_FIELD_NUMBER = 119;
    private caffe.Caffe.MemoryDataParameter memoryDataParam_;
    /**
     * <code>optional .caffe.MemoryDataParameter memory_data_param = 119;</code>
     */
    public boolean hasMemoryDataParam() {
      return ((bitField0_ & 0x40000000) == 0x40000000);
    }
    /**
     * <code>optional .caffe.MemoryDataParameter memory_data_param = 119;</code>
     */
    public caffe.Caffe.MemoryDataParameter getMemoryDataParam() {
      return memoryDataParam_;
    }
    /**
     * <code>optional .caffe.MemoryDataParameter memory_data_param = 119;</code>
     */
    public caffe.Caffe.MemoryDataParameterOrBuilder getMemoryDataParamOrBuilder() {
      return memoryDataParam_;
    }

    // optional .caffe.MVNParameter mvn_param = 120;
    public static final int MVN_PARAM_FIELD_NUMBER = 120;
    private caffe.Caffe.MVNParameter mvnParam_;
    /**
     * <code>optional .caffe.MVNParameter mvn_param = 120;</code>
     */
    public boolean hasMvnParam() {
      return ((bitField0_ & 0x80000000) == 0x80000000);
    }
    /**
     * <code>optional .caffe.MVNParameter mvn_param = 120;</code>
     */
    public caffe.Caffe.MVNParameter getMvnParam() {
      return mvnParam_;
    }
    /**
     * <code>optional .caffe.MVNParameter mvn_param = 120;</code>
     */
    public caffe.Caffe.MVNParameterOrBuilder getMvnParamOrBuilder() {
      return mvnParam_;
    }

    // optional .caffe.ParameterParameter parameter_param = 145;
    public static final int PARAMETER_PARAM_FIELD_NUMBER = 145;
    private caffe.Caffe.ParameterParameter parameterParam_;
    /**
     * <code>optional .caffe.ParameterParameter parameter_param = 145;</code>
     */
    public boolean hasParameterParam() {
      return ((bitField1_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .caffe.ParameterParameter parameter_param = 145;</code>
     */
    public caffe.Caffe.ParameterParameter getParameterParam() {
      return parameterParam_;
    }
    /**
     * <code>optional .caffe.ParameterParameter parameter_param = 145;</code>
     */
    public caffe.Caffe.ParameterParameterOrBuilder getParameterParamOrBuilder() {
      return parameterParam_;
    }

    // optional .caffe.PoolingParameter pooling_param = 121;
    public static final int POOLING_PARAM_FIELD_NUMBER = 121;
    private caffe.Caffe.PoolingParameter poolingParam_;
    /**
     * <code>optional .caffe.PoolingParameter pooling_param = 121;</code>
     */
    public boolean hasPoolingParam() {
      return ((bitField1_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .caffe.PoolingParameter pooling_param = 121;</code>
     */
    public caffe.Caffe.PoolingParameter getPoolingParam() {
      return poolingParam_;
    }
    /**
     * <code>optional .caffe.PoolingParameter pooling_param = 121;</code>
     */
    public caffe.Caffe.PoolingParameterOrBuilder getPoolingParamOrBuilder() {
      return poolingParam_;
    }

    // optional .caffe.PowerParameter power_param = 122;
    public static final int POWER_PARAM_FIELD_NUMBER = 122;
    private caffe.Caffe.PowerParameter powerParam_;
    /**
     * <code>optional .caffe.PowerParameter power_param = 122;</code>
     */
    public boolean hasPowerParam() {
      return ((bitField1_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .caffe.PowerParameter power_param = 122;</code>
     */
    public caffe.Caffe.PowerParameter getPowerParam() {
      return powerParam_;
    }
    /**
     * <code>optional .caffe.PowerParameter power_param = 122;</code>
     */
    public caffe.Caffe.PowerParameterOrBuilder getPowerParamOrBuilder() {
      return powerParam_;
    }

    // optional .caffe.PReLUParameter prelu_param = 131;
    public static final int PRELU_PARAM_FIELD_NUMBER = 131;
    private caffe.Caffe.PReLUParameter preluParam_;
    /**
     * <code>optional .caffe.PReLUParameter prelu_param = 131;</code>
     */
    public boolean hasPreluParam() {
      return ((bitField1_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .caffe.PReLUParameter prelu_param = 131;</code>
     */
    public caffe.Caffe.PReLUParameter getPreluParam() {
      return preluParam_;
    }
    /**
     * <code>optional .caffe.PReLUParameter prelu_param = 131;</code>
     */
    public caffe.Caffe.PReLUParameterOrBuilder getPreluParamOrBuilder() {
      return preluParam_;
    }

    // optional .caffe.PythonParameter python_param = 130;
    public static final int PYTHON_PARAM_FIELD_NUMBER = 130;
    private caffe.Caffe.PythonParameter pythonParam_;
    /**
     * <code>optional .caffe.PythonParameter python_param = 130;</code>
     */
    public boolean hasPythonParam() {
      return ((bitField1_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .caffe.PythonParameter python_param = 130;</code>
     */
    public caffe.Caffe.PythonParameter getPythonParam() {
      return pythonParam_;
    }
    /**
     * <code>optional .caffe.PythonParameter python_param = 130;</code>
     */
    public caffe.Caffe.PythonParameterOrBuilder getPythonParamOrBuilder() {
      return pythonParam_;
    }

    // optional .caffe.RecurrentParameter recurrent_param = 146;
    public static final int RECURRENT_PARAM_FIELD_NUMBER = 146;
    private caffe.Caffe.RecurrentParameter recurrentParam_;
    /**
     * <code>optional .caffe.RecurrentParameter recurrent_param = 146;</code>
     */
    public boolean hasRecurrentParam() {
      return ((bitField1_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .caffe.RecurrentParameter recurrent_param = 146;</code>
     */
    public caffe.Caffe.RecurrentParameter getRecurrentParam() {
      return recurrentParam_;
    }
    /**
     * <code>optional .caffe.RecurrentParameter recurrent_param = 146;</code>
     */
    public caffe.Caffe.RecurrentParameterOrBuilder getRecurrentParamOrBuilder() {
      return recurrentParam_;
    }

    // optional .caffe.ReductionParameter reduction_param = 136;
    public static final int REDUCTION_PARAM_FIELD_NUMBER = 136;
    private caffe.Caffe.ReductionParameter reductionParam_;
    /**
     * <code>optional .caffe.ReductionParameter reduction_param = 136;</code>
     */
    public boolean hasReductionParam() {
      return ((bitField1_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional .caffe.ReductionParameter reduction_param = 136;</code>
     */
    public caffe.Caffe.ReductionParameter getReductionParam() {
      return reductionParam_;
    }
    /**
     * <code>optional .caffe.ReductionParameter reduction_param = 136;</code>
     */
    public caffe.Caffe.ReductionParameterOrBuilder getReductionParamOrBuilder() {
      return reductionParam_;
    }

    // optional .caffe.ReLUParameter relu_param = 123;
    public static final int RELU_PARAM_FIELD_NUMBER = 123;
    private caffe.Caffe.ReLUParameter reluParam_;
    /**
     * <code>optional .caffe.ReLUParameter relu_param = 123;</code>
     */
    public boolean hasReluParam() {
      return ((bitField1_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional .caffe.ReLUParameter relu_param = 123;</code>
     */
    public caffe.Caffe.ReLUParameter getReluParam() {
      return reluParam_;
    }
    /**
     * <code>optional .caffe.ReLUParameter relu_param = 123;</code>
     */
    public caffe.Caffe.ReLUParameterOrBuilder getReluParamOrBuilder() {
      return reluParam_;
    }

    // optional .caffe.ReshapeParameter reshape_param = 133;
    public static final int RESHAPE_PARAM_FIELD_NUMBER = 133;
    private caffe.Caffe.ReshapeParameter reshapeParam_;
    /**
     * <code>optional .caffe.ReshapeParameter reshape_param = 133;</code>
     */
    public boolean hasReshapeParam() {
      return ((bitField1_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional .caffe.ReshapeParameter reshape_param = 133;</code>
     */
    public caffe.Caffe.ReshapeParameter getReshapeParam() {
      return reshapeParam_;
    }
    /**
     * <code>optional .caffe.ReshapeParameter reshape_param = 133;</code>
     */
    public caffe.Caffe.ReshapeParameterOrBuilder getReshapeParamOrBuilder() {
      return reshapeParam_;
    }

    // optional .caffe.ScaleParameter scale_param = 142;
    public static final int SCALE_PARAM_FIELD_NUMBER = 142;
    private caffe.Caffe.ScaleParameter scaleParam_;
    /**
     * <code>optional .caffe.ScaleParameter scale_param = 142;</code>
     */
    public boolean hasScaleParam() {
      return ((bitField1_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional .caffe.ScaleParameter scale_param = 142;</code>
     */
    public caffe.Caffe.ScaleParameter getScaleParam() {
      return scaleParam_;
    }
    /**
     * <code>optional .caffe.ScaleParameter scale_param = 142;</code>
     */
    public caffe.Caffe.ScaleParameterOrBuilder getScaleParamOrBuilder() {
      return scaleParam_;
    }

    // optional .caffe.SigmoidParameter sigmoid_param = 124;
    public static final int SIGMOID_PARAM_FIELD_NUMBER = 124;
    private caffe.Caffe.SigmoidParameter sigmoidParam_;
    /**
     * <code>optional .caffe.SigmoidParameter sigmoid_param = 124;</code>
     */
    public boolean hasSigmoidParam() {
      return ((bitField1_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional .caffe.SigmoidParameter sigmoid_param = 124;</code>
     */
    public caffe.Caffe.SigmoidParameter getSigmoidParam() {
      return sigmoidParam_;
    }
    /**
     * <code>optional .caffe.SigmoidParameter sigmoid_param = 124;</code>
     */
    public caffe.Caffe.SigmoidParameterOrBuilder getSigmoidParamOrBuilder() {
      return sigmoidParam_;
    }

    // optional .caffe.SoftmaxParameter softmax_param = 125;
    public static final int SOFTMAX_PARAM_FIELD_NUMBER = 125;
    private caffe.Caffe.SoftmaxParameter softmaxParam_;
    /**
     * <code>optional .caffe.SoftmaxParameter softmax_param = 125;</code>
     */
    public boolean hasSoftmaxParam() {
      return ((bitField1_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional .caffe.SoftmaxParameter softmax_param = 125;</code>
     */
    public caffe.Caffe.SoftmaxParameter getSoftmaxParam() {
      return softmaxParam_;
    }
    /**
     * <code>optional .caffe.SoftmaxParameter softmax_param = 125;</code>
     */
    public caffe.Caffe.SoftmaxParameterOrBuilder getSoftmaxParamOrBuilder() {
      return softmaxParam_;
    }

    // optional .caffe.SPPParameter spp_param = 132;
    public static final int SPP_PARAM_FIELD_NUMBER = 132;
    private caffe.Caffe.SPPParameter sppParam_;
    /**
     * <code>optional .caffe.SPPParameter spp_param = 132;</code>
     */
    public boolean hasSppParam() {
      return ((bitField1_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional .caffe.SPPParameter spp_param = 132;</code>
     */
    public caffe.Caffe.SPPParameter getSppParam() {
      return sppParam_;
    }
    /**
     * <code>optional .caffe.SPPParameter spp_param = 132;</code>
     */
    public caffe.Caffe.SPPParameterOrBuilder getSppParamOrBuilder() {
      return sppParam_;
    }

    // optional .caffe.SliceParameter slice_param = 126;
    public static final int SLICE_PARAM_FIELD_NUMBER = 126;
    private caffe.Caffe.SliceParameter sliceParam_;
    /**
     * <code>optional .caffe.SliceParameter slice_param = 126;</code>
     */
    public boolean hasSliceParam() {
      return ((bitField1_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional .caffe.SliceParameter slice_param = 126;</code>
     */
    public caffe.Caffe.SliceParameter getSliceParam() {
      return sliceParam_;
    }
    /**
     * <code>optional .caffe.SliceParameter slice_param = 126;</code>
     */
    public caffe.Caffe.SliceParameterOrBuilder getSliceParamOrBuilder() {
      return sliceParam_;
    }

    // optional .caffe.TanHParameter tanh_param = 127;
    public static final int TANH_PARAM_FIELD_NUMBER = 127;
    private caffe.Caffe.TanHParameter tanhParam_;
    /**
     * <code>optional .caffe.TanHParameter tanh_param = 127;</code>
     */
    public boolean hasTanhParam() {
      return ((bitField1_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional .caffe.TanHParameter tanh_param = 127;</code>
     */
    public caffe.Caffe.TanHParameter getTanhParam() {
      return tanhParam_;
    }
    /**
     * <code>optional .caffe.TanHParameter tanh_param = 127;</code>
     */
    public caffe.Caffe.TanHParameterOrBuilder getTanhParamOrBuilder() {
      return tanhParam_;
    }

    // optional .caffe.ThresholdParameter threshold_param = 128;
    public static final int THRESHOLD_PARAM_FIELD_NUMBER = 128;
    private caffe.Caffe.ThresholdParameter thresholdParam_;
    /**
     * <code>optional .caffe.ThresholdParameter threshold_param = 128;</code>
     */
    public boolean hasThresholdParam() {
      return ((bitField1_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional .caffe.ThresholdParameter threshold_param = 128;</code>
     */
    public caffe.Caffe.ThresholdParameter getThresholdParam() {
      return thresholdParam_;
    }
    /**
     * <code>optional .caffe.ThresholdParameter threshold_param = 128;</code>
     */
    public caffe.Caffe.ThresholdParameterOrBuilder getThresholdParamOrBuilder() {
      return thresholdParam_;
    }

    // optional .caffe.TileParameter tile_param = 138;
    public static final int TILE_PARAM_FIELD_NUMBER = 138;
    private caffe.Caffe.TileParameter tileParam_;
    /**
     * <code>optional .caffe.TileParameter tile_param = 138;</code>
     */
    public boolean hasTileParam() {
      return ((bitField1_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional .caffe.TileParameter tile_param = 138;</code>
     */
    public caffe.Caffe.TileParameter getTileParam() {
      return tileParam_;
    }
    /**
     * <code>optional .caffe.TileParameter tile_param = 138;</code>
     */
    public caffe.Caffe.TileParameterOrBuilder getTileParamOrBuilder() {
      return tileParam_;
    }

    // optional .caffe.WindowDataParameter window_data_param = 129;
    public static final int WINDOW_DATA_PARAM_FIELD_NUMBER = 129;
    private caffe.Caffe.WindowDataParameter windowDataParam_;
    /**
     * <code>optional .caffe.WindowDataParameter window_data_param = 129;</code>
     */
    public boolean hasWindowDataParam() {
      return ((bitField1_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional .caffe.WindowDataParameter window_data_param = 129;</code>
     */
    public caffe.Caffe.WindowDataParameter getWindowDataParam() {
      return windowDataParam_;
    }
    /**
     * <code>optional .caffe.WindowDataParameter window_data_param = 129;</code>
     */
    public caffe.Caffe.WindowDataParameterOrBuilder getWindowDataParamOrBuilder() {
      return windowDataParam_;
    }

    // optional .caffe.ROIPoolingParameter roi_pooling_param = 8266711;
    public static final int ROI_POOLING_PARAM_FIELD_NUMBER = 8266711;
    private caffe.Caffe.ROIPoolingParameter roiPoolingParam_;
    /**
     * <code>optional .caffe.ROIPoolingParameter roi_pooling_param = 8266711;</code>
     */
    public boolean hasRoiPoolingParam() {
      return ((bitField1_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>optional .caffe.ROIPoolingParameter roi_pooling_param = 8266711;</code>
     */
    public caffe.Caffe.ROIPoolingParameter getRoiPoolingParam() {
      return roiPoolingParam_;
    }
    /**
     * <code>optional .caffe.ROIPoolingParameter roi_pooling_param = 8266711;</code>
     */
    public caffe.Caffe.ROIPoolingParameterOrBuilder getRoiPoolingParamOrBuilder() {
      return roiPoolingParam_;
    }

    // optional .caffe.SmoothL1LossParameter smooth_l1_loss_param = 8266712;
    public static final int SMOOTH_L1_LOSS_PARAM_FIELD_NUMBER = 8266712;
    private caffe.Caffe.SmoothL1LossParameter smoothL1LossParam_;
    /**
     * <code>optional .caffe.SmoothL1LossParameter smooth_l1_loss_param = 8266712;</code>
     */
    public boolean hasSmoothL1LossParam() {
      return ((bitField1_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>optional .caffe.SmoothL1LossParameter smooth_l1_loss_param = 8266712;</code>
     */
    public caffe.Caffe.SmoothL1LossParameter getSmoothL1LossParam() {
      return smoothL1LossParam_;
    }
    /**
     * <code>optional .caffe.SmoothL1LossParameter smooth_l1_loss_param = 8266712;</code>
     */
    public caffe.Caffe.SmoothL1LossParameterOrBuilder getSmoothL1LossParamOrBuilder() {
      return smoothL1LossParam_;
    }

    // optional .caffe.ProposalParameter proposal_param = 8266713;
    public static final int PROPOSAL_PARAM_FIELD_NUMBER = 8266713;
    private caffe.Caffe.ProposalParameter proposalParam_;
    /**
     * <code>optional .caffe.ProposalParameter proposal_param = 8266713;</code>
     */
    public boolean hasProposalParam() {
      return ((bitField1_ & 0x00100000) == 0x00100000);
    }
    /**
     * <code>optional .caffe.ProposalParameter proposal_param = 8266713;</code>
     */
    public caffe.Caffe.ProposalParameter getProposalParam() {
      return proposalParam_;
    }
    /**
     * <code>optional .caffe.ProposalParameter proposal_param = 8266713;</code>
     */
    public caffe.Caffe.ProposalParameterOrBuilder getProposalParamOrBuilder() {
      return proposalParam_;
    }

    private void initFields() {
      name_ = "";
      type_ = "";
      bottom_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      top_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      phase_ = caffe.Caffe.Phase.TRAIN;
      lossWeight_ = java.util.Collections.emptyList();
      param_ = java.util.Collections.emptyList();
      blobs_ = java.util.Collections.emptyList();
      propagateDown_ = java.util.Collections.emptyList();
      include_ = java.util.Collections.emptyList();
      exclude_ = java.util.Collections.emptyList();
      transformParam_ = caffe.Caffe.TransformationParameter.getDefaultInstance();
      lossParam_ = caffe.Caffe.LossParameter.getDefaultInstance();
      accuracyParam_ = caffe.Caffe.AccuracyParameter.getDefaultInstance();
      argmaxParam_ = caffe.Caffe.ArgMaxParameter.getDefaultInstance();
      batchNormParam_ = caffe.Caffe.BatchNormParameter.getDefaultInstance();
      biasParam_ = caffe.Caffe.BiasParameter.getDefaultInstance();
      concatParam_ = caffe.Caffe.ConcatParameter.getDefaultInstance();
      contrastiveLossParam_ = caffe.Caffe.ContrastiveLossParameter.getDefaultInstance();
      convolutionParam_ = caffe.Caffe.ConvolutionParameter.getDefaultInstance();
      cropParam_ = caffe.Caffe.CropParameter.getDefaultInstance();
      dataParam_ = caffe.Caffe.DataParameter.getDefaultInstance();
      dropoutParam_ = caffe.Caffe.DropoutParameter.getDefaultInstance();
      dummyDataParam_ = caffe.Caffe.DummyDataParameter.getDefaultInstance();
      eltwiseParam_ = caffe.Caffe.EltwiseParameter.getDefaultInstance();
      eluParam_ = caffe.Caffe.ELUParameter.getDefaultInstance();
      embedParam_ = caffe.Caffe.EmbedParameter.getDefaultInstance();
      expParam_ = caffe.Caffe.ExpParameter.getDefaultInstance();
      flattenParam_ = caffe.Caffe.FlattenParameter.getDefaultInstance();
      hdf5DataParam_ = caffe.Caffe.HDF5DataParameter.getDefaultInstance();
      hdf5OutputParam_ = caffe.Caffe.HDF5OutputParameter.getDefaultInstance();
      hingeLossParam_ = caffe.Caffe.HingeLossParameter.getDefaultInstance();
      imageDataParam_ = caffe.Caffe.ImageDataParameter.getDefaultInstance();
      infogainLossParam_ = caffe.Caffe.InfogainLossParameter.getDefaultInstance();
      innerProductParam_ = caffe.Caffe.InnerProductParameter.getDefaultInstance();
      inputParam_ = caffe.Caffe.InputParameter.getDefaultInstance();
      logParam_ = caffe.Caffe.LogParameter.getDefaultInstance();
      lrnParam_ = caffe.Caffe.LRNParameter.getDefaultInstance();
      memoryDataParam_ = caffe.Caffe.MemoryDataParameter.getDefaultInstance();
      mvnParam_ = caffe.Caffe.MVNParameter.getDefaultInstance();
      parameterParam_ = caffe.Caffe.ParameterParameter.getDefaultInstance();
      poolingParam_ = caffe.Caffe.PoolingParameter.getDefaultInstance();
      powerParam_ = caffe.Caffe.PowerParameter.getDefaultInstance();
      preluParam_ = caffe.Caffe.PReLUParameter.getDefaultInstance();
      pythonParam_ = caffe.Caffe.PythonParameter.getDefaultInstance();
      recurrentParam_ = caffe.Caffe.RecurrentParameter.getDefaultInstance();
      reductionParam_ = caffe.Caffe.ReductionParameter.getDefaultInstance();
      reluParam_ = caffe.Caffe.ReLUParameter.getDefaultInstance();
      reshapeParam_ = caffe.Caffe.ReshapeParameter.getDefaultInstance();
      scaleParam_ = caffe.Caffe.ScaleParameter.getDefaultInstance();
      sigmoidParam_ = caffe.Caffe.SigmoidParameter.getDefaultInstance();
      softmaxParam_ = caffe.Caffe.SoftmaxParameter.getDefaultInstance();
      sppParam_ = caffe.Caffe.SPPParameter.getDefaultInstance();
      sliceParam_ = caffe.Caffe.SliceParameter.getDefaultInstance();
      tanhParam_ = caffe.Caffe.TanHParameter.getDefaultInstance();
      thresholdParam_ = caffe.Caffe.ThresholdParameter.getDefaultInstance();
      tileParam_ = caffe.Caffe.TileParameter.getDefaultInstance();
      windowDataParam_ = caffe.Caffe.WindowDataParameter.getDefaultInstance();
      roiPoolingParam_ = caffe.Caffe.ROIPoolingParameter.getDefaultInstance();
      smoothL1LossParam_ = caffe.Caffe.SmoothL1LossParameter.getDefaultInstance();
      proposalParam_ = caffe.Caffe.ProposalParameter.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getNameBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getTypeBytes());
      }
      for (int i = 0; i < bottom_.size(); i++) {
        output.writeBytes(3, bottom_.getByteString(i));
      }
      for (int i = 0; i < top_.size(); i++) {
        output.writeBytes(4, top_.getByteString(i));
      }
      for (int i = 0; i < lossWeight_.size(); i++) {
        output.writeFloat(5, lossWeight_.get(i));
      }
      for (int i = 0; i < param_.size(); i++) {
        output.writeMessage(6, param_.get(i));
      }
      for (int i = 0; i < blobs_.size(); i++) {
        output.writeMessage(7, blobs_.get(i));
      }
      for (int i = 0; i < include_.size(); i++) {
        output.writeMessage(8, include_.get(i));
      }
      for (int i = 0; i < exclude_.size(); i++) {
        output.writeMessage(9, exclude_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeEnum(10, phase_.getNumber());
      }
      for (int i = 0; i < propagateDown_.size(); i++) {
        output.writeBool(11, propagateDown_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(100, transformParam_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(101, lossParam_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(102, accuracyParam_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeMessage(103, argmaxParam_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeMessage(104, concatParam_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeMessage(105, contrastiveLossParam_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeMessage(106, convolutionParam_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeMessage(107, dataParam_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeMessage(108, dropoutParam_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeMessage(109, dummyDataParam_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeMessage(110, eltwiseParam_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        output.writeMessage(111, expParam_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        output.writeMessage(112, hdf5DataParam_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        output.writeMessage(113, hdf5OutputParam_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        output.writeMessage(114, hingeLossParam_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        output.writeMessage(115, imageDataParam_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        output.writeMessage(116, infogainLossParam_);
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        output.writeMessage(117, innerProductParam_);
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        output.writeMessage(118, lrnParam_);
      }
      if (((bitField0_ & 0x40000000) == 0x40000000)) {
        output.writeMessage(119, memoryDataParam_);
      }
      if (((bitField0_ & 0x80000000) == 0x80000000)) {
        output.writeMessage(120, mvnParam_);
      }
      if (((bitField1_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(121, poolingParam_);
      }
      if (((bitField1_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(122, powerParam_);
      }
      if (((bitField1_ & 0x00000080) == 0x00000080)) {
        output.writeMessage(123, reluParam_);
      }
      if (((bitField1_ & 0x00000400) == 0x00000400)) {
        output.writeMessage(124, sigmoidParam_);
      }
      if (((bitField1_ & 0x00000800) == 0x00000800)) {
        output.writeMessage(125, softmaxParam_);
      }
      if (((bitField1_ & 0x00002000) == 0x00002000)) {
        output.writeMessage(126, sliceParam_);
      }
      if (((bitField1_ & 0x00004000) == 0x00004000)) {
        output.writeMessage(127, tanhParam_);
      }
      if (((bitField1_ & 0x00008000) == 0x00008000)) {
        output.writeMessage(128, thresholdParam_);
      }
      if (((bitField1_ & 0x00020000) == 0x00020000)) {
        output.writeMessage(129, windowDataParam_);
      }
      if (((bitField1_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(130, pythonParam_);
      }
      if (((bitField1_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(131, preluParam_);
      }
      if (((bitField1_ & 0x00001000) == 0x00001000)) {
        output.writeMessage(132, sppParam_);
      }
      if (((bitField1_ & 0x00000100) == 0x00000100)) {
        output.writeMessage(133, reshapeParam_);
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        output.writeMessage(134, logParam_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        output.writeMessage(135, flattenParam_);
      }
      if (((bitField1_ & 0x00000040) == 0x00000040)) {
        output.writeMessage(136, reductionParam_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeMessage(137, embedParam_);
      }
      if (((bitField1_ & 0x00010000) == 0x00010000)) {
        output.writeMessage(138, tileParam_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeMessage(139, batchNormParam_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeMessage(140, eluParam_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeMessage(141, biasParam_);
      }
      if (((bitField1_ & 0x00000200) == 0x00000200)) {
        output.writeMessage(142, scaleParam_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        output.writeMessage(143, inputParam_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeMessage(144, cropParam_);
      }
      if (((bitField1_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(145, parameterParam_);
      }
      if (((bitField1_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(146, recurrentParam_);
      }
      if (((bitField1_ & 0x00040000) == 0x00040000)) {
        output.writeMessage(8266711, roiPoolingParam_);
      }
      if (((bitField1_ & 0x00080000) == 0x00080000)) {
        output.writeMessage(8266712, smoothL1LossParam_);
      }
      if (((bitField1_ & 0x00100000) == 0x00100000)) {
        output.writeMessage(8266713, proposalParam_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getNameBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getTypeBytes());
      }
      {
        int dataSize = 0;
        for (int i = 0; i < bottom_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(bottom_.getByteString(i));
        }
        size += dataSize;
        size += 1 * getBottomList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < top_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(top_.getByteString(i));
        }
        size += dataSize;
        size += 1 * getTopList().size();
      }
      {
        int dataSize = 0;
        dataSize = 4 * getLossWeightList().size();
        size += dataSize;
        size += 1 * getLossWeightList().size();
      }
      for (int i = 0; i < param_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, param_.get(i));
      }
      for (int i = 0; i < blobs_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, blobs_.get(i));
      }
      for (int i = 0; i < include_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, include_.get(i));
      }
      for (int i = 0; i < exclude_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, exclude_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(10, phase_.getNumber());
      }
      {
        int dataSize = 0;
        dataSize = 1 * getPropagateDownList().size();
        size += dataSize;
        size += 1 * getPropagateDownList().size();
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(100, transformParam_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(101, lossParam_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(102, accuracyParam_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(103, argmaxParam_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(104, concatParam_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(105, contrastiveLossParam_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(106, convolutionParam_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(107, dataParam_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(108, dropoutParam_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(109, dummyDataParam_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(110, eltwiseParam_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(111, expParam_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(112, hdf5DataParam_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(113, hdf5OutputParam_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(114, hingeLossParam_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(115, imageDataParam_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(116, infogainLossParam_);
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(117, innerProductParam_);
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(118, lrnParam_);
      }
      if (((bitField0_ & 0x40000000) == 0x40000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(119, memoryDataParam_);
      }
      if (((bitField0_ & 0x80000000) == 0x80000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(120, mvnParam_);
      }
      if (((bitField1_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(121, poolingParam_);
      }
      if (((bitField1_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(122, powerParam_);
      }
      if (((bitField1_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(123, reluParam_);
      }
      if (((bitField1_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(124, sigmoidParam_);
      }
      if (((bitField1_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(125, softmaxParam_);
      }
      if (((bitField1_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(126, sliceParam_);
      }
      if (((bitField1_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(127, tanhParam_);
      }
      if (((bitField1_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(128, thresholdParam_);
      }
      if (((bitField1_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(129, windowDataParam_);
      }
      if (((bitField1_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(130, pythonParam_);
      }
      if (((bitField1_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(131, preluParam_);
      }
      if (((bitField1_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(132, sppParam_);
      }
      if (((bitField1_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(133, reshapeParam_);
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(134, logParam_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(135, flattenParam_);
      }
      if (((bitField1_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(136, reductionParam_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(137, embedParam_);
      }
      if (((bitField1_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(138, tileParam_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(139, batchNormParam_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(140, eluParam_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(141, biasParam_);
      }
      if (((bitField1_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(142, scaleParam_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(143, inputParam_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(144, cropParam_);
      }
      if (((bitField1_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(145, parameterParam_);
      }
      if (((bitField1_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(146, recurrentParam_);
      }
      if (((bitField1_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8266711, roiPoolingParam_);
      }
      if (((bitField1_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8266712, smoothL1LossParam_);
      }
      if (((bitField1_ & 0x00100000) == 0x00100000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8266713, proposalParam_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.LayerParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.LayerParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.LayerParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.LayerParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.LayerParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.LayerParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.LayerParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.LayerParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.LayerParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.LayerParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.LayerParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.LayerParameter}
     *
     * <pre>
     * NOTE
     * Update the next available ID when you add a new LayerParameter field.
     *
     * LayerParameter next available layer-specific ID: 147 (last added: recurrent_param)
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements caffe.Caffe.LayerParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_LayerParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_LayerParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.LayerParameter.class, caffe.Caffe.LayerParameter.Builder.class);
      }

      // Construct using caffe.Caffe.LayerParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getParamFieldBuilder();
          getBlobsFieldBuilder();
          getIncludeFieldBuilder();
          getExcludeFieldBuilder();
          getTransformParamFieldBuilder();
          getLossParamFieldBuilder();
          getAccuracyParamFieldBuilder();
          getArgmaxParamFieldBuilder();
          getBatchNormParamFieldBuilder();
          getBiasParamFieldBuilder();
          getConcatParamFieldBuilder();
          getContrastiveLossParamFieldBuilder();
          getConvolutionParamFieldBuilder();
          getCropParamFieldBuilder();
          getDataParamFieldBuilder();
          getDropoutParamFieldBuilder();
          getDummyDataParamFieldBuilder();
          getEltwiseParamFieldBuilder();
          getEluParamFieldBuilder();
          getEmbedParamFieldBuilder();
          getExpParamFieldBuilder();
          getFlattenParamFieldBuilder();
          getHdf5DataParamFieldBuilder();
          getHdf5OutputParamFieldBuilder();
          getHingeLossParamFieldBuilder();
          getImageDataParamFieldBuilder();
          getInfogainLossParamFieldBuilder();
          getInnerProductParamFieldBuilder();
          getInputParamFieldBuilder();
          getLogParamFieldBuilder();
          getLrnParamFieldBuilder();
          getMemoryDataParamFieldBuilder();
          getMvnParamFieldBuilder();
          getParameterParamFieldBuilder();
          getPoolingParamFieldBuilder();
          getPowerParamFieldBuilder();
          getPreluParamFieldBuilder();
          getPythonParamFieldBuilder();
          getRecurrentParamFieldBuilder();
          getReductionParamFieldBuilder();
          getReluParamFieldBuilder();
          getReshapeParamFieldBuilder();
          getScaleParamFieldBuilder();
          getSigmoidParamFieldBuilder();
          getSoftmaxParamFieldBuilder();
          getSppParamFieldBuilder();
          getSliceParamFieldBuilder();
          getTanhParamFieldBuilder();
          getThresholdParamFieldBuilder();
          getTileParamFieldBuilder();
          getWindowDataParamFieldBuilder();
          getRoiPoolingParamFieldBuilder();
          getSmoothL1LossParamFieldBuilder();
          getProposalParamFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        bottom_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000004);
        top_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000008);
        phase_ = caffe.Caffe.Phase.TRAIN;
        bitField0_ = (bitField0_ & ~0x00000010);
        lossWeight_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        if (paramBuilder_ == null) {
          param_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000040);
        } else {
          paramBuilder_.clear();
        }
        if (blobsBuilder_ == null) {
          blobs_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000080);
        } else {
          blobsBuilder_.clear();
        }
        propagateDown_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        if (includeBuilder_ == null) {
          include_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000200);
        } else {
          includeBuilder_.clear();
        }
        if (excludeBuilder_ == null) {
          exclude_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000400);
        } else {
          excludeBuilder_.clear();
        }
        if (transformParamBuilder_ == null) {
          transformParam_ = caffe.Caffe.TransformationParameter.getDefaultInstance();
        } else {
          transformParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000800);
        if (lossParamBuilder_ == null) {
          lossParam_ = caffe.Caffe.LossParameter.getDefaultInstance();
        } else {
          lossParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00001000);
        if (accuracyParamBuilder_ == null) {
          accuracyParam_ = caffe.Caffe.AccuracyParameter.getDefaultInstance();
        } else {
          accuracyParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00002000);
        if (argmaxParamBuilder_ == null) {
          argmaxParam_ = caffe.Caffe.ArgMaxParameter.getDefaultInstance();
        } else {
          argmaxParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00004000);
        if (batchNormParamBuilder_ == null) {
          batchNormParam_ = caffe.Caffe.BatchNormParameter.getDefaultInstance();
        } else {
          batchNormParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00008000);
        if (biasParamBuilder_ == null) {
          biasParam_ = caffe.Caffe.BiasParameter.getDefaultInstance();
        } else {
          biasParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00010000);
        if (concatParamBuilder_ == null) {
          concatParam_ = caffe.Caffe.ConcatParameter.getDefaultInstance();
        } else {
          concatParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00020000);
        if (contrastiveLossParamBuilder_ == null) {
          contrastiveLossParam_ = caffe.Caffe.ContrastiveLossParameter.getDefaultInstance();
        } else {
          contrastiveLossParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00040000);
        if (convolutionParamBuilder_ == null) {
          convolutionParam_ = caffe.Caffe.ConvolutionParameter.getDefaultInstance();
        } else {
          convolutionParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00080000);
        if (cropParamBuilder_ == null) {
          cropParam_ = caffe.Caffe.CropParameter.getDefaultInstance();
        } else {
          cropParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00100000);
        if (dataParamBuilder_ == null) {
          dataParam_ = caffe.Caffe.DataParameter.getDefaultInstance();
        } else {
          dataParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00200000);
        if (dropoutParamBuilder_ == null) {
          dropoutParam_ = caffe.Caffe.DropoutParameter.getDefaultInstance();
        } else {
          dropoutParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00400000);
        if (dummyDataParamBuilder_ == null) {
          dummyDataParam_ = caffe.Caffe.DummyDataParameter.getDefaultInstance();
        } else {
          dummyDataParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00800000);
        if (eltwiseParamBuilder_ == null) {
          eltwiseParam_ = caffe.Caffe.EltwiseParameter.getDefaultInstance();
        } else {
          eltwiseParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x01000000);
        if (eluParamBuilder_ == null) {
          eluParam_ = caffe.Caffe.ELUParameter.getDefaultInstance();
        } else {
          eluParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x02000000);
        if (embedParamBuilder_ == null) {
          embedParam_ = caffe.Caffe.EmbedParameter.getDefaultInstance();
        } else {
          embedParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x04000000);
        if (expParamBuilder_ == null) {
          expParam_ = caffe.Caffe.ExpParameter.getDefaultInstance();
        } else {
          expParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x08000000);
        if (flattenParamBuilder_ == null) {
          flattenParam_ = caffe.Caffe.FlattenParameter.getDefaultInstance();
        } else {
          flattenParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x10000000);
        if (hdf5DataParamBuilder_ == null) {
          hdf5DataParam_ = caffe.Caffe.HDF5DataParameter.getDefaultInstance();
        } else {
          hdf5DataParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x20000000);
        if (hdf5OutputParamBuilder_ == null) {
          hdf5OutputParam_ = caffe.Caffe.HDF5OutputParameter.getDefaultInstance();
        } else {
          hdf5OutputParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x40000000);
        if (hingeLossParamBuilder_ == null) {
          hingeLossParam_ = caffe.Caffe.HingeLossParameter.getDefaultInstance();
        } else {
          hingeLossParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x80000000);
        if (imageDataParamBuilder_ == null) {
          imageDataParam_ = caffe.Caffe.ImageDataParameter.getDefaultInstance();
        } else {
          imageDataParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000001);
        if (infogainLossParamBuilder_ == null) {
          infogainLossParam_ = caffe.Caffe.InfogainLossParameter.getDefaultInstance();
        } else {
          infogainLossParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000002);
        if (innerProductParamBuilder_ == null) {
          innerProductParam_ = caffe.Caffe.InnerProductParameter.getDefaultInstance();
        } else {
          innerProductParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000004);
        if (inputParamBuilder_ == null) {
          inputParam_ = caffe.Caffe.InputParameter.getDefaultInstance();
        } else {
          inputParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000008);
        if (logParamBuilder_ == null) {
          logParam_ = caffe.Caffe.LogParameter.getDefaultInstance();
        } else {
          logParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000010);
        if (lrnParamBuilder_ == null) {
          lrnParam_ = caffe.Caffe.LRNParameter.getDefaultInstance();
        } else {
          lrnParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000020);
        if (memoryDataParamBuilder_ == null) {
          memoryDataParam_ = caffe.Caffe.MemoryDataParameter.getDefaultInstance();
        } else {
          memoryDataParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000040);
        if (mvnParamBuilder_ == null) {
          mvnParam_ = caffe.Caffe.MVNParameter.getDefaultInstance();
        } else {
          mvnParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000080);
        if (parameterParamBuilder_ == null) {
          parameterParam_ = caffe.Caffe.ParameterParameter.getDefaultInstance();
        } else {
          parameterParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000100);
        if (poolingParamBuilder_ == null) {
          poolingParam_ = caffe.Caffe.PoolingParameter.getDefaultInstance();
        } else {
          poolingParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000200);
        if (powerParamBuilder_ == null) {
          powerParam_ = caffe.Caffe.PowerParameter.getDefaultInstance();
        } else {
          powerParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000400);
        if (preluParamBuilder_ == null) {
          preluParam_ = caffe.Caffe.PReLUParameter.getDefaultInstance();
        } else {
          preluParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000800);
        if (pythonParamBuilder_ == null) {
          pythonParam_ = caffe.Caffe.PythonParameter.getDefaultInstance();
        } else {
          pythonParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00001000);
        if (recurrentParamBuilder_ == null) {
          recurrentParam_ = caffe.Caffe.RecurrentParameter.getDefaultInstance();
        } else {
          recurrentParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00002000);
        if (reductionParamBuilder_ == null) {
          reductionParam_ = caffe.Caffe.ReductionParameter.getDefaultInstance();
        } else {
          reductionParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00004000);
        if (reluParamBuilder_ == null) {
          reluParam_ = caffe.Caffe.ReLUParameter.getDefaultInstance();
        } else {
          reluParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00008000);
        if (reshapeParamBuilder_ == null) {
          reshapeParam_ = caffe.Caffe.ReshapeParameter.getDefaultInstance();
        } else {
          reshapeParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00010000);
        if (scaleParamBuilder_ == null) {
          scaleParam_ = caffe.Caffe.ScaleParameter.getDefaultInstance();
        } else {
          scaleParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00020000);
        if (sigmoidParamBuilder_ == null) {
          sigmoidParam_ = caffe.Caffe.SigmoidParameter.getDefaultInstance();
        } else {
          sigmoidParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00040000);
        if (softmaxParamBuilder_ == null) {
          softmaxParam_ = caffe.Caffe.SoftmaxParameter.getDefaultInstance();
        } else {
          softmaxParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00080000);
        if (sppParamBuilder_ == null) {
          sppParam_ = caffe.Caffe.SPPParameter.getDefaultInstance();
        } else {
          sppParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00100000);
        if (sliceParamBuilder_ == null) {
          sliceParam_ = caffe.Caffe.SliceParameter.getDefaultInstance();
        } else {
          sliceParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00200000);
        if (tanhParamBuilder_ == null) {
          tanhParam_ = caffe.Caffe.TanHParameter.getDefaultInstance();
        } else {
          tanhParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00400000);
        if (thresholdParamBuilder_ == null) {
          thresholdParam_ = caffe.Caffe.ThresholdParameter.getDefaultInstance();
        } else {
          thresholdParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00800000);
        if (tileParamBuilder_ == null) {
          tileParam_ = caffe.Caffe.TileParameter.getDefaultInstance();
        } else {
          tileParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x01000000);
        if (windowDataParamBuilder_ == null) {
          windowDataParam_ = caffe.Caffe.WindowDataParameter.getDefaultInstance();
        } else {
          windowDataParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x02000000);
        if (roiPoolingParamBuilder_ == null) {
          roiPoolingParam_ = caffe.Caffe.ROIPoolingParameter.getDefaultInstance();
        } else {
          roiPoolingParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x04000000);
        if (smoothL1LossParamBuilder_ == null) {
          smoothL1LossParam_ = caffe.Caffe.SmoothL1LossParameter.getDefaultInstance();
        } else {
          smoothL1LossParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x08000000);
        if (proposalParamBuilder_ == null) {
          proposalParam_ = caffe.Caffe.ProposalParameter.getDefaultInstance();
        } else {
          proposalParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x10000000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_LayerParameter_descriptor;
      }

      public caffe.Caffe.LayerParameter getDefaultInstanceForType() {
        return caffe.Caffe.LayerParameter.getDefaultInstance();
      }

      public caffe.Caffe.LayerParameter build() {
        caffe.Caffe.LayerParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.LayerParameter buildPartial() {
        caffe.Caffe.LayerParameter result = new caffe.Caffe.LayerParameter(this);
        int from_bitField0_ = bitField0_;
        int from_bitField1_ = bitField1_;
        int to_bitField0_ = 0;
        int to_bitField1_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.name_ = name_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.type_ = type_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          bottom_ = new com.google.protobuf.UnmodifiableLazyStringList(
              bottom_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.bottom_ = bottom_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          top_ = new com.google.protobuf.UnmodifiableLazyStringList(
              top_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.top_ = top_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000004;
        }
        result.phase_ = phase_;
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          lossWeight_ = java.util.Collections.unmodifiableList(lossWeight_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.lossWeight_ = lossWeight_;
        if (paramBuilder_ == null) {
          if (((bitField0_ & 0x00000040) == 0x00000040)) {
            param_ = java.util.Collections.unmodifiableList(param_);
            bitField0_ = (bitField0_ & ~0x00000040);
          }
          result.param_ = param_;
        } else {
          result.param_ = paramBuilder_.build();
        }
        if (blobsBuilder_ == null) {
          if (((bitField0_ & 0x00000080) == 0x00000080)) {
            blobs_ = java.util.Collections.unmodifiableList(blobs_);
            bitField0_ = (bitField0_ & ~0x00000080);
          }
          result.blobs_ = blobs_;
        } else {
          result.blobs_ = blobsBuilder_.build();
        }
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
          propagateDown_ = java.util.Collections.unmodifiableList(propagateDown_);
          bitField0_ = (bitField0_ & ~0x00000100);
        }
        result.propagateDown_ = propagateDown_;
        if (includeBuilder_ == null) {
          if (((bitField0_ & 0x00000200) == 0x00000200)) {
            include_ = java.util.Collections.unmodifiableList(include_);
            bitField0_ = (bitField0_ & ~0x00000200);
          }
          result.include_ = include_;
        } else {
          result.include_ = includeBuilder_.build();
        }
        if (excludeBuilder_ == null) {
          if (((bitField0_ & 0x00000400) == 0x00000400)) {
            exclude_ = java.util.Collections.unmodifiableList(exclude_);
            bitField0_ = (bitField0_ & ~0x00000400);
          }
          result.exclude_ = exclude_;
        } else {
          result.exclude_ = excludeBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000008;
        }
        if (transformParamBuilder_ == null) {
          result.transformParam_ = transformParam_;
        } else {
          result.transformParam_ = transformParamBuilder_.build();
        }
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00000010;
        }
        if (lossParamBuilder_ == null) {
          result.lossParam_ = lossParam_;
        } else {
          result.lossParam_ = lossParamBuilder_.build();
        }
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00000020;
        }
        if (accuracyParamBuilder_ == null) {
          result.accuracyParam_ = accuracyParam_;
        } else {
          result.accuracyParam_ = accuracyParamBuilder_.build();
        }
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00000040;
        }
        if (argmaxParamBuilder_ == null) {
          result.argmaxParam_ = argmaxParam_;
        } else {
          result.argmaxParam_ = argmaxParamBuilder_.build();
        }
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00000080;
        }
        if (batchNormParamBuilder_ == null) {
          result.batchNormParam_ = batchNormParam_;
        } else {
          result.batchNormParam_ = batchNormParamBuilder_.build();
        }
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00000100;
        }
        if (biasParamBuilder_ == null) {
          result.biasParam_ = biasParam_;
        } else {
          result.biasParam_ = biasParamBuilder_.build();
        }
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00000200;
        }
        if (concatParamBuilder_ == null) {
          result.concatParam_ = concatParam_;
        } else {
          result.concatParam_ = concatParamBuilder_.build();
        }
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00000400;
        }
        if (contrastiveLossParamBuilder_ == null) {
          result.contrastiveLossParam_ = contrastiveLossParam_;
        } else {
          result.contrastiveLossParam_ = contrastiveLossParamBuilder_.build();
        }
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00000800;
        }
        if (convolutionParamBuilder_ == null) {
          result.convolutionParam_ = convolutionParam_;
        } else {
          result.convolutionParam_ = convolutionParamBuilder_.build();
        }
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00001000;
        }
        if (cropParamBuilder_ == null) {
          result.cropParam_ = cropParam_;
        } else {
          result.cropParam_ = cropParamBuilder_.build();
        }
        if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
          to_bitField0_ |= 0x00002000;
        }
        if (dataParamBuilder_ == null) {
          result.dataParam_ = dataParam_;
        } else {
          result.dataParam_ = dataParamBuilder_.build();
        }
        if (((from_bitField0_ & 0x00400000) == 0x00400000)) {
          to_bitField0_ |= 0x00004000;
        }
        if (dropoutParamBuilder_ == null) {
          result.dropoutParam_ = dropoutParam_;
        } else {
          result.dropoutParam_ = dropoutParamBuilder_.build();
        }
        if (((from_bitField0_ & 0x00800000) == 0x00800000)) {
          to_bitField0_ |= 0x00008000;
        }
        if (dummyDataParamBuilder_ == null) {
          result.dummyDataParam_ = dummyDataParam_;
        } else {
          result.dummyDataParam_ = dummyDataParamBuilder_.build();
        }
        if (((from_bitField0_ & 0x01000000) == 0x01000000)) {
          to_bitField0_ |= 0x00010000;
        }
        if (eltwiseParamBuilder_ == null) {
          result.eltwiseParam_ = eltwiseParam_;
        } else {
          result.eltwiseParam_ = eltwiseParamBuilder_.build();
        }
        if (((from_bitField0_ & 0x02000000) == 0x02000000)) {
          to_bitField0_ |= 0x00020000;
        }
        if (eluParamBuilder_ == null) {
          result.eluParam_ = eluParam_;
        } else {
          result.eluParam_ = eluParamBuilder_.build();
        }
        if (((from_bitField0_ & 0x04000000) == 0x04000000)) {
          to_bitField0_ |= 0x00040000;
        }
        if (embedParamBuilder_ == null) {
          result.embedParam_ = embedParam_;
        } else {
          result.embedParam_ = embedParamBuilder_.build();
        }
        if (((from_bitField0_ & 0x08000000) == 0x08000000)) {
          to_bitField0_ |= 0x00080000;
        }
        if (expParamBuilder_ == null) {
          result.expParam_ = expParam_;
        } else {
          result.expParam_ = expParamBuilder_.build();
        }
        if (((from_bitField0_ & 0x10000000) == 0x10000000)) {
          to_bitField0_ |= 0x00100000;
        }
        if (flattenParamBuilder_ == null) {
          result.flattenParam_ = flattenParam_;
        } else {
          result.flattenParam_ = flattenParamBuilder_.build();
        }
        if (((from_bitField0_ & 0x20000000) == 0x20000000)) {
          to_bitField0_ |= 0x00200000;
        }
        if (hdf5DataParamBuilder_ == null) {
          result.hdf5DataParam_ = hdf5DataParam_;
        } else {
          result.hdf5DataParam_ = hdf5DataParamBuilder_.build();
        }
        if (((from_bitField0_ & 0x40000000) == 0x40000000)) {
          to_bitField0_ |= 0x00400000;
        }
        if (hdf5OutputParamBuilder_ == null) {
          result.hdf5OutputParam_ = hdf5OutputParam_;
        } else {
          result.hdf5OutputParam_ = hdf5OutputParamBuilder_.build();
        }
        if (((from_bitField0_ & 0x80000000) == 0x80000000)) {
          to_bitField0_ |= 0x00800000;
        }
        if (hingeLossParamBuilder_ == null) {
          result.hingeLossParam_ = hingeLossParam_;
        } else {
          result.hingeLossParam_ = hingeLossParamBuilder_.build();
        }
        if (((from_bitField1_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x01000000;
        }
        if (imageDataParamBuilder_ == null) {
          result.imageDataParam_ = imageDataParam_;
        } else {
          result.imageDataParam_ = imageDataParamBuilder_.build();
        }
        if (((from_bitField1_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x02000000;
        }
        if (infogainLossParamBuilder_ == null) {
          result.infogainLossParam_ = infogainLossParam_;
        } else {
          result.infogainLossParam_ = infogainLossParamBuilder_.build();
        }
        if (((from_bitField1_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x04000000;
        }
        if (innerProductParamBuilder_ == null) {
          result.innerProductParam_ = innerProductParam_;
        } else {
          result.innerProductParam_ = innerProductParamBuilder_.build();
        }
        if (((from_bitField1_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x08000000;
        }
        if (inputParamBuilder_ == null) {
          result.inputParam_ = inputParam_;
        } else {
          result.inputParam_ = inputParamBuilder_.build();
        }
        if (((from_bitField1_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x10000000;
        }
        if (logParamBuilder_ == null) {
          result.logParam_ = logParam_;
        } else {
          result.logParam_ = logParamBuilder_.build();
        }
        if (((from_bitField1_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x20000000;
        }
        if (lrnParamBuilder_ == null) {
          result.lrnParam_ = lrnParam_;
        } else {
          result.lrnParam_ = lrnParamBuilder_.build();
        }
        if (((from_bitField1_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x40000000;
        }
        if (memoryDataParamBuilder_ == null) {
          result.memoryDataParam_ = memoryDataParam_;
        } else {
          result.memoryDataParam_ = memoryDataParamBuilder_.build();
        }
        if (((from_bitField1_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x80000000;
        }
        if (mvnParamBuilder_ == null) {
          result.mvnParam_ = mvnParam_;
        } else {
          result.mvnParam_ = mvnParamBuilder_.build();
        }
        if (((from_bitField1_ & 0x00000100) == 0x00000100)) {
          to_bitField1_ |= 0x00000001;
        }
        if (parameterParamBuilder_ == null) {
          result.parameterParam_ = parameterParam_;
        } else {
          result.parameterParam_ = parameterParamBuilder_.build();
        }
        if (((from_bitField1_ & 0x00000200) == 0x00000200)) {
          to_bitField1_ |= 0x00000002;
        }
        if (poolingParamBuilder_ == null) {
          result.poolingParam_ = poolingParam_;
        } else {
          result.poolingParam_ = poolingParamBuilder_.build();
        }
        if (((from_bitField1_ & 0x00000400) == 0x00000400)) {
          to_bitField1_ |= 0x00000004;
        }
        if (powerParamBuilder_ == null) {
          result.powerParam_ = powerParam_;
        } else {
          result.powerParam_ = powerParamBuilder_.build();
        }
        if (((from_bitField1_ & 0x00000800) == 0x00000800)) {
          to_bitField1_ |= 0x00000008;
        }
        if (preluParamBuilder_ == null) {
          result.preluParam_ = preluParam_;
        } else {
          result.preluParam_ = preluParamBuilder_.build();
        }
        if (((from_bitField1_ & 0x00001000) == 0x00001000)) {
          to_bitField1_ |= 0x00000010;
        }
        if (pythonParamBuilder_ == null) {
          result.pythonParam_ = pythonParam_;
        } else {
          result.pythonParam_ = pythonParamBuilder_.build();
        }
        if (((from_bitField1_ & 0x00002000) == 0x00002000)) {
          to_bitField1_ |= 0x00000020;
        }
        if (recurrentParamBuilder_ == null) {
          result.recurrentParam_ = recurrentParam_;
        } else {
          result.recurrentParam_ = recurrentParamBuilder_.build();
        }
        if (((from_bitField1_ & 0x00004000) == 0x00004000)) {
          to_bitField1_ |= 0x00000040;
        }
        if (reductionParamBuilder_ == null) {
          result.reductionParam_ = reductionParam_;
        } else {
          result.reductionParam_ = reductionParamBuilder_.build();
        }
        if (((from_bitField1_ & 0x00008000) == 0x00008000)) {
          to_bitField1_ |= 0x00000080;
        }
        if (reluParamBuilder_ == null) {
          result.reluParam_ = reluParam_;
        } else {
          result.reluParam_ = reluParamBuilder_.build();
        }
        if (((from_bitField1_ & 0x00010000) == 0x00010000)) {
          to_bitField1_ |= 0x00000100;
        }
        if (reshapeParamBuilder_ == null) {
          result.reshapeParam_ = reshapeParam_;
        } else {
          result.reshapeParam_ = reshapeParamBuilder_.build();
        }
        if (((from_bitField1_ & 0x00020000) == 0x00020000)) {
          to_bitField1_ |= 0x00000200;
        }
        if (scaleParamBuilder_ == null) {
          result.scaleParam_ = scaleParam_;
        } else {
          result.scaleParam_ = scaleParamBuilder_.build();
        }
        if (((from_bitField1_ & 0x00040000) == 0x00040000)) {
          to_bitField1_ |= 0x00000400;
        }
        if (sigmoidParamBuilder_ == null) {
          result.sigmoidParam_ = sigmoidParam_;
        } else {
          result.sigmoidParam_ = sigmoidParamBuilder_.build();
        }
        if (((from_bitField1_ & 0x00080000) == 0x00080000)) {
          to_bitField1_ |= 0x00000800;
        }
        if (softmaxParamBuilder_ == null) {
          result.softmaxParam_ = softmaxParam_;
        } else {
          result.softmaxParam_ = softmaxParamBuilder_.build();
        }
        if (((from_bitField1_ & 0x00100000) == 0x00100000)) {
          to_bitField1_ |= 0x00001000;
        }
        if (sppParamBuilder_ == null) {
          result.sppParam_ = sppParam_;
        } else {
          result.sppParam_ = sppParamBuilder_.build();
        }
        if (((from_bitField1_ & 0x00200000) == 0x00200000)) {
          to_bitField1_ |= 0x00002000;
        }
        if (sliceParamBuilder_ == null) {
          result.sliceParam_ = sliceParam_;
        } else {
          result.sliceParam_ = sliceParamBuilder_.build();
        }
        if (((from_bitField1_ & 0x00400000) == 0x00400000)) {
          to_bitField1_ |= 0x00004000;
        }
        if (tanhParamBuilder_ == null) {
          result.tanhParam_ = tanhParam_;
        } else {
          result.tanhParam_ = tanhParamBuilder_.build();
        }
        if (((from_bitField1_ & 0x00800000) == 0x00800000)) {
          to_bitField1_ |= 0x00008000;
        }
        if (thresholdParamBuilder_ == null) {
          result.thresholdParam_ = thresholdParam_;
        } else {
          result.thresholdParam_ = thresholdParamBuilder_.build();
        }
        if (((from_bitField1_ & 0x01000000) == 0x01000000)) {
          to_bitField1_ |= 0x00010000;
        }
        if (tileParamBuilder_ == null) {
          result.tileParam_ = tileParam_;
        } else {
          result.tileParam_ = tileParamBuilder_.build();
        }
        if (((from_bitField1_ & 0x02000000) == 0x02000000)) {
          to_bitField1_ |= 0x00020000;
        }
        if (windowDataParamBuilder_ == null) {
          result.windowDataParam_ = windowDataParam_;
        } else {
          result.windowDataParam_ = windowDataParamBuilder_.build();
        }
        if (((from_bitField1_ & 0x04000000) == 0x04000000)) {
          to_bitField1_ |= 0x00040000;
        }
        if (roiPoolingParamBuilder_ == null) {
          result.roiPoolingParam_ = roiPoolingParam_;
        } else {
          result.roiPoolingParam_ = roiPoolingParamBuilder_.build();
        }
        if (((from_bitField1_ & 0x08000000) == 0x08000000)) {
          to_bitField1_ |= 0x00080000;
        }
        if (smoothL1LossParamBuilder_ == null) {
          result.smoothL1LossParam_ = smoothL1LossParam_;
        } else {
          result.smoothL1LossParam_ = smoothL1LossParamBuilder_.build();
        }
        if (((from_bitField1_ & 0x10000000) == 0x10000000)) {
          to_bitField1_ |= 0x00100000;
        }
        if (proposalParamBuilder_ == null) {
          result.proposalParam_ = proposalParam_;
        } else {
          result.proposalParam_ = proposalParamBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        result.bitField1_ = to_bitField1_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.LayerParameter) {
          return mergeFrom((caffe.Caffe.LayerParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.LayerParameter other) {
        if (other == caffe.Caffe.LayerParameter.getDefaultInstance()) return this;
        if (other.hasName()) {
          bitField0_ |= 0x00000001;
          name_ = other.name_;
          onChanged();
        }
        if (other.hasType()) {
          bitField0_ |= 0x00000002;
          type_ = other.type_;
          onChanged();
        }
        if (!other.bottom_.isEmpty()) {
          if (bottom_.isEmpty()) {
            bottom_ = other.bottom_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureBottomIsMutable();
            bottom_.addAll(other.bottom_);
          }
          onChanged();
        }
        if (!other.top_.isEmpty()) {
          if (top_.isEmpty()) {
            top_ = other.top_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureTopIsMutable();
            top_.addAll(other.top_);
          }
          onChanged();
        }
        if (other.hasPhase()) {
          setPhase(other.getPhase());
        }
        if (!other.lossWeight_.isEmpty()) {
          if (lossWeight_.isEmpty()) {
            lossWeight_ = other.lossWeight_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureLossWeightIsMutable();
            lossWeight_.addAll(other.lossWeight_);
          }
          onChanged();
        }
        if (paramBuilder_ == null) {
          if (!other.param_.isEmpty()) {
            if (param_.isEmpty()) {
              param_ = other.param_;
              bitField0_ = (bitField0_ & ~0x00000040);
            } else {
              ensureParamIsMutable();
              param_.addAll(other.param_);
            }
            onChanged();
          }
        } else {
          if (!other.param_.isEmpty()) {
            if (paramBuilder_.isEmpty()) {
              paramBuilder_.dispose();
              paramBuilder_ = null;
              param_ = other.param_;
              bitField0_ = (bitField0_ & ~0x00000040);
              paramBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getParamFieldBuilder() : null;
            } else {
              paramBuilder_.addAllMessages(other.param_);
            }
          }
        }
        if (blobsBuilder_ == null) {
          if (!other.blobs_.isEmpty()) {
            if (blobs_.isEmpty()) {
              blobs_ = other.blobs_;
              bitField0_ = (bitField0_ & ~0x00000080);
            } else {
              ensureBlobsIsMutable();
              blobs_.addAll(other.blobs_);
            }
            onChanged();
          }
        } else {
          if (!other.blobs_.isEmpty()) {
            if (blobsBuilder_.isEmpty()) {
              blobsBuilder_.dispose();
              blobsBuilder_ = null;
              blobs_ = other.blobs_;
              bitField0_ = (bitField0_ & ~0x00000080);
              blobsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getBlobsFieldBuilder() : null;
            } else {
              blobsBuilder_.addAllMessages(other.blobs_);
            }
          }
        }
        if (!other.propagateDown_.isEmpty()) {
          if (propagateDown_.isEmpty()) {
            propagateDown_ = other.propagateDown_;
            bitField0_ = (bitField0_ & ~0x00000100);
          } else {
            ensurePropagateDownIsMutable();
            propagateDown_.addAll(other.propagateDown_);
          }
          onChanged();
        }
        if (includeBuilder_ == null) {
          if (!other.include_.isEmpty()) {
            if (include_.isEmpty()) {
              include_ = other.include_;
              bitField0_ = (bitField0_ & ~0x00000200);
            } else {
              ensureIncludeIsMutable();
              include_.addAll(other.include_);
            }
            onChanged();
          }
        } else {
          if (!other.include_.isEmpty()) {
            if (includeBuilder_.isEmpty()) {
              includeBuilder_.dispose();
              includeBuilder_ = null;
              include_ = other.include_;
              bitField0_ = (bitField0_ & ~0x00000200);
              includeBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getIncludeFieldBuilder() : null;
            } else {
              includeBuilder_.addAllMessages(other.include_);
            }
          }
        }
        if (excludeBuilder_ == null) {
          if (!other.exclude_.isEmpty()) {
            if (exclude_.isEmpty()) {
              exclude_ = other.exclude_;
              bitField0_ = (bitField0_ & ~0x00000400);
            } else {
              ensureExcludeIsMutable();
              exclude_.addAll(other.exclude_);
            }
            onChanged();
          }
        } else {
          if (!other.exclude_.isEmpty()) {
            if (excludeBuilder_.isEmpty()) {
              excludeBuilder_.dispose();
              excludeBuilder_ = null;
              exclude_ = other.exclude_;
              bitField0_ = (bitField0_ & ~0x00000400);
              excludeBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getExcludeFieldBuilder() : null;
            } else {
              excludeBuilder_.addAllMessages(other.exclude_);
            }
          }
        }
        if (other.hasTransformParam()) {
          mergeTransformParam(other.getTransformParam());
        }
        if (other.hasLossParam()) {
          mergeLossParam(other.getLossParam());
        }
        if (other.hasAccuracyParam()) {
          mergeAccuracyParam(other.getAccuracyParam());
        }
        if (other.hasArgmaxParam()) {
          mergeArgmaxParam(other.getArgmaxParam());
        }
        if (other.hasBatchNormParam()) {
          mergeBatchNormParam(other.getBatchNormParam());
        }
        if (other.hasBiasParam()) {
          mergeBiasParam(other.getBiasParam());
        }
        if (other.hasConcatParam()) {
          mergeConcatParam(other.getConcatParam());
        }
        if (other.hasContrastiveLossParam()) {
          mergeContrastiveLossParam(other.getContrastiveLossParam());
        }
        if (other.hasConvolutionParam()) {
          mergeConvolutionParam(other.getConvolutionParam());
        }
        if (other.hasCropParam()) {
          mergeCropParam(other.getCropParam());
        }
        if (other.hasDataParam()) {
          mergeDataParam(other.getDataParam());
        }
        if (other.hasDropoutParam()) {
          mergeDropoutParam(other.getDropoutParam());
        }
        if (other.hasDummyDataParam()) {
          mergeDummyDataParam(other.getDummyDataParam());
        }
        if (other.hasEltwiseParam()) {
          mergeEltwiseParam(other.getEltwiseParam());
        }
        if (other.hasEluParam()) {
          mergeEluParam(other.getEluParam());
        }
        if (other.hasEmbedParam()) {
          mergeEmbedParam(other.getEmbedParam());
        }
        if (other.hasExpParam()) {
          mergeExpParam(other.getExpParam());
        }
        if (other.hasFlattenParam()) {
          mergeFlattenParam(other.getFlattenParam());
        }
        if (other.hasHdf5DataParam()) {
          mergeHdf5DataParam(other.getHdf5DataParam());
        }
        if (other.hasHdf5OutputParam()) {
          mergeHdf5OutputParam(other.getHdf5OutputParam());
        }
        if (other.hasHingeLossParam()) {
          mergeHingeLossParam(other.getHingeLossParam());
        }
        if (other.hasImageDataParam()) {
          mergeImageDataParam(other.getImageDataParam());
        }
        if (other.hasInfogainLossParam()) {
          mergeInfogainLossParam(other.getInfogainLossParam());
        }
        if (other.hasInnerProductParam()) {
          mergeInnerProductParam(other.getInnerProductParam());
        }
        if (other.hasInputParam()) {
          mergeInputParam(other.getInputParam());
        }
        if (other.hasLogParam()) {
          mergeLogParam(other.getLogParam());
        }
        if (other.hasLrnParam()) {
          mergeLrnParam(other.getLrnParam());
        }
        if (other.hasMemoryDataParam()) {
          mergeMemoryDataParam(other.getMemoryDataParam());
        }
        if (other.hasMvnParam()) {
          mergeMvnParam(other.getMvnParam());
        }
        if (other.hasParameterParam()) {
          mergeParameterParam(other.getParameterParam());
        }
        if (other.hasPoolingParam()) {
          mergePoolingParam(other.getPoolingParam());
        }
        if (other.hasPowerParam()) {
          mergePowerParam(other.getPowerParam());
        }
        if (other.hasPreluParam()) {
          mergePreluParam(other.getPreluParam());
        }
        if (other.hasPythonParam()) {
          mergePythonParam(other.getPythonParam());
        }
        if (other.hasRecurrentParam()) {
          mergeRecurrentParam(other.getRecurrentParam());
        }
        if (other.hasReductionParam()) {
          mergeReductionParam(other.getReductionParam());
        }
        if (other.hasReluParam()) {
          mergeReluParam(other.getReluParam());
        }
        if (other.hasReshapeParam()) {
          mergeReshapeParam(other.getReshapeParam());
        }
        if (other.hasScaleParam()) {
          mergeScaleParam(other.getScaleParam());
        }
        if (other.hasSigmoidParam()) {
          mergeSigmoidParam(other.getSigmoidParam());
        }
        if (other.hasSoftmaxParam()) {
          mergeSoftmaxParam(other.getSoftmaxParam());
        }
        if (other.hasSppParam()) {
          mergeSppParam(other.getSppParam());
        }
        if (other.hasSliceParam()) {
          mergeSliceParam(other.getSliceParam());
        }
        if (other.hasTanhParam()) {
          mergeTanhParam(other.getTanhParam());
        }
        if (other.hasThresholdParam()) {
          mergeThresholdParam(other.getThresholdParam());
        }
        if (other.hasTileParam()) {
          mergeTileParam(other.getTileParam());
        }
        if (other.hasWindowDataParam()) {
          mergeWindowDataParam(other.getWindowDataParam());
        }
        if (other.hasRoiPoolingParam()) {
          mergeRoiPoolingParam(other.getRoiPoolingParam());
        }
        if (other.hasSmoothL1LossParam()) {
          mergeSmoothL1LossParam(other.getSmoothL1LossParam());
        }
        if (other.hasProposalParam()) {
          mergeProposalParam(other.getProposalParam());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.LayerParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.LayerParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;
      private int bitField1_;

      // optional string name = 1;
      private java.lang.Object name_ = "";
      /**
       * <code>optional string name = 1;</code>
       *
       * <pre>
       * the layer name
       * </pre>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string name = 1;</code>
       *
       * <pre>
       * the layer name
       * </pre>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string name = 1;</code>
       *
       * <pre>
       * the layer name
       * </pre>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string name = 1;</code>
       *
       * <pre>
       * the layer name
       * </pre>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 1;</code>
       *
       * <pre>
       * the layer name
       * </pre>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 1;</code>
       *
       * <pre>
       * the layer name
       * </pre>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }

      // optional string type = 2;
      private java.lang.Object type_ = "";
      /**
       * <code>optional string type = 2;</code>
       *
       * <pre>
       * the layer type
       * </pre>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string type = 2;</code>
       *
       * <pre>
       * the layer type
       * </pre>
       */
      public java.lang.String getType() {
        java.lang.Object ref = type_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          type_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string type = 2;</code>
       *
       * <pre>
       * the layer type
       * </pre>
       */
      public com.google.protobuf.ByteString
          getTypeBytes() {
        java.lang.Object ref = type_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          type_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string type = 2;</code>
       *
       * <pre>
       * the layer type
       * </pre>
       */
      public Builder setType(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string type = 2;</code>
       *
       * <pre>
       * the layer type
       * </pre>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000002);
        type_ = getDefaultInstance().getType();
        onChanged();
        return this;
      }
      /**
       * <code>optional string type = 2;</code>
       *
       * <pre>
       * the layer type
       * </pre>
       */
      public Builder setTypeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        type_ = value;
        onChanged();
        return this;
      }

      // repeated string bottom = 3;
      private com.google.protobuf.LazyStringList bottom_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureBottomIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          bottom_ = new com.google.protobuf.LazyStringArrayList(bottom_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated string bottom = 3;</code>
       *
       * <pre>
       * the name of each bottom blob
       * </pre>
       */
      public java.util.List<java.lang.String>
          getBottomList() {
        return java.util.Collections.unmodifiableList(bottom_);
      }
      /**
       * <code>repeated string bottom = 3;</code>
       *
       * <pre>
       * the name of each bottom blob
       * </pre>
       */
      public int getBottomCount() {
        return bottom_.size();
      }
      /**
       * <code>repeated string bottom = 3;</code>
       *
       * <pre>
       * the name of each bottom blob
       * </pre>
       */
      public java.lang.String getBottom(int index) {
        return bottom_.get(index);
      }
      /**
       * <code>repeated string bottom = 3;</code>
       *
       * <pre>
       * the name of each bottom blob
       * </pre>
       */
      public com.google.protobuf.ByteString
          getBottomBytes(int index) {
        return bottom_.getByteString(index);
      }
      /**
       * <code>repeated string bottom = 3;</code>
       *
       * <pre>
       * the name of each bottom blob
       * </pre>
       */
      public Builder setBottom(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureBottomIsMutable();
        bottom_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string bottom = 3;</code>
       *
       * <pre>
       * the name of each bottom blob
       * </pre>
       */
      public Builder addBottom(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureBottomIsMutable();
        bottom_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string bottom = 3;</code>
       *
       * <pre>
       * the name of each bottom blob
       * </pre>
       */
      public Builder addAllBottom(
          java.lang.Iterable<java.lang.String> values) {
        ensureBottomIsMutable();
        super.addAll(values, bottom_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string bottom = 3;</code>
       *
       * <pre>
       * the name of each bottom blob
       * </pre>
       */
      public Builder clearBottom() {
        bottom_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string bottom = 3;</code>
       *
       * <pre>
       * the name of each bottom blob
       * </pre>
       */
      public Builder addBottomBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureBottomIsMutable();
        bottom_.add(value);
        onChanged();
        return this;
      }

      // repeated string top = 4;
      private com.google.protobuf.LazyStringList top_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureTopIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          top_ = new com.google.protobuf.LazyStringArrayList(top_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated string top = 4;</code>
       *
       * <pre>
       * the name of each top blob
       * </pre>
       */
      public java.util.List<java.lang.String>
          getTopList() {
        return java.util.Collections.unmodifiableList(top_);
      }
      /**
       * <code>repeated string top = 4;</code>
       *
       * <pre>
       * the name of each top blob
       * </pre>
       */
      public int getTopCount() {
        return top_.size();
      }
      /**
       * <code>repeated string top = 4;</code>
       *
       * <pre>
       * the name of each top blob
       * </pre>
       */
      public java.lang.String getTop(int index) {
        return top_.get(index);
      }
      /**
       * <code>repeated string top = 4;</code>
       *
       * <pre>
       * the name of each top blob
       * </pre>
       */
      public com.google.protobuf.ByteString
          getTopBytes(int index) {
        return top_.getByteString(index);
      }
      /**
       * <code>repeated string top = 4;</code>
       *
       * <pre>
       * the name of each top blob
       * </pre>
       */
      public Builder setTop(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureTopIsMutable();
        top_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string top = 4;</code>
       *
       * <pre>
       * the name of each top blob
       * </pre>
       */
      public Builder addTop(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureTopIsMutable();
        top_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string top = 4;</code>
       *
       * <pre>
       * the name of each top blob
       * </pre>
       */
      public Builder addAllTop(
          java.lang.Iterable<java.lang.String> values) {
        ensureTopIsMutable();
        super.addAll(values, top_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string top = 4;</code>
       *
       * <pre>
       * the name of each top blob
       * </pre>
       */
      public Builder clearTop() {
        top_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string top = 4;</code>
       *
       * <pre>
       * the name of each top blob
       * </pre>
       */
      public Builder addTopBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureTopIsMutable();
        top_.add(value);
        onChanged();
        return this;
      }

      // optional .caffe.Phase phase = 10;
      private caffe.Caffe.Phase phase_ = caffe.Caffe.Phase.TRAIN;
      /**
       * <code>optional .caffe.Phase phase = 10;</code>
       *
       * <pre>
       * The train / test phase for computation.
       * </pre>
       */
      public boolean hasPhase() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .caffe.Phase phase = 10;</code>
       *
       * <pre>
       * The train / test phase for computation.
       * </pre>
       */
      public caffe.Caffe.Phase getPhase() {
        return phase_;
      }
      /**
       * <code>optional .caffe.Phase phase = 10;</code>
       *
       * <pre>
       * The train / test phase for computation.
       * </pre>
       */
      public Builder setPhase(caffe.Caffe.Phase value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000010;
        phase_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .caffe.Phase phase = 10;</code>
       *
       * <pre>
       * The train / test phase for computation.
       * </pre>
       */
      public Builder clearPhase() {
        bitField0_ = (bitField0_ & ~0x00000010);
        phase_ = caffe.Caffe.Phase.TRAIN;
        onChanged();
        return this;
      }

      // repeated float loss_weight = 5;
      private java.util.List<java.lang.Float> lossWeight_ = java.util.Collections.emptyList();
      private void ensureLossWeightIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          lossWeight_ = new java.util.ArrayList<java.lang.Float>(lossWeight_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <code>repeated float loss_weight = 5;</code>
       *
       * <pre>
       * The amount of weight to assign each top blob in the objective.
       * Each layer assigns a default value, usually of either 0 or 1,
       * to each top blob.
       * </pre>
       */
      public java.util.List<java.lang.Float>
          getLossWeightList() {
        return java.util.Collections.unmodifiableList(lossWeight_);
      }
      /**
       * <code>repeated float loss_weight = 5;</code>
       *
       * <pre>
       * The amount of weight to assign each top blob in the objective.
       * Each layer assigns a default value, usually of either 0 or 1,
       * to each top blob.
       * </pre>
       */
      public int getLossWeightCount() {
        return lossWeight_.size();
      }
      /**
       * <code>repeated float loss_weight = 5;</code>
       *
       * <pre>
       * The amount of weight to assign each top blob in the objective.
       * Each layer assigns a default value, usually of either 0 or 1,
       * to each top blob.
       * </pre>
       */
      public float getLossWeight(int index) {
        return lossWeight_.get(index);
      }
      /**
       * <code>repeated float loss_weight = 5;</code>
       *
       * <pre>
       * The amount of weight to assign each top blob in the objective.
       * Each layer assigns a default value, usually of either 0 or 1,
       * to each top blob.
       * </pre>
       */
      public Builder setLossWeight(
          int index, float value) {
        ensureLossWeightIsMutable();
        lossWeight_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float loss_weight = 5;</code>
       *
       * <pre>
       * The amount of weight to assign each top blob in the objective.
       * Each layer assigns a default value, usually of either 0 or 1,
       * to each top blob.
       * </pre>
       */
      public Builder addLossWeight(float value) {
        ensureLossWeightIsMutable();
        lossWeight_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float loss_weight = 5;</code>
       *
       * <pre>
       * The amount of weight to assign each top blob in the objective.
       * Each layer assigns a default value, usually of either 0 or 1,
       * to each top blob.
       * </pre>
       */
      public Builder addAllLossWeight(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureLossWeightIsMutable();
        super.addAll(values, lossWeight_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float loss_weight = 5;</code>
       *
       * <pre>
       * The amount of weight to assign each top blob in the objective.
       * Each layer assigns a default value, usually of either 0 or 1,
       * to each top blob.
       * </pre>
       */
      public Builder clearLossWeight() {
        lossWeight_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      // repeated .caffe.ParamSpec param = 6;
      private java.util.List<caffe.Caffe.ParamSpec> param_ =
        java.util.Collections.emptyList();
      private void ensureParamIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          param_ = new java.util.ArrayList<caffe.Caffe.ParamSpec>(param_);
          bitField0_ |= 0x00000040;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          caffe.Caffe.ParamSpec, caffe.Caffe.ParamSpec.Builder, caffe.Caffe.ParamSpecOrBuilder> paramBuilder_;

      /**
       * <code>repeated .caffe.ParamSpec param = 6;</code>
       *
       * <pre>
       * Specifies training parameters (multipliers on global learning constants,
       * and the name and other settings used for weight sharing).
       * </pre>
       */
      public java.util.List<caffe.Caffe.ParamSpec> getParamList() {
        if (paramBuilder_ == null) {
          return java.util.Collections.unmodifiableList(param_);
        } else {
          return paramBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .caffe.ParamSpec param = 6;</code>
       *
       * <pre>
       * Specifies training parameters (multipliers on global learning constants,
       * and the name and other settings used for weight sharing).
       * </pre>
       */
      public int getParamCount() {
        if (paramBuilder_ == null) {
          return param_.size();
        } else {
          return paramBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .caffe.ParamSpec param = 6;</code>
       *
       * <pre>
       * Specifies training parameters (multipliers on global learning constants,
       * and the name and other settings used for weight sharing).
       * </pre>
       */
      public caffe.Caffe.ParamSpec getParam(int index) {
        if (paramBuilder_ == null) {
          return param_.get(index);
        } else {
          return paramBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .caffe.ParamSpec param = 6;</code>
       *
       * <pre>
       * Specifies training parameters (multipliers on global learning constants,
       * and the name and other settings used for weight sharing).
       * </pre>
       */
      public Builder setParam(
          int index, caffe.Caffe.ParamSpec value) {
        if (paramBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureParamIsMutable();
          param_.set(index, value);
          onChanged();
        } else {
          paramBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.ParamSpec param = 6;</code>
       *
       * <pre>
       * Specifies training parameters (multipliers on global learning constants,
       * and the name and other settings used for weight sharing).
       * </pre>
       */
      public Builder setParam(
          int index, caffe.Caffe.ParamSpec.Builder builderForValue) {
        if (paramBuilder_ == null) {
          ensureParamIsMutable();
          param_.set(index, builderForValue.build());
          onChanged();
        } else {
          paramBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.ParamSpec param = 6;</code>
       *
       * <pre>
       * Specifies training parameters (multipliers on global learning constants,
       * and the name and other settings used for weight sharing).
       * </pre>
       */
      public Builder addParam(caffe.Caffe.ParamSpec value) {
        if (paramBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureParamIsMutable();
          param_.add(value);
          onChanged();
        } else {
          paramBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.ParamSpec param = 6;</code>
       *
       * <pre>
       * Specifies training parameters (multipliers on global learning constants,
       * and the name and other settings used for weight sharing).
       * </pre>
       */
      public Builder addParam(
          int index, caffe.Caffe.ParamSpec value) {
        if (paramBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureParamIsMutable();
          param_.add(index, value);
          onChanged();
        } else {
          paramBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.ParamSpec param = 6;</code>
       *
       * <pre>
       * Specifies training parameters (multipliers on global learning constants,
       * and the name and other settings used for weight sharing).
       * </pre>
       */
      public Builder addParam(
          caffe.Caffe.ParamSpec.Builder builderForValue) {
        if (paramBuilder_ == null) {
          ensureParamIsMutable();
          param_.add(builderForValue.build());
          onChanged();
        } else {
          paramBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.ParamSpec param = 6;</code>
       *
       * <pre>
       * Specifies training parameters (multipliers on global learning constants,
       * and the name and other settings used for weight sharing).
       * </pre>
       */
      public Builder addParam(
          int index, caffe.Caffe.ParamSpec.Builder builderForValue) {
        if (paramBuilder_ == null) {
          ensureParamIsMutable();
          param_.add(index, builderForValue.build());
          onChanged();
        } else {
          paramBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.ParamSpec param = 6;</code>
       *
       * <pre>
       * Specifies training parameters (multipliers on global learning constants,
       * and the name and other settings used for weight sharing).
       * </pre>
       */
      public Builder addAllParam(
          java.lang.Iterable<? extends caffe.Caffe.ParamSpec> values) {
        if (paramBuilder_ == null) {
          ensureParamIsMutable();
          super.addAll(values, param_);
          onChanged();
        } else {
          paramBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.ParamSpec param = 6;</code>
       *
       * <pre>
       * Specifies training parameters (multipliers on global learning constants,
       * and the name and other settings used for weight sharing).
       * </pre>
       */
      public Builder clearParam() {
        if (paramBuilder_ == null) {
          param_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000040);
          onChanged();
        } else {
          paramBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .caffe.ParamSpec param = 6;</code>
       *
       * <pre>
       * Specifies training parameters (multipliers on global learning constants,
       * and the name and other settings used for weight sharing).
       * </pre>
       */
      public Builder removeParam(int index) {
        if (paramBuilder_ == null) {
          ensureParamIsMutable();
          param_.remove(index);
          onChanged();
        } else {
          paramBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.ParamSpec param = 6;</code>
       *
       * <pre>
       * Specifies training parameters (multipliers on global learning constants,
       * and the name and other settings used for weight sharing).
       * </pre>
       */
      public caffe.Caffe.ParamSpec.Builder getParamBuilder(
          int index) {
        return getParamFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .caffe.ParamSpec param = 6;</code>
       *
       * <pre>
       * Specifies training parameters (multipliers on global learning constants,
       * and the name and other settings used for weight sharing).
       * </pre>
       */
      public caffe.Caffe.ParamSpecOrBuilder getParamOrBuilder(
          int index) {
        if (paramBuilder_ == null) {
          return param_.get(index);  } else {
          return paramBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .caffe.ParamSpec param = 6;</code>
       *
       * <pre>
       * Specifies training parameters (multipliers on global learning constants,
       * and the name and other settings used for weight sharing).
       * </pre>
       */
      public java.util.List<? extends caffe.Caffe.ParamSpecOrBuilder> 
           getParamOrBuilderList() {
        if (paramBuilder_ != null) {
          return paramBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(param_);
        }
      }
      /**
       * <code>repeated .caffe.ParamSpec param = 6;</code>
       *
       * <pre>
       * Specifies training parameters (multipliers on global learning constants,
       * and the name and other settings used for weight sharing).
       * </pre>
       */
      public caffe.Caffe.ParamSpec.Builder addParamBuilder() {
        return getParamFieldBuilder().addBuilder(
            caffe.Caffe.ParamSpec.getDefaultInstance());
      }
      /**
       * <code>repeated .caffe.ParamSpec param = 6;</code>
       *
       * <pre>
       * Specifies training parameters (multipliers on global learning constants,
       * and the name and other settings used for weight sharing).
       * </pre>
       */
      public caffe.Caffe.ParamSpec.Builder addParamBuilder(
          int index) {
        return getParamFieldBuilder().addBuilder(
            index, caffe.Caffe.ParamSpec.getDefaultInstance());
      }
      /**
       * <code>repeated .caffe.ParamSpec param = 6;</code>
       *
       * <pre>
       * Specifies training parameters (multipliers on global learning constants,
       * and the name and other settings used for weight sharing).
       * </pre>
       */
      public java.util.List<caffe.Caffe.ParamSpec.Builder> 
           getParamBuilderList() {
        return getParamFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          caffe.Caffe.ParamSpec, caffe.Caffe.ParamSpec.Builder, caffe.Caffe.ParamSpecOrBuilder> 
          getParamFieldBuilder() {
        if (paramBuilder_ == null) {
          paramBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              caffe.Caffe.ParamSpec, caffe.Caffe.ParamSpec.Builder, caffe.Caffe.ParamSpecOrBuilder>(
                  param_,
                  ((bitField0_ & 0x00000040) == 0x00000040),
                  getParentForChildren(),
                  isClean());
          param_ = null;
        }
        return paramBuilder_;
      }

      // repeated .caffe.BlobProto blobs = 7;
      private java.util.List<caffe.Caffe.BlobProto> blobs_ =
        java.util.Collections.emptyList();
      private void ensureBlobsIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          blobs_ = new java.util.ArrayList<caffe.Caffe.BlobProto>(blobs_);
          bitField0_ |= 0x00000080;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          caffe.Caffe.BlobProto, caffe.Caffe.BlobProto.Builder, caffe.Caffe.BlobProtoOrBuilder> blobsBuilder_;

      /**
       * <code>repeated .caffe.BlobProto blobs = 7;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer.
       * </pre>
       */
      public java.util.List<caffe.Caffe.BlobProto> getBlobsList() {
        if (blobsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(blobs_);
        } else {
          return blobsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 7;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer.
       * </pre>
       */
      public int getBlobsCount() {
        if (blobsBuilder_ == null) {
          return blobs_.size();
        } else {
          return blobsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 7;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer.
       * </pre>
       */
      public caffe.Caffe.BlobProto getBlobs(int index) {
        if (blobsBuilder_ == null) {
          return blobs_.get(index);
        } else {
          return blobsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 7;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer.
       * </pre>
       */
      public Builder setBlobs(
          int index, caffe.Caffe.BlobProto value) {
        if (blobsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBlobsIsMutable();
          blobs_.set(index, value);
          onChanged();
        } else {
          blobsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 7;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer.
       * </pre>
       */
      public Builder setBlobs(
          int index, caffe.Caffe.BlobProto.Builder builderForValue) {
        if (blobsBuilder_ == null) {
          ensureBlobsIsMutable();
          blobs_.set(index, builderForValue.build());
          onChanged();
        } else {
          blobsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 7;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer.
       * </pre>
       */
      public Builder addBlobs(caffe.Caffe.BlobProto value) {
        if (blobsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBlobsIsMutable();
          blobs_.add(value);
          onChanged();
        } else {
          blobsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 7;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer.
       * </pre>
       */
      public Builder addBlobs(
          int index, caffe.Caffe.BlobProto value) {
        if (blobsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBlobsIsMutable();
          blobs_.add(index, value);
          onChanged();
        } else {
          blobsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 7;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer.
       * </pre>
       */
      public Builder addBlobs(
          caffe.Caffe.BlobProto.Builder builderForValue) {
        if (blobsBuilder_ == null) {
          ensureBlobsIsMutable();
          blobs_.add(builderForValue.build());
          onChanged();
        } else {
          blobsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 7;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer.
       * </pre>
       */
      public Builder addBlobs(
          int index, caffe.Caffe.BlobProto.Builder builderForValue) {
        if (blobsBuilder_ == null) {
          ensureBlobsIsMutable();
          blobs_.add(index, builderForValue.build());
          onChanged();
        } else {
          blobsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 7;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer.
       * </pre>
       */
      public Builder addAllBlobs(
          java.lang.Iterable<? extends caffe.Caffe.BlobProto> values) {
        if (blobsBuilder_ == null) {
          ensureBlobsIsMutable();
          super.addAll(values, blobs_);
          onChanged();
        } else {
          blobsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 7;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer.
       * </pre>
       */
      public Builder clearBlobs() {
        if (blobsBuilder_ == null) {
          blobs_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000080);
          onChanged();
        } else {
          blobsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 7;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer.
       * </pre>
       */
      public Builder removeBlobs(int index) {
        if (blobsBuilder_ == null) {
          ensureBlobsIsMutable();
          blobs_.remove(index);
          onChanged();
        } else {
          blobsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 7;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer.
       * </pre>
       */
      public caffe.Caffe.BlobProto.Builder getBlobsBuilder(
          int index) {
        return getBlobsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 7;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer.
       * </pre>
       */
      public caffe.Caffe.BlobProtoOrBuilder getBlobsOrBuilder(
          int index) {
        if (blobsBuilder_ == null) {
          return blobs_.get(index);  } else {
          return blobsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 7;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer.
       * </pre>
       */
      public java.util.List<? extends caffe.Caffe.BlobProtoOrBuilder> 
           getBlobsOrBuilderList() {
        if (blobsBuilder_ != null) {
          return blobsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(blobs_);
        }
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 7;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer.
       * </pre>
       */
      public caffe.Caffe.BlobProto.Builder addBlobsBuilder() {
        return getBlobsFieldBuilder().addBuilder(
            caffe.Caffe.BlobProto.getDefaultInstance());
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 7;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer.
       * </pre>
       */
      public caffe.Caffe.BlobProto.Builder addBlobsBuilder(
          int index) {
        return getBlobsFieldBuilder().addBuilder(
            index, caffe.Caffe.BlobProto.getDefaultInstance());
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 7;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer.
       * </pre>
       */
      public java.util.List<caffe.Caffe.BlobProto.Builder> 
           getBlobsBuilderList() {
        return getBlobsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          caffe.Caffe.BlobProto, caffe.Caffe.BlobProto.Builder, caffe.Caffe.BlobProtoOrBuilder> 
          getBlobsFieldBuilder() {
        if (blobsBuilder_ == null) {
          blobsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              caffe.Caffe.BlobProto, caffe.Caffe.BlobProto.Builder, caffe.Caffe.BlobProtoOrBuilder>(
                  blobs_,
                  ((bitField0_ & 0x00000080) == 0x00000080),
                  getParentForChildren(),
                  isClean());
          blobs_ = null;
        }
        return blobsBuilder_;
      }

      // repeated bool propagate_down = 11;
      private java.util.List<java.lang.Boolean> propagateDown_ = java.util.Collections.emptyList();
      private void ensurePropagateDownIsMutable() {
        if (!((bitField0_ & 0x00000100) == 0x00000100)) {
          propagateDown_ = new java.util.ArrayList<java.lang.Boolean>(propagateDown_);
          bitField0_ |= 0x00000100;
         }
      }
      /**
       * <code>repeated bool propagate_down = 11;</code>
       *
       * <pre>
       * Specifies whether to backpropagate to each bottom. If unspecified,
       * Caffe will automatically infer whether each input needs backpropagation
       * to compute parameter gradients. If set to true for some inputs,
       * backpropagation to those inputs is forced; if set false for some inputs,
       * backpropagation to those inputs is skipped.
       *
       * The size must be either 0 or equal to the number of bottoms.
       * </pre>
       */
      public java.util.List<java.lang.Boolean>
          getPropagateDownList() {
        return java.util.Collections.unmodifiableList(propagateDown_);
      }
      /**
       * <code>repeated bool propagate_down = 11;</code>
       *
       * <pre>
       * Specifies whether to backpropagate to each bottom. If unspecified,
       * Caffe will automatically infer whether each input needs backpropagation
       * to compute parameter gradients. If set to true for some inputs,
       * backpropagation to those inputs is forced; if set false for some inputs,
       * backpropagation to those inputs is skipped.
       *
       * The size must be either 0 or equal to the number of bottoms.
       * </pre>
       */
      public int getPropagateDownCount() {
        return propagateDown_.size();
      }
      /**
       * <code>repeated bool propagate_down = 11;</code>
       *
       * <pre>
       * Specifies whether to backpropagate to each bottom. If unspecified,
       * Caffe will automatically infer whether each input needs backpropagation
       * to compute parameter gradients. If set to true for some inputs,
       * backpropagation to those inputs is forced; if set false for some inputs,
       * backpropagation to those inputs is skipped.
       *
       * The size must be either 0 or equal to the number of bottoms.
       * </pre>
       */
      public boolean getPropagateDown(int index) {
        return propagateDown_.get(index);
      }
      /**
       * <code>repeated bool propagate_down = 11;</code>
       *
       * <pre>
       * Specifies whether to backpropagate to each bottom. If unspecified,
       * Caffe will automatically infer whether each input needs backpropagation
       * to compute parameter gradients. If set to true for some inputs,
       * backpropagation to those inputs is forced; if set false for some inputs,
       * backpropagation to those inputs is skipped.
       *
       * The size must be either 0 or equal to the number of bottoms.
       * </pre>
       */
      public Builder setPropagateDown(
          int index, boolean value) {
        ensurePropagateDownIsMutable();
        propagateDown_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool propagate_down = 11;</code>
       *
       * <pre>
       * Specifies whether to backpropagate to each bottom. If unspecified,
       * Caffe will automatically infer whether each input needs backpropagation
       * to compute parameter gradients. If set to true for some inputs,
       * backpropagation to those inputs is forced; if set false for some inputs,
       * backpropagation to those inputs is skipped.
       *
       * The size must be either 0 or equal to the number of bottoms.
       * </pre>
       */
      public Builder addPropagateDown(boolean value) {
        ensurePropagateDownIsMutable();
        propagateDown_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool propagate_down = 11;</code>
       *
       * <pre>
       * Specifies whether to backpropagate to each bottom. If unspecified,
       * Caffe will automatically infer whether each input needs backpropagation
       * to compute parameter gradients. If set to true for some inputs,
       * backpropagation to those inputs is forced; if set false for some inputs,
       * backpropagation to those inputs is skipped.
       *
       * The size must be either 0 or equal to the number of bottoms.
       * </pre>
       */
      public Builder addAllPropagateDown(
          java.lang.Iterable<? extends java.lang.Boolean> values) {
        ensurePropagateDownIsMutable();
        super.addAll(values, propagateDown_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool propagate_down = 11;</code>
       *
       * <pre>
       * Specifies whether to backpropagate to each bottom. If unspecified,
       * Caffe will automatically infer whether each input needs backpropagation
       * to compute parameter gradients. If set to true for some inputs,
       * backpropagation to those inputs is forced; if set false for some inputs,
       * backpropagation to those inputs is skipped.
       *
       * The size must be either 0 or equal to the number of bottoms.
       * </pre>
       */
      public Builder clearPropagateDown() {
        propagateDown_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        onChanged();
        return this;
      }

      // repeated .caffe.NetStateRule include = 8;
      private java.util.List<caffe.Caffe.NetStateRule> include_ =
        java.util.Collections.emptyList();
      private void ensureIncludeIsMutable() {
        if (!((bitField0_ & 0x00000200) == 0x00000200)) {
          include_ = new java.util.ArrayList<caffe.Caffe.NetStateRule>(include_);
          bitField0_ |= 0x00000200;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          caffe.Caffe.NetStateRule, caffe.Caffe.NetStateRule.Builder, caffe.Caffe.NetStateRuleOrBuilder> includeBuilder_;

      /**
       * <code>repeated .caffe.NetStateRule include = 8;</code>
       *
       * <pre>
       * Rules controlling whether and when a layer is included in the network,
       * based on the current NetState.  You may specify a non-zero number of rules
       * to include OR exclude, but not both.  If no include or exclude rules are
       * specified, the layer is always included.  If the current NetState meets
       * ANY (i.e., one or more) of the specified rules, the layer is
       * included/excluded.
       * </pre>
       */
      public java.util.List<caffe.Caffe.NetStateRule> getIncludeList() {
        if (includeBuilder_ == null) {
          return java.util.Collections.unmodifiableList(include_);
        } else {
          return includeBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .caffe.NetStateRule include = 8;</code>
       *
       * <pre>
       * Rules controlling whether and when a layer is included in the network,
       * based on the current NetState.  You may specify a non-zero number of rules
       * to include OR exclude, but not both.  If no include or exclude rules are
       * specified, the layer is always included.  If the current NetState meets
       * ANY (i.e., one or more) of the specified rules, the layer is
       * included/excluded.
       * </pre>
       */
      public int getIncludeCount() {
        if (includeBuilder_ == null) {
          return include_.size();
        } else {
          return includeBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .caffe.NetStateRule include = 8;</code>
       *
       * <pre>
       * Rules controlling whether and when a layer is included in the network,
       * based on the current NetState.  You may specify a non-zero number of rules
       * to include OR exclude, but not both.  If no include or exclude rules are
       * specified, the layer is always included.  If the current NetState meets
       * ANY (i.e., one or more) of the specified rules, the layer is
       * included/excluded.
       * </pre>
       */
      public caffe.Caffe.NetStateRule getInclude(int index) {
        if (includeBuilder_ == null) {
          return include_.get(index);
        } else {
          return includeBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .caffe.NetStateRule include = 8;</code>
       *
       * <pre>
       * Rules controlling whether and when a layer is included in the network,
       * based on the current NetState.  You may specify a non-zero number of rules
       * to include OR exclude, but not both.  If no include or exclude rules are
       * specified, the layer is always included.  If the current NetState meets
       * ANY (i.e., one or more) of the specified rules, the layer is
       * included/excluded.
       * </pre>
       */
      public Builder setInclude(
          int index, caffe.Caffe.NetStateRule value) {
        if (includeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureIncludeIsMutable();
          include_.set(index, value);
          onChanged();
        } else {
          includeBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.NetStateRule include = 8;</code>
       *
       * <pre>
       * Rules controlling whether and when a layer is included in the network,
       * based on the current NetState.  You may specify a non-zero number of rules
       * to include OR exclude, but not both.  If no include or exclude rules are
       * specified, the layer is always included.  If the current NetState meets
       * ANY (i.e., one or more) of the specified rules, the layer is
       * included/excluded.
       * </pre>
       */
      public Builder setInclude(
          int index, caffe.Caffe.NetStateRule.Builder builderForValue) {
        if (includeBuilder_ == null) {
          ensureIncludeIsMutable();
          include_.set(index, builderForValue.build());
          onChanged();
        } else {
          includeBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.NetStateRule include = 8;</code>
       *
       * <pre>
       * Rules controlling whether and when a layer is included in the network,
       * based on the current NetState.  You may specify a non-zero number of rules
       * to include OR exclude, but not both.  If no include or exclude rules are
       * specified, the layer is always included.  If the current NetState meets
       * ANY (i.e., one or more) of the specified rules, the layer is
       * included/excluded.
       * </pre>
       */
      public Builder addInclude(caffe.Caffe.NetStateRule value) {
        if (includeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureIncludeIsMutable();
          include_.add(value);
          onChanged();
        } else {
          includeBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.NetStateRule include = 8;</code>
       *
       * <pre>
       * Rules controlling whether and when a layer is included in the network,
       * based on the current NetState.  You may specify a non-zero number of rules
       * to include OR exclude, but not both.  If no include or exclude rules are
       * specified, the layer is always included.  If the current NetState meets
       * ANY (i.e., one or more) of the specified rules, the layer is
       * included/excluded.
       * </pre>
       */
      public Builder addInclude(
          int index, caffe.Caffe.NetStateRule value) {
        if (includeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureIncludeIsMutable();
          include_.add(index, value);
          onChanged();
        } else {
          includeBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.NetStateRule include = 8;</code>
       *
       * <pre>
       * Rules controlling whether and when a layer is included in the network,
       * based on the current NetState.  You may specify a non-zero number of rules
       * to include OR exclude, but not both.  If no include or exclude rules are
       * specified, the layer is always included.  If the current NetState meets
       * ANY (i.e., one or more) of the specified rules, the layer is
       * included/excluded.
       * </pre>
       */
      public Builder addInclude(
          caffe.Caffe.NetStateRule.Builder builderForValue) {
        if (includeBuilder_ == null) {
          ensureIncludeIsMutable();
          include_.add(builderForValue.build());
          onChanged();
        } else {
          includeBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.NetStateRule include = 8;</code>
       *
       * <pre>
       * Rules controlling whether and when a layer is included in the network,
       * based on the current NetState.  You may specify a non-zero number of rules
       * to include OR exclude, but not both.  If no include or exclude rules are
       * specified, the layer is always included.  If the current NetState meets
       * ANY (i.e., one or more) of the specified rules, the layer is
       * included/excluded.
       * </pre>
       */
      public Builder addInclude(
          int index, caffe.Caffe.NetStateRule.Builder builderForValue) {
        if (includeBuilder_ == null) {
          ensureIncludeIsMutable();
          include_.add(index, builderForValue.build());
          onChanged();
        } else {
          includeBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.NetStateRule include = 8;</code>
       *
       * <pre>
       * Rules controlling whether and when a layer is included in the network,
       * based on the current NetState.  You may specify a non-zero number of rules
       * to include OR exclude, but not both.  If no include or exclude rules are
       * specified, the layer is always included.  If the current NetState meets
       * ANY (i.e., one or more) of the specified rules, the layer is
       * included/excluded.
       * </pre>
       */
      public Builder addAllInclude(
          java.lang.Iterable<? extends caffe.Caffe.NetStateRule> values) {
        if (includeBuilder_ == null) {
          ensureIncludeIsMutable();
          super.addAll(values, include_);
          onChanged();
        } else {
          includeBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.NetStateRule include = 8;</code>
       *
       * <pre>
       * Rules controlling whether and when a layer is included in the network,
       * based on the current NetState.  You may specify a non-zero number of rules
       * to include OR exclude, but not both.  If no include or exclude rules are
       * specified, the layer is always included.  If the current NetState meets
       * ANY (i.e., one or more) of the specified rules, the layer is
       * included/excluded.
       * </pre>
       */
      public Builder clearInclude() {
        if (includeBuilder_ == null) {
          include_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000200);
          onChanged();
        } else {
          includeBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .caffe.NetStateRule include = 8;</code>
       *
       * <pre>
       * Rules controlling whether and when a layer is included in the network,
       * based on the current NetState.  You may specify a non-zero number of rules
       * to include OR exclude, but not both.  If no include or exclude rules are
       * specified, the layer is always included.  If the current NetState meets
       * ANY (i.e., one or more) of the specified rules, the layer is
       * included/excluded.
       * </pre>
       */
      public Builder removeInclude(int index) {
        if (includeBuilder_ == null) {
          ensureIncludeIsMutable();
          include_.remove(index);
          onChanged();
        } else {
          includeBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.NetStateRule include = 8;</code>
       *
       * <pre>
       * Rules controlling whether and when a layer is included in the network,
       * based on the current NetState.  You may specify a non-zero number of rules
       * to include OR exclude, but not both.  If no include or exclude rules are
       * specified, the layer is always included.  If the current NetState meets
       * ANY (i.e., one or more) of the specified rules, the layer is
       * included/excluded.
       * </pre>
       */
      public caffe.Caffe.NetStateRule.Builder getIncludeBuilder(
          int index) {
        return getIncludeFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .caffe.NetStateRule include = 8;</code>
       *
       * <pre>
       * Rules controlling whether and when a layer is included in the network,
       * based on the current NetState.  You may specify a non-zero number of rules
       * to include OR exclude, but not both.  If no include or exclude rules are
       * specified, the layer is always included.  If the current NetState meets
       * ANY (i.e., one or more) of the specified rules, the layer is
       * included/excluded.
       * </pre>
       */
      public caffe.Caffe.NetStateRuleOrBuilder getIncludeOrBuilder(
          int index) {
        if (includeBuilder_ == null) {
          return include_.get(index);  } else {
          return includeBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .caffe.NetStateRule include = 8;</code>
       *
       * <pre>
       * Rules controlling whether and when a layer is included in the network,
       * based on the current NetState.  You may specify a non-zero number of rules
       * to include OR exclude, but not both.  If no include or exclude rules are
       * specified, the layer is always included.  If the current NetState meets
       * ANY (i.e., one or more) of the specified rules, the layer is
       * included/excluded.
       * </pre>
       */
      public java.util.List<? extends caffe.Caffe.NetStateRuleOrBuilder> 
           getIncludeOrBuilderList() {
        if (includeBuilder_ != null) {
          return includeBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(include_);
        }
      }
      /**
       * <code>repeated .caffe.NetStateRule include = 8;</code>
       *
       * <pre>
       * Rules controlling whether and when a layer is included in the network,
       * based on the current NetState.  You may specify a non-zero number of rules
       * to include OR exclude, but not both.  If no include or exclude rules are
       * specified, the layer is always included.  If the current NetState meets
       * ANY (i.e., one or more) of the specified rules, the layer is
       * included/excluded.
       * </pre>
       */
      public caffe.Caffe.NetStateRule.Builder addIncludeBuilder() {
        return getIncludeFieldBuilder().addBuilder(
            caffe.Caffe.NetStateRule.getDefaultInstance());
      }
      /**
       * <code>repeated .caffe.NetStateRule include = 8;</code>
       *
       * <pre>
       * Rules controlling whether and when a layer is included in the network,
       * based on the current NetState.  You may specify a non-zero number of rules
       * to include OR exclude, but not both.  If no include or exclude rules are
       * specified, the layer is always included.  If the current NetState meets
       * ANY (i.e., one or more) of the specified rules, the layer is
       * included/excluded.
       * </pre>
       */
      public caffe.Caffe.NetStateRule.Builder addIncludeBuilder(
          int index) {
        return getIncludeFieldBuilder().addBuilder(
            index, caffe.Caffe.NetStateRule.getDefaultInstance());
      }
      /**
       * <code>repeated .caffe.NetStateRule include = 8;</code>
       *
       * <pre>
       * Rules controlling whether and when a layer is included in the network,
       * based on the current NetState.  You may specify a non-zero number of rules
       * to include OR exclude, but not both.  If no include or exclude rules are
       * specified, the layer is always included.  If the current NetState meets
       * ANY (i.e., one or more) of the specified rules, the layer is
       * included/excluded.
       * </pre>
       */
      public java.util.List<caffe.Caffe.NetStateRule.Builder> 
           getIncludeBuilderList() {
        return getIncludeFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          caffe.Caffe.NetStateRule, caffe.Caffe.NetStateRule.Builder, caffe.Caffe.NetStateRuleOrBuilder> 
          getIncludeFieldBuilder() {
        if (includeBuilder_ == null) {
          includeBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              caffe.Caffe.NetStateRule, caffe.Caffe.NetStateRule.Builder, caffe.Caffe.NetStateRuleOrBuilder>(
                  include_,
                  ((bitField0_ & 0x00000200) == 0x00000200),
                  getParentForChildren(),
                  isClean());
          include_ = null;
        }
        return includeBuilder_;
      }

      // repeated .caffe.NetStateRule exclude = 9;
      private java.util.List<caffe.Caffe.NetStateRule> exclude_ =
        java.util.Collections.emptyList();
      private void ensureExcludeIsMutable() {
        if (!((bitField0_ & 0x00000400) == 0x00000400)) {
          exclude_ = new java.util.ArrayList<caffe.Caffe.NetStateRule>(exclude_);
          bitField0_ |= 0x00000400;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          caffe.Caffe.NetStateRule, caffe.Caffe.NetStateRule.Builder, caffe.Caffe.NetStateRuleOrBuilder> excludeBuilder_;

      /**
       * <code>repeated .caffe.NetStateRule exclude = 9;</code>
       */
      public java.util.List<caffe.Caffe.NetStateRule> getExcludeList() {
        if (excludeBuilder_ == null) {
          return java.util.Collections.unmodifiableList(exclude_);
        } else {
          return excludeBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .caffe.NetStateRule exclude = 9;</code>
       */
      public int getExcludeCount() {
        if (excludeBuilder_ == null) {
          return exclude_.size();
        } else {
          return excludeBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .caffe.NetStateRule exclude = 9;</code>
       */
      public caffe.Caffe.NetStateRule getExclude(int index) {
        if (excludeBuilder_ == null) {
          return exclude_.get(index);
        } else {
          return excludeBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .caffe.NetStateRule exclude = 9;</code>
       */
      public Builder setExclude(
          int index, caffe.Caffe.NetStateRule value) {
        if (excludeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureExcludeIsMutable();
          exclude_.set(index, value);
          onChanged();
        } else {
          excludeBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.NetStateRule exclude = 9;</code>
       */
      public Builder setExclude(
          int index, caffe.Caffe.NetStateRule.Builder builderForValue) {
        if (excludeBuilder_ == null) {
          ensureExcludeIsMutable();
          exclude_.set(index, builderForValue.build());
          onChanged();
        } else {
          excludeBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.NetStateRule exclude = 9;</code>
       */
      public Builder addExclude(caffe.Caffe.NetStateRule value) {
        if (excludeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureExcludeIsMutable();
          exclude_.add(value);
          onChanged();
        } else {
          excludeBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.NetStateRule exclude = 9;</code>
       */
      public Builder addExclude(
          int index, caffe.Caffe.NetStateRule value) {
        if (excludeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureExcludeIsMutable();
          exclude_.add(index, value);
          onChanged();
        } else {
          excludeBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.NetStateRule exclude = 9;</code>
       */
      public Builder addExclude(
          caffe.Caffe.NetStateRule.Builder builderForValue) {
        if (excludeBuilder_ == null) {
          ensureExcludeIsMutable();
          exclude_.add(builderForValue.build());
          onChanged();
        } else {
          excludeBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.NetStateRule exclude = 9;</code>
       */
      public Builder addExclude(
          int index, caffe.Caffe.NetStateRule.Builder builderForValue) {
        if (excludeBuilder_ == null) {
          ensureExcludeIsMutable();
          exclude_.add(index, builderForValue.build());
          onChanged();
        } else {
          excludeBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.NetStateRule exclude = 9;</code>
       */
      public Builder addAllExclude(
          java.lang.Iterable<? extends caffe.Caffe.NetStateRule> values) {
        if (excludeBuilder_ == null) {
          ensureExcludeIsMutable();
          super.addAll(values, exclude_);
          onChanged();
        } else {
          excludeBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.NetStateRule exclude = 9;</code>
       */
      public Builder clearExclude() {
        if (excludeBuilder_ == null) {
          exclude_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000400);
          onChanged();
        } else {
          excludeBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .caffe.NetStateRule exclude = 9;</code>
       */
      public Builder removeExclude(int index) {
        if (excludeBuilder_ == null) {
          ensureExcludeIsMutable();
          exclude_.remove(index);
          onChanged();
        } else {
          excludeBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.NetStateRule exclude = 9;</code>
       */
      public caffe.Caffe.NetStateRule.Builder getExcludeBuilder(
          int index) {
        return getExcludeFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .caffe.NetStateRule exclude = 9;</code>
       */
      public caffe.Caffe.NetStateRuleOrBuilder getExcludeOrBuilder(
          int index) {
        if (excludeBuilder_ == null) {
          return exclude_.get(index);  } else {
          return excludeBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .caffe.NetStateRule exclude = 9;</code>
       */
      public java.util.List<? extends caffe.Caffe.NetStateRuleOrBuilder> 
           getExcludeOrBuilderList() {
        if (excludeBuilder_ != null) {
          return excludeBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(exclude_);
        }
      }
      /**
       * <code>repeated .caffe.NetStateRule exclude = 9;</code>
       */
      public caffe.Caffe.NetStateRule.Builder addExcludeBuilder() {
        return getExcludeFieldBuilder().addBuilder(
            caffe.Caffe.NetStateRule.getDefaultInstance());
      }
      /**
       * <code>repeated .caffe.NetStateRule exclude = 9;</code>
       */
      public caffe.Caffe.NetStateRule.Builder addExcludeBuilder(
          int index) {
        return getExcludeFieldBuilder().addBuilder(
            index, caffe.Caffe.NetStateRule.getDefaultInstance());
      }
      /**
       * <code>repeated .caffe.NetStateRule exclude = 9;</code>
       */
      public java.util.List<caffe.Caffe.NetStateRule.Builder> 
           getExcludeBuilderList() {
        return getExcludeFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          caffe.Caffe.NetStateRule, caffe.Caffe.NetStateRule.Builder, caffe.Caffe.NetStateRuleOrBuilder> 
          getExcludeFieldBuilder() {
        if (excludeBuilder_ == null) {
          excludeBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              caffe.Caffe.NetStateRule, caffe.Caffe.NetStateRule.Builder, caffe.Caffe.NetStateRuleOrBuilder>(
                  exclude_,
                  ((bitField0_ & 0x00000400) == 0x00000400),
                  getParentForChildren(),
                  isClean());
          exclude_ = null;
        }
        return excludeBuilder_;
      }

      // optional .caffe.TransformationParameter transform_param = 100;
      private caffe.Caffe.TransformationParameter transformParam_ = caffe.Caffe.TransformationParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.TransformationParameter, caffe.Caffe.TransformationParameter.Builder, caffe.Caffe.TransformationParameterOrBuilder> transformParamBuilder_;
      /**
       * <code>optional .caffe.TransformationParameter transform_param = 100;</code>
       *
       * <pre>
       * Parameters for data pre-processing.
       * </pre>
       */
      public boolean hasTransformParam() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional .caffe.TransformationParameter transform_param = 100;</code>
       *
       * <pre>
       * Parameters for data pre-processing.
       * </pre>
       */
      public caffe.Caffe.TransformationParameter getTransformParam() {
        if (transformParamBuilder_ == null) {
          return transformParam_;
        } else {
          return transformParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.TransformationParameter transform_param = 100;</code>
       *
       * <pre>
       * Parameters for data pre-processing.
       * </pre>
       */
      public Builder setTransformParam(caffe.Caffe.TransformationParameter value) {
        if (transformParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          transformParam_ = value;
          onChanged();
        } else {
          transformParamBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <code>optional .caffe.TransformationParameter transform_param = 100;</code>
       *
       * <pre>
       * Parameters for data pre-processing.
       * </pre>
       */
      public Builder setTransformParam(
          caffe.Caffe.TransformationParameter.Builder builderForValue) {
        if (transformParamBuilder_ == null) {
          transformParam_ = builderForValue.build();
          onChanged();
        } else {
          transformParamBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <code>optional .caffe.TransformationParameter transform_param = 100;</code>
       *
       * <pre>
       * Parameters for data pre-processing.
       * </pre>
       */
      public Builder mergeTransformParam(caffe.Caffe.TransformationParameter value) {
        if (transformParamBuilder_ == null) {
          if (((bitField0_ & 0x00000800) == 0x00000800) &&
              transformParam_ != caffe.Caffe.TransformationParameter.getDefaultInstance()) {
            transformParam_ =
              caffe.Caffe.TransformationParameter.newBuilder(transformParam_).mergeFrom(value).buildPartial();
          } else {
            transformParam_ = value;
          }
          onChanged();
        } else {
          transformParamBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <code>optional .caffe.TransformationParameter transform_param = 100;</code>
       *
       * <pre>
       * Parameters for data pre-processing.
       * </pre>
       */
      public Builder clearTransformParam() {
        if (transformParamBuilder_ == null) {
          transformParam_ = caffe.Caffe.TransformationParameter.getDefaultInstance();
          onChanged();
        } else {
          transformParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000800);
        return this;
      }
      /**
       * <code>optional .caffe.TransformationParameter transform_param = 100;</code>
       *
       * <pre>
       * Parameters for data pre-processing.
       * </pre>
       */
      public caffe.Caffe.TransformationParameter.Builder getTransformParamBuilder() {
        bitField0_ |= 0x00000800;
        onChanged();
        return getTransformParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.TransformationParameter transform_param = 100;</code>
       *
       * <pre>
       * Parameters for data pre-processing.
       * </pre>
       */
      public caffe.Caffe.TransformationParameterOrBuilder getTransformParamOrBuilder() {
        if (transformParamBuilder_ != null) {
          return transformParamBuilder_.getMessageOrBuilder();
        } else {
          return transformParam_;
        }
      }
      /**
       * <code>optional .caffe.TransformationParameter transform_param = 100;</code>
       *
       * <pre>
       * Parameters for data pre-processing.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.TransformationParameter, caffe.Caffe.TransformationParameter.Builder, caffe.Caffe.TransformationParameterOrBuilder> 
          getTransformParamFieldBuilder() {
        if (transformParamBuilder_ == null) {
          transformParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.TransformationParameter, caffe.Caffe.TransformationParameter.Builder, caffe.Caffe.TransformationParameterOrBuilder>(
                  transformParam_,
                  getParentForChildren(),
                  isClean());
          transformParam_ = null;
        }
        return transformParamBuilder_;
      }

      // optional .caffe.LossParameter loss_param = 101;
      private caffe.Caffe.LossParameter lossParam_ = caffe.Caffe.LossParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.LossParameter, caffe.Caffe.LossParameter.Builder, caffe.Caffe.LossParameterOrBuilder> lossParamBuilder_;
      /**
       * <code>optional .caffe.LossParameter loss_param = 101;</code>
       *
       * <pre>
       * Parameters shared by loss layers.
       * </pre>
       */
      public boolean hasLossParam() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional .caffe.LossParameter loss_param = 101;</code>
       *
       * <pre>
       * Parameters shared by loss layers.
       * </pre>
       */
      public caffe.Caffe.LossParameter getLossParam() {
        if (lossParamBuilder_ == null) {
          return lossParam_;
        } else {
          return lossParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.LossParameter loss_param = 101;</code>
       *
       * <pre>
       * Parameters shared by loss layers.
       * </pre>
       */
      public Builder setLossParam(caffe.Caffe.LossParameter value) {
        if (lossParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          lossParam_ = value;
          onChanged();
        } else {
          lossParamBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00001000;
        return this;
      }
      /**
       * <code>optional .caffe.LossParameter loss_param = 101;</code>
       *
       * <pre>
       * Parameters shared by loss layers.
       * </pre>
       */
      public Builder setLossParam(
          caffe.Caffe.LossParameter.Builder builderForValue) {
        if (lossParamBuilder_ == null) {
          lossParam_ = builderForValue.build();
          onChanged();
        } else {
          lossParamBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00001000;
        return this;
      }
      /**
       * <code>optional .caffe.LossParameter loss_param = 101;</code>
       *
       * <pre>
       * Parameters shared by loss layers.
       * </pre>
       */
      public Builder mergeLossParam(caffe.Caffe.LossParameter value) {
        if (lossParamBuilder_ == null) {
          if (((bitField0_ & 0x00001000) == 0x00001000) &&
              lossParam_ != caffe.Caffe.LossParameter.getDefaultInstance()) {
            lossParam_ =
              caffe.Caffe.LossParameter.newBuilder(lossParam_).mergeFrom(value).buildPartial();
          } else {
            lossParam_ = value;
          }
          onChanged();
        } else {
          lossParamBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00001000;
        return this;
      }
      /**
       * <code>optional .caffe.LossParameter loss_param = 101;</code>
       *
       * <pre>
       * Parameters shared by loss layers.
       * </pre>
       */
      public Builder clearLossParam() {
        if (lossParamBuilder_ == null) {
          lossParam_ = caffe.Caffe.LossParameter.getDefaultInstance();
          onChanged();
        } else {
          lossParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00001000);
        return this;
      }
      /**
       * <code>optional .caffe.LossParameter loss_param = 101;</code>
       *
       * <pre>
       * Parameters shared by loss layers.
       * </pre>
       */
      public caffe.Caffe.LossParameter.Builder getLossParamBuilder() {
        bitField0_ |= 0x00001000;
        onChanged();
        return getLossParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.LossParameter loss_param = 101;</code>
       *
       * <pre>
       * Parameters shared by loss layers.
       * </pre>
       */
      public caffe.Caffe.LossParameterOrBuilder getLossParamOrBuilder() {
        if (lossParamBuilder_ != null) {
          return lossParamBuilder_.getMessageOrBuilder();
        } else {
          return lossParam_;
        }
      }
      /**
       * <code>optional .caffe.LossParameter loss_param = 101;</code>
       *
       * <pre>
       * Parameters shared by loss layers.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.LossParameter, caffe.Caffe.LossParameter.Builder, caffe.Caffe.LossParameterOrBuilder> 
          getLossParamFieldBuilder() {
        if (lossParamBuilder_ == null) {
          lossParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.LossParameter, caffe.Caffe.LossParameter.Builder, caffe.Caffe.LossParameterOrBuilder>(
                  lossParam_,
                  getParentForChildren(),
                  isClean());
          lossParam_ = null;
        }
        return lossParamBuilder_;
      }

      // optional .caffe.AccuracyParameter accuracy_param = 102;
      private caffe.Caffe.AccuracyParameter accuracyParam_ = caffe.Caffe.AccuracyParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.AccuracyParameter, caffe.Caffe.AccuracyParameter.Builder, caffe.Caffe.AccuracyParameterOrBuilder> accuracyParamBuilder_;
      /**
       * <code>optional .caffe.AccuracyParameter accuracy_param = 102;</code>
       *
       * <pre>
       * Layer type-specific parameters.
       *
       * Note: certain layers may have more than one computational engine
       * for their implementation. These layers include an Engine type and
       * engine parameter for selecting the implementation.
       * The default for the engine is set by the ENGINE switch at compile-time.
       * </pre>
       */
      public boolean hasAccuracyParam() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional .caffe.AccuracyParameter accuracy_param = 102;</code>
       *
       * <pre>
       * Layer type-specific parameters.
       *
       * Note: certain layers may have more than one computational engine
       * for their implementation. These layers include an Engine type and
       * engine parameter for selecting the implementation.
       * The default for the engine is set by the ENGINE switch at compile-time.
       * </pre>
       */
      public caffe.Caffe.AccuracyParameter getAccuracyParam() {
        if (accuracyParamBuilder_ == null) {
          return accuracyParam_;
        } else {
          return accuracyParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.AccuracyParameter accuracy_param = 102;</code>
       *
       * <pre>
       * Layer type-specific parameters.
       *
       * Note: certain layers may have more than one computational engine
       * for their implementation. These layers include an Engine type and
       * engine parameter for selecting the implementation.
       * The default for the engine is set by the ENGINE switch at compile-time.
       * </pre>
       */
      public Builder setAccuracyParam(caffe.Caffe.AccuracyParameter value) {
        if (accuracyParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          accuracyParam_ = value;
          onChanged();
        } else {
          accuracyParamBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00002000;
        return this;
      }
      /**
       * <code>optional .caffe.AccuracyParameter accuracy_param = 102;</code>
       *
       * <pre>
       * Layer type-specific parameters.
       *
       * Note: certain layers may have more than one computational engine
       * for their implementation. These layers include an Engine type and
       * engine parameter for selecting the implementation.
       * The default for the engine is set by the ENGINE switch at compile-time.
       * </pre>
       */
      public Builder setAccuracyParam(
          caffe.Caffe.AccuracyParameter.Builder builderForValue) {
        if (accuracyParamBuilder_ == null) {
          accuracyParam_ = builderForValue.build();
          onChanged();
        } else {
          accuracyParamBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00002000;
        return this;
      }
      /**
       * <code>optional .caffe.AccuracyParameter accuracy_param = 102;</code>
       *
       * <pre>
       * Layer type-specific parameters.
       *
       * Note: certain layers may have more than one computational engine
       * for their implementation. These layers include an Engine type and
       * engine parameter for selecting the implementation.
       * The default for the engine is set by the ENGINE switch at compile-time.
       * </pre>
       */
      public Builder mergeAccuracyParam(caffe.Caffe.AccuracyParameter value) {
        if (accuracyParamBuilder_ == null) {
          if (((bitField0_ & 0x00002000) == 0x00002000) &&
              accuracyParam_ != caffe.Caffe.AccuracyParameter.getDefaultInstance()) {
            accuracyParam_ =
              caffe.Caffe.AccuracyParameter.newBuilder(accuracyParam_).mergeFrom(value).buildPartial();
          } else {
            accuracyParam_ = value;
          }
          onChanged();
        } else {
          accuracyParamBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00002000;
        return this;
      }
      /**
       * <code>optional .caffe.AccuracyParameter accuracy_param = 102;</code>
       *
       * <pre>
       * Layer type-specific parameters.
       *
       * Note: certain layers may have more than one computational engine
       * for their implementation. These layers include an Engine type and
       * engine parameter for selecting the implementation.
       * The default for the engine is set by the ENGINE switch at compile-time.
       * </pre>
       */
      public Builder clearAccuracyParam() {
        if (accuracyParamBuilder_ == null) {
          accuracyParam_ = caffe.Caffe.AccuracyParameter.getDefaultInstance();
          onChanged();
        } else {
          accuracyParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00002000);
        return this;
      }
      /**
       * <code>optional .caffe.AccuracyParameter accuracy_param = 102;</code>
       *
       * <pre>
       * Layer type-specific parameters.
       *
       * Note: certain layers may have more than one computational engine
       * for their implementation. These layers include an Engine type and
       * engine parameter for selecting the implementation.
       * The default for the engine is set by the ENGINE switch at compile-time.
       * </pre>
       */
      public caffe.Caffe.AccuracyParameter.Builder getAccuracyParamBuilder() {
        bitField0_ |= 0x00002000;
        onChanged();
        return getAccuracyParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.AccuracyParameter accuracy_param = 102;</code>
       *
       * <pre>
       * Layer type-specific parameters.
       *
       * Note: certain layers may have more than one computational engine
       * for their implementation. These layers include an Engine type and
       * engine parameter for selecting the implementation.
       * The default for the engine is set by the ENGINE switch at compile-time.
       * </pre>
       */
      public caffe.Caffe.AccuracyParameterOrBuilder getAccuracyParamOrBuilder() {
        if (accuracyParamBuilder_ != null) {
          return accuracyParamBuilder_.getMessageOrBuilder();
        } else {
          return accuracyParam_;
        }
      }
      /**
       * <code>optional .caffe.AccuracyParameter accuracy_param = 102;</code>
       *
       * <pre>
       * Layer type-specific parameters.
       *
       * Note: certain layers may have more than one computational engine
       * for their implementation. These layers include an Engine type and
       * engine parameter for selecting the implementation.
       * The default for the engine is set by the ENGINE switch at compile-time.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.AccuracyParameter, caffe.Caffe.AccuracyParameter.Builder, caffe.Caffe.AccuracyParameterOrBuilder> 
          getAccuracyParamFieldBuilder() {
        if (accuracyParamBuilder_ == null) {
          accuracyParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.AccuracyParameter, caffe.Caffe.AccuracyParameter.Builder, caffe.Caffe.AccuracyParameterOrBuilder>(
                  accuracyParam_,
                  getParentForChildren(),
                  isClean());
          accuracyParam_ = null;
        }
        return accuracyParamBuilder_;
      }

      // optional .caffe.ArgMaxParameter argmax_param = 103;
      private caffe.Caffe.ArgMaxParameter argmaxParam_ = caffe.Caffe.ArgMaxParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.ArgMaxParameter, caffe.Caffe.ArgMaxParameter.Builder, caffe.Caffe.ArgMaxParameterOrBuilder> argmaxParamBuilder_;
      /**
       * <code>optional .caffe.ArgMaxParameter argmax_param = 103;</code>
       */
      public boolean hasArgmaxParam() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional .caffe.ArgMaxParameter argmax_param = 103;</code>
       */
      public caffe.Caffe.ArgMaxParameter getArgmaxParam() {
        if (argmaxParamBuilder_ == null) {
          return argmaxParam_;
        } else {
          return argmaxParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.ArgMaxParameter argmax_param = 103;</code>
       */
      public Builder setArgmaxParam(caffe.Caffe.ArgMaxParameter value) {
        if (argmaxParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          argmaxParam_ = value;
          onChanged();
        } else {
          argmaxParamBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00004000;
        return this;
      }
      /**
       * <code>optional .caffe.ArgMaxParameter argmax_param = 103;</code>
       */
      public Builder setArgmaxParam(
          caffe.Caffe.ArgMaxParameter.Builder builderForValue) {
        if (argmaxParamBuilder_ == null) {
          argmaxParam_ = builderForValue.build();
          onChanged();
        } else {
          argmaxParamBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00004000;
        return this;
      }
      /**
       * <code>optional .caffe.ArgMaxParameter argmax_param = 103;</code>
       */
      public Builder mergeArgmaxParam(caffe.Caffe.ArgMaxParameter value) {
        if (argmaxParamBuilder_ == null) {
          if (((bitField0_ & 0x00004000) == 0x00004000) &&
              argmaxParam_ != caffe.Caffe.ArgMaxParameter.getDefaultInstance()) {
            argmaxParam_ =
              caffe.Caffe.ArgMaxParameter.newBuilder(argmaxParam_).mergeFrom(value).buildPartial();
          } else {
            argmaxParam_ = value;
          }
          onChanged();
        } else {
          argmaxParamBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00004000;
        return this;
      }
      /**
       * <code>optional .caffe.ArgMaxParameter argmax_param = 103;</code>
       */
      public Builder clearArgmaxParam() {
        if (argmaxParamBuilder_ == null) {
          argmaxParam_ = caffe.Caffe.ArgMaxParameter.getDefaultInstance();
          onChanged();
        } else {
          argmaxParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00004000);
        return this;
      }
      /**
       * <code>optional .caffe.ArgMaxParameter argmax_param = 103;</code>
       */
      public caffe.Caffe.ArgMaxParameter.Builder getArgmaxParamBuilder() {
        bitField0_ |= 0x00004000;
        onChanged();
        return getArgmaxParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.ArgMaxParameter argmax_param = 103;</code>
       */
      public caffe.Caffe.ArgMaxParameterOrBuilder getArgmaxParamOrBuilder() {
        if (argmaxParamBuilder_ != null) {
          return argmaxParamBuilder_.getMessageOrBuilder();
        } else {
          return argmaxParam_;
        }
      }
      /**
       * <code>optional .caffe.ArgMaxParameter argmax_param = 103;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.ArgMaxParameter, caffe.Caffe.ArgMaxParameter.Builder, caffe.Caffe.ArgMaxParameterOrBuilder> 
          getArgmaxParamFieldBuilder() {
        if (argmaxParamBuilder_ == null) {
          argmaxParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.ArgMaxParameter, caffe.Caffe.ArgMaxParameter.Builder, caffe.Caffe.ArgMaxParameterOrBuilder>(
                  argmaxParam_,
                  getParentForChildren(),
                  isClean());
          argmaxParam_ = null;
        }
        return argmaxParamBuilder_;
      }

      // optional .caffe.BatchNormParameter batch_norm_param = 139;
      private caffe.Caffe.BatchNormParameter batchNormParam_ = caffe.Caffe.BatchNormParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.BatchNormParameter, caffe.Caffe.BatchNormParameter.Builder, caffe.Caffe.BatchNormParameterOrBuilder> batchNormParamBuilder_;
      /**
       * <code>optional .caffe.BatchNormParameter batch_norm_param = 139;</code>
       */
      public boolean hasBatchNormParam() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional .caffe.BatchNormParameter batch_norm_param = 139;</code>
       */
      public caffe.Caffe.BatchNormParameter getBatchNormParam() {
        if (batchNormParamBuilder_ == null) {
          return batchNormParam_;
        } else {
          return batchNormParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.BatchNormParameter batch_norm_param = 139;</code>
       */
      public Builder setBatchNormParam(caffe.Caffe.BatchNormParameter value) {
        if (batchNormParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          batchNormParam_ = value;
          onChanged();
        } else {
          batchNormParamBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00008000;
        return this;
      }
      /**
       * <code>optional .caffe.BatchNormParameter batch_norm_param = 139;</code>
       */
      public Builder setBatchNormParam(
          caffe.Caffe.BatchNormParameter.Builder builderForValue) {
        if (batchNormParamBuilder_ == null) {
          batchNormParam_ = builderForValue.build();
          onChanged();
        } else {
          batchNormParamBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00008000;
        return this;
      }
      /**
       * <code>optional .caffe.BatchNormParameter batch_norm_param = 139;</code>
       */
      public Builder mergeBatchNormParam(caffe.Caffe.BatchNormParameter value) {
        if (batchNormParamBuilder_ == null) {
          if (((bitField0_ & 0x00008000) == 0x00008000) &&
              batchNormParam_ != caffe.Caffe.BatchNormParameter.getDefaultInstance()) {
            batchNormParam_ =
              caffe.Caffe.BatchNormParameter.newBuilder(batchNormParam_).mergeFrom(value).buildPartial();
          } else {
            batchNormParam_ = value;
          }
          onChanged();
        } else {
          batchNormParamBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00008000;
        return this;
      }
      /**
       * <code>optional .caffe.BatchNormParameter batch_norm_param = 139;</code>
       */
      public Builder clearBatchNormParam() {
        if (batchNormParamBuilder_ == null) {
          batchNormParam_ = caffe.Caffe.BatchNormParameter.getDefaultInstance();
          onChanged();
        } else {
          batchNormParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00008000);
        return this;
      }
      /**
       * <code>optional .caffe.BatchNormParameter batch_norm_param = 139;</code>
       */
      public caffe.Caffe.BatchNormParameter.Builder getBatchNormParamBuilder() {
        bitField0_ |= 0x00008000;
        onChanged();
        return getBatchNormParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.BatchNormParameter batch_norm_param = 139;</code>
       */
      public caffe.Caffe.BatchNormParameterOrBuilder getBatchNormParamOrBuilder() {
        if (batchNormParamBuilder_ != null) {
          return batchNormParamBuilder_.getMessageOrBuilder();
        } else {
          return batchNormParam_;
        }
      }
      /**
       * <code>optional .caffe.BatchNormParameter batch_norm_param = 139;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.BatchNormParameter, caffe.Caffe.BatchNormParameter.Builder, caffe.Caffe.BatchNormParameterOrBuilder> 
          getBatchNormParamFieldBuilder() {
        if (batchNormParamBuilder_ == null) {
          batchNormParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.BatchNormParameter, caffe.Caffe.BatchNormParameter.Builder, caffe.Caffe.BatchNormParameterOrBuilder>(
                  batchNormParam_,
                  getParentForChildren(),
                  isClean());
          batchNormParam_ = null;
        }
        return batchNormParamBuilder_;
      }

      // optional .caffe.BiasParameter bias_param = 141;
      private caffe.Caffe.BiasParameter biasParam_ = caffe.Caffe.BiasParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.BiasParameter, caffe.Caffe.BiasParameter.Builder, caffe.Caffe.BiasParameterOrBuilder> biasParamBuilder_;
      /**
       * <code>optional .caffe.BiasParameter bias_param = 141;</code>
       */
      public boolean hasBiasParam() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional .caffe.BiasParameter bias_param = 141;</code>
       */
      public caffe.Caffe.BiasParameter getBiasParam() {
        if (biasParamBuilder_ == null) {
          return biasParam_;
        } else {
          return biasParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.BiasParameter bias_param = 141;</code>
       */
      public Builder setBiasParam(caffe.Caffe.BiasParameter value) {
        if (biasParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          biasParam_ = value;
          onChanged();
        } else {
          biasParamBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00010000;
        return this;
      }
      /**
       * <code>optional .caffe.BiasParameter bias_param = 141;</code>
       */
      public Builder setBiasParam(
          caffe.Caffe.BiasParameter.Builder builderForValue) {
        if (biasParamBuilder_ == null) {
          biasParam_ = builderForValue.build();
          onChanged();
        } else {
          biasParamBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00010000;
        return this;
      }
      /**
       * <code>optional .caffe.BiasParameter bias_param = 141;</code>
       */
      public Builder mergeBiasParam(caffe.Caffe.BiasParameter value) {
        if (biasParamBuilder_ == null) {
          if (((bitField0_ & 0x00010000) == 0x00010000) &&
              biasParam_ != caffe.Caffe.BiasParameter.getDefaultInstance()) {
            biasParam_ =
              caffe.Caffe.BiasParameter.newBuilder(biasParam_).mergeFrom(value).buildPartial();
          } else {
            biasParam_ = value;
          }
          onChanged();
        } else {
          biasParamBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00010000;
        return this;
      }
      /**
       * <code>optional .caffe.BiasParameter bias_param = 141;</code>
       */
      public Builder clearBiasParam() {
        if (biasParamBuilder_ == null) {
          biasParam_ = caffe.Caffe.BiasParameter.getDefaultInstance();
          onChanged();
        } else {
          biasParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00010000);
        return this;
      }
      /**
       * <code>optional .caffe.BiasParameter bias_param = 141;</code>
       */
      public caffe.Caffe.BiasParameter.Builder getBiasParamBuilder() {
        bitField0_ |= 0x00010000;
        onChanged();
        return getBiasParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.BiasParameter bias_param = 141;</code>
       */
      public caffe.Caffe.BiasParameterOrBuilder getBiasParamOrBuilder() {
        if (biasParamBuilder_ != null) {
          return biasParamBuilder_.getMessageOrBuilder();
        } else {
          return biasParam_;
        }
      }
      /**
       * <code>optional .caffe.BiasParameter bias_param = 141;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.BiasParameter, caffe.Caffe.BiasParameter.Builder, caffe.Caffe.BiasParameterOrBuilder> 
          getBiasParamFieldBuilder() {
        if (biasParamBuilder_ == null) {
          biasParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.BiasParameter, caffe.Caffe.BiasParameter.Builder, caffe.Caffe.BiasParameterOrBuilder>(
                  biasParam_,
                  getParentForChildren(),
                  isClean());
          biasParam_ = null;
        }
        return biasParamBuilder_;
      }

      // optional .caffe.ConcatParameter concat_param = 104;
      private caffe.Caffe.ConcatParameter concatParam_ = caffe.Caffe.ConcatParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.ConcatParameter, caffe.Caffe.ConcatParameter.Builder, caffe.Caffe.ConcatParameterOrBuilder> concatParamBuilder_;
      /**
       * <code>optional .caffe.ConcatParameter concat_param = 104;</code>
       */
      public boolean hasConcatParam() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional .caffe.ConcatParameter concat_param = 104;</code>
       */
      public caffe.Caffe.ConcatParameter getConcatParam() {
        if (concatParamBuilder_ == null) {
          return concatParam_;
        } else {
          return concatParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.ConcatParameter concat_param = 104;</code>
       */
      public Builder setConcatParam(caffe.Caffe.ConcatParameter value) {
        if (concatParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          concatParam_ = value;
          onChanged();
        } else {
          concatParamBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00020000;
        return this;
      }
      /**
       * <code>optional .caffe.ConcatParameter concat_param = 104;</code>
       */
      public Builder setConcatParam(
          caffe.Caffe.ConcatParameter.Builder builderForValue) {
        if (concatParamBuilder_ == null) {
          concatParam_ = builderForValue.build();
          onChanged();
        } else {
          concatParamBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00020000;
        return this;
      }
      /**
       * <code>optional .caffe.ConcatParameter concat_param = 104;</code>
       */
      public Builder mergeConcatParam(caffe.Caffe.ConcatParameter value) {
        if (concatParamBuilder_ == null) {
          if (((bitField0_ & 0x00020000) == 0x00020000) &&
              concatParam_ != caffe.Caffe.ConcatParameter.getDefaultInstance()) {
            concatParam_ =
              caffe.Caffe.ConcatParameter.newBuilder(concatParam_).mergeFrom(value).buildPartial();
          } else {
            concatParam_ = value;
          }
          onChanged();
        } else {
          concatParamBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00020000;
        return this;
      }
      /**
       * <code>optional .caffe.ConcatParameter concat_param = 104;</code>
       */
      public Builder clearConcatParam() {
        if (concatParamBuilder_ == null) {
          concatParam_ = caffe.Caffe.ConcatParameter.getDefaultInstance();
          onChanged();
        } else {
          concatParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00020000);
        return this;
      }
      /**
       * <code>optional .caffe.ConcatParameter concat_param = 104;</code>
       */
      public caffe.Caffe.ConcatParameter.Builder getConcatParamBuilder() {
        bitField0_ |= 0x00020000;
        onChanged();
        return getConcatParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.ConcatParameter concat_param = 104;</code>
       */
      public caffe.Caffe.ConcatParameterOrBuilder getConcatParamOrBuilder() {
        if (concatParamBuilder_ != null) {
          return concatParamBuilder_.getMessageOrBuilder();
        } else {
          return concatParam_;
        }
      }
      /**
       * <code>optional .caffe.ConcatParameter concat_param = 104;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.ConcatParameter, caffe.Caffe.ConcatParameter.Builder, caffe.Caffe.ConcatParameterOrBuilder> 
          getConcatParamFieldBuilder() {
        if (concatParamBuilder_ == null) {
          concatParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.ConcatParameter, caffe.Caffe.ConcatParameter.Builder, caffe.Caffe.ConcatParameterOrBuilder>(
                  concatParam_,
                  getParentForChildren(),
                  isClean());
          concatParam_ = null;
        }
        return concatParamBuilder_;
      }

      // optional .caffe.ContrastiveLossParameter contrastive_loss_param = 105;
      private caffe.Caffe.ContrastiveLossParameter contrastiveLossParam_ = caffe.Caffe.ContrastiveLossParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.ContrastiveLossParameter, caffe.Caffe.ContrastiveLossParameter.Builder, caffe.Caffe.ContrastiveLossParameterOrBuilder> contrastiveLossParamBuilder_;
      /**
       * <code>optional .caffe.ContrastiveLossParameter contrastive_loss_param = 105;</code>
       */
      public boolean hasContrastiveLossParam() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional .caffe.ContrastiveLossParameter contrastive_loss_param = 105;</code>
       */
      public caffe.Caffe.ContrastiveLossParameter getContrastiveLossParam() {
        if (contrastiveLossParamBuilder_ == null) {
          return contrastiveLossParam_;
        } else {
          return contrastiveLossParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.ContrastiveLossParameter contrastive_loss_param = 105;</code>
       */
      public Builder setContrastiveLossParam(caffe.Caffe.ContrastiveLossParameter value) {
        if (contrastiveLossParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          contrastiveLossParam_ = value;
          onChanged();
        } else {
          contrastiveLossParamBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00040000;
        return this;
      }
      /**
       * <code>optional .caffe.ContrastiveLossParameter contrastive_loss_param = 105;</code>
       */
      public Builder setContrastiveLossParam(
          caffe.Caffe.ContrastiveLossParameter.Builder builderForValue) {
        if (contrastiveLossParamBuilder_ == null) {
          contrastiveLossParam_ = builderForValue.build();
          onChanged();
        } else {
          contrastiveLossParamBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00040000;
        return this;
      }
      /**
       * <code>optional .caffe.ContrastiveLossParameter contrastive_loss_param = 105;</code>
       */
      public Builder mergeContrastiveLossParam(caffe.Caffe.ContrastiveLossParameter value) {
        if (contrastiveLossParamBuilder_ == null) {
          if (((bitField0_ & 0x00040000) == 0x00040000) &&
              contrastiveLossParam_ != caffe.Caffe.ContrastiveLossParameter.getDefaultInstance()) {
            contrastiveLossParam_ =
              caffe.Caffe.ContrastiveLossParameter.newBuilder(contrastiveLossParam_).mergeFrom(value).buildPartial();
          } else {
            contrastiveLossParam_ = value;
          }
          onChanged();
        } else {
          contrastiveLossParamBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00040000;
        return this;
      }
      /**
       * <code>optional .caffe.ContrastiveLossParameter contrastive_loss_param = 105;</code>
       */
      public Builder clearContrastiveLossParam() {
        if (contrastiveLossParamBuilder_ == null) {
          contrastiveLossParam_ = caffe.Caffe.ContrastiveLossParameter.getDefaultInstance();
          onChanged();
        } else {
          contrastiveLossParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00040000);
        return this;
      }
      /**
       * <code>optional .caffe.ContrastiveLossParameter contrastive_loss_param = 105;</code>
       */
      public caffe.Caffe.ContrastiveLossParameter.Builder getContrastiveLossParamBuilder() {
        bitField0_ |= 0x00040000;
        onChanged();
        return getContrastiveLossParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.ContrastiveLossParameter contrastive_loss_param = 105;</code>
       */
      public caffe.Caffe.ContrastiveLossParameterOrBuilder getContrastiveLossParamOrBuilder() {
        if (contrastiveLossParamBuilder_ != null) {
          return contrastiveLossParamBuilder_.getMessageOrBuilder();
        } else {
          return contrastiveLossParam_;
        }
      }
      /**
       * <code>optional .caffe.ContrastiveLossParameter contrastive_loss_param = 105;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.ContrastiveLossParameter, caffe.Caffe.ContrastiveLossParameter.Builder, caffe.Caffe.ContrastiveLossParameterOrBuilder> 
          getContrastiveLossParamFieldBuilder() {
        if (contrastiveLossParamBuilder_ == null) {
          contrastiveLossParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.ContrastiveLossParameter, caffe.Caffe.ContrastiveLossParameter.Builder, caffe.Caffe.ContrastiveLossParameterOrBuilder>(
                  contrastiveLossParam_,
                  getParentForChildren(),
                  isClean());
          contrastiveLossParam_ = null;
        }
        return contrastiveLossParamBuilder_;
      }

      // optional .caffe.ConvolutionParameter convolution_param = 106;
      private caffe.Caffe.ConvolutionParameter convolutionParam_ = caffe.Caffe.ConvolutionParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.ConvolutionParameter, caffe.Caffe.ConvolutionParameter.Builder, caffe.Caffe.ConvolutionParameterOrBuilder> convolutionParamBuilder_;
      /**
       * <code>optional .caffe.ConvolutionParameter convolution_param = 106;</code>
       */
      public boolean hasConvolutionParam() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional .caffe.ConvolutionParameter convolution_param = 106;</code>
       */
      public caffe.Caffe.ConvolutionParameter getConvolutionParam() {
        if (convolutionParamBuilder_ == null) {
          return convolutionParam_;
        } else {
          return convolutionParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.ConvolutionParameter convolution_param = 106;</code>
       */
      public Builder setConvolutionParam(caffe.Caffe.ConvolutionParameter value) {
        if (convolutionParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          convolutionParam_ = value;
          onChanged();
        } else {
          convolutionParamBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00080000;
        return this;
      }
      /**
       * <code>optional .caffe.ConvolutionParameter convolution_param = 106;</code>
       */
      public Builder setConvolutionParam(
          caffe.Caffe.ConvolutionParameter.Builder builderForValue) {
        if (convolutionParamBuilder_ == null) {
          convolutionParam_ = builderForValue.build();
          onChanged();
        } else {
          convolutionParamBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00080000;
        return this;
      }
      /**
       * <code>optional .caffe.ConvolutionParameter convolution_param = 106;</code>
       */
      public Builder mergeConvolutionParam(caffe.Caffe.ConvolutionParameter value) {
        if (convolutionParamBuilder_ == null) {
          if (((bitField0_ & 0x00080000) == 0x00080000) &&
              convolutionParam_ != caffe.Caffe.ConvolutionParameter.getDefaultInstance()) {
            convolutionParam_ =
              caffe.Caffe.ConvolutionParameter.newBuilder(convolutionParam_).mergeFrom(value).buildPartial();
          } else {
            convolutionParam_ = value;
          }
          onChanged();
        } else {
          convolutionParamBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00080000;
        return this;
      }
      /**
       * <code>optional .caffe.ConvolutionParameter convolution_param = 106;</code>
       */
      public Builder clearConvolutionParam() {
        if (convolutionParamBuilder_ == null) {
          convolutionParam_ = caffe.Caffe.ConvolutionParameter.getDefaultInstance();
          onChanged();
        } else {
          convolutionParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00080000);
        return this;
      }
      /**
       * <code>optional .caffe.ConvolutionParameter convolution_param = 106;</code>
       */
      public caffe.Caffe.ConvolutionParameter.Builder getConvolutionParamBuilder() {
        bitField0_ |= 0x00080000;
        onChanged();
        return getConvolutionParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.ConvolutionParameter convolution_param = 106;</code>
       */
      public caffe.Caffe.ConvolutionParameterOrBuilder getConvolutionParamOrBuilder() {
        if (convolutionParamBuilder_ != null) {
          return convolutionParamBuilder_.getMessageOrBuilder();
        } else {
          return convolutionParam_;
        }
      }
      /**
       * <code>optional .caffe.ConvolutionParameter convolution_param = 106;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.ConvolutionParameter, caffe.Caffe.ConvolutionParameter.Builder, caffe.Caffe.ConvolutionParameterOrBuilder> 
          getConvolutionParamFieldBuilder() {
        if (convolutionParamBuilder_ == null) {
          convolutionParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.ConvolutionParameter, caffe.Caffe.ConvolutionParameter.Builder, caffe.Caffe.ConvolutionParameterOrBuilder>(
                  convolutionParam_,
                  getParentForChildren(),
                  isClean());
          convolutionParam_ = null;
        }
        return convolutionParamBuilder_;
      }

      // optional .caffe.CropParameter crop_param = 144;
      private caffe.Caffe.CropParameter cropParam_ = caffe.Caffe.CropParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.CropParameter, caffe.Caffe.CropParameter.Builder, caffe.Caffe.CropParameterOrBuilder> cropParamBuilder_;
      /**
       * <code>optional .caffe.CropParameter crop_param = 144;</code>
       */
      public boolean hasCropParam() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional .caffe.CropParameter crop_param = 144;</code>
       */
      public caffe.Caffe.CropParameter getCropParam() {
        if (cropParamBuilder_ == null) {
          return cropParam_;
        } else {
          return cropParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.CropParameter crop_param = 144;</code>
       */
      public Builder setCropParam(caffe.Caffe.CropParameter value) {
        if (cropParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          cropParam_ = value;
          onChanged();
        } else {
          cropParamBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00100000;
        return this;
      }
      /**
       * <code>optional .caffe.CropParameter crop_param = 144;</code>
       */
      public Builder setCropParam(
          caffe.Caffe.CropParameter.Builder builderForValue) {
        if (cropParamBuilder_ == null) {
          cropParam_ = builderForValue.build();
          onChanged();
        } else {
          cropParamBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00100000;
        return this;
      }
      /**
       * <code>optional .caffe.CropParameter crop_param = 144;</code>
       */
      public Builder mergeCropParam(caffe.Caffe.CropParameter value) {
        if (cropParamBuilder_ == null) {
          if (((bitField0_ & 0x00100000) == 0x00100000) &&
              cropParam_ != caffe.Caffe.CropParameter.getDefaultInstance()) {
            cropParam_ =
              caffe.Caffe.CropParameter.newBuilder(cropParam_).mergeFrom(value).buildPartial();
          } else {
            cropParam_ = value;
          }
          onChanged();
        } else {
          cropParamBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00100000;
        return this;
      }
      /**
       * <code>optional .caffe.CropParameter crop_param = 144;</code>
       */
      public Builder clearCropParam() {
        if (cropParamBuilder_ == null) {
          cropParam_ = caffe.Caffe.CropParameter.getDefaultInstance();
          onChanged();
        } else {
          cropParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00100000);
        return this;
      }
      /**
       * <code>optional .caffe.CropParameter crop_param = 144;</code>
       */
      public caffe.Caffe.CropParameter.Builder getCropParamBuilder() {
        bitField0_ |= 0x00100000;
        onChanged();
        return getCropParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.CropParameter crop_param = 144;</code>
       */
      public caffe.Caffe.CropParameterOrBuilder getCropParamOrBuilder() {
        if (cropParamBuilder_ != null) {
          return cropParamBuilder_.getMessageOrBuilder();
        } else {
          return cropParam_;
        }
      }
      /**
       * <code>optional .caffe.CropParameter crop_param = 144;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.CropParameter, caffe.Caffe.CropParameter.Builder, caffe.Caffe.CropParameterOrBuilder> 
          getCropParamFieldBuilder() {
        if (cropParamBuilder_ == null) {
          cropParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.CropParameter, caffe.Caffe.CropParameter.Builder, caffe.Caffe.CropParameterOrBuilder>(
                  cropParam_,
                  getParentForChildren(),
                  isClean());
          cropParam_ = null;
        }
        return cropParamBuilder_;
      }

      // optional .caffe.DataParameter data_param = 107;
      private caffe.Caffe.DataParameter dataParam_ = caffe.Caffe.DataParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.DataParameter, caffe.Caffe.DataParameter.Builder, caffe.Caffe.DataParameterOrBuilder> dataParamBuilder_;
      /**
       * <code>optional .caffe.DataParameter data_param = 107;</code>
       */
      public boolean hasDataParam() {
        return ((bitField0_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>optional .caffe.DataParameter data_param = 107;</code>
       */
      public caffe.Caffe.DataParameter getDataParam() {
        if (dataParamBuilder_ == null) {
          return dataParam_;
        } else {
          return dataParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.DataParameter data_param = 107;</code>
       */
      public Builder setDataParam(caffe.Caffe.DataParameter value) {
        if (dataParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          dataParam_ = value;
          onChanged();
        } else {
          dataParamBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00200000;
        return this;
      }
      /**
       * <code>optional .caffe.DataParameter data_param = 107;</code>
       */
      public Builder setDataParam(
          caffe.Caffe.DataParameter.Builder builderForValue) {
        if (dataParamBuilder_ == null) {
          dataParam_ = builderForValue.build();
          onChanged();
        } else {
          dataParamBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00200000;
        return this;
      }
      /**
       * <code>optional .caffe.DataParameter data_param = 107;</code>
       */
      public Builder mergeDataParam(caffe.Caffe.DataParameter value) {
        if (dataParamBuilder_ == null) {
          if (((bitField0_ & 0x00200000) == 0x00200000) &&
              dataParam_ != caffe.Caffe.DataParameter.getDefaultInstance()) {
            dataParam_ =
              caffe.Caffe.DataParameter.newBuilder(dataParam_).mergeFrom(value).buildPartial();
          } else {
            dataParam_ = value;
          }
          onChanged();
        } else {
          dataParamBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00200000;
        return this;
      }
      /**
       * <code>optional .caffe.DataParameter data_param = 107;</code>
       */
      public Builder clearDataParam() {
        if (dataParamBuilder_ == null) {
          dataParam_ = caffe.Caffe.DataParameter.getDefaultInstance();
          onChanged();
        } else {
          dataParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00200000);
        return this;
      }
      /**
       * <code>optional .caffe.DataParameter data_param = 107;</code>
       */
      public caffe.Caffe.DataParameter.Builder getDataParamBuilder() {
        bitField0_ |= 0x00200000;
        onChanged();
        return getDataParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.DataParameter data_param = 107;</code>
       */
      public caffe.Caffe.DataParameterOrBuilder getDataParamOrBuilder() {
        if (dataParamBuilder_ != null) {
          return dataParamBuilder_.getMessageOrBuilder();
        } else {
          return dataParam_;
        }
      }
      /**
       * <code>optional .caffe.DataParameter data_param = 107;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.DataParameter, caffe.Caffe.DataParameter.Builder, caffe.Caffe.DataParameterOrBuilder> 
          getDataParamFieldBuilder() {
        if (dataParamBuilder_ == null) {
          dataParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.DataParameter, caffe.Caffe.DataParameter.Builder, caffe.Caffe.DataParameterOrBuilder>(
                  dataParam_,
                  getParentForChildren(),
                  isClean());
          dataParam_ = null;
        }
        return dataParamBuilder_;
      }

      // optional .caffe.DropoutParameter dropout_param = 108;
      private caffe.Caffe.DropoutParameter dropoutParam_ = caffe.Caffe.DropoutParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.DropoutParameter, caffe.Caffe.DropoutParameter.Builder, caffe.Caffe.DropoutParameterOrBuilder> dropoutParamBuilder_;
      /**
       * <code>optional .caffe.DropoutParameter dropout_param = 108;</code>
       */
      public boolean hasDropoutParam() {
        return ((bitField0_ & 0x00400000) == 0x00400000);
      }
      /**
       * <code>optional .caffe.DropoutParameter dropout_param = 108;</code>
       */
      public caffe.Caffe.DropoutParameter getDropoutParam() {
        if (dropoutParamBuilder_ == null) {
          return dropoutParam_;
        } else {
          return dropoutParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.DropoutParameter dropout_param = 108;</code>
       */
      public Builder setDropoutParam(caffe.Caffe.DropoutParameter value) {
        if (dropoutParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          dropoutParam_ = value;
          onChanged();
        } else {
          dropoutParamBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00400000;
        return this;
      }
      /**
       * <code>optional .caffe.DropoutParameter dropout_param = 108;</code>
       */
      public Builder setDropoutParam(
          caffe.Caffe.DropoutParameter.Builder builderForValue) {
        if (dropoutParamBuilder_ == null) {
          dropoutParam_ = builderForValue.build();
          onChanged();
        } else {
          dropoutParamBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00400000;
        return this;
      }
      /**
       * <code>optional .caffe.DropoutParameter dropout_param = 108;</code>
       */
      public Builder mergeDropoutParam(caffe.Caffe.DropoutParameter value) {
        if (dropoutParamBuilder_ == null) {
          if (((bitField0_ & 0x00400000) == 0x00400000) &&
              dropoutParam_ != caffe.Caffe.DropoutParameter.getDefaultInstance()) {
            dropoutParam_ =
              caffe.Caffe.DropoutParameter.newBuilder(dropoutParam_).mergeFrom(value).buildPartial();
          } else {
            dropoutParam_ = value;
          }
          onChanged();
        } else {
          dropoutParamBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00400000;
        return this;
      }
      /**
       * <code>optional .caffe.DropoutParameter dropout_param = 108;</code>
       */
      public Builder clearDropoutParam() {
        if (dropoutParamBuilder_ == null) {
          dropoutParam_ = caffe.Caffe.DropoutParameter.getDefaultInstance();
          onChanged();
        } else {
          dropoutParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00400000);
        return this;
      }
      /**
       * <code>optional .caffe.DropoutParameter dropout_param = 108;</code>
       */
      public caffe.Caffe.DropoutParameter.Builder getDropoutParamBuilder() {
        bitField0_ |= 0x00400000;
        onChanged();
        return getDropoutParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.DropoutParameter dropout_param = 108;</code>
       */
      public caffe.Caffe.DropoutParameterOrBuilder getDropoutParamOrBuilder() {
        if (dropoutParamBuilder_ != null) {
          return dropoutParamBuilder_.getMessageOrBuilder();
        } else {
          return dropoutParam_;
        }
      }
      /**
       * <code>optional .caffe.DropoutParameter dropout_param = 108;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.DropoutParameter, caffe.Caffe.DropoutParameter.Builder, caffe.Caffe.DropoutParameterOrBuilder> 
          getDropoutParamFieldBuilder() {
        if (dropoutParamBuilder_ == null) {
          dropoutParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.DropoutParameter, caffe.Caffe.DropoutParameter.Builder, caffe.Caffe.DropoutParameterOrBuilder>(
                  dropoutParam_,
                  getParentForChildren(),
                  isClean());
          dropoutParam_ = null;
        }
        return dropoutParamBuilder_;
      }

      // optional .caffe.DummyDataParameter dummy_data_param = 109;
      private caffe.Caffe.DummyDataParameter dummyDataParam_ = caffe.Caffe.DummyDataParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.DummyDataParameter, caffe.Caffe.DummyDataParameter.Builder, caffe.Caffe.DummyDataParameterOrBuilder> dummyDataParamBuilder_;
      /**
       * <code>optional .caffe.DummyDataParameter dummy_data_param = 109;</code>
       */
      public boolean hasDummyDataParam() {
        return ((bitField0_ & 0x00800000) == 0x00800000);
      }
      /**
       * <code>optional .caffe.DummyDataParameter dummy_data_param = 109;</code>
       */
      public caffe.Caffe.DummyDataParameter getDummyDataParam() {
        if (dummyDataParamBuilder_ == null) {
          return dummyDataParam_;
        } else {
          return dummyDataParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.DummyDataParameter dummy_data_param = 109;</code>
       */
      public Builder setDummyDataParam(caffe.Caffe.DummyDataParameter value) {
        if (dummyDataParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          dummyDataParam_ = value;
          onChanged();
        } else {
          dummyDataParamBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00800000;
        return this;
      }
      /**
       * <code>optional .caffe.DummyDataParameter dummy_data_param = 109;</code>
       */
      public Builder setDummyDataParam(
          caffe.Caffe.DummyDataParameter.Builder builderForValue) {
        if (dummyDataParamBuilder_ == null) {
          dummyDataParam_ = builderForValue.build();
          onChanged();
        } else {
          dummyDataParamBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00800000;
        return this;
      }
      /**
       * <code>optional .caffe.DummyDataParameter dummy_data_param = 109;</code>
       */
      public Builder mergeDummyDataParam(caffe.Caffe.DummyDataParameter value) {
        if (dummyDataParamBuilder_ == null) {
          if (((bitField0_ & 0x00800000) == 0x00800000) &&
              dummyDataParam_ != caffe.Caffe.DummyDataParameter.getDefaultInstance()) {
            dummyDataParam_ =
              caffe.Caffe.DummyDataParameter.newBuilder(dummyDataParam_).mergeFrom(value).buildPartial();
          } else {
            dummyDataParam_ = value;
          }
          onChanged();
        } else {
          dummyDataParamBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00800000;
        return this;
      }
      /**
       * <code>optional .caffe.DummyDataParameter dummy_data_param = 109;</code>
       */
      public Builder clearDummyDataParam() {
        if (dummyDataParamBuilder_ == null) {
          dummyDataParam_ = caffe.Caffe.DummyDataParameter.getDefaultInstance();
          onChanged();
        } else {
          dummyDataParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00800000);
        return this;
      }
      /**
       * <code>optional .caffe.DummyDataParameter dummy_data_param = 109;</code>
       */
      public caffe.Caffe.DummyDataParameter.Builder getDummyDataParamBuilder() {
        bitField0_ |= 0x00800000;
        onChanged();
        return getDummyDataParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.DummyDataParameter dummy_data_param = 109;</code>
       */
      public caffe.Caffe.DummyDataParameterOrBuilder getDummyDataParamOrBuilder() {
        if (dummyDataParamBuilder_ != null) {
          return dummyDataParamBuilder_.getMessageOrBuilder();
        } else {
          return dummyDataParam_;
        }
      }
      /**
       * <code>optional .caffe.DummyDataParameter dummy_data_param = 109;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.DummyDataParameter, caffe.Caffe.DummyDataParameter.Builder, caffe.Caffe.DummyDataParameterOrBuilder> 
          getDummyDataParamFieldBuilder() {
        if (dummyDataParamBuilder_ == null) {
          dummyDataParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.DummyDataParameter, caffe.Caffe.DummyDataParameter.Builder, caffe.Caffe.DummyDataParameterOrBuilder>(
                  dummyDataParam_,
                  getParentForChildren(),
                  isClean());
          dummyDataParam_ = null;
        }
        return dummyDataParamBuilder_;
      }

      // optional .caffe.EltwiseParameter eltwise_param = 110;
      private caffe.Caffe.EltwiseParameter eltwiseParam_ = caffe.Caffe.EltwiseParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.EltwiseParameter, caffe.Caffe.EltwiseParameter.Builder, caffe.Caffe.EltwiseParameterOrBuilder> eltwiseParamBuilder_;
      /**
       * <code>optional .caffe.EltwiseParameter eltwise_param = 110;</code>
       */
      public boolean hasEltwiseParam() {
        return ((bitField0_ & 0x01000000) == 0x01000000);
      }
      /**
       * <code>optional .caffe.EltwiseParameter eltwise_param = 110;</code>
       */
      public caffe.Caffe.EltwiseParameter getEltwiseParam() {
        if (eltwiseParamBuilder_ == null) {
          return eltwiseParam_;
        } else {
          return eltwiseParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.EltwiseParameter eltwise_param = 110;</code>
       */
      public Builder setEltwiseParam(caffe.Caffe.EltwiseParameter value) {
        if (eltwiseParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          eltwiseParam_ = value;
          onChanged();
        } else {
          eltwiseParamBuilder_.setMessage(value);
        }
        bitField0_ |= 0x01000000;
        return this;
      }
      /**
       * <code>optional .caffe.EltwiseParameter eltwise_param = 110;</code>
       */
      public Builder setEltwiseParam(
          caffe.Caffe.EltwiseParameter.Builder builderForValue) {
        if (eltwiseParamBuilder_ == null) {
          eltwiseParam_ = builderForValue.build();
          onChanged();
        } else {
          eltwiseParamBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x01000000;
        return this;
      }
      /**
       * <code>optional .caffe.EltwiseParameter eltwise_param = 110;</code>
       */
      public Builder mergeEltwiseParam(caffe.Caffe.EltwiseParameter value) {
        if (eltwiseParamBuilder_ == null) {
          if (((bitField0_ & 0x01000000) == 0x01000000) &&
              eltwiseParam_ != caffe.Caffe.EltwiseParameter.getDefaultInstance()) {
            eltwiseParam_ =
              caffe.Caffe.EltwiseParameter.newBuilder(eltwiseParam_).mergeFrom(value).buildPartial();
          } else {
            eltwiseParam_ = value;
          }
          onChanged();
        } else {
          eltwiseParamBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x01000000;
        return this;
      }
      /**
       * <code>optional .caffe.EltwiseParameter eltwise_param = 110;</code>
       */
      public Builder clearEltwiseParam() {
        if (eltwiseParamBuilder_ == null) {
          eltwiseParam_ = caffe.Caffe.EltwiseParameter.getDefaultInstance();
          onChanged();
        } else {
          eltwiseParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x01000000);
        return this;
      }
      /**
       * <code>optional .caffe.EltwiseParameter eltwise_param = 110;</code>
       */
      public caffe.Caffe.EltwiseParameter.Builder getEltwiseParamBuilder() {
        bitField0_ |= 0x01000000;
        onChanged();
        return getEltwiseParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.EltwiseParameter eltwise_param = 110;</code>
       */
      public caffe.Caffe.EltwiseParameterOrBuilder getEltwiseParamOrBuilder() {
        if (eltwiseParamBuilder_ != null) {
          return eltwiseParamBuilder_.getMessageOrBuilder();
        } else {
          return eltwiseParam_;
        }
      }
      /**
       * <code>optional .caffe.EltwiseParameter eltwise_param = 110;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.EltwiseParameter, caffe.Caffe.EltwiseParameter.Builder, caffe.Caffe.EltwiseParameterOrBuilder> 
          getEltwiseParamFieldBuilder() {
        if (eltwiseParamBuilder_ == null) {
          eltwiseParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.EltwiseParameter, caffe.Caffe.EltwiseParameter.Builder, caffe.Caffe.EltwiseParameterOrBuilder>(
                  eltwiseParam_,
                  getParentForChildren(),
                  isClean());
          eltwiseParam_ = null;
        }
        return eltwiseParamBuilder_;
      }

      // optional .caffe.ELUParameter elu_param = 140;
      private caffe.Caffe.ELUParameter eluParam_ = caffe.Caffe.ELUParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.ELUParameter, caffe.Caffe.ELUParameter.Builder, caffe.Caffe.ELUParameterOrBuilder> eluParamBuilder_;
      /**
       * <code>optional .caffe.ELUParameter elu_param = 140;</code>
       */
      public boolean hasEluParam() {
        return ((bitField0_ & 0x02000000) == 0x02000000);
      }
      /**
       * <code>optional .caffe.ELUParameter elu_param = 140;</code>
       */
      public caffe.Caffe.ELUParameter getEluParam() {
        if (eluParamBuilder_ == null) {
          return eluParam_;
        } else {
          return eluParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.ELUParameter elu_param = 140;</code>
       */
      public Builder setEluParam(caffe.Caffe.ELUParameter value) {
        if (eluParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          eluParam_ = value;
          onChanged();
        } else {
          eluParamBuilder_.setMessage(value);
        }
        bitField0_ |= 0x02000000;
        return this;
      }
      /**
       * <code>optional .caffe.ELUParameter elu_param = 140;</code>
       */
      public Builder setEluParam(
          caffe.Caffe.ELUParameter.Builder builderForValue) {
        if (eluParamBuilder_ == null) {
          eluParam_ = builderForValue.build();
          onChanged();
        } else {
          eluParamBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x02000000;
        return this;
      }
      /**
       * <code>optional .caffe.ELUParameter elu_param = 140;</code>
       */
      public Builder mergeEluParam(caffe.Caffe.ELUParameter value) {
        if (eluParamBuilder_ == null) {
          if (((bitField0_ & 0x02000000) == 0x02000000) &&
              eluParam_ != caffe.Caffe.ELUParameter.getDefaultInstance()) {
            eluParam_ =
              caffe.Caffe.ELUParameter.newBuilder(eluParam_).mergeFrom(value).buildPartial();
          } else {
            eluParam_ = value;
          }
          onChanged();
        } else {
          eluParamBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x02000000;
        return this;
      }
      /**
       * <code>optional .caffe.ELUParameter elu_param = 140;</code>
       */
      public Builder clearEluParam() {
        if (eluParamBuilder_ == null) {
          eluParam_ = caffe.Caffe.ELUParameter.getDefaultInstance();
          onChanged();
        } else {
          eluParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x02000000);
        return this;
      }
      /**
       * <code>optional .caffe.ELUParameter elu_param = 140;</code>
       */
      public caffe.Caffe.ELUParameter.Builder getEluParamBuilder() {
        bitField0_ |= 0x02000000;
        onChanged();
        return getEluParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.ELUParameter elu_param = 140;</code>
       */
      public caffe.Caffe.ELUParameterOrBuilder getEluParamOrBuilder() {
        if (eluParamBuilder_ != null) {
          return eluParamBuilder_.getMessageOrBuilder();
        } else {
          return eluParam_;
        }
      }
      /**
       * <code>optional .caffe.ELUParameter elu_param = 140;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.ELUParameter, caffe.Caffe.ELUParameter.Builder, caffe.Caffe.ELUParameterOrBuilder> 
          getEluParamFieldBuilder() {
        if (eluParamBuilder_ == null) {
          eluParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.ELUParameter, caffe.Caffe.ELUParameter.Builder, caffe.Caffe.ELUParameterOrBuilder>(
                  eluParam_,
                  getParentForChildren(),
                  isClean());
          eluParam_ = null;
        }
        return eluParamBuilder_;
      }

      // optional .caffe.EmbedParameter embed_param = 137;
      private caffe.Caffe.EmbedParameter embedParam_ = caffe.Caffe.EmbedParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.EmbedParameter, caffe.Caffe.EmbedParameter.Builder, caffe.Caffe.EmbedParameterOrBuilder> embedParamBuilder_;
      /**
       * <code>optional .caffe.EmbedParameter embed_param = 137;</code>
       */
      public boolean hasEmbedParam() {
        return ((bitField0_ & 0x04000000) == 0x04000000);
      }
      /**
       * <code>optional .caffe.EmbedParameter embed_param = 137;</code>
       */
      public caffe.Caffe.EmbedParameter getEmbedParam() {
        if (embedParamBuilder_ == null) {
          return embedParam_;
        } else {
          return embedParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.EmbedParameter embed_param = 137;</code>
       */
      public Builder setEmbedParam(caffe.Caffe.EmbedParameter value) {
        if (embedParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          embedParam_ = value;
          onChanged();
        } else {
          embedParamBuilder_.setMessage(value);
        }
        bitField0_ |= 0x04000000;
        return this;
      }
      /**
       * <code>optional .caffe.EmbedParameter embed_param = 137;</code>
       */
      public Builder setEmbedParam(
          caffe.Caffe.EmbedParameter.Builder builderForValue) {
        if (embedParamBuilder_ == null) {
          embedParam_ = builderForValue.build();
          onChanged();
        } else {
          embedParamBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x04000000;
        return this;
      }
      /**
       * <code>optional .caffe.EmbedParameter embed_param = 137;</code>
       */
      public Builder mergeEmbedParam(caffe.Caffe.EmbedParameter value) {
        if (embedParamBuilder_ == null) {
          if (((bitField0_ & 0x04000000) == 0x04000000) &&
              embedParam_ != caffe.Caffe.EmbedParameter.getDefaultInstance()) {
            embedParam_ =
              caffe.Caffe.EmbedParameter.newBuilder(embedParam_).mergeFrom(value).buildPartial();
          } else {
            embedParam_ = value;
          }
          onChanged();
        } else {
          embedParamBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x04000000;
        return this;
      }
      /**
       * <code>optional .caffe.EmbedParameter embed_param = 137;</code>
       */
      public Builder clearEmbedParam() {
        if (embedParamBuilder_ == null) {
          embedParam_ = caffe.Caffe.EmbedParameter.getDefaultInstance();
          onChanged();
        } else {
          embedParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x04000000);
        return this;
      }
      /**
       * <code>optional .caffe.EmbedParameter embed_param = 137;</code>
       */
      public caffe.Caffe.EmbedParameter.Builder getEmbedParamBuilder() {
        bitField0_ |= 0x04000000;
        onChanged();
        return getEmbedParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.EmbedParameter embed_param = 137;</code>
       */
      public caffe.Caffe.EmbedParameterOrBuilder getEmbedParamOrBuilder() {
        if (embedParamBuilder_ != null) {
          return embedParamBuilder_.getMessageOrBuilder();
        } else {
          return embedParam_;
        }
      }
      /**
       * <code>optional .caffe.EmbedParameter embed_param = 137;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.EmbedParameter, caffe.Caffe.EmbedParameter.Builder, caffe.Caffe.EmbedParameterOrBuilder> 
          getEmbedParamFieldBuilder() {
        if (embedParamBuilder_ == null) {
          embedParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.EmbedParameter, caffe.Caffe.EmbedParameter.Builder, caffe.Caffe.EmbedParameterOrBuilder>(
                  embedParam_,
                  getParentForChildren(),
                  isClean());
          embedParam_ = null;
        }
        return embedParamBuilder_;
      }

      // optional .caffe.ExpParameter exp_param = 111;
      private caffe.Caffe.ExpParameter expParam_ = caffe.Caffe.ExpParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.ExpParameter, caffe.Caffe.ExpParameter.Builder, caffe.Caffe.ExpParameterOrBuilder> expParamBuilder_;
      /**
       * <code>optional .caffe.ExpParameter exp_param = 111;</code>
       */
      public boolean hasExpParam() {
        return ((bitField0_ & 0x08000000) == 0x08000000);
      }
      /**
       * <code>optional .caffe.ExpParameter exp_param = 111;</code>
       */
      public caffe.Caffe.ExpParameter getExpParam() {
        if (expParamBuilder_ == null) {
          return expParam_;
        } else {
          return expParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.ExpParameter exp_param = 111;</code>
       */
      public Builder setExpParam(caffe.Caffe.ExpParameter value) {
        if (expParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          expParam_ = value;
          onChanged();
        } else {
          expParamBuilder_.setMessage(value);
        }
        bitField0_ |= 0x08000000;
        return this;
      }
      /**
       * <code>optional .caffe.ExpParameter exp_param = 111;</code>
       */
      public Builder setExpParam(
          caffe.Caffe.ExpParameter.Builder builderForValue) {
        if (expParamBuilder_ == null) {
          expParam_ = builderForValue.build();
          onChanged();
        } else {
          expParamBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x08000000;
        return this;
      }
      /**
       * <code>optional .caffe.ExpParameter exp_param = 111;</code>
       */
      public Builder mergeExpParam(caffe.Caffe.ExpParameter value) {
        if (expParamBuilder_ == null) {
          if (((bitField0_ & 0x08000000) == 0x08000000) &&
              expParam_ != caffe.Caffe.ExpParameter.getDefaultInstance()) {
            expParam_ =
              caffe.Caffe.ExpParameter.newBuilder(expParam_).mergeFrom(value).buildPartial();
          } else {
            expParam_ = value;
          }
          onChanged();
        } else {
          expParamBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x08000000;
        return this;
      }
      /**
       * <code>optional .caffe.ExpParameter exp_param = 111;</code>
       */
      public Builder clearExpParam() {
        if (expParamBuilder_ == null) {
          expParam_ = caffe.Caffe.ExpParameter.getDefaultInstance();
          onChanged();
        } else {
          expParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x08000000);
        return this;
      }
      /**
       * <code>optional .caffe.ExpParameter exp_param = 111;</code>
       */
      public caffe.Caffe.ExpParameter.Builder getExpParamBuilder() {
        bitField0_ |= 0x08000000;
        onChanged();
        return getExpParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.ExpParameter exp_param = 111;</code>
       */
      public caffe.Caffe.ExpParameterOrBuilder getExpParamOrBuilder() {
        if (expParamBuilder_ != null) {
          return expParamBuilder_.getMessageOrBuilder();
        } else {
          return expParam_;
        }
      }
      /**
       * <code>optional .caffe.ExpParameter exp_param = 111;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.ExpParameter, caffe.Caffe.ExpParameter.Builder, caffe.Caffe.ExpParameterOrBuilder> 
          getExpParamFieldBuilder() {
        if (expParamBuilder_ == null) {
          expParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.ExpParameter, caffe.Caffe.ExpParameter.Builder, caffe.Caffe.ExpParameterOrBuilder>(
                  expParam_,
                  getParentForChildren(),
                  isClean());
          expParam_ = null;
        }
        return expParamBuilder_;
      }

      // optional .caffe.FlattenParameter flatten_param = 135;
      private caffe.Caffe.FlattenParameter flattenParam_ = caffe.Caffe.FlattenParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.FlattenParameter, caffe.Caffe.FlattenParameter.Builder, caffe.Caffe.FlattenParameterOrBuilder> flattenParamBuilder_;
      /**
       * <code>optional .caffe.FlattenParameter flatten_param = 135;</code>
       */
      public boolean hasFlattenParam() {
        return ((bitField0_ & 0x10000000) == 0x10000000);
      }
      /**
       * <code>optional .caffe.FlattenParameter flatten_param = 135;</code>
       */
      public caffe.Caffe.FlattenParameter getFlattenParam() {
        if (flattenParamBuilder_ == null) {
          return flattenParam_;
        } else {
          return flattenParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.FlattenParameter flatten_param = 135;</code>
       */
      public Builder setFlattenParam(caffe.Caffe.FlattenParameter value) {
        if (flattenParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          flattenParam_ = value;
          onChanged();
        } else {
          flattenParamBuilder_.setMessage(value);
        }
        bitField0_ |= 0x10000000;
        return this;
      }
      /**
       * <code>optional .caffe.FlattenParameter flatten_param = 135;</code>
       */
      public Builder setFlattenParam(
          caffe.Caffe.FlattenParameter.Builder builderForValue) {
        if (flattenParamBuilder_ == null) {
          flattenParam_ = builderForValue.build();
          onChanged();
        } else {
          flattenParamBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x10000000;
        return this;
      }
      /**
       * <code>optional .caffe.FlattenParameter flatten_param = 135;</code>
       */
      public Builder mergeFlattenParam(caffe.Caffe.FlattenParameter value) {
        if (flattenParamBuilder_ == null) {
          if (((bitField0_ & 0x10000000) == 0x10000000) &&
              flattenParam_ != caffe.Caffe.FlattenParameter.getDefaultInstance()) {
            flattenParam_ =
              caffe.Caffe.FlattenParameter.newBuilder(flattenParam_).mergeFrom(value).buildPartial();
          } else {
            flattenParam_ = value;
          }
          onChanged();
        } else {
          flattenParamBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x10000000;
        return this;
      }
      /**
       * <code>optional .caffe.FlattenParameter flatten_param = 135;</code>
       */
      public Builder clearFlattenParam() {
        if (flattenParamBuilder_ == null) {
          flattenParam_ = caffe.Caffe.FlattenParameter.getDefaultInstance();
          onChanged();
        } else {
          flattenParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x10000000);
        return this;
      }
      /**
       * <code>optional .caffe.FlattenParameter flatten_param = 135;</code>
       */
      public caffe.Caffe.FlattenParameter.Builder getFlattenParamBuilder() {
        bitField0_ |= 0x10000000;
        onChanged();
        return getFlattenParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.FlattenParameter flatten_param = 135;</code>
       */
      public caffe.Caffe.FlattenParameterOrBuilder getFlattenParamOrBuilder() {
        if (flattenParamBuilder_ != null) {
          return flattenParamBuilder_.getMessageOrBuilder();
        } else {
          return flattenParam_;
        }
      }
      /**
       * <code>optional .caffe.FlattenParameter flatten_param = 135;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.FlattenParameter, caffe.Caffe.FlattenParameter.Builder, caffe.Caffe.FlattenParameterOrBuilder> 
          getFlattenParamFieldBuilder() {
        if (flattenParamBuilder_ == null) {
          flattenParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.FlattenParameter, caffe.Caffe.FlattenParameter.Builder, caffe.Caffe.FlattenParameterOrBuilder>(
                  flattenParam_,
                  getParentForChildren(),
                  isClean());
          flattenParam_ = null;
        }
        return flattenParamBuilder_;
      }

      // optional .caffe.HDF5DataParameter hdf5_data_param = 112;
      private caffe.Caffe.HDF5DataParameter hdf5DataParam_ = caffe.Caffe.HDF5DataParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.HDF5DataParameter, caffe.Caffe.HDF5DataParameter.Builder, caffe.Caffe.HDF5DataParameterOrBuilder> hdf5DataParamBuilder_;
      /**
       * <code>optional .caffe.HDF5DataParameter hdf5_data_param = 112;</code>
       */
      public boolean hasHdf5DataParam() {
        return ((bitField0_ & 0x20000000) == 0x20000000);
      }
      /**
       * <code>optional .caffe.HDF5DataParameter hdf5_data_param = 112;</code>
       */
      public caffe.Caffe.HDF5DataParameter getHdf5DataParam() {
        if (hdf5DataParamBuilder_ == null) {
          return hdf5DataParam_;
        } else {
          return hdf5DataParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.HDF5DataParameter hdf5_data_param = 112;</code>
       */
      public Builder setHdf5DataParam(caffe.Caffe.HDF5DataParameter value) {
        if (hdf5DataParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          hdf5DataParam_ = value;
          onChanged();
        } else {
          hdf5DataParamBuilder_.setMessage(value);
        }
        bitField0_ |= 0x20000000;
        return this;
      }
      /**
       * <code>optional .caffe.HDF5DataParameter hdf5_data_param = 112;</code>
       */
      public Builder setHdf5DataParam(
          caffe.Caffe.HDF5DataParameter.Builder builderForValue) {
        if (hdf5DataParamBuilder_ == null) {
          hdf5DataParam_ = builderForValue.build();
          onChanged();
        } else {
          hdf5DataParamBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x20000000;
        return this;
      }
      /**
       * <code>optional .caffe.HDF5DataParameter hdf5_data_param = 112;</code>
       */
      public Builder mergeHdf5DataParam(caffe.Caffe.HDF5DataParameter value) {
        if (hdf5DataParamBuilder_ == null) {
          if (((bitField0_ & 0x20000000) == 0x20000000) &&
              hdf5DataParam_ != caffe.Caffe.HDF5DataParameter.getDefaultInstance()) {
            hdf5DataParam_ =
              caffe.Caffe.HDF5DataParameter.newBuilder(hdf5DataParam_).mergeFrom(value).buildPartial();
          } else {
            hdf5DataParam_ = value;
          }
          onChanged();
        } else {
          hdf5DataParamBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x20000000;
        return this;
      }
      /**
       * <code>optional .caffe.HDF5DataParameter hdf5_data_param = 112;</code>
       */
      public Builder clearHdf5DataParam() {
        if (hdf5DataParamBuilder_ == null) {
          hdf5DataParam_ = caffe.Caffe.HDF5DataParameter.getDefaultInstance();
          onChanged();
        } else {
          hdf5DataParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x20000000);
        return this;
      }
      /**
       * <code>optional .caffe.HDF5DataParameter hdf5_data_param = 112;</code>
       */
      public caffe.Caffe.HDF5DataParameter.Builder getHdf5DataParamBuilder() {
        bitField0_ |= 0x20000000;
        onChanged();
        return getHdf5DataParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.HDF5DataParameter hdf5_data_param = 112;</code>
       */
      public caffe.Caffe.HDF5DataParameterOrBuilder getHdf5DataParamOrBuilder() {
        if (hdf5DataParamBuilder_ != null) {
          return hdf5DataParamBuilder_.getMessageOrBuilder();
        } else {
          return hdf5DataParam_;
        }
      }
      /**
       * <code>optional .caffe.HDF5DataParameter hdf5_data_param = 112;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.HDF5DataParameter, caffe.Caffe.HDF5DataParameter.Builder, caffe.Caffe.HDF5DataParameterOrBuilder> 
          getHdf5DataParamFieldBuilder() {
        if (hdf5DataParamBuilder_ == null) {
          hdf5DataParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.HDF5DataParameter, caffe.Caffe.HDF5DataParameter.Builder, caffe.Caffe.HDF5DataParameterOrBuilder>(
                  hdf5DataParam_,
                  getParentForChildren(),
                  isClean());
          hdf5DataParam_ = null;
        }
        return hdf5DataParamBuilder_;
      }

      // optional .caffe.HDF5OutputParameter hdf5_output_param = 113;
      private caffe.Caffe.HDF5OutputParameter hdf5OutputParam_ = caffe.Caffe.HDF5OutputParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.HDF5OutputParameter, caffe.Caffe.HDF5OutputParameter.Builder, caffe.Caffe.HDF5OutputParameterOrBuilder> hdf5OutputParamBuilder_;
      /**
       * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 113;</code>
       */
      public boolean hasHdf5OutputParam() {
        return ((bitField0_ & 0x40000000) == 0x40000000);
      }
      /**
       * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 113;</code>
       */
      public caffe.Caffe.HDF5OutputParameter getHdf5OutputParam() {
        if (hdf5OutputParamBuilder_ == null) {
          return hdf5OutputParam_;
        } else {
          return hdf5OutputParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 113;</code>
       */
      public Builder setHdf5OutputParam(caffe.Caffe.HDF5OutputParameter value) {
        if (hdf5OutputParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          hdf5OutputParam_ = value;
          onChanged();
        } else {
          hdf5OutputParamBuilder_.setMessage(value);
        }
        bitField0_ |= 0x40000000;
        return this;
      }
      /**
       * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 113;</code>
       */
      public Builder setHdf5OutputParam(
          caffe.Caffe.HDF5OutputParameter.Builder builderForValue) {
        if (hdf5OutputParamBuilder_ == null) {
          hdf5OutputParam_ = builderForValue.build();
          onChanged();
        } else {
          hdf5OutputParamBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x40000000;
        return this;
      }
      /**
       * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 113;</code>
       */
      public Builder mergeHdf5OutputParam(caffe.Caffe.HDF5OutputParameter value) {
        if (hdf5OutputParamBuilder_ == null) {
          if (((bitField0_ & 0x40000000) == 0x40000000) &&
              hdf5OutputParam_ != caffe.Caffe.HDF5OutputParameter.getDefaultInstance()) {
            hdf5OutputParam_ =
              caffe.Caffe.HDF5OutputParameter.newBuilder(hdf5OutputParam_).mergeFrom(value).buildPartial();
          } else {
            hdf5OutputParam_ = value;
          }
          onChanged();
        } else {
          hdf5OutputParamBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x40000000;
        return this;
      }
      /**
       * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 113;</code>
       */
      public Builder clearHdf5OutputParam() {
        if (hdf5OutputParamBuilder_ == null) {
          hdf5OutputParam_ = caffe.Caffe.HDF5OutputParameter.getDefaultInstance();
          onChanged();
        } else {
          hdf5OutputParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x40000000);
        return this;
      }
      /**
       * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 113;</code>
       */
      public caffe.Caffe.HDF5OutputParameter.Builder getHdf5OutputParamBuilder() {
        bitField0_ |= 0x40000000;
        onChanged();
        return getHdf5OutputParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 113;</code>
       */
      public caffe.Caffe.HDF5OutputParameterOrBuilder getHdf5OutputParamOrBuilder() {
        if (hdf5OutputParamBuilder_ != null) {
          return hdf5OutputParamBuilder_.getMessageOrBuilder();
        } else {
          return hdf5OutputParam_;
        }
      }
      /**
       * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 113;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.HDF5OutputParameter, caffe.Caffe.HDF5OutputParameter.Builder, caffe.Caffe.HDF5OutputParameterOrBuilder> 
          getHdf5OutputParamFieldBuilder() {
        if (hdf5OutputParamBuilder_ == null) {
          hdf5OutputParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.HDF5OutputParameter, caffe.Caffe.HDF5OutputParameter.Builder, caffe.Caffe.HDF5OutputParameterOrBuilder>(
                  hdf5OutputParam_,
                  getParentForChildren(),
                  isClean());
          hdf5OutputParam_ = null;
        }
        return hdf5OutputParamBuilder_;
      }

      // optional .caffe.HingeLossParameter hinge_loss_param = 114;
      private caffe.Caffe.HingeLossParameter hingeLossParam_ = caffe.Caffe.HingeLossParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.HingeLossParameter, caffe.Caffe.HingeLossParameter.Builder, caffe.Caffe.HingeLossParameterOrBuilder> hingeLossParamBuilder_;
      /**
       * <code>optional .caffe.HingeLossParameter hinge_loss_param = 114;</code>
       */
      public boolean hasHingeLossParam() {
        return ((bitField0_ & 0x80000000) == 0x80000000);
      }
      /**
       * <code>optional .caffe.HingeLossParameter hinge_loss_param = 114;</code>
       */
      public caffe.Caffe.HingeLossParameter getHingeLossParam() {
        if (hingeLossParamBuilder_ == null) {
          return hingeLossParam_;
        } else {
          return hingeLossParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.HingeLossParameter hinge_loss_param = 114;</code>
       */
      public Builder setHingeLossParam(caffe.Caffe.HingeLossParameter value) {
        if (hingeLossParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          hingeLossParam_ = value;
          onChanged();
        } else {
          hingeLossParamBuilder_.setMessage(value);
        }
        bitField0_ |= 0x80000000;
        return this;
      }
      /**
       * <code>optional .caffe.HingeLossParameter hinge_loss_param = 114;</code>
       */
      public Builder setHingeLossParam(
          caffe.Caffe.HingeLossParameter.Builder builderForValue) {
        if (hingeLossParamBuilder_ == null) {
          hingeLossParam_ = builderForValue.build();
          onChanged();
        } else {
          hingeLossParamBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x80000000;
        return this;
      }
      /**
       * <code>optional .caffe.HingeLossParameter hinge_loss_param = 114;</code>
       */
      public Builder mergeHingeLossParam(caffe.Caffe.HingeLossParameter value) {
        if (hingeLossParamBuilder_ == null) {
          if (((bitField0_ & 0x80000000) == 0x80000000) &&
              hingeLossParam_ != caffe.Caffe.HingeLossParameter.getDefaultInstance()) {
            hingeLossParam_ =
              caffe.Caffe.HingeLossParameter.newBuilder(hingeLossParam_).mergeFrom(value).buildPartial();
          } else {
            hingeLossParam_ = value;
          }
          onChanged();
        } else {
          hingeLossParamBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x80000000;
        return this;
      }
      /**
       * <code>optional .caffe.HingeLossParameter hinge_loss_param = 114;</code>
       */
      public Builder clearHingeLossParam() {
        if (hingeLossParamBuilder_ == null) {
          hingeLossParam_ = caffe.Caffe.HingeLossParameter.getDefaultInstance();
          onChanged();
        } else {
          hingeLossParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x80000000);
        return this;
      }
      /**
       * <code>optional .caffe.HingeLossParameter hinge_loss_param = 114;</code>
       */
      public caffe.Caffe.HingeLossParameter.Builder getHingeLossParamBuilder() {
        bitField0_ |= 0x80000000;
        onChanged();
        return getHingeLossParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.HingeLossParameter hinge_loss_param = 114;</code>
       */
      public caffe.Caffe.HingeLossParameterOrBuilder getHingeLossParamOrBuilder() {
        if (hingeLossParamBuilder_ != null) {
          return hingeLossParamBuilder_.getMessageOrBuilder();
        } else {
          return hingeLossParam_;
        }
      }
      /**
       * <code>optional .caffe.HingeLossParameter hinge_loss_param = 114;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.HingeLossParameter, caffe.Caffe.HingeLossParameter.Builder, caffe.Caffe.HingeLossParameterOrBuilder> 
          getHingeLossParamFieldBuilder() {
        if (hingeLossParamBuilder_ == null) {
          hingeLossParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.HingeLossParameter, caffe.Caffe.HingeLossParameter.Builder, caffe.Caffe.HingeLossParameterOrBuilder>(
                  hingeLossParam_,
                  getParentForChildren(),
                  isClean());
          hingeLossParam_ = null;
        }
        return hingeLossParamBuilder_;
      }

      // optional .caffe.ImageDataParameter image_data_param = 115;
      private caffe.Caffe.ImageDataParameter imageDataParam_ = caffe.Caffe.ImageDataParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.ImageDataParameter, caffe.Caffe.ImageDataParameter.Builder, caffe.Caffe.ImageDataParameterOrBuilder> imageDataParamBuilder_;
      /**
       * <code>optional .caffe.ImageDataParameter image_data_param = 115;</code>
       */
      public boolean hasImageDataParam() {
        return ((bitField1_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .caffe.ImageDataParameter image_data_param = 115;</code>
       */
      public caffe.Caffe.ImageDataParameter getImageDataParam() {
        if (imageDataParamBuilder_ == null) {
          return imageDataParam_;
        } else {
          return imageDataParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.ImageDataParameter image_data_param = 115;</code>
       */
      public Builder setImageDataParam(caffe.Caffe.ImageDataParameter value) {
        if (imageDataParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          imageDataParam_ = value;
          onChanged();
        } else {
          imageDataParamBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .caffe.ImageDataParameter image_data_param = 115;</code>
       */
      public Builder setImageDataParam(
          caffe.Caffe.ImageDataParameter.Builder builderForValue) {
        if (imageDataParamBuilder_ == null) {
          imageDataParam_ = builderForValue.build();
          onChanged();
        } else {
          imageDataParamBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .caffe.ImageDataParameter image_data_param = 115;</code>
       */
      public Builder mergeImageDataParam(caffe.Caffe.ImageDataParameter value) {
        if (imageDataParamBuilder_ == null) {
          if (((bitField1_ & 0x00000001) == 0x00000001) &&
              imageDataParam_ != caffe.Caffe.ImageDataParameter.getDefaultInstance()) {
            imageDataParam_ =
              caffe.Caffe.ImageDataParameter.newBuilder(imageDataParam_).mergeFrom(value).buildPartial();
          } else {
            imageDataParam_ = value;
          }
          onChanged();
        } else {
          imageDataParamBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .caffe.ImageDataParameter image_data_param = 115;</code>
       */
      public Builder clearImageDataParam() {
        if (imageDataParamBuilder_ == null) {
          imageDataParam_ = caffe.Caffe.ImageDataParameter.getDefaultInstance();
          onChanged();
        } else {
          imageDataParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .caffe.ImageDataParameter image_data_param = 115;</code>
       */
      public caffe.Caffe.ImageDataParameter.Builder getImageDataParamBuilder() {
        bitField1_ |= 0x00000001;
        onChanged();
        return getImageDataParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.ImageDataParameter image_data_param = 115;</code>
       */
      public caffe.Caffe.ImageDataParameterOrBuilder getImageDataParamOrBuilder() {
        if (imageDataParamBuilder_ != null) {
          return imageDataParamBuilder_.getMessageOrBuilder();
        } else {
          return imageDataParam_;
        }
      }
      /**
       * <code>optional .caffe.ImageDataParameter image_data_param = 115;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.ImageDataParameter, caffe.Caffe.ImageDataParameter.Builder, caffe.Caffe.ImageDataParameterOrBuilder> 
          getImageDataParamFieldBuilder() {
        if (imageDataParamBuilder_ == null) {
          imageDataParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.ImageDataParameter, caffe.Caffe.ImageDataParameter.Builder, caffe.Caffe.ImageDataParameterOrBuilder>(
                  imageDataParam_,
                  getParentForChildren(),
                  isClean());
          imageDataParam_ = null;
        }
        return imageDataParamBuilder_;
      }

      // optional .caffe.InfogainLossParameter infogain_loss_param = 116;
      private caffe.Caffe.InfogainLossParameter infogainLossParam_ = caffe.Caffe.InfogainLossParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.InfogainLossParameter, caffe.Caffe.InfogainLossParameter.Builder, caffe.Caffe.InfogainLossParameterOrBuilder> infogainLossParamBuilder_;
      /**
       * <code>optional .caffe.InfogainLossParameter infogain_loss_param = 116;</code>
       */
      public boolean hasInfogainLossParam() {
        return ((bitField1_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .caffe.InfogainLossParameter infogain_loss_param = 116;</code>
       */
      public caffe.Caffe.InfogainLossParameter getInfogainLossParam() {
        if (infogainLossParamBuilder_ == null) {
          return infogainLossParam_;
        } else {
          return infogainLossParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.InfogainLossParameter infogain_loss_param = 116;</code>
       */
      public Builder setInfogainLossParam(caffe.Caffe.InfogainLossParameter value) {
        if (infogainLossParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          infogainLossParam_ = value;
          onChanged();
        } else {
          infogainLossParamBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .caffe.InfogainLossParameter infogain_loss_param = 116;</code>
       */
      public Builder setInfogainLossParam(
          caffe.Caffe.InfogainLossParameter.Builder builderForValue) {
        if (infogainLossParamBuilder_ == null) {
          infogainLossParam_ = builderForValue.build();
          onChanged();
        } else {
          infogainLossParamBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .caffe.InfogainLossParameter infogain_loss_param = 116;</code>
       */
      public Builder mergeInfogainLossParam(caffe.Caffe.InfogainLossParameter value) {
        if (infogainLossParamBuilder_ == null) {
          if (((bitField1_ & 0x00000002) == 0x00000002) &&
              infogainLossParam_ != caffe.Caffe.InfogainLossParameter.getDefaultInstance()) {
            infogainLossParam_ =
              caffe.Caffe.InfogainLossParameter.newBuilder(infogainLossParam_).mergeFrom(value).buildPartial();
          } else {
            infogainLossParam_ = value;
          }
          onChanged();
        } else {
          infogainLossParamBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .caffe.InfogainLossParameter infogain_loss_param = 116;</code>
       */
      public Builder clearInfogainLossParam() {
        if (infogainLossParamBuilder_ == null) {
          infogainLossParam_ = caffe.Caffe.InfogainLossParameter.getDefaultInstance();
          onChanged();
        } else {
          infogainLossParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000002);
        return this;
      }
      /**
       * <code>optional .caffe.InfogainLossParameter infogain_loss_param = 116;</code>
       */
      public caffe.Caffe.InfogainLossParameter.Builder getInfogainLossParamBuilder() {
        bitField1_ |= 0x00000002;
        onChanged();
        return getInfogainLossParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.InfogainLossParameter infogain_loss_param = 116;</code>
       */
      public caffe.Caffe.InfogainLossParameterOrBuilder getInfogainLossParamOrBuilder() {
        if (infogainLossParamBuilder_ != null) {
          return infogainLossParamBuilder_.getMessageOrBuilder();
        } else {
          return infogainLossParam_;
        }
      }
      /**
       * <code>optional .caffe.InfogainLossParameter infogain_loss_param = 116;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.InfogainLossParameter, caffe.Caffe.InfogainLossParameter.Builder, caffe.Caffe.InfogainLossParameterOrBuilder> 
          getInfogainLossParamFieldBuilder() {
        if (infogainLossParamBuilder_ == null) {
          infogainLossParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.InfogainLossParameter, caffe.Caffe.InfogainLossParameter.Builder, caffe.Caffe.InfogainLossParameterOrBuilder>(
                  infogainLossParam_,
                  getParentForChildren(),
                  isClean());
          infogainLossParam_ = null;
        }
        return infogainLossParamBuilder_;
      }

      // optional .caffe.InnerProductParameter inner_product_param = 117;
      private caffe.Caffe.InnerProductParameter innerProductParam_ = caffe.Caffe.InnerProductParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.InnerProductParameter, caffe.Caffe.InnerProductParameter.Builder, caffe.Caffe.InnerProductParameterOrBuilder> innerProductParamBuilder_;
      /**
       * <code>optional .caffe.InnerProductParameter inner_product_param = 117;</code>
       */
      public boolean hasInnerProductParam() {
        return ((bitField1_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .caffe.InnerProductParameter inner_product_param = 117;</code>
       */
      public caffe.Caffe.InnerProductParameter getInnerProductParam() {
        if (innerProductParamBuilder_ == null) {
          return innerProductParam_;
        } else {
          return innerProductParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.InnerProductParameter inner_product_param = 117;</code>
       */
      public Builder setInnerProductParam(caffe.Caffe.InnerProductParameter value) {
        if (innerProductParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          innerProductParam_ = value;
          onChanged();
        } else {
          innerProductParamBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .caffe.InnerProductParameter inner_product_param = 117;</code>
       */
      public Builder setInnerProductParam(
          caffe.Caffe.InnerProductParameter.Builder builderForValue) {
        if (innerProductParamBuilder_ == null) {
          innerProductParam_ = builderForValue.build();
          onChanged();
        } else {
          innerProductParamBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .caffe.InnerProductParameter inner_product_param = 117;</code>
       */
      public Builder mergeInnerProductParam(caffe.Caffe.InnerProductParameter value) {
        if (innerProductParamBuilder_ == null) {
          if (((bitField1_ & 0x00000004) == 0x00000004) &&
              innerProductParam_ != caffe.Caffe.InnerProductParameter.getDefaultInstance()) {
            innerProductParam_ =
              caffe.Caffe.InnerProductParameter.newBuilder(innerProductParam_).mergeFrom(value).buildPartial();
          } else {
            innerProductParam_ = value;
          }
          onChanged();
        } else {
          innerProductParamBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .caffe.InnerProductParameter inner_product_param = 117;</code>
       */
      public Builder clearInnerProductParam() {
        if (innerProductParamBuilder_ == null) {
          innerProductParam_ = caffe.Caffe.InnerProductParameter.getDefaultInstance();
          onChanged();
        } else {
          innerProductParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000004);
        return this;
      }
      /**
       * <code>optional .caffe.InnerProductParameter inner_product_param = 117;</code>
       */
      public caffe.Caffe.InnerProductParameter.Builder getInnerProductParamBuilder() {
        bitField1_ |= 0x00000004;
        onChanged();
        return getInnerProductParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.InnerProductParameter inner_product_param = 117;</code>
       */
      public caffe.Caffe.InnerProductParameterOrBuilder getInnerProductParamOrBuilder() {
        if (innerProductParamBuilder_ != null) {
          return innerProductParamBuilder_.getMessageOrBuilder();
        } else {
          return innerProductParam_;
        }
      }
      /**
       * <code>optional .caffe.InnerProductParameter inner_product_param = 117;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.InnerProductParameter, caffe.Caffe.InnerProductParameter.Builder, caffe.Caffe.InnerProductParameterOrBuilder> 
          getInnerProductParamFieldBuilder() {
        if (innerProductParamBuilder_ == null) {
          innerProductParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.InnerProductParameter, caffe.Caffe.InnerProductParameter.Builder, caffe.Caffe.InnerProductParameterOrBuilder>(
                  innerProductParam_,
                  getParentForChildren(),
                  isClean());
          innerProductParam_ = null;
        }
        return innerProductParamBuilder_;
      }

      // optional .caffe.InputParameter input_param = 143;
      private caffe.Caffe.InputParameter inputParam_ = caffe.Caffe.InputParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.InputParameter, caffe.Caffe.InputParameter.Builder, caffe.Caffe.InputParameterOrBuilder> inputParamBuilder_;
      /**
       * <code>optional .caffe.InputParameter input_param = 143;</code>
       */
      public boolean hasInputParam() {
        return ((bitField1_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .caffe.InputParameter input_param = 143;</code>
       */
      public caffe.Caffe.InputParameter getInputParam() {
        if (inputParamBuilder_ == null) {
          return inputParam_;
        } else {
          return inputParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.InputParameter input_param = 143;</code>
       */
      public Builder setInputParam(caffe.Caffe.InputParameter value) {
        if (inputParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          inputParam_ = value;
          onChanged();
        } else {
          inputParamBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .caffe.InputParameter input_param = 143;</code>
       */
      public Builder setInputParam(
          caffe.Caffe.InputParameter.Builder builderForValue) {
        if (inputParamBuilder_ == null) {
          inputParam_ = builderForValue.build();
          onChanged();
        } else {
          inputParamBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .caffe.InputParameter input_param = 143;</code>
       */
      public Builder mergeInputParam(caffe.Caffe.InputParameter value) {
        if (inputParamBuilder_ == null) {
          if (((bitField1_ & 0x00000008) == 0x00000008) &&
              inputParam_ != caffe.Caffe.InputParameter.getDefaultInstance()) {
            inputParam_ =
              caffe.Caffe.InputParameter.newBuilder(inputParam_).mergeFrom(value).buildPartial();
          } else {
            inputParam_ = value;
          }
          onChanged();
        } else {
          inputParamBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .caffe.InputParameter input_param = 143;</code>
       */
      public Builder clearInputParam() {
        if (inputParamBuilder_ == null) {
          inputParam_ = caffe.Caffe.InputParameter.getDefaultInstance();
          onChanged();
        } else {
          inputParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000008);
        return this;
      }
      /**
       * <code>optional .caffe.InputParameter input_param = 143;</code>
       */
      public caffe.Caffe.InputParameter.Builder getInputParamBuilder() {
        bitField1_ |= 0x00000008;
        onChanged();
        return getInputParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.InputParameter input_param = 143;</code>
       */
      public caffe.Caffe.InputParameterOrBuilder getInputParamOrBuilder() {
        if (inputParamBuilder_ != null) {
          return inputParamBuilder_.getMessageOrBuilder();
        } else {
          return inputParam_;
        }
      }
      /**
       * <code>optional .caffe.InputParameter input_param = 143;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.InputParameter, caffe.Caffe.InputParameter.Builder, caffe.Caffe.InputParameterOrBuilder> 
          getInputParamFieldBuilder() {
        if (inputParamBuilder_ == null) {
          inputParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.InputParameter, caffe.Caffe.InputParameter.Builder, caffe.Caffe.InputParameterOrBuilder>(
                  inputParam_,
                  getParentForChildren(),
                  isClean());
          inputParam_ = null;
        }
        return inputParamBuilder_;
      }

      // optional .caffe.LogParameter log_param = 134;
      private caffe.Caffe.LogParameter logParam_ = caffe.Caffe.LogParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.LogParameter, caffe.Caffe.LogParameter.Builder, caffe.Caffe.LogParameterOrBuilder> logParamBuilder_;
      /**
       * <code>optional .caffe.LogParameter log_param = 134;</code>
       */
      public boolean hasLogParam() {
        return ((bitField1_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .caffe.LogParameter log_param = 134;</code>
       */
      public caffe.Caffe.LogParameter getLogParam() {
        if (logParamBuilder_ == null) {
          return logParam_;
        } else {
          return logParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.LogParameter log_param = 134;</code>
       */
      public Builder setLogParam(caffe.Caffe.LogParameter value) {
        if (logParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          logParam_ = value;
          onChanged();
        } else {
          logParamBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .caffe.LogParameter log_param = 134;</code>
       */
      public Builder setLogParam(
          caffe.Caffe.LogParameter.Builder builderForValue) {
        if (logParamBuilder_ == null) {
          logParam_ = builderForValue.build();
          onChanged();
        } else {
          logParamBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .caffe.LogParameter log_param = 134;</code>
       */
      public Builder mergeLogParam(caffe.Caffe.LogParameter value) {
        if (logParamBuilder_ == null) {
          if (((bitField1_ & 0x00000010) == 0x00000010) &&
              logParam_ != caffe.Caffe.LogParameter.getDefaultInstance()) {
            logParam_ =
              caffe.Caffe.LogParameter.newBuilder(logParam_).mergeFrom(value).buildPartial();
          } else {
            logParam_ = value;
          }
          onChanged();
        } else {
          logParamBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .caffe.LogParameter log_param = 134;</code>
       */
      public Builder clearLogParam() {
        if (logParamBuilder_ == null) {
          logParam_ = caffe.Caffe.LogParameter.getDefaultInstance();
          onChanged();
        } else {
          logParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000010);
        return this;
      }
      /**
       * <code>optional .caffe.LogParameter log_param = 134;</code>
       */
      public caffe.Caffe.LogParameter.Builder getLogParamBuilder() {
        bitField1_ |= 0x00000010;
        onChanged();
        return getLogParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.LogParameter log_param = 134;</code>
       */
      public caffe.Caffe.LogParameterOrBuilder getLogParamOrBuilder() {
        if (logParamBuilder_ != null) {
          return logParamBuilder_.getMessageOrBuilder();
        } else {
          return logParam_;
        }
      }
      /**
       * <code>optional .caffe.LogParameter log_param = 134;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.LogParameter, caffe.Caffe.LogParameter.Builder, caffe.Caffe.LogParameterOrBuilder> 
          getLogParamFieldBuilder() {
        if (logParamBuilder_ == null) {
          logParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.LogParameter, caffe.Caffe.LogParameter.Builder, caffe.Caffe.LogParameterOrBuilder>(
                  logParam_,
                  getParentForChildren(),
                  isClean());
          logParam_ = null;
        }
        return logParamBuilder_;
      }

      // optional .caffe.LRNParameter lrn_param = 118;
      private caffe.Caffe.LRNParameter lrnParam_ = caffe.Caffe.LRNParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.LRNParameter, caffe.Caffe.LRNParameter.Builder, caffe.Caffe.LRNParameterOrBuilder> lrnParamBuilder_;
      /**
       * <code>optional .caffe.LRNParameter lrn_param = 118;</code>
       */
      public boolean hasLrnParam() {
        return ((bitField1_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .caffe.LRNParameter lrn_param = 118;</code>
       */
      public caffe.Caffe.LRNParameter getLrnParam() {
        if (lrnParamBuilder_ == null) {
          return lrnParam_;
        } else {
          return lrnParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.LRNParameter lrn_param = 118;</code>
       */
      public Builder setLrnParam(caffe.Caffe.LRNParameter value) {
        if (lrnParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          lrnParam_ = value;
          onChanged();
        } else {
          lrnParamBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .caffe.LRNParameter lrn_param = 118;</code>
       */
      public Builder setLrnParam(
          caffe.Caffe.LRNParameter.Builder builderForValue) {
        if (lrnParamBuilder_ == null) {
          lrnParam_ = builderForValue.build();
          onChanged();
        } else {
          lrnParamBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .caffe.LRNParameter lrn_param = 118;</code>
       */
      public Builder mergeLrnParam(caffe.Caffe.LRNParameter value) {
        if (lrnParamBuilder_ == null) {
          if (((bitField1_ & 0x00000020) == 0x00000020) &&
              lrnParam_ != caffe.Caffe.LRNParameter.getDefaultInstance()) {
            lrnParam_ =
              caffe.Caffe.LRNParameter.newBuilder(lrnParam_).mergeFrom(value).buildPartial();
          } else {
            lrnParam_ = value;
          }
          onChanged();
        } else {
          lrnParamBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .caffe.LRNParameter lrn_param = 118;</code>
       */
      public Builder clearLrnParam() {
        if (lrnParamBuilder_ == null) {
          lrnParam_ = caffe.Caffe.LRNParameter.getDefaultInstance();
          onChanged();
        } else {
          lrnParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000020);
        return this;
      }
      /**
       * <code>optional .caffe.LRNParameter lrn_param = 118;</code>
       */
      public caffe.Caffe.LRNParameter.Builder getLrnParamBuilder() {
        bitField1_ |= 0x00000020;
        onChanged();
        return getLrnParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.LRNParameter lrn_param = 118;</code>
       */
      public caffe.Caffe.LRNParameterOrBuilder getLrnParamOrBuilder() {
        if (lrnParamBuilder_ != null) {
          return lrnParamBuilder_.getMessageOrBuilder();
        } else {
          return lrnParam_;
        }
      }
      /**
       * <code>optional .caffe.LRNParameter lrn_param = 118;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.LRNParameter, caffe.Caffe.LRNParameter.Builder, caffe.Caffe.LRNParameterOrBuilder> 
          getLrnParamFieldBuilder() {
        if (lrnParamBuilder_ == null) {
          lrnParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.LRNParameter, caffe.Caffe.LRNParameter.Builder, caffe.Caffe.LRNParameterOrBuilder>(
                  lrnParam_,
                  getParentForChildren(),
                  isClean());
          lrnParam_ = null;
        }
        return lrnParamBuilder_;
      }

      // optional .caffe.MemoryDataParameter memory_data_param = 119;
      private caffe.Caffe.MemoryDataParameter memoryDataParam_ = caffe.Caffe.MemoryDataParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.MemoryDataParameter, caffe.Caffe.MemoryDataParameter.Builder, caffe.Caffe.MemoryDataParameterOrBuilder> memoryDataParamBuilder_;
      /**
       * <code>optional .caffe.MemoryDataParameter memory_data_param = 119;</code>
       */
      public boolean hasMemoryDataParam() {
        return ((bitField1_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional .caffe.MemoryDataParameter memory_data_param = 119;</code>
       */
      public caffe.Caffe.MemoryDataParameter getMemoryDataParam() {
        if (memoryDataParamBuilder_ == null) {
          return memoryDataParam_;
        } else {
          return memoryDataParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.MemoryDataParameter memory_data_param = 119;</code>
       */
      public Builder setMemoryDataParam(caffe.Caffe.MemoryDataParameter value) {
        if (memoryDataParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          memoryDataParam_ = value;
          onChanged();
        } else {
          memoryDataParamBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .caffe.MemoryDataParameter memory_data_param = 119;</code>
       */
      public Builder setMemoryDataParam(
          caffe.Caffe.MemoryDataParameter.Builder builderForValue) {
        if (memoryDataParamBuilder_ == null) {
          memoryDataParam_ = builderForValue.build();
          onChanged();
        } else {
          memoryDataParamBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .caffe.MemoryDataParameter memory_data_param = 119;</code>
       */
      public Builder mergeMemoryDataParam(caffe.Caffe.MemoryDataParameter value) {
        if (memoryDataParamBuilder_ == null) {
          if (((bitField1_ & 0x00000040) == 0x00000040) &&
              memoryDataParam_ != caffe.Caffe.MemoryDataParameter.getDefaultInstance()) {
            memoryDataParam_ =
              caffe.Caffe.MemoryDataParameter.newBuilder(memoryDataParam_).mergeFrom(value).buildPartial();
          } else {
            memoryDataParam_ = value;
          }
          onChanged();
        } else {
          memoryDataParamBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .caffe.MemoryDataParameter memory_data_param = 119;</code>
       */
      public Builder clearMemoryDataParam() {
        if (memoryDataParamBuilder_ == null) {
          memoryDataParam_ = caffe.Caffe.MemoryDataParameter.getDefaultInstance();
          onChanged();
        } else {
          memoryDataParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000040);
        return this;
      }
      /**
       * <code>optional .caffe.MemoryDataParameter memory_data_param = 119;</code>
       */
      public caffe.Caffe.MemoryDataParameter.Builder getMemoryDataParamBuilder() {
        bitField1_ |= 0x00000040;
        onChanged();
        return getMemoryDataParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.MemoryDataParameter memory_data_param = 119;</code>
       */
      public caffe.Caffe.MemoryDataParameterOrBuilder getMemoryDataParamOrBuilder() {
        if (memoryDataParamBuilder_ != null) {
          return memoryDataParamBuilder_.getMessageOrBuilder();
        } else {
          return memoryDataParam_;
        }
      }
      /**
       * <code>optional .caffe.MemoryDataParameter memory_data_param = 119;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.MemoryDataParameter, caffe.Caffe.MemoryDataParameter.Builder, caffe.Caffe.MemoryDataParameterOrBuilder> 
          getMemoryDataParamFieldBuilder() {
        if (memoryDataParamBuilder_ == null) {
          memoryDataParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.MemoryDataParameter, caffe.Caffe.MemoryDataParameter.Builder, caffe.Caffe.MemoryDataParameterOrBuilder>(
                  memoryDataParam_,
                  getParentForChildren(),
                  isClean());
          memoryDataParam_ = null;
        }
        return memoryDataParamBuilder_;
      }

      // optional .caffe.MVNParameter mvn_param = 120;
      private caffe.Caffe.MVNParameter mvnParam_ = caffe.Caffe.MVNParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.MVNParameter, caffe.Caffe.MVNParameter.Builder, caffe.Caffe.MVNParameterOrBuilder> mvnParamBuilder_;
      /**
       * <code>optional .caffe.MVNParameter mvn_param = 120;</code>
       */
      public boolean hasMvnParam() {
        return ((bitField1_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional .caffe.MVNParameter mvn_param = 120;</code>
       */
      public caffe.Caffe.MVNParameter getMvnParam() {
        if (mvnParamBuilder_ == null) {
          return mvnParam_;
        } else {
          return mvnParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.MVNParameter mvn_param = 120;</code>
       */
      public Builder setMvnParam(caffe.Caffe.MVNParameter value) {
        if (mvnParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mvnParam_ = value;
          onChanged();
        } else {
          mvnParamBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .caffe.MVNParameter mvn_param = 120;</code>
       */
      public Builder setMvnParam(
          caffe.Caffe.MVNParameter.Builder builderForValue) {
        if (mvnParamBuilder_ == null) {
          mvnParam_ = builderForValue.build();
          onChanged();
        } else {
          mvnParamBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .caffe.MVNParameter mvn_param = 120;</code>
       */
      public Builder mergeMvnParam(caffe.Caffe.MVNParameter value) {
        if (mvnParamBuilder_ == null) {
          if (((bitField1_ & 0x00000080) == 0x00000080) &&
              mvnParam_ != caffe.Caffe.MVNParameter.getDefaultInstance()) {
            mvnParam_ =
              caffe.Caffe.MVNParameter.newBuilder(mvnParam_).mergeFrom(value).buildPartial();
          } else {
            mvnParam_ = value;
          }
          onChanged();
        } else {
          mvnParamBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .caffe.MVNParameter mvn_param = 120;</code>
       */
      public Builder clearMvnParam() {
        if (mvnParamBuilder_ == null) {
          mvnParam_ = caffe.Caffe.MVNParameter.getDefaultInstance();
          onChanged();
        } else {
          mvnParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000080);
        return this;
      }
      /**
       * <code>optional .caffe.MVNParameter mvn_param = 120;</code>
       */
      public caffe.Caffe.MVNParameter.Builder getMvnParamBuilder() {
        bitField1_ |= 0x00000080;
        onChanged();
        return getMvnParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.MVNParameter mvn_param = 120;</code>
       */
      public caffe.Caffe.MVNParameterOrBuilder getMvnParamOrBuilder() {
        if (mvnParamBuilder_ != null) {
          return mvnParamBuilder_.getMessageOrBuilder();
        } else {
          return mvnParam_;
        }
      }
      /**
       * <code>optional .caffe.MVNParameter mvn_param = 120;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.MVNParameter, caffe.Caffe.MVNParameter.Builder, caffe.Caffe.MVNParameterOrBuilder> 
          getMvnParamFieldBuilder() {
        if (mvnParamBuilder_ == null) {
          mvnParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.MVNParameter, caffe.Caffe.MVNParameter.Builder, caffe.Caffe.MVNParameterOrBuilder>(
                  mvnParam_,
                  getParentForChildren(),
                  isClean());
          mvnParam_ = null;
        }
        return mvnParamBuilder_;
      }

      // optional .caffe.ParameterParameter parameter_param = 145;
      private caffe.Caffe.ParameterParameter parameterParam_ = caffe.Caffe.ParameterParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.ParameterParameter, caffe.Caffe.ParameterParameter.Builder, caffe.Caffe.ParameterParameterOrBuilder> parameterParamBuilder_;
      /**
       * <code>optional .caffe.ParameterParameter parameter_param = 145;</code>
       */
      public boolean hasParameterParam() {
        return ((bitField1_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional .caffe.ParameterParameter parameter_param = 145;</code>
       */
      public caffe.Caffe.ParameterParameter getParameterParam() {
        if (parameterParamBuilder_ == null) {
          return parameterParam_;
        } else {
          return parameterParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.ParameterParameter parameter_param = 145;</code>
       */
      public Builder setParameterParam(caffe.Caffe.ParameterParameter value) {
        if (parameterParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          parameterParam_ = value;
          onChanged();
        } else {
          parameterParamBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .caffe.ParameterParameter parameter_param = 145;</code>
       */
      public Builder setParameterParam(
          caffe.Caffe.ParameterParameter.Builder builderForValue) {
        if (parameterParamBuilder_ == null) {
          parameterParam_ = builderForValue.build();
          onChanged();
        } else {
          parameterParamBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .caffe.ParameterParameter parameter_param = 145;</code>
       */
      public Builder mergeParameterParam(caffe.Caffe.ParameterParameter value) {
        if (parameterParamBuilder_ == null) {
          if (((bitField1_ & 0x00000100) == 0x00000100) &&
              parameterParam_ != caffe.Caffe.ParameterParameter.getDefaultInstance()) {
            parameterParam_ =
              caffe.Caffe.ParameterParameter.newBuilder(parameterParam_).mergeFrom(value).buildPartial();
          } else {
            parameterParam_ = value;
          }
          onChanged();
        } else {
          parameterParamBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .caffe.ParameterParameter parameter_param = 145;</code>
       */
      public Builder clearParameterParam() {
        if (parameterParamBuilder_ == null) {
          parameterParam_ = caffe.Caffe.ParameterParameter.getDefaultInstance();
          onChanged();
        } else {
          parameterParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000100);
        return this;
      }
      /**
       * <code>optional .caffe.ParameterParameter parameter_param = 145;</code>
       */
      public caffe.Caffe.ParameterParameter.Builder getParameterParamBuilder() {
        bitField1_ |= 0x00000100;
        onChanged();
        return getParameterParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.ParameterParameter parameter_param = 145;</code>
       */
      public caffe.Caffe.ParameterParameterOrBuilder getParameterParamOrBuilder() {
        if (parameterParamBuilder_ != null) {
          return parameterParamBuilder_.getMessageOrBuilder();
        } else {
          return parameterParam_;
        }
      }
      /**
       * <code>optional .caffe.ParameterParameter parameter_param = 145;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.ParameterParameter, caffe.Caffe.ParameterParameter.Builder, caffe.Caffe.ParameterParameterOrBuilder> 
          getParameterParamFieldBuilder() {
        if (parameterParamBuilder_ == null) {
          parameterParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.ParameterParameter, caffe.Caffe.ParameterParameter.Builder, caffe.Caffe.ParameterParameterOrBuilder>(
                  parameterParam_,
                  getParentForChildren(),
                  isClean());
          parameterParam_ = null;
        }
        return parameterParamBuilder_;
      }

      // optional .caffe.PoolingParameter pooling_param = 121;
      private caffe.Caffe.PoolingParameter poolingParam_ = caffe.Caffe.PoolingParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.PoolingParameter, caffe.Caffe.PoolingParameter.Builder, caffe.Caffe.PoolingParameterOrBuilder> poolingParamBuilder_;
      /**
       * <code>optional .caffe.PoolingParameter pooling_param = 121;</code>
       */
      public boolean hasPoolingParam() {
        return ((bitField1_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional .caffe.PoolingParameter pooling_param = 121;</code>
       */
      public caffe.Caffe.PoolingParameter getPoolingParam() {
        if (poolingParamBuilder_ == null) {
          return poolingParam_;
        } else {
          return poolingParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.PoolingParameter pooling_param = 121;</code>
       */
      public Builder setPoolingParam(caffe.Caffe.PoolingParameter value) {
        if (poolingParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          poolingParam_ = value;
          onChanged();
        } else {
          poolingParamBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00000200;
        return this;
      }
      /**
       * <code>optional .caffe.PoolingParameter pooling_param = 121;</code>
       */
      public Builder setPoolingParam(
          caffe.Caffe.PoolingParameter.Builder builderForValue) {
        if (poolingParamBuilder_ == null) {
          poolingParam_ = builderForValue.build();
          onChanged();
        } else {
          poolingParamBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00000200;
        return this;
      }
      /**
       * <code>optional .caffe.PoolingParameter pooling_param = 121;</code>
       */
      public Builder mergePoolingParam(caffe.Caffe.PoolingParameter value) {
        if (poolingParamBuilder_ == null) {
          if (((bitField1_ & 0x00000200) == 0x00000200) &&
              poolingParam_ != caffe.Caffe.PoolingParameter.getDefaultInstance()) {
            poolingParam_ =
              caffe.Caffe.PoolingParameter.newBuilder(poolingParam_).mergeFrom(value).buildPartial();
          } else {
            poolingParam_ = value;
          }
          onChanged();
        } else {
          poolingParamBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x00000200;
        return this;
      }
      /**
       * <code>optional .caffe.PoolingParameter pooling_param = 121;</code>
       */
      public Builder clearPoolingParam() {
        if (poolingParamBuilder_ == null) {
          poolingParam_ = caffe.Caffe.PoolingParameter.getDefaultInstance();
          onChanged();
        } else {
          poolingParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000200);
        return this;
      }
      /**
       * <code>optional .caffe.PoolingParameter pooling_param = 121;</code>
       */
      public caffe.Caffe.PoolingParameter.Builder getPoolingParamBuilder() {
        bitField1_ |= 0x00000200;
        onChanged();
        return getPoolingParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.PoolingParameter pooling_param = 121;</code>
       */
      public caffe.Caffe.PoolingParameterOrBuilder getPoolingParamOrBuilder() {
        if (poolingParamBuilder_ != null) {
          return poolingParamBuilder_.getMessageOrBuilder();
        } else {
          return poolingParam_;
        }
      }
      /**
       * <code>optional .caffe.PoolingParameter pooling_param = 121;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.PoolingParameter, caffe.Caffe.PoolingParameter.Builder, caffe.Caffe.PoolingParameterOrBuilder> 
          getPoolingParamFieldBuilder() {
        if (poolingParamBuilder_ == null) {
          poolingParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.PoolingParameter, caffe.Caffe.PoolingParameter.Builder, caffe.Caffe.PoolingParameterOrBuilder>(
                  poolingParam_,
                  getParentForChildren(),
                  isClean());
          poolingParam_ = null;
        }
        return poolingParamBuilder_;
      }

      // optional .caffe.PowerParameter power_param = 122;
      private caffe.Caffe.PowerParameter powerParam_ = caffe.Caffe.PowerParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.PowerParameter, caffe.Caffe.PowerParameter.Builder, caffe.Caffe.PowerParameterOrBuilder> powerParamBuilder_;
      /**
       * <code>optional .caffe.PowerParameter power_param = 122;</code>
       */
      public boolean hasPowerParam() {
        return ((bitField1_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional .caffe.PowerParameter power_param = 122;</code>
       */
      public caffe.Caffe.PowerParameter getPowerParam() {
        if (powerParamBuilder_ == null) {
          return powerParam_;
        } else {
          return powerParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.PowerParameter power_param = 122;</code>
       */
      public Builder setPowerParam(caffe.Caffe.PowerParameter value) {
        if (powerParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          powerParam_ = value;
          onChanged();
        } else {
          powerParamBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .caffe.PowerParameter power_param = 122;</code>
       */
      public Builder setPowerParam(
          caffe.Caffe.PowerParameter.Builder builderForValue) {
        if (powerParamBuilder_ == null) {
          powerParam_ = builderForValue.build();
          onChanged();
        } else {
          powerParamBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .caffe.PowerParameter power_param = 122;</code>
       */
      public Builder mergePowerParam(caffe.Caffe.PowerParameter value) {
        if (powerParamBuilder_ == null) {
          if (((bitField1_ & 0x00000400) == 0x00000400) &&
              powerParam_ != caffe.Caffe.PowerParameter.getDefaultInstance()) {
            powerParam_ =
              caffe.Caffe.PowerParameter.newBuilder(powerParam_).mergeFrom(value).buildPartial();
          } else {
            powerParam_ = value;
          }
          onChanged();
        } else {
          powerParamBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .caffe.PowerParameter power_param = 122;</code>
       */
      public Builder clearPowerParam() {
        if (powerParamBuilder_ == null) {
          powerParam_ = caffe.Caffe.PowerParameter.getDefaultInstance();
          onChanged();
        } else {
          powerParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000400);
        return this;
      }
      /**
       * <code>optional .caffe.PowerParameter power_param = 122;</code>
       */
      public caffe.Caffe.PowerParameter.Builder getPowerParamBuilder() {
        bitField1_ |= 0x00000400;
        onChanged();
        return getPowerParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.PowerParameter power_param = 122;</code>
       */
      public caffe.Caffe.PowerParameterOrBuilder getPowerParamOrBuilder() {
        if (powerParamBuilder_ != null) {
          return powerParamBuilder_.getMessageOrBuilder();
        } else {
          return powerParam_;
        }
      }
      /**
       * <code>optional .caffe.PowerParameter power_param = 122;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.PowerParameter, caffe.Caffe.PowerParameter.Builder, caffe.Caffe.PowerParameterOrBuilder> 
          getPowerParamFieldBuilder() {
        if (powerParamBuilder_ == null) {
          powerParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.PowerParameter, caffe.Caffe.PowerParameter.Builder, caffe.Caffe.PowerParameterOrBuilder>(
                  powerParam_,
                  getParentForChildren(),
                  isClean());
          powerParam_ = null;
        }
        return powerParamBuilder_;
      }

      // optional .caffe.PReLUParameter prelu_param = 131;
      private caffe.Caffe.PReLUParameter preluParam_ = caffe.Caffe.PReLUParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.PReLUParameter, caffe.Caffe.PReLUParameter.Builder, caffe.Caffe.PReLUParameterOrBuilder> preluParamBuilder_;
      /**
       * <code>optional .caffe.PReLUParameter prelu_param = 131;</code>
       */
      public boolean hasPreluParam() {
        return ((bitField1_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional .caffe.PReLUParameter prelu_param = 131;</code>
       */
      public caffe.Caffe.PReLUParameter getPreluParam() {
        if (preluParamBuilder_ == null) {
          return preluParam_;
        } else {
          return preluParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.PReLUParameter prelu_param = 131;</code>
       */
      public Builder setPreluParam(caffe.Caffe.PReLUParameter value) {
        if (preluParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          preluParam_ = value;
          onChanged();
        } else {
          preluParamBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00000800;
        return this;
      }
      /**
       * <code>optional .caffe.PReLUParameter prelu_param = 131;</code>
       */
      public Builder setPreluParam(
          caffe.Caffe.PReLUParameter.Builder builderForValue) {
        if (preluParamBuilder_ == null) {
          preluParam_ = builderForValue.build();
          onChanged();
        } else {
          preluParamBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00000800;
        return this;
      }
      /**
       * <code>optional .caffe.PReLUParameter prelu_param = 131;</code>
       */
      public Builder mergePreluParam(caffe.Caffe.PReLUParameter value) {
        if (preluParamBuilder_ == null) {
          if (((bitField1_ & 0x00000800) == 0x00000800) &&
              preluParam_ != caffe.Caffe.PReLUParameter.getDefaultInstance()) {
            preluParam_ =
              caffe.Caffe.PReLUParameter.newBuilder(preluParam_).mergeFrom(value).buildPartial();
          } else {
            preluParam_ = value;
          }
          onChanged();
        } else {
          preluParamBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x00000800;
        return this;
      }
      /**
       * <code>optional .caffe.PReLUParameter prelu_param = 131;</code>
       */
      public Builder clearPreluParam() {
        if (preluParamBuilder_ == null) {
          preluParam_ = caffe.Caffe.PReLUParameter.getDefaultInstance();
          onChanged();
        } else {
          preluParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000800);
        return this;
      }
      /**
       * <code>optional .caffe.PReLUParameter prelu_param = 131;</code>
       */
      public caffe.Caffe.PReLUParameter.Builder getPreluParamBuilder() {
        bitField1_ |= 0x00000800;
        onChanged();
        return getPreluParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.PReLUParameter prelu_param = 131;</code>
       */
      public caffe.Caffe.PReLUParameterOrBuilder getPreluParamOrBuilder() {
        if (preluParamBuilder_ != null) {
          return preluParamBuilder_.getMessageOrBuilder();
        } else {
          return preluParam_;
        }
      }
      /**
       * <code>optional .caffe.PReLUParameter prelu_param = 131;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.PReLUParameter, caffe.Caffe.PReLUParameter.Builder, caffe.Caffe.PReLUParameterOrBuilder> 
          getPreluParamFieldBuilder() {
        if (preluParamBuilder_ == null) {
          preluParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.PReLUParameter, caffe.Caffe.PReLUParameter.Builder, caffe.Caffe.PReLUParameterOrBuilder>(
                  preluParam_,
                  getParentForChildren(),
                  isClean());
          preluParam_ = null;
        }
        return preluParamBuilder_;
      }

      // optional .caffe.PythonParameter python_param = 130;
      private caffe.Caffe.PythonParameter pythonParam_ = caffe.Caffe.PythonParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.PythonParameter, caffe.Caffe.PythonParameter.Builder, caffe.Caffe.PythonParameterOrBuilder> pythonParamBuilder_;
      /**
       * <code>optional .caffe.PythonParameter python_param = 130;</code>
       */
      public boolean hasPythonParam() {
        return ((bitField1_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional .caffe.PythonParameter python_param = 130;</code>
       */
      public caffe.Caffe.PythonParameter getPythonParam() {
        if (pythonParamBuilder_ == null) {
          return pythonParam_;
        } else {
          return pythonParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.PythonParameter python_param = 130;</code>
       */
      public Builder setPythonParam(caffe.Caffe.PythonParameter value) {
        if (pythonParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          pythonParam_ = value;
          onChanged();
        } else {
          pythonParamBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00001000;
        return this;
      }
      /**
       * <code>optional .caffe.PythonParameter python_param = 130;</code>
       */
      public Builder setPythonParam(
          caffe.Caffe.PythonParameter.Builder builderForValue) {
        if (pythonParamBuilder_ == null) {
          pythonParam_ = builderForValue.build();
          onChanged();
        } else {
          pythonParamBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00001000;
        return this;
      }
      /**
       * <code>optional .caffe.PythonParameter python_param = 130;</code>
       */
      public Builder mergePythonParam(caffe.Caffe.PythonParameter value) {
        if (pythonParamBuilder_ == null) {
          if (((bitField1_ & 0x00001000) == 0x00001000) &&
              pythonParam_ != caffe.Caffe.PythonParameter.getDefaultInstance()) {
            pythonParam_ =
              caffe.Caffe.PythonParameter.newBuilder(pythonParam_).mergeFrom(value).buildPartial();
          } else {
            pythonParam_ = value;
          }
          onChanged();
        } else {
          pythonParamBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x00001000;
        return this;
      }
      /**
       * <code>optional .caffe.PythonParameter python_param = 130;</code>
       */
      public Builder clearPythonParam() {
        if (pythonParamBuilder_ == null) {
          pythonParam_ = caffe.Caffe.PythonParameter.getDefaultInstance();
          onChanged();
        } else {
          pythonParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00001000);
        return this;
      }
      /**
       * <code>optional .caffe.PythonParameter python_param = 130;</code>
       */
      public caffe.Caffe.PythonParameter.Builder getPythonParamBuilder() {
        bitField1_ |= 0x00001000;
        onChanged();
        return getPythonParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.PythonParameter python_param = 130;</code>
       */
      public caffe.Caffe.PythonParameterOrBuilder getPythonParamOrBuilder() {
        if (pythonParamBuilder_ != null) {
          return pythonParamBuilder_.getMessageOrBuilder();
        } else {
          return pythonParam_;
        }
      }
      /**
       * <code>optional .caffe.PythonParameter python_param = 130;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.PythonParameter, caffe.Caffe.PythonParameter.Builder, caffe.Caffe.PythonParameterOrBuilder> 
          getPythonParamFieldBuilder() {
        if (pythonParamBuilder_ == null) {
          pythonParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.PythonParameter, caffe.Caffe.PythonParameter.Builder, caffe.Caffe.PythonParameterOrBuilder>(
                  pythonParam_,
                  getParentForChildren(),
                  isClean());
          pythonParam_ = null;
        }
        return pythonParamBuilder_;
      }

      // optional .caffe.RecurrentParameter recurrent_param = 146;
      private caffe.Caffe.RecurrentParameter recurrentParam_ = caffe.Caffe.RecurrentParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.RecurrentParameter, caffe.Caffe.RecurrentParameter.Builder, caffe.Caffe.RecurrentParameterOrBuilder> recurrentParamBuilder_;
      /**
       * <code>optional .caffe.RecurrentParameter recurrent_param = 146;</code>
       */
      public boolean hasRecurrentParam() {
        return ((bitField1_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional .caffe.RecurrentParameter recurrent_param = 146;</code>
       */
      public caffe.Caffe.RecurrentParameter getRecurrentParam() {
        if (recurrentParamBuilder_ == null) {
          return recurrentParam_;
        } else {
          return recurrentParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.RecurrentParameter recurrent_param = 146;</code>
       */
      public Builder setRecurrentParam(caffe.Caffe.RecurrentParameter value) {
        if (recurrentParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          recurrentParam_ = value;
          onChanged();
        } else {
          recurrentParamBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00002000;
        return this;
      }
      /**
       * <code>optional .caffe.RecurrentParameter recurrent_param = 146;</code>
       */
      public Builder setRecurrentParam(
          caffe.Caffe.RecurrentParameter.Builder builderForValue) {
        if (recurrentParamBuilder_ == null) {
          recurrentParam_ = builderForValue.build();
          onChanged();
        } else {
          recurrentParamBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00002000;
        return this;
      }
      /**
       * <code>optional .caffe.RecurrentParameter recurrent_param = 146;</code>
       */
      public Builder mergeRecurrentParam(caffe.Caffe.RecurrentParameter value) {
        if (recurrentParamBuilder_ == null) {
          if (((bitField1_ & 0x00002000) == 0x00002000) &&
              recurrentParam_ != caffe.Caffe.RecurrentParameter.getDefaultInstance()) {
            recurrentParam_ =
              caffe.Caffe.RecurrentParameter.newBuilder(recurrentParam_).mergeFrom(value).buildPartial();
          } else {
            recurrentParam_ = value;
          }
          onChanged();
        } else {
          recurrentParamBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x00002000;
        return this;
      }
      /**
       * <code>optional .caffe.RecurrentParameter recurrent_param = 146;</code>
       */
      public Builder clearRecurrentParam() {
        if (recurrentParamBuilder_ == null) {
          recurrentParam_ = caffe.Caffe.RecurrentParameter.getDefaultInstance();
          onChanged();
        } else {
          recurrentParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00002000);
        return this;
      }
      /**
       * <code>optional .caffe.RecurrentParameter recurrent_param = 146;</code>
       */
      public caffe.Caffe.RecurrentParameter.Builder getRecurrentParamBuilder() {
        bitField1_ |= 0x00002000;
        onChanged();
        return getRecurrentParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.RecurrentParameter recurrent_param = 146;</code>
       */
      public caffe.Caffe.RecurrentParameterOrBuilder getRecurrentParamOrBuilder() {
        if (recurrentParamBuilder_ != null) {
          return recurrentParamBuilder_.getMessageOrBuilder();
        } else {
          return recurrentParam_;
        }
      }
      /**
       * <code>optional .caffe.RecurrentParameter recurrent_param = 146;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.RecurrentParameter, caffe.Caffe.RecurrentParameter.Builder, caffe.Caffe.RecurrentParameterOrBuilder> 
          getRecurrentParamFieldBuilder() {
        if (recurrentParamBuilder_ == null) {
          recurrentParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.RecurrentParameter, caffe.Caffe.RecurrentParameter.Builder, caffe.Caffe.RecurrentParameterOrBuilder>(
                  recurrentParam_,
                  getParentForChildren(),
                  isClean());
          recurrentParam_ = null;
        }
        return recurrentParamBuilder_;
      }

      // optional .caffe.ReductionParameter reduction_param = 136;
      private caffe.Caffe.ReductionParameter reductionParam_ = caffe.Caffe.ReductionParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.ReductionParameter, caffe.Caffe.ReductionParameter.Builder, caffe.Caffe.ReductionParameterOrBuilder> reductionParamBuilder_;
      /**
       * <code>optional .caffe.ReductionParameter reduction_param = 136;</code>
       */
      public boolean hasReductionParam() {
        return ((bitField1_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional .caffe.ReductionParameter reduction_param = 136;</code>
       */
      public caffe.Caffe.ReductionParameter getReductionParam() {
        if (reductionParamBuilder_ == null) {
          return reductionParam_;
        } else {
          return reductionParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.ReductionParameter reduction_param = 136;</code>
       */
      public Builder setReductionParam(caffe.Caffe.ReductionParameter value) {
        if (reductionParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          reductionParam_ = value;
          onChanged();
        } else {
          reductionParamBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00004000;
        return this;
      }
      /**
       * <code>optional .caffe.ReductionParameter reduction_param = 136;</code>
       */
      public Builder setReductionParam(
          caffe.Caffe.ReductionParameter.Builder builderForValue) {
        if (reductionParamBuilder_ == null) {
          reductionParam_ = builderForValue.build();
          onChanged();
        } else {
          reductionParamBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00004000;
        return this;
      }
      /**
       * <code>optional .caffe.ReductionParameter reduction_param = 136;</code>
       */
      public Builder mergeReductionParam(caffe.Caffe.ReductionParameter value) {
        if (reductionParamBuilder_ == null) {
          if (((bitField1_ & 0x00004000) == 0x00004000) &&
              reductionParam_ != caffe.Caffe.ReductionParameter.getDefaultInstance()) {
            reductionParam_ =
              caffe.Caffe.ReductionParameter.newBuilder(reductionParam_).mergeFrom(value).buildPartial();
          } else {
            reductionParam_ = value;
          }
          onChanged();
        } else {
          reductionParamBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x00004000;
        return this;
      }
      /**
       * <code>optional .caffe.ReductionParameter reduction_param = 136;</code>
       */
      public Builder clearReductionParam() {
        if (reductionParamBuilder_ == null) {
          reductionParam_ = caffe.Caffe.ReductionParameter.getDefaultInstance();
          onChanged();
        } else {
          reductionParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00004000);
        return this;
      }
      /**
       * <code>optional .caffe.ReductionParameter reduction_param = 136;</code>
       */
      public caffe.Caffe.ReductionParameter.Builder getReductionParamBuilder() {
        bitField1_ |= 0x00004000;
        onChanged();
        return getReductionParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.ReductionParameter reduction_param = 136;</code>
       */
      public caffe.Caffe.ReductionParameterOrBuilder getReductionParamOrBuilder() {
        if (reductionParamBuilder_ != null) {
          return reductionParamBuilder_.getMessageOrBuilder();
        } else {
          return reductionParam_;
        }
      }
      /**
       * <code>optional .caffe.ReductionParameter reduction_param = 136;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.ReductionParameter, caffe.Caffe.ReductionParameter.Builder, caffe.Caffe.ReductionParameterOrBuilder> 
          getReductionParamFieldBuilder() {
        if (reductionParamBuilder_ == null) {
          reductionParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.ReductionParameter, caffe.Caffe.ReductionParameter.Builder, caffe.Caffe.ReductionParameterOrBuilder>(
                  reductionParam_,
                  getParentForChildren(),
                  isClean());
          reductionParam_ = null;
        }
        return reductionParamBuilder_;
      }

      // optional .caffe.ReLUParameter relu_param = 123;
      private caffe.Caffe.ReLUParameter reluParam_ = caffe.Caffe.ReLUParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.ReLUParameter, caffe.Caffe.ReLUParameter.Builder, caffe.Caffe.ReLUParameterOrBuilder> reluParamBuilder_;
      /**
       * <code>optional .caffe.ReLUParameter relu_param = 123;</code>
       */
      public boolean hasReluParam() {
        return ((bitField1_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional .caffe.ReLUParameter relu_param = 123;</code>
       */
      public caffe.Caffe.ReLUParameter getReluParam() {
        if (reluParamBuilder_ == null) {
          return reluParam_;
        } else {
          return reluParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.ReLUParameter relu_param = 123;</code>
       */
      public Builder setReluParam(caffe.Caffe.ReLUParameter value) {
        if (reluParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          reluParam_ = value;
          onChanged();
        } else {
          reluParamBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00008000;
        return this;
      }
      /**
       * <code>optional .caffe.ReLUParameter relu_param = 123;</code>
       */
      public Builder setReluParam(
          caffe.Caffe.ReLUParameter.Builder builderForValue) {
        if (reluParamBuilder_ == null) {
          reluParam_ = builderForValue.build();
          onChanged();
        } else {
          reluParamBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00008000;
        return this;
      }
      /**
       * <code>optional .caffe.ReLUParameter relu_param = 123;</code>
       */
      public Builder mergeReluParam(caffe.Caffe.ReLUParameter value) {
        if (reluParamBuilder_ == null) {
          if (((bitField1_ & 0x00008000) == 0x00008000) &&
              reluParam_ != caffe.Caffe.ReLUParameter.getDefaultInstance()) {
            reluParam_ =
              caffe.Caffe.ReLUParameter.newBuilder(reluParam_).mergeFrom(value).buildPartial();
          } else {
            reluParam_ = value;
          }
          onChanged();
        } else {
          reluParamBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x00008000;
        return this;
      }
      /**
       * <code>optional .caffe.ReLUParameter relu_param = 123;</code>
       */
      public Builder clearReluParam() {
        if (reluParamBuilder_ == null) {
          reluParam_ = caffe.Caffe.ReLUParameter.getDefaultInstance();
          onChanged();
        } else {
          reluParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00008000);
        return this;
      }
      /**
       * <code>optional .caffe.ReLUParameter relu_param = 123;</code>
       */
      public caffe.Caffe.ReLUParameter.Builder getReluParamBuilder() {
        bitField1_ |= 0x00008000;
        onChanged();
        return getReluParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.ReLUParameter relu_param = 123;</code>
       */
      public caffe.Caffe.ReLUParameterOrBuilder getReluParamOrBuilder() {
        if (reluParamBuilder_ != null) {
          return reluParamBuilder_.getMessageOrBuilder();
        } else {
          return reluParam_;
        }
      }
      /**
       * <code>optional .caffe.ReLUParameter relu_param = 123;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.ReLUParameter, caffe.Caffe.ReLUParameter.Builder, caffe.Caffe.ReLUParameterOrBuilder> 
          getReluParamFieldBuilder() {
        if (reluParamBuilder_ == null) {
          reluParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.ReLUParameter, caffe.Caffe.ReLUParameter.Builder, caffe.Caffe.ReLUParameterOrBuilder>(
                  reluParam_,
                  getParentForChildren(),
                  isClean());
          reluParam_ = null;
        }
        return reluParamBuilder_;
      }

      // optional .caffe.ReshapeParameter reshape_param = 133;
      private caffe.Caffe.ReshapeParameter reshapeParam_ = caffe.Caffe.ReshapeParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.ReshapeParameter, caffe.Caffe.ReshapeParameter.Builder, caffe.Caffe.ReshapeParameterOrBuilder> reshapeParamBuilder_;
      /**
       * <code>optional .caffe.ReshapeParameter reshape_param = 133;</code>
       */
      public boolean hasReshapeParam() {
        return ((bitField1_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional .caffe.ReshapeParameter reshape_param = 133;</code>
       */
      public caffe.Caffe.ReshapeParameter getReshapeParam() {
        if (reshapeParamBuilder_ == null) {
          return reshapeParam_;
        } else {
          return reshapeParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.ReshapeParameter reshape_param = 133;</code>
       */
      public Builder setReshapeParam(caffe.Caffe.ReshapeParameter value) {
        if (reshapeParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          reshapeParam_ = value;
          onChanged();
        } else {
          reshapeParamBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00010000;
        return this;
      }
      /**
       * <code>optional .caffe.ReshapeParameter reshape_param = 133;</code>
       */
      public Builder setReshapeParam(
          caffe.Caffe.ReshapeParameter.Builder builderForValue) {
        if (reshapeParamBuilder_ == null) {
          reshapeParam_ = builderForValue.build();
          onChanged();
        } else {
          reshapeParamBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00010000;
        return this;
      }
      /**
       * <code>optional .caffe.ReshapeParameter reshape_param = 133;</code>
       */
      public Builder mergeReshapeParam(caffe.Caffe.ReshapeParameter value) {
        if (reshapeParamBuilder_ == null) {
          if (((bitField1_ & 0x00010000) == 0x00010000) &&
              reshapeParam_ != caffe.Caffe.ReshapeParameter.getDefaultInstance()) {
            reshapeParam_ =
              caffe.Caffe.ReshapeParameter.newBuilder(reshapeParam_).mergeFrom(value).buildPartial();
          } else {
            reshapeParam_ = value;
          }
          onChanged();
        } else {
          reshapeParamBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x00010000;
        return this;
      }
      /**
       * <code>optional .caffe.ReshapeParameter reshape_param = 133;</code>
       */
      public Builder clearReshapeParam() {
        if (reshapeParamBuilder_ == null) {
          reshapeParam_ = caffe.Caffe.ReshapeParameter.getDefaultInstance();
          onChanged();
        } else {
          reshapeParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00010000);
        return this;
      }
      /**
       * <code>optional .caffe.ReshapeParameter reshape_param = 133;</code>
       */
      public caffe.Caffe.ReshapeParameter.Builder getReshapeParamBuilder() {
        bitField1_ |= 0x00010000;
        onChanged();
        return getReshapeParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.ReshapeParameter reshape_param = 133;</code>
       */
      public caffe.Caffe.ReshapeParameterOrBuilder getReshapeParamOrBuilder() {
        if (reshapeParamBuilder_ != null) {
          return reshapeParamBuilder_.getMessageOrBuilder();
        } else {
          return reshapeParam_;
        }
      }
      /**
       * <code>optional .caffe.ReshapeParameter reshape_param = 133;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.ReshapeParameter, caffe.Caffe.ReshapeParameter.Builder, caffe.Caffe.ReshapeParameterOrBuilder> 
          getReshapeParamFieldBuilder() {
        if (reshapeParamBuilder_ == null) {
          reshapeParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.ReshapeParameter, caffe.Caffe.ReshapeParameter.Builder, caffe.Caffe.ReshapeParameterOrBuilder>(
                  reshapeParam_,
                  getParentForChildren(),
                  isClean());
          reshapeParam_ = null;
        }
        return reshapeParamBuilder_;
      }

      // optional .caffe.ScaleParameter scale_param = 142;
      private caffe.Caffe.ScaleParameter scaleParam_ = caffe.Caffe.ScaleParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.ScaleParameter, caffe.Caffe.ScaleParameter.Builder, caffe.Caffe.ScaleParameterOrBuilder> scaleParamBuilder_;
      /**
       * <code>optional .caffe.ScaleParameter scale_param = 142;</code>
       */
      public boolean hasScaleParam() {
        return ((bitField1_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional .caffe.ScaleParameter scale_param = 142;</code>
       */
      public caffe.Caffe.ScaleParameter getScaleParam() {
        if (scaleParamBuilder_ == null) {
          return scaleParam_;
        } else {
          return scaleParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.ScaleParameter scale_param = 142;</code>
       */
      public Builder setScaleParam(caffe.Caffe.ScaleParameter value) {
        if (scaleParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          scaleParam_ = value;
          onChanged();
        } else {
          scaleParamBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00020000;
        return this;
      }
      /**
       * <code>optional .caffe.ScaleParameter scale_param = 142;</code>
       */
      public Builder setScaleParam(
          caffe.Caffe.ScaleParameter.Builder builderForValue) {
        if (scaleParamBuilder_ == null) {
          scaleParam_ = builderForValue.build();
          onChanged();
        } else {
          scaleParamBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00020000;
        return this;
      }
      /**
       * <code>optional .caffe.ScaleParameter scale_param = 142;</code>
       */
      public Builder mergeScaleParam(caffe.Caffe.ScaleParameter value) {
        if (scaleParamBuilder_ == null) {
          if (((bitField1_ & 0x00020000) == 0x00020000) &&
              scaleParam_ != caffe.Caffe.ScaleParameter.getDefaultInstance()) {
            scaleParam_ =
              caffe.Caffe.ScaleParameter.newBuilder(scaleParam_).mergeFrom(value).buildPartial();
          } else {
            scaleParam_ = value;
          }
          onChanged();
        } else {
          scaleParamBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x00020000;
        return this;
      }
      /**
       * <code>optional .caffe.ScaleParameter scale_param = 142;</code>
       */
      public Builder clearScaleParam() {
        if (scaleParamBuilder_ == null) {
          scaleParam_ = caffe.Caffe.ScaleParameter.getDefaultInstance();
          onChanged();
        } else {
          scaleParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00020000);
        return this;
      }
      /**
       * <code>optional .caffe.ScaleParameter scale_param = 142;</code>
       */
      public caffe.Caffe.ScaleParameter.Builder getScaleParamBuilder() {
        bitField1_ |= 0x00020000;
        onChanged();
        return getScaleParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.ScaleParameter scale_param = 142;</code>
       */
      public caffe.Caffe.ScaleParameterOrBuilder getScaleParamOrBuilder() {
        if (scaleParamBuilder_ != null) {
          return scaleParamBuilder_.getMessageOrBuilder();
        } else {
          return scaleParam_;
        }
      }
      /**
       * <code>optional .caffe.ScaleParameter scale_param = 142;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.ScaleParameter, caffe.Caffe.ScaleParameter.Builder, caffe.Caffe.ScaleParameterOrBuilder> 
          getScaleParamFieldBuilder() {
        if (scaleParamBuilder_ == null) {
          scaleParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.ScaleParameter, caffe.Caffe.ScaleParameter.Builder, caffe.Caffe.ScaleParameterOrBuilder>(
                  scaleParam_,
                  getParentForChildren(),
                  isClean());
          scaleParam_ = null;
        }
        return scaleParamBuilder_;
      }

      // optional .caffe.SigmoidParameter sigmoid_param = 124;
      private caffe.Caffe.SigmoidParameter sigmoidParam_ = caffe.Caffe.SigmoidParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.SigmoidParameter, caffe.Caffe.SigmoidParameter.Builder, caffe.Caffe.SigmoidParameterOrBuilder> sigmoidParamBuilder_;
      /**
       * <code>optional .caffe.SigmoidParameter sigmoid_param = 124;</code>
       */
      public boolean hasSigmoidParam() {
        return ((bitField1_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional .caffe.SigmoidParameter sigmoid_param = 124;</code>
       */
      public caffe.Caffe.SigmoidParameter getSigmoidParam() {
        if (sigmoidParamBuilder_ == null) {
          return sigmoidParam_;
        } else {
          return sigmoidParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.SigmoidParameter sigmoid_param = 124;</code>
       */
      public Builder setSigmoidParam(caffe.Caffe.SigmoidParameter value) {
        if (sigmoidParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          sigmoidParam_ = value;
          onChanged();
        } else {
          sigmoidParamBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00040000;
        return this;
      }
      /**
       * <code>optional .caffe.SigmoidParameter sigmoid_param = 124;</code>
       */
      public Builder setSigmoidParam(
          caffe.Caffe.SigmoidParameter.Builder builderForValue) {
        if (sigmoidParamBuilder_ == null) {
          sigmoidParam_ = builderForValue.build();
          onChanged();
        } else {
          sigmoidParamBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00040000;
        return this;
      }
      /**
       * <code>optional .caffe.SigmoidParameter sigmoid_param = 124;</code>
       */
      public Builder mergeSigmoidParam(caffe.Caffe.SigmoidParameter value) {
        if (sigmoidParamBuilder_ == null) {
          if (((bitField1_ & 0x00040000) == 0x00040000) &&
              sigmoidParam_ != caffe.Caffe.SigmoidParameter.getDefaultInstance()) {
            sigmoidParam_ =
              caffe.Caffe.SigmoidParameter.newBuilder(sigmoidParam_).mergeFrom(value).buildPartial();
          } else {
            sigmoidParam_ = value;
          }
          onChanged();
        } else {
          sigmoidParamBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x00040000;
        return this;
      }
      /**
       * <code>optional .caffe.SigmoidParameter sigmoid_param = 124;</code>
       */
      public Builder clearSigmoidParam() {
        if (sigmoidParamBuilder_ == null) {
          sigmoidParam_ = caffe.Caffe.SigmoidParameter.getDefaultInstance();
          onChanged();
        } else {
          sigmoidParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00040000);
        return this;
      }
      /**
       * <code>optional .caffe.SigmoidParameter sigmoid_param = 124;</code>
       */
      public caffe.Caffe.SigmoidParameter.Builder getSigmoidParamBuilder() {
        bitField1_ |= 0x00040000;
        onChanged();
        return getSigmoidParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.SigmoidParameter sigmoid_param = 124;</code>
       */
      public caffe.Caffe.SigmoidParameterOrBuilder getSigmoidParamOrBuilder() {
        if (sigmoidParamBuilder_ != null) {
          return sigmoidParamBuilder_.getMessageOrBuilder();
        } else {
          return sigmoidParam_;
        }
      }
      /**
       * <code>optional .caffe.SigmoidParameter sigmoid_param = 124;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.SigmoidParameter, caffe.Caffe.SigmoidParameter.Builder, caffe.Caffe.SigmoidParameterOrBuilder> 
          getSigmoidParamFieldBuilder() {
        if (sigmoidParamBuilder_ == null) {
          sigmoidParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.SigmoidParameter, caffe.Caffe.SigmoidParameter.Builder, caffe.Caffe.SigmoidParameterOrBuilder>(
                  sigmoidParam_,
                  getParentForChildren(),
                  isClean());
          sigmoidParam_ = null;
        }
        return sigmoidParamBuilder_;
      }

      // optional .caffe.SoftmaxParameter softmax_param = 125;
      private caffe.Caffe.SoftmaxParameter softmaxParam_ = caffe.Caffe.SoftmaxParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.SoftmaxParameter, caffe.Caffe.SoftmaxParameter.Builder, caffe.Caffe.SoftmaxParameterOrBuilder> softmaxParamBuilder_;
      /**
       * <code>optional .caffe.SoftmaxParameter softmax_param = 125;</code>
       */
      public boolean hasSoftmaxParam() {
        return ((bitField1_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional .caffe.SoftmaxParameter softmax_param = 125;</code>
       */
      public caffe.Caffe.SoftmaxParameter getSoftmaxParam() {
        if (softmaxParamBuilder_ == null) {
          return softmaxParam_;
        } else {
          return softmaxParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.SoftmaxParameter softmax_param = 125;</code>
       */
      public Builder setSoftmaxParam(caffe.Caffe.SoftmaxParameter value) {
        if (softmaxParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          softmaxParam_ = value;
          onChanged();
        } else {
          softmaxParamBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00080000;
        return this;
      }
      /**
       * <code>optional .caffe.SoftmaxParameter softmax_param = 125;</code>
       */
      public Builder setSoftmaxParam(
          caffe.Caffe.SoftmaxParameter.Builder builderForValue) {
        if (softmaxParamBuilder_ == null) {
          softmaxParam_ = builderForValue.build();
          onChanged();
        } else {
          softmaxParamBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00080000;
        return this;
      }
      /**
       * <code>optional .caffe.SoftmaxParameter softmax_param = 125;</code>
       */
      public Builder mergeSoftmaxParam(caffe.Caffe.SoftmaxParameter value) {
        if (softmaxParamBuilder_ == null) {
          if (((bitField1_ & 0x00080000) == 0x00080000) &&
              softmaxParam_ != caffe.Caffe.SoftmaxParameter.getDefaultInstance()) {
            softmaxParam_ =
              caffe.Caffe.SoftmaxParameter.newBuilder(softmaxParam_).mergeFrom(value).buildPartial();
          } else {
            softmaxParam_ = value;
          }
          onChanged();
        } else {
          softmaxParamBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x00080000;
        return this;
      }
      /**
       * <code>optional .caffe.SoftmaxParameter softmax_param = 125;</code>
       */
      public Builder clearSoftmaxParam() {
        if (softmaxParamBuilder_ == null) {
          softmaxParam_ = caffe.Caffe.SoftmaxParameter.getDefaultInstance();
          onChanged();
        } else {
          softmaxParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00080000);
        return this;
      }
      /**
       * <code>optional .caffe.SoftmaxParameter softmax_param = 125;</code>
       */
      public caffe.Caffe.SoftmaxParameter.Builder getSoftmaxParamBuilder() {
        bitField1_ |= 0x00080000;
        onChanged();
        return getSoftmaxParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.SoftmaxParameter softmax_param = 125;</code>
       */
      public caffe.Caffe.SoftmaxParameterOrBuilder getSoftmaxParamOrBuilder() {
        if (softmaxParamBuilder_ != null) {
          return softmaxParamBuilder_.getMessageOrBuilder();
        } else {
          return softmaxParam_;
        }
      }
      /**
       * <code>optional .caffe.SoftmaxParameter softmax_param = 125;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.SoftmaxParameter, caffe.Caffe.SoftmaxParameter.Builder, caffe.Caffe.SoftmaxParameterOrBuilder> 
          getSoftmaxParamFieldBuilder() {
        if (softmaxParamBuilder_ == null) {
          softmaxParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.SoftmaxParameter, caffe.Caffe.SoftmaxParameter.Builder, caffe.Caffe.SoftmaxParameterOrBuilder>(
                  softmaxParam_,
                  getParentForChildren(),
                  isClean());
          softmaxParam_ = null;
        }
        return softmaxParamBuilder_;
      }

      // optional .caffe.SPPParameter spp_param = 132;
      private caffe.Caffe.SPPParameter sppParam_ = caffe.Caffe.SPPParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.SPPParameter, caffe.Caffe.SPPParameter.Builder, caffe.Caffe.SPPParameterOrBuilder> sppParamBuilder_;
      /**
       * <code>optional .caffe.SPPParameter spp_param = 132;</code>
       */
      public boolean hasSppParam() {
        return ((bitField1_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional .caffe.SPPParameter spp_param = 132;</code>
       */
      public caffe.Caffe.SPPParameter getSppParam() {
        if (sppParamBuilder_ == null) {
          return sppParam_;
        } else {
          return sppParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.SPPParameter spp_param = 132;</code>
       */
      public Builder setSppParam(caffe.Caffe.SPPParameter value) {
        if (sppParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          sppParam_ = value;
          onChanged();
        } else {
          sppParamBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00100000;
        return this;
      }
      /**
       * <code>optional .caffe.SPPParameter spp_param = 132;</code>
       */
      public Builder setSppParam(
          caffe.Caffe.SPPParameter.Builder builderForValue) {
        if (sppParamBuilder_ == null) {
          sppParam_ = builderForValue.build();
          onChanged();
        } else {
          sppParamBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00100000;
        return this;
      }
      /**
       * <code>optional .caffe.SPPParameter spp_param = 132;</code>
       */
      public Builder mergeSppParam(caffe.Caffe.SPPParameter value) {
        if (sppParamBuilder_ == null) {
          if (((bitField1_ & 0x00100000) == 0x00100000) &&
              sppParam_ != caffe.Caffe.SPPParameter.getDefaultInstance()) {
            sppParam_ =
              caffe.Caffe.SPPParameter.newBuilder(sppParam_).mergeFrom(value).buildPartial();
          } else {
            sppParam_ = value;
          }
          onChanged();
        } else {
          sppParamBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x00100000;
        return this;
      }
      /**
       * <code>optional .caffe.SPPParameter spp_param = 132;</code>
       */
      public Builder clearSppParam() {
        if (sppParamBuilder_ == null) {
          sppParam_ = caffe.Caffe.SPPParameter.getDefaultInstance();
          onChanged();
        } else {
          sppParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00100000);
        return this;
      }
      /**
       * <code>optional .caffe.SPPParameter spp_param = 132;</code>
       */
      public caffe.Caffe.SPPParameter.Builder getSppParamBuilder() {
        bitField1_ |= 0x00100000;
        onChanged();
        return getSppParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.SPPParameter spp_param = 132;</code>
       */
      public caffe.Caffe.SPPParameterOrBuilder getSppParamOrBuilder() {
        if (sppParamBuilder_ != null) {
          return sppParamBuilder_.getMessageOrBuilder();
        } else {
          return sppParam_;
        }
      }
      /**
       * <code>optional .caffe.SPPParameter spp_param = 132;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.SPPParameter, caffe.Caffe.SPPParameter.Builder, caffe.Caffe.SPPParameterOrBuilder> 
          getSppParamFieldBuilder() {
        if (sppParamBuilder_ == null) {
          sppParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.SPPParameter, caffe.Caffe.SPPParameter.Builder, caffe.Caffe.SPPParameterOrBuilder>(
                  sppParam_,
                  getParentForChildren(),
                  isClean());
          sppParam_ = null;
        }
        return sppParamBuilder_;
      }

      // optional .caffe.SliceParameter slice_param = 126;
      private caffe.Caffe.SliceParameter sliceParam_ = caffe.Caffe.SliceParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.SliceParameter, caffe.Caffe.SliceParameter.Builder, caffe.Caffe.SliceParameterOrBuilder> sliceParamBuilder_;
      /**
       * <code>optional .caffe.SliceParameter slice_param = 126;</code>
       */
      public boolean hasSliceParam() {
        return ((bitField1_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>optional .caffe.SliceParameter slice_param = 126;</code>
       */
      public caffe.Caffe.SliceParameter getSliceParam() {
        if (sliceParamBuilder_ == null) {
          return sliceParam_;
        } else {
          return sliceParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.SliceParameter slice_param = 126;</code>
       */
      public Builder setSliceParam(caffe.Caffe.SliceParameter value) {
        if (sliceParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          sliceParam_ = value;
          onChanged();
        } else {
          sliceParamBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00200000;
        return this;
      }
      /**
       * <code>optional .caffe.SliceParameter slice_param = 126;</code>
       */
      public Builder setSliceParam(
          caffe.Caffe.SliceParameter.Builder builderForValue) {
        if (sliceParamBuilder_ == null) {
          sliceParam_ = builderForValue.build();
          onChanged();
        } else {
          sliceParamBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00200000;
        return this;
      }
      /**
       * <code>optional .caffe.SliceParameter slice_param = 126;</code>
       */
      public Builder mergeSliceParam(caffe.Caffe.SliceParameter value) {
        if (sliceParamBuilder_ == null) {
          if (((bitField1_ & 0x00200000) == 0x00200000) &&
              sliceParam_ != caffe.Caffe.SliceParameter.getDefaultInstance()) {
            sliceParam_ =
              caffe.Caffe.SliceParameter.newBuilder(sliceParam_).mergeFrom(value).buildPartial();
          } else {
            sliceParam_ = value;
          }
          onChanged();
        } else {
          sliceParamBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x00200000;
        return this;
      }
      /**
       * <code>optional .caffe.SliceParameter slice_param = 126;</code>
       */
      public Builder clearSliceParam() {
        if (sliceParamBuilder_ == null) {
          sliceParam_ = caffe.Caffe.SliceParameter.getDefaultInstance();
          onChanged();
        } else {
          sliceParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00200000);
        return this;
      }
      /**
       * <code>optional .caffe.SliceParameter slice_param = 126;</code>
       */
      public caffe.Caffe.SliceParameter.Builder getSliceParamBuilder() {
        bitField1_ |= 0x00200000;
        onChanged();
        return getSliceParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.SliceParameter slice_param = 126;</code>
       */
      public caffe.Caffe.SliceParameterOrBuilder getSliceParamOrBuilder() {
        if (sliceParamBuilder_ != null) {
          return sliceParamBuilder_.getMessageOrBuilder();
        } else {
          return sliceParam_;
        }
      }
      /**
       * <code>optional .caffe.SliceParameter slice_param = 126;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.SliceParameter, caffe.Caffe.SliceParameter.Builder, caffe.Caffe.SliceParameterOrBuilder> 
          getSliceParamFieldBuilder() {
        if (sliceParamBuilder_ == null) {
          sliceParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.SliceParameter, caffe.Caffe.SliceParameter.Builder, caffe.Caffe.SliceParameterOrBuilder>(
                  sliceParam_,
                  getParentForChildren(),
                  isClean());
          sliceParam_ = null;
        }
        return sliceParamBuilder_;
      }

      // optional .caffe.TanHParameter tanh_param = 127;
      private caffe.Caffe.TanHParameter tanhParam_ = caffe.Caffe.TanHParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.TanHParameter, caffe.Caffe.TanHParameter.Builder, caffe.Caffe.TanHParameterOrBuilder> tanhParamBuilder_;
      /**
       * <code>optional .caffe.TanHParameter tanh_param = 127;</code>
       */
      public boolean hasTanhParam() {
        return ((bitField1_ & 0x00400000) == 0x00400000);
      }
      /**
       * <code>optional .caffe.TanHParameter tanh_param = 127;</code>
       */
      public caffe.Caffe.TanHParameter getTanhParam() {
        if (tanhParamBuilder_ == null) {
          return tanhParam_;
        } else {
          return tanhParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.TanHParameter tanh_param = 127;</code>
       */
      public Builder setTanhParam(caffe.Caffe.TanHParameter value) {
        if (tanhParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          tanhParam_ = value;
          onChanged();
        } else {
          tanhParamBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00400000;
        return this;
      }
      /**
       * <code>optional .caffe.TanHParameter tanh_param = 127;</code>
       */
      public Builder setTanhParam(
          caffe.Caffe.TanHParameter.Builder builderForValue) {
        if (tanhParamBuilder_ == null) {
          tanhParam_ = builderForValue.build();
          onChanged();
        } else {
          tanhParamBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00400000;
        return this;
      }
      /**
       * <code>optional .caffe.TanHParameter tanh_param = 127;</code>
       */
      public Builder mergeTanhParam(caffe.Caffe.TanHParameter value) {
        if (tanhParamBuilder_ == null) {
          if (((bitField1_ & 0x00400000) == 0x00400000) &&
              tanhParam_ != caffe.Caffe.TanHParameter.getDefaultInstance()) {
            tanhParam_ =
              caffe.Caffe.TanHParameter.newBuilder(tanhParam_).mergeFrom(value).buildPartial();
          } else {
            tanhParam_ = value;
          }
          onChanged();
        } else {
          tanhParamBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x00400000;
        return this;
      }
      /**
       * <code>optional .caffe.TanHParameter tanh_param = 127;</code>
       */
      public Builder clearTanhParam() {
        if (tanhParamBuilder_ == null) {
          tanhParam_ = caffe.Caffe.TanHParameter.getDefaultInstance();
          onChanged();
        } else {
          tanhParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00400000);
        return this;
      }
      /**
       * <code>optional .caffe.TanHParameter tanh_param = 127;</code>
       */
      public caffe.Caffe.TanHParameter.Builder getTanhParamBuilder() {
        bitField1_ |= 0x00400000;
        onChanged();
        return getTanhParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.TanHParameter tanh_param = 127;</code>
       */
      public caffe.Caffe.TanHParameterOrBuilder getTanhParamOrBuilder() {
        if (tanhParamBuilder_ != null) {
          return tanhParamBuilder_.getMessageOrBuilder();
        } else {
          return tanhParam_;
        }
      }
      /**
       * <code>optional .caffe.TanHParameter tanh_param = 127;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.TanHParameter, caffe.Caffe.TanHParameter.Builder, caffe.Caffe.TanHParameterOrBuilder> 
          getTanhParamFieldBuilder() {
        if (tanhParamBuilder_ == null) {
          tanhParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.TanHParameter, caffe.Caffe.TanHParameter.Builder, caffe.Caffe.TanHParameterOrBuilder>(
                  tanhParam_,
                  getParentForChildren(),
                  isClean());
          tanhParam_ = null;
        }
        return tanhParamBuilder_;
      }

      // optional .caffe.ThresholdParameter threshold_param = 128;
      private caffe.Caffe.ThresholdParameter thresholdParam_ = caffe.Caffe.ThresholdParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.ThresholdParameter, caffe.Caffe.ThresholdParameter.Builder, caffe.Caffe.ThresholdParameterOrBuilder> thresholdParamBuilder_;
      /**
       * <code>optional .caffe.ThresholdParameter threshold_param = 128;</code>
       */
      public boolean hasThresholdParam() {
        return ((bitField1_ & 0x00800000) == 0x00800000);
      }
      /**
       * <code>optional .caffe.ThresholdParameter threshold_param = 128;</code>
       */
      public caffe.Caffe.ThresholdParameter getThresholdParam() {
        if (thresholdParamBuilder_ == null) {
          return thresholdParam_;
        } else {
          return thresholdParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.ThresholdParameter threshold_param = 128;</code>
       */
      public Builder setThresholdParam(caffe.Caffe.ThresholdParameter value) {
        if (thresholdParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          thresholdParam_ = value;
          onChanged();
        } else {
          thresholdParamBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00800000;
        return this;
      }
      /**
       * <code>optional .caffe.ThresholdParameter threshold_param = 128;</code>
       */
      public Builder setThresholdParam(
          caffe.Caffe.ThresholdParameter.Builder builderForValue) {
        if (thresholdParamBuilder_ == null) {
          thresholdParam_ = builderForValue.build();
          onChanged();
        } else {
          thresholdParamBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00800000;
        return this;
      }
      /**
       * <code>optional .caffe.ThresholdParameter threshold_param = 128;</code>
       */
      public Builder mergeThresholdParam(caffe.Caffe.ThresholdParameter value) {
        if (thresholdParamBuilder_ == null) {
          if (((bitField1_ & 0x00800000) == 0x00800000) &&
              thresholdParam_ != caffe.Caffe.ThresholdParameter.getDefaultInstance()) {
            thresholdParam_ =
              caffe.Caffe.ThresholdParameter.newBuilder(thresholdParam_).mergeFrom(value).buildPartial();
          } else {
            thresholdParam_ = value;
          }
          onChanged();
        } else {
          thresholdParamBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x00800000;
        return this;
      }
      /**
       * <code>optional .caffe.ThresholdParameter threshold_param = 128;</code>
       */
      public Builder clearThresholdParam() {
        if (thresholdParamBuilder_ == null) {
          thresholdParam_ = caffe.Caffe.ThresholdParameter.getDefaultInstance();
          onChanged();
        } else {
          thresholdParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00800000);
        return this;
      }
      /**
       * <code>optional .caffe.ThresholdParameter threshold_param = 128;</code>
       */
      public caffe.Caffe.ThresholdParameter.Builder getThresholdParamBuilder() {
        bitField1_ |= 0x00800000;
        onChanged();
        return getThresholdParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.ThresholdParameter threshold_param = 128;</code>
       */
      public caffe.Caffe.ThresholdParameterOrBuilder getThresholdParamOrBuilder() {
        if (thresholdParamBuilder_ != null) {
          return thresholdParamBuilder_.getMessageOrBuilder();
        } else {
          return thresholdParam_;
        }
      }
      /**
       * <code>optional .caffe.ThresholdParameter threshold_param = 128;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.ThresholdParameter, caffe.Caffe.ThresholdParameter.Builder, caffe.Caffe.ThresholdParameterOrBuilder> 
          getThresholdParamFieldBuilder() {
        if (thresholdParamBuilder_ == null) {
          thresholdParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.ThresholdParameter, caffe.Caffe.ThresholdParameter.Builder, caffe.Caffe.ThresholdParameterOrBuilder>(
                  thresholdParam_,
                  getParentForChildren(),
                  isClean());
          thresholdParam_ = null;
        }
        return thresholdParamBuilder_;
      }

      // optional .caffe.TileParameter tile_param = 138;
      private caffe.Caffe.TileParameter tileParam_ = caffe.Caffe.TileParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.TileParameter, caffe.Caffe.TileParameter.Builder, caffe.Caffe.TileParameterOrBuilder> tileParamBuilder_;
      /**
       * <code>optional .caffe.TileParameter tile_param = 138;</code>
       */
      public boolean hasTileParam() {
        return ((bitField1_ & 0x01000000) == 0x01000000);
      }
      /**
       * <code>optional .caffe.TileParameter tile_param = 138;</code>
       */
      public caffe.Caffe.TileParameter getTileParam() {
        if (tileParamBuilder_ == null) {
          return tileParam_;
        } else {
          return tileParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.TileParameter tile_param = 138;</code>
       */
      public Builder setTileParam(caffe.Caffe.TileParameter value) {
        if (tileParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          tileParam_ = value;
          onChanged();
        } else {
          tileParamBuilder_.setMessage(value);
        }
        bitField1_ |= 0x01000000;
        return this;
      }
      /**
       * <code>optional .caffe.TileParameter tile_param = 138;</code>
       */
      public Builder setTileParam(
          caffe.Caffe.TileParameter.Builder builderForValue) {
        if (tileParamBuilder_ == null) {
          tileParam_ = builderForValue.build();
          onChanged();
        } else {
          tileParamBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x01000000;
        return this;
      }
      /**
       * <code>optional .caffe.TileParameter tile_param = 138;</code>
       */
      public Builder mergeTileParam(caffe.Caffe.TileParameter value) {
        if (tileParamBuilder_ == null) {
          if (((bitField1_ & 0x01000000) == 0x01000000) &&
              tileParam_ != caffe.Caffe.TileParameter.getDefaultInstance()) {
            tileParam_ =
              caffe.Caffe.TileParameter.newBuilder(tileParam_).mergeFrom(value).buildPartial();
          } else {
            tileParam_ = value;
          }
          onChanged();
        } else {
          tileParamBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x01000000;
        return this;
      }
      /**
       * <code>optional .caffe.TileParameter tile_param = 138;</code>
       */
      public Builder clearTileParam() {
        if (tileParamBuilder_ == null) {
          tileParam_ = caffe.Caffe.TileParameter.getDefaultInstance();
          onChanged();
        } else {
          tileParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x01000000);
        return this;
      }
      /**
       * <code>optional .caffe.TileParameter tile_param = 138;</code>
       */
      public caffe.Caffe.TileParameter.Builder getTileParamBuilder() {
        bitField1_ |= 0x01000000;
        onChanged();
        return getTileParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.TileParameter tile_param = 138;</code>
       */
      public caffe.Caffe.TileParameterOrBuilder getTileParamOrBuilder() {
        if (tileParamBuilder_ != null) {
          return tileParamBuilder_.getMessageOrBuilder();
        } else {
          return tileParam_;
        }
      }
      /**
       * <code>optional .caffe.TileParameter tile_param = 138;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.TileParameter, caffe.Caffe.TileParameter.Builder, caffe.Caffe.TileParameterOrBuilder> 
          getTileParamFieldBuilder() {
        if (tileParamBuilder_ == null) {
          tileParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.TileParameter, caffe.Caffe.TileParameter.Builder, caffe.Caffe.TileParameterOrBuilder>(
                  tileParam_,
                  getParentForChildren(),
                  isClean());
          tileParam_ = null;
        }
        return tileParamBuilder_;
      }

      // optional .caffe.WindowDataParameter window_data_param = 129;
      private caffe.Caffe.WindowDataParameter windowDataParam_ = caffe.Caffe.WindowDataParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.WindowDataParameter, caffe.Caffe.WindowDataParameter.Builder, caffe.Caffe.WindowDataParameterOrBuilder> windowDataParamBuilder_;
      /**
       * <code>optional .caffe.WindowDataParameter window_data_param = 129;</code>
       */
      public boolean hasWindowDataParam() {
        return ((bitField1_ & 0x02000000) == 0x02000000);
      }
      /**
       * <code>optional .caffe.WindowDataParameter window_data_param = 129;</code>
       */
      public caffe.Caffe.WindowDataParameter getWindowDataParam() {
        if (windowDataParamBuilder_ == null) {
          return windowDataParam_;
        } else {
          return windowDataParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.WindowDataParameter window_data_param = 129;</code>
       */
      public Builder setWindowDataParam(caffe.Caffe.WindowDataParameter value) {
        if (windowDataParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          windowDataParam_ = value;
          onChanged();
        } else {
          windowDataParamBuilder_.setMessage(value);
        }
        bitField1_ |= 0x02000000;
        return this;
      }
      /**
       * <code>optional .caffe.WindowDataParameter window_data_param = 129;</code>
       */
      public Builder setWindowDataParam(
          caffe.Caffe.WindowDataParameter.Builder builderForValue) {
        if (windowDataParamBuilder_ == null) {
          windowDataParam_ = builderForValue.build();
          onChanged();
        } else {
          windowDataParamBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x02000000;
        return this;
      }
      /**
       * <code>optional .caffe.WindowDataParameter window_data_param = 129;</code>
       */
      public Builder mergeWindowDataParam(caffe.Caffe.WindowDataParameter value) {
        if (windowDataParamBuilder_ == null) {
          if (((bitField1_ & 0x02000000) == 0x02000000) &&
              windowDataParam_ != caffe.Caffe.WindowDataParameter.getDefaultInstance()) {
            windowDataParam_ =
              caffe.Caffe.WindowDataParameter.newBuilder(windowDataParam_).mergeFrom(value).buildPartial();
          } else {
            windowDataParam_ = value;
          }
          onChanged();
        } else {
          windowDataParamBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x02000000;
        return this;
      }
      /**
       * <code>optional .caffe.WindowDataParameter window_data_param = 129;</code>
       */
      public Builder clearWindowDataParam() {
        if (windowDataParamBuilder_ == null) {
          windowDataParam_ = caffe.Caffe.WindowDataParameter.getDefaultInstance();
          onChanged();
        } else {
          windowDataParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x02000000);
        return this;
      }
      /**
       * <code>optional .caffe.WindowDataParameter window_data_param = 129;</code>
       */
      public caffe.Caffe.WindowDataParameter.Builder getWindowDataParamBuilder() {
        bitField1_ |= 0x02000000;
        onChanged();
        return getWindowDataParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.WindowDataParameter window_data_param = 129;</code>
       */
      public caffe.Caffe.WindowDataParameterOrBuilder getWindowDataParamOrBuilder() {
        if (windowDataParamBuilder_ != null) {
          return windowDataParamBuilder_.getMessageOrBuilder();
        } else {
          return windowDataParam_;
        }
      }
      /**
       * <code>optional .caffe.WindowDataParameter window_data_param = 129;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.WindowDataParameter, caffe.Caffe.WindowDataParameter.Builder, caffe.Caffe.WindowDataParameterOrBuilder> 
          getWindowDataParamFieldBuilder() {
        if (windowDataParamBuilder_ == null) {
          windowDataParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.WindowDataParameter, caffe.Caffe.WindowDataParameter.Builder, caffe.Caffe.WindowDataParameterOrBuilder>(
                  windowDataParam_,
                  getParentForChildren(),
                  isClean());
          windowDataParam_ = null;
        }
        return windowDataParamBuilder_;
      }

      // optional .caffe.ROIPoolingParameter roi_pooling_param = 8266711;
      private caffe.Caffe.ROIPoolingParameter roiPoolingParam_ = caffe.Caffe.ROIPoolingParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.ROIPoolingParameter, caffe.Caffe.ROIPoolingParameter.Builder, caffe.Caffe.ROIPoolingParameterOrBuilder> roiPoolingParamBuilder_;
      /**
       * <code>optional .caffe.ROIPoolingParameter roi_pooling_param = 8266711;</code>
       */
      public boolean hasRoiPoolingParam() {
        return ((bitField1_ & 0x04000000) == 0x04000000);
      }
      /**
       * <code>optional .caffe.ROIPoolingParameter roi_pooling_param = 8266711;</code>
       */
      public caffe.Caffe.ROIPoolingParameter getRoiPoolingParam() {
        if (roiPoolingParamBuilder_ == null) {
          return roiPoolingParam_;
        } else {
          return roiPoolingParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.ROIPoolingParameter roi_pooling_param = 8266711;</code>
       */
      public Builder setRoiPoolingParam(caffe.Caffe.ROIPoolingParameter value) {
        if (roiPoolingParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          roiPoolingParam_ = value;
          onChanged();
        } else {
          roiPoolingParamBuilder_.setMessage(value);
        }
        bitField1_ |= 0x04000000;
        return this;
      }
      /**
       * <code>optional .caffe.ROIPoolingParameter roi_pooling_param = 8266711;</code>
       */
      public Builder setRoiPoolingParam(
          caffe.Caffe.ROIPoolingParameter.Builder builderForValue) {
        if (roiPoolingParamBuilder_ == null) {
          roiPoolingParam_ = builderForValue.build();
          onChanged();
        } else {
          roiPoolingParamBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x04000000;
        return this;
      }
      /**
       * <code>optional .caffe.ROIPoolingParameter roi_pooling_param = 8266711;</code>
       */
      public Builder mergeRoiPoolingParam(caffe.Caffe.ROIPoolingParameter value) {
        if (roiPoolingParamBuilder_ == null) {
          if (((bitField1_ & 0x04000000) == 0x04000000) &&
              roiPoolingParam_ != caffe.Caffe.ROIPoolingParameter.getDefaultInstance()) {
            roiPoolingParam_ =
              caffe.Caffe.ROIPoolingParameter.newBuilder(roiPoolingParam_).mergeFrom(value).buildPartial();
          } else {
            roiPoolingParam_ = value;
          }
          onChanged();
        } else {
          roiPoolingParamBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x04000000;
        return this;
      }
      /**
       * <code>optional .caffe.ROIPoolingParameter roi_pooling_param = 8266711;</code>
       */
      public Builder clearRoiPoolingParam() {
        if (roiPoolingParamBuilder_ == null) {
          roiPoolingParam_ = caffe.Caffe.ROIPoolingParameter.getDefaultInstance();
          onChanged();
        } else {
          roiPoolingParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x04000000);
        return this;
      }
      /**
       * <code>optional .caffe.ROIPoolingParameter roi_pooling_param = 8266711;</code>
       */
      public caffe.Caffe.ROIPoolingParameter.Builder getRoiPoolingParamBuilder() {
        bitField1_ |= 0x04000000;
        onChanged();
        return getRoiPoolingParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.ROIPoolingParameter roi_pooling_param = 8266711;</code>
       */
      public caffe.Caffe.ROIPoolingParameterOrBuilder getRoiPoolingParamOrBuilder() {
        if (roiPoolingParamBuilder_ != null) {
          return roiPoolingParamBuilder_.getMessageOrBuilder();
        } else {
          return roiPoolingParam_;
        }
      }
      /**
       * <code>optional .caffe.ROIPoolingParameter roi_pooling_param = 8266711;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.ROIPoolingParameter, caffe.Caffe.ROIPoolingParameter.Builder, caffe.Caffe.ROIPoolingParameterOrBuilder> 
          getRoiPoolingParamFieldBuilder() {
        if (roiPoolingParamBuilder_ == null) {
          roiPoolingParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.ROIPoolingParameter, caffe.Caffe.ROIPoolingParameter.Builder, caffe.Caffe.ROIPoolingParameterOrBuilder>(
                  roiPoolingParam_,
                  getParentForChildren(),
                  isClean());
          roiPoolingParam_ = null;
        }
        return roiPoolingParamBuilder_;
      }

      // optional .caffe.SmoothL1LossParameter smooth_l1_loss_param = 8266712;
      private caffe.Caffe.SmoothL1LossParameter smoothL1LossParam_ = caffe.Caffe.SmoothL1LossParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.SmoothL1LossParameter, caffe.Caffe.SmoothL1LossParameter.Builder, caffe.Caffe.SmoothL1LossParameterOrBuilder> smoothL1LossParamBuilder_;
      /**
       * <code>optional .caffe.SmoothL1LossParameter smooth_l1_loss_param = 8266712;</code>
       */
      public boolean hasSmoothL1LossParam() {
        return ((bitField1_ & 0x08000000) == 0x08000000);
      }
      /**
       * <code>optional .caffe.SmoothL1LossParameter smooth_l1_loss_param = 8266712;</code>
       */
      public caffe.Caffe.SmoothL1LossParameter getSmoothL1LossParam() {
        if (smoothL1LossParamBuilder_ == null) {
          return smoothL1LossParam_;
        } else {
          return smoothL1LossParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.SmoothL1LossParameter smooth_l1_loss_param = 8266712;</code>
       */
      public Builder setSmoothL1LossParam(caffe.Caffe.SmoothL1LossParameter value) {
        if (smoothL1LossParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          smoothL1LossParam_ = value;
          onChanged();
        } else {
          smoothL1LossParamBuilder_.setMessage(value);
        }
        bitField1_ |= 0x08000000;
        return this;
      }
      /**
       * <code>optional .caffe.SmoothL1LossParameter smooth_l1_loss_param = 8266712;</code>
       */
      public Builder setSmoothL1LossParam(
          caffe.Caffe.SmoothL1LossParameter.Builder builderForValue) {
        if (smoothL1LossParamBuilder_ == null) {
          smoothL1LossParam_ = builderForValue.build();
          onChanged();
        } else {
          smoothL1LossParamBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x08000000;
        return this;
      }
      /**
       * <code>optional .caffe.SmoothL1LossParameter smooth_l1_loss_param = 8266712;</code>
       */
      public Builder mergeSmoothL1LossParam(caffe.Caffe.SmoothL1LossParameter value) {
        if (smoothL1LossParamBuilder_ == null) {
          if (((bitField1_ & 0x08000000) == 0x08000000) &&
              smoothL1LossParam_ != caffe.Caffe.SmoothL1LossParameter.getDefaultInstance()) {
            smoothL1LossParam_ =
              caffe.Caffe.SmoothL1LossParameter.newBuilder(smoothL1LossParam_).mergeFrom(value).buildPartial();
          } else {
            smoothL1LossParam_ = value;
          }
          onChanged();
        } else {
          smoothL1LossParamBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x08000000;
        return this;
      }
      /**
       * <code>optional .caffe.SmoothL1LossParameter smooth_l1_loss_param = 8266712;</code>
       */
      public Builder clearSmoothL1LossParam() {
        if (smoothL1LossParamBuilder_ == null) {
          smoothL1LossParam_ = caffe.Caffe.SmoothL1LossParameter.getDefaultInstance();
          onChanged();
        } else {
          smoothL1LossParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x08000000);
        return this;
      }
      /**
       * <code>optional .caffe.SmoothL1LossParameter smooth_l1_loss_param = 8266712;</code>
       */
      public caffe.Caffe.SmoothL1LossParameter.Builder getSmoothL1LossParamBuilder() {
        bitField1_ |= 0x08000000;
        onChanged();
        return getSmoothL1LossParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.SmoothL1LossParameter smooth_l1_loss_param = 8266712;</code>
       */
      public caffe.Caffe.SmoothL1LossParameterOrBuilder getSmoothL1LossParamOrBuilder() {
        if (smoothL1LossParamBuilder_ != null) {
          return smoothL1LossParamBuilder_.getMessageOrBuilder();
        } else {
          return smoothL1LossParam_;
        }
      }
      /**
       * <code>optional .caffe.SmoothL1LossParameter smooth_l1_loss_param = 8266712;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.SmoothL1LossParameter, caffe.Caffe.SmoothL1LossParameter.Builder, caffe.Caffe.SmoothL1LossParameterOrBuilder> 
          getSmoothL1LossParamFieldBuilder() {
        if (smoothL1LossParamBuilder_ == null) {
          smoothL1LossParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.SmoothL1LossParameter, caffe.Caffe.SmoothL1LossParameter.Builder, caffe.Caffe.SmoothL1LossParameterOrBuilder>(
                  smoothL1LossParam_,
                  getParentForChildren(),
                  isClean());
          smoothL1LossParam_ = null;
        }
        return smoothL1LossParamBuilder_;
      }

      // optional .caffe.ProposalParameter proposal_param = 8266713;
      private caffe.Caffe.ProposalParameter proposalParam_ = caffe.Caffe.ProposalParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.ProposalParameter, caffe.Caffe.ProposalParameter.Builder, caffe.Caffe.ProposalParameterOrBuilder> proposalParamBuilder_;
      /**
       * <code>optional .caffe.ProposalParameter proposal_param = 8266713;</code>
       */
      public boolean hasProposalParam() {
        return ((bitField1_ & 0x10000000) == 0x10000000);
      }
      /**
       * <code>optional .caffe.ProposalParameter proposal_param = 8266713;</code>
       */
      public caffe.Caffe.ProposalParameter getProposalParam() {
        if (proposalParamBuilder_ == null) {
          return proposalParam_;
        } else {
          return proposalParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.ProposalParameter proposal_param = 8266713;</code>
       */
      public Builder setProposalParam(caffe.Caffe.ProposalParameter value) {
        if (proposalParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          proposalParam_ = value;
          onChanged();
        } else {
          proposalParamBuilder_.setMessage(value);
        }
        bitField1_ |= 0x10000000;
        return this;
      }
      /**
       * <code>optional .caffe.ProposalParameter proposal_param = 8266713;</code>
       */
      public Builder setProposalParam(
          caffe.Caffe.ProposalParameter.Builder builderForValue) {
        if (proposalParamBuilder_ == null) {
          proposalParam_ = builderForValue.build();
          onChanged();
        } else {
          proposalParamBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x10000000;
        return this;
      }
      /**
       * <code>optional .caffe.ProposalParameter proposal_param = 8266713;</code>
       */
      public Builder mergeProposalParam(caffe.Caffe.ProposalParameter value) {
        if (proposalParamBuilder_ == null) {
          if (((bitField1_ & 0x10000000) == 0x10000000) &&
              proposalParam_ != caffe.Caffe.ProposalParameter.getDefaultInstance()) {
            proposalParam_ =
              caffe.Caffe.ProposalParameter.newBuilder(proposalParam_).mergeFrom(value).buildPartial();
          } else {
            proposalParam_ = value;
          }
          onChanged();
        } else {
          proposalParamBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x10000000;
        return this;
      }
      /**
       * <code>optional .caffe.ProposalParameter proposal_param = 8266713;</code>
       */
      public Builder clearProposalParam() {
        if (proposalParamBuilder_ == null) {
          proposalParam_ = caffe.Caffe.ProposalParameter.getDefaultInstance();
          onChanged();
        } else {
          proposalParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x10000000);
        return this;
      }
      /**
       * <code>optional .caffe.ProposalParameter proposal_param = 8266713;</code>
       */
      public caffe.Caffe.ProposalParameter.Builder getProposalParamBuilder() {
        bitField1_ |= 0x10000000;
        onChanged();
        return getProposalParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.ProposalParameter proposal_param = 8266713;</code>
       */
      public caffe.Caffe.ProposalParameterOrBuilder getProposalParamOrBuilder() {
        if (proposalParamBuilder_ != null) {
          return proposalParamBuilder_.getMessageOrBuilder();
        } else {
          return proposalParam_;
        }
      }
      /**
       * <code>optional .caffe.ProposalParameter proposal_param = 8266713;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.ProposalParameter, caffe.Caffe.ProposalParameter.Builder, caffe.Caffe.ProposalParameterOrBuilder> 
          getProposalParamFieldBuilder() {
        if (proposalParamBuilder_ == null) {
          proposalParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.ProposalParameter, caffe.Caffe.ProposalParameter.Builder, caffe.Caffe.ProposalParameterOrBuilder>(
                  proposalParam_,
                  getParentForChildren(),
                  isClean());
          proposalParam_ = null;
        }
        return proposalParamBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:caffe.LayerParameter)
    }

    static {
      defaultInstance = new LayerParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.LayerParameter)
  }

  public interface ROIPoolingParameterOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional uint32 pooled_h = 1 [default = 0];
    /**
     * <code>optional uint32 pooled_h = 1 [default = 0];</code>
     *
     * <pre>
     * Pad, kernel size, and stride are all given as a single value for equal
     * dimensions in height and width or as Y, X pairs.
     * </pre>
     */
    boolean hasPooledH();
    /**
     * <code>optional uint32 pooled_h = 1 [default = 0];</code>
     *
     * <pre>
     * Pad, kernel size, and stride are all given as a single value for equal
     * dimensions in height and width or as Y, X pairs.
     * </pre>
     */
    int getPooledH();

    // optional uint32 pooled_w = 2 [default = 0];
    /**
     * <code>optional uint32 pooled_w = 2 [default = 0];</code>
     *
     * <pre>
     * The pooled output width
     * </pre>
     */
    boolean hasPooledW();
    /**
     * <code>optional uint32 pooled_w = 2 [default = 0];</code>
     *
     * <pre>
     * The pooled output width
     * </pre>
     */
    int getPooledW();

    // optional float spatial_scale = 3 [default = 1];
    /**
     * <code>optional float spatial_scale = 3 [default = 1];</code>
     *
     * <pre>
     * Multiplicative spatial scale factor to translate ROI coords from their
     * input scale to the scale used when pooling
     * </pre>
     */
    boolean hasSpatialScale();
    /**
     * <code>optional float spatial_scale = 3 [default = 1];</code>
     *
     * <pre>
     * Multiplicative spatial scale factor to translate ROI coords from their
     * input scale to the scale used when pooling
     * </pre>
     */
    float getSpatialScale();
  }
  /**
   * Protobuf type {@code caffe.ROIPoolingParameter}
   *
   * <pre>
   * Message that stores parameters used by ROIPoolingLayer
   * </pre>
   */
  public static final class ROIPoolingParameter extends
      com.google.protobuf.GeneratedMessage
      implements ROIPoolingParameterOrBuilder {
    // Use ROIPoolingParameter.newBuilder() to construct.
    private ROIPoolingParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ROIPoolingParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ROIPoolingParameter defaultInstance;
    public static ROIPoolingParameter getDefaultInstance() {
      return defaultInstance;
    }

    public ROIPoolingParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ROIPoolingParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              pooledH_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              pooledW_ = input.readUInt32();
              break;
            }
            case 29: {
              bitField0_ |= 0x00000004;
              spatialScale_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_ROIPoolingParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_ROIPoolingParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.ROIPoolingParameter.class, caffe.Caffe.ROIPoolingParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<ROIPoolingParameter> PARSER =
        new com.google.protobuf.AbstractParser<ROIPoolingParameter>() {
      public ROIPoolingParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ROIPoolingParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ROIPoolingParameter> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional uint32 pooled_h = 1 [default = 0];
    public static final int POOLED_H_FIELD_NUMBER = 1;
    private int pooledH_;
    /**
     * <code>optional uint32 pooled_h = 1 [default = 0];</code>
     *
     * <pre>
     * Pad, kernel size, and stride are all given as a single value for equal
     * dimensions in height and width or as Y, X pairs.
     * </pre>
     */
    public boolean hasPooledH() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 pooled_h = 1 [default = 0];</code>
     *
     * <pre>
     * Pad, kernel size, and stride are all given as a single value for equal
     * dimensions in height and width or as Y, X pairs.
     * </pre>
     */
    public int getPooledH() {
      return pooledH_;
    }

    // optional uint32 pooled_w = 2 [default = 0];
    public static final int POOLED_W_FIELD_NUMBER = 2;
    private int pooledW_;
    /**
     * <code>optional uint32 pooled_w = 2 [default = 0];</code>
     *
     * <pre>
     * The pooled output width
     * </pre>
     */
    public boolean hasPooledW() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 pooled_w = 2 [default = 0];</code>
     *
     * <pre>
     * The pooled output width
     * </pre>
     */
    public int getPooledW() {
      return pooledW_;
    }

    // optional float spatial_scale = 3 [default = 1];
    public static final int SPATIAL_SCALE_FIELD_NUMBER = 3;
    private float spatialScale_;
    /**
     * <code>optional float spatial_scale = 3 [default = 1];</code>
     *
     * <pre>
     * Multiplicative spatial scale factor to translate ROI coords from their
     * input scale to the scale used when pooling
     * </pre>
     */
    public boolean hasSpatialScale() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional float spatial_scale = 3 [default = 1];</code>
     *
     * <pre>
     * Multiplicative spatial scale factor to translate ROI coords from their
     * input scale to the scale used when pooling
     * </pre>
     */
    public float getSpatialScale() {
      return spatialScale_;
    }

    private void initFields() {
      pooledH_ = 0;
      pooledW_ = 0;
      spatialScale_ = 1F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, pooledH_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, pooledW_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFloat(3, spatialScale_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, pooledH_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, pooledW_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(3, spatialScale_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.ROIPoolingParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.ROIPoolingParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.ROIPoolingParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.ROIPoolingParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.ROIPoolingParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.ROIPoolingParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.ROIPoolingParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.ROIPoolingParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.ROIPoolingParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.ROIPoolingParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.ROIPoolingParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.ROIPoolingParameter}
     *
     * <pre>
     * Message that stores parameters used by ROIPoolingLayer
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements caffe.Caffe.ROIPoolingParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_ROIPoolingParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_ROIPoolingParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.ROIPoolingParameter.class, caffe.Caffe.ROIPoolingParameter.Builder.class);
      }

      // Construct using caffe.Caffe.ROIPoolingParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        pooledH_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        pooledW_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        spatialScale_ = 1F;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_ROIPoolingParameter_descriptor;
      }

      public caffe.Caffe.ROIPoolingParameter getDefaultInstanceForType() {
        return caffe.Caffe.ROIPoolingParameter.getDefaultInstance();
      }

      public caffe.Caffe.ROIPoolingParameter build() {
        caffe.Caffe.ROIPoolingParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.ROIPoolingParameter buildPartial() {
        caffe.Caffe.ROIPoolingParameter result = new caffe.Caffe.ROIPoolingParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.pooledH_ = pooledH_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.pooledW_ = pooledW_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.spatialScale_ = spatialScale_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.ROIPoolingParameter) {
          return mergeFrom((caffe.Caffe.ROIPoolingParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.ROIPoolingParameter other) {
        if (other == caffe.Caffe.ROIPoolingParameter.getDefaultInstance()) return this;
        if (other.hasPooledH()) {
          setPooledH(other.getPooledH());
        }
        if (other.hasPooledW()) {
          setPooledW(other.getPooledW());
        }
        if (other.hasSpatialScale()) {
          setSpatialScale(other.getSpatialScale());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.ROIPoolingParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.ROIPoolingParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional uint32 pooled_h = 1 [default = 0];
      private int pooledH_ ;
      /**
       * <code>optional uint32 pooled_h = 1 [default = 0];</code>
       *
       * <pre>
       * Pad, kernel size, and stride are all given as a single value for equal
       * dimensions in height and width or as Y, X pairs.
       * </pre>
       */
      public boolean hasPooledH() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 pooled_h = 1 [default = 0];</code>
       *
       * <pre>
       * Pad, kernel size, and stride are all given as a single value for equal
       * dimensions in height and width or as Y, X pairs.
       * </pre>
       */
      public int getPooledH() {
        return pooledH_;
      }
      /**
       * <code>optional uint32 pooled_h = 1 [default = 0];</code>
       *
       * <pre>
       * Pad, kernel size, and stride are all given as a single value for equal
       * dimensions in height and width or as Y, X pairs.
       * </pre>
       */
      public Builder setPooledH(int value) {
        bitField0_ |= 0x00000001;
        pooledH_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 pooled_h = 1 [default = 0];</code>
       *
       * <pre>
       * Pad, kernel size, and stride are all given as a single value for equal
       * dimensions in height and width or as Y, X pairs.
       * </pre>
       */
      public Builder clearPooledH() {
        bitField0_ = (bitField0_ & ~0x00000001);
        pooledH_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 pooled_w = 2 [default = 0];
      private int pooledW_ ;
      /**
       * <code>optional uint32 pooled_w = 2 [default = 0];</code>
       *
       * <pre>
       * The pooled output width
       * </pre>
       */
      public boolean hasPooledW() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 pooled_w = 2 [default = 0];</code>
       *
       * <pre>
       * The pooled output width
       * </pre>
       */
      public int getPooledW() {
        return pooledW_;
      }
      /**
       * <code>optional uint32 pooled_w = 2 [default = 0];</code>
       *
       * <pre>
       * The pooled output width
       * </pre>
       */
      public Builder setPooledW(int value) {
        bitField0_ |= 0x00000002;
        pooledW_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 pooled_w = 2 [default = 0];</code>
       *
       * <pre>
       * The pooled output width
       * </pre>
       */
      public Builder clearPooledW() {
        bitField0_ = (bitField0_ & ~0x00000002);
        pooledW_ = 0;
        onChanged();
        return this;
      }

      // optional float spatial_scale = 3 [default = 1];
      private float spatialScale_ = 1F;
      /**
       * <code>optional float spatial_scale = 3 [default = 1];</code>
       *
       * <pre>
       * Multiplicative spatial scale factor to translate ROI coords from their
       * input scale to the scale used when pooling
       * </pre>
       */
      public boolean hasSpatialScale() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional float spatial_scale = 3 [default = 1];</code>
       *
       * <pre>
       * Multiplicative spatial scale factor to translate ROI coords from their
       * input scale to the scale used when pooling
       * </pre>
       */
      public float getSpatialScale() {
        return spatialScale_;
      }
      /**
       * <code>optional float spatial_scale = 3 [default = 1];</code>
       *
       * <pre>
       * Multiplicative spatial scale factor to translate ROI coords from their
       * input scale to the scale used when pooling
       * </pre>
       */
      public Builder setSpatialScale(float value) {
        bitField0_ |= 0x00000004;
        spatialScale_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float spatial_scale = 3 [default = 1];</code>
       *
       * <pre>
       * Multiplicative spatial scale factor to translate ROI coords from their
       * input scale to the scale used when pooling
       * </pre>
       */
      public Builder clearSpatialScale() {
        bitField0_ = (bitField0_ & ~0x00000004);
        spatialScale_ = 1F;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.ROIPoolingParameter)
    }

    static {
      defaultInstance = new ROIPoolingParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.ROIPoolingParameter)
  }

  public interface ProposalParameterOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional uint32 feat_stride = 1 [default = 16];
    /**
     * <code>optional uint32 feat_stride = 1 [default = 16];</code>
     */
    boolean hasFeatStride();
    /**
     * <code>optional uint32 feat_stride = 1 [default = 16];</code>
     */
    int getFeatStride();

    // optional uint32 base_size = 2 [default = 16];
    /**
     * <code>optional uint32 base_size = 2 [default = 16];</code>
     */
    boolean hasBaseSize();
    /**
     * <code>optional uint32 base_size = 2 [default = 16];</code>
     */
    int getBaseSize();

    // optional uint32 min_size = 3 [default = 16];
    /**
     * <code>optional uint32 min_size = 3 [default = 16];</code>
     */
    boolean hasMinSize();
    /**
     * <code>optional uint32 min_size = 3 [default = 16];</code>
     */
    int getMinSize();

    // repeated float ratio = 4;
    /**
     * <code>repeated float ratio = 4;</code>
     */
    java.util.List<java.lang.Float> getRatioList();
    /**
     * <code>repeated float ratio = 4;</code>
     */
    int getRatioCount();
    /**
     * <code>repeated float ratio = 4;</code>
     */
    float getRatio(int index);

    // repeated float scale = 5;
    /**
     * <code>repeated float scale = 5;</code>
     */
    java.util.List<java.lang.Float> getScaleList();
    /**
     * <code>repeated float scale = 5;</code>
     */
    int getScaleCount();
    /**
     * <code>repeated float scale = 5;</code>
     */
    float getScale(int index);

    // optional uint32 pre_nms_topn = 6 [default = 6000];
    /**
     * <code>optional uint32 pre_nms_topn = 6 [default = 6000];</code>
     */
    boolean hasPreNmsTopn();
    /**
     * <code>optional uint32 pre_nms_topn = 6 [default = 6000];</code>
     */
    int getPreNmsTopn();

    // optional uint32 post_nms_topn = 7 [default = 300];
    /**
     * <code>optional uint32 post_nms_topn = 7 [default = 300];</code>
     */
    boolean hasPostNmsTopn();
    /**
     * <code>optional uint32 post_nms_topn = 7 [default = 300];</code>
     */
    int getPostNmsTopn();

    // optional float nms_thresh = 8 [default = 0.7];
    /**
     * <code>optional float nms_thresh = 8 [default = 0.7];</code>
     */
    boolean hasNmsThresh();
    /**
     * <code>optional float nms_thresh = 8 [default = 0.7];</code>
     */
    float getNmsThresh();
  }
  /**
   * Protobuf type {@code caffe.ProposalParameter}
   *
   * <pre>
   * Message that stores parameters used by ProposalLayer
   * </pre>
   */
  public static final class ProposalParameter extends
      com.google.protobuf.GeneratedMessage
      implements ProposalParameterOrBuilder {
    // Use ProposalParameter.newBuilder() to construct.
    private ProposalParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ProposalParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ProposalParameter defaultInstance;
    public static ProposalParameter getDefaultInstance() {
      return defaultInstance;
    }

    public ProposalParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ProposalParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              featStride_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              baseSize_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              minSize_ = input.readUInt32();
              break;
            }
            case 37: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                ratio_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000008;
              }
              ratio_.add(input.readFloat());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                ratio_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                ratio_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 45: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                scale_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000010;
              }
              scale_.add(input.readFloat());
              break;
            }
            case 42: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010) && input.getBytesUntilLimit() > 0) {
                scale_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000010;
              }
              while (input.getBytesUntilLimit() > 0) {
                scale_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 48: {
              bitField0_ |= 0x00000008;
              preNmsTopn_ = input.readUInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000010;
              postNmsTopn_ = input.readUInt32();
              break;
            }
            case 69: {
              bitField0_ |= 0x00000020;
              nmsThresh_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          ratio_ = java.util.Collections.unmodifiableList(ratio_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          scale_ = java.util.Collections.unmodifiableList(scale_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_ProposalParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_ProposalParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.ProposalParameter.class, caffe.Caffe.ProposalParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<ProposalParameter> PARSER =
        new com.google.protobuf.AbstractParser<ProposalParameter>() {
      public ProposalParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ProposalParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ProposalParameter> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional uint32 feat_stride = 1 [default = 16];
    public static final int FEAT_STRIDE_FIELD_NUMBER = 1;
    private int featStride_;
    /**
     * <code>optional uint32 feat_stride = 1 [default = 16];</code>
     */
    public boolean hasFeatStride() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 feat_stride = 1 [default = 16];</code>
     */
    public int getFeatStride() {
      return featStride_;
    }

    // optional uint32 base_size = 2 [default = 16];
    public static final int BASE_SIZE_FIELD_NUMBER = 2;
    private int baseSize_;
    /**
     * <code>optional uint32 base_size = 2 [default = 16];</code>
     */
    public boolean hasBaseSize() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 base_size = 2 [default = 16];</code>
     */
    public int getBaseSize() {
      return baseSize_;
    }

    // optional uint32 min_size = 3 [default = 16];
    public static final int MIN_SIZE_FIELD_NUMBER = 3;
    private int minSize_;
    /**
     * <code>optional uint32 min_size = 3 [default = 16];</code>
     */
    public boolean hasMinSize() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 min_size = 3 [default = 16];</code>
     */
    public int getMinSize() {
      return minSize_;
    }

    // repeated float ratio = 4;
    public static final int RATIO_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Float> ratio_;
    /**
     * <code>repeated float ratio = 4;</code>
     */
    public java.util.List<java.lang.Float>
        getRatioList() {
      return ratio_;
    }
    /**
     * <code>repeated float ratio = 4;</code>
     */
    public int getRatioCount() {
      return ratio_.size();
    }
    /**
     * <code>repeated float ratio = 4;</code>
     */
    public float getRatio(int index) {
      return ratio_.get(index);
    }

    // repeated float scale = 5;
    public static final int SCALE_FIELD_NUMBER = 5;
    private java.util.List<java.lang.Float> scale_;
    /**
     * <code>repeated float scale = 5;</code>
     */
    public java.util.List<java.lang.Float>
        getScaleList() {
      return scale_;
    }
    /**
     * <code>repeated float scale = 5;</code>
     */
    public int getScaleCount() {
      return scale_.size();
    }
    /**
     * <code>repeated float scale = 5;</code>
     */
    public float getScale(int index) {
      return scale_.get(index);
    }

    // optional uint32 pre_nms_topn = 6 [default = 6000];
    public static final int PRE_NMS_TOPN_FIELD_NUMBER = 6;
    private int preNmsTopn_;
    /**
     * <code>optional uint32 pre_nms_topn = 6 [default = 6000];</code>
     */
    public boolean hasPreNmsTopn() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 pre_nms_topn = 6 [default = 6000];</code>
     */
    public int getPreNmsTopn() {
      return preNmsTopn_;
    }

    // optional uint32 post_nms_topn = 7 [default = 300];
    public static final int POST_NMS_TOPN_FIELD_NUMBER = 7;
    private int postNmsTopn_;
    /**
     * <code>optional uint32 post_nms_topn = 7 [default = 300];</code>
     */
    public boolean hasPostNmsTopn() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional uint32 post_nms_topn = 7 [default = 300];</code>
     */
    public int getPostNmsTopn() {
      return postNmsTopn_;
    }

    // optional float nms_thresh = 8 [default = 0.7];
    public static final int NMS_THRESH_FIELD_NUMBER = 8;
    private float nmsThresh_;
    /**
     * <code>optional float nms_thresh = 8 [default = 0.7];</code>
     */
    public boolean hasNmsThresh() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional float nms_thresh = 8 [default = 0.7];</code>
     */
    public float getNmsThresh() {
      return nmsThresh_;
    }

    private void initFields() {
      featStride_ = 16;
      baseSize_ = 16;
      minSize_ = 16;
      ratio_ = java.util.Collections.emptyList();
      scale_ = java.util.Collections.emptyList();
      preNmsTopn_ = 6000;
      postNmsTopn_ = 300;
      nmsThresh_ = 0.7F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, featStride_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, baseSize_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, minSize_);
      }
      for (int i = 0; i < ratio_.size(); i++) {
        output.writeFloat(4, ratio_.get(i));
      }
      for (int i = 0; i < scale_.size(); i++) {
        output.writeFloat(5, scale_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(6, preNmsTopn_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(7, postNmsTopn_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeFloat(8, nmsThresh_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, featStride_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, baseSize_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, minSize_);
      }
      {
        int dataSize = 0;
        dataSize = 4 * getRatioList().size();
        size += dataSize;
        size += 1 * getRatioList().size();
      }
      {
        int dataSize = 0;
        dataSize = 4 * getScaleList().size();
        size += dataSize;
        size += 1 * getScaleList().size();
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, preNmsTopn_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, postNmsTopn_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(8, nmsThresh_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.ProposalParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.ProposalParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.ProposalParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.ProposalParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.ProposalParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.ProposalParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.ProposalParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.ProposalParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.ProposalParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.ProposalParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.ProposalParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.ProposalParameter}
     *
     * <pre>
     * Message that stores parameters used by ProposalLayer
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements caffe.Caffe.ProposalParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_ProposalParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_ProposalParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.ProposalParameter.class, caffe.Caffe.ProposalParameter.Builder.class);
      }

      // Construct using caffe.Caffe.ProposalParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        featStride_ = 16;
        bitField0_ = (bitField0_ & ~0x00000001);
        baseSize_ = 16;
        bitField0_ = (bitField0_ & ~0x00000002);
        minSize_ = 16;
        bitField0_ = (bitField0_ & ~0x00000004);
        ratio_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        scale_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        preNmsTopn_ = 6000;
        bitField0_ = (bitField0_ & ~0x00000020);
        postNmsTopn_ = 300;
        bitField0_ = (bitField0_ & ~0x00000040);
        nmsThresh_ = 0.7F;
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_ProposalParameter_descriptor;
      }

      public caffe.Caffe.ProposalParameter getDefaultInstanceForType() {
        return caffe.Caffe.ProposalParameter.getDefaultInstance();
      }

      public caffe.Caffe.ProposalParameter build() {
        caffe.Caffe.ProposalParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.ProposalParameter buildPartial() {
        caffe.Caffe.ProposalParameter result = new caffe.Caffe.ProposalParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.featStride_ = featStride_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.baseSize_ = baseSize_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.minSize_ = minSize_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          ratio_ = java.util.Collections.unmodifiableList(ratio_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.ratio_ = ratio_;
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          scale_ = java.util.Collections.unmodifiableList(scale_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.scale_ = scale_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000008;
        }
        result.preNmsTopn_ = preNmsTopn_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000010;
        }
        result.postNmsTopn_ = postNmsTopn_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000020;
        }
        result.nmsThresh_ = nmsThresh_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.ProposalParameter) {
          return mergeFrom((caffe.Caffe.ProposalParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.ProposalParameter other) {
        if (other == caffe.Caffe.ProposalParameter.getDefaultInstance()) return this;
        if (other.hasFeatStride()) {
          setFeatStride(other.getFeatStride());
        }
        if (other.hasBaseSize()) {
          setBaseSize(other.getBaseSize());
        }
        if (other.hasMinSize()) {
          setMinSize(other.getMinSize());
        }
        if (!other.ratio_.isEmpty()) {
          if (ratio_.isEmpty()) {
            ratio_ = other.ratio_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureRatioIsMutable();
            ratio_.addAll(other.ratio_);
          }
          onChanged();
        }
        if (!other.scale_.isEmpty()) {
          if (scale_.isEmpty()) {
            scale_ = other.scale_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureScaleIsMutable();
            scale_.addAll(other.scale_);
          }
          onChanged();
        }
        if (other.hasPreNmsTopn()) {
          setPreNmsTopn(other.getPreNmsTopn());
        }
        if (other.hasPostNmsTopn()) {
          setPostNmsTopn(other.getPostNmsTopn());
        }
        if (other.hasNmsThresh()) {
          setNmsThresh(other.getNmsThresh());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.ProposalParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.ProposalParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional uint32 feat_stride = 1 [default = 16];
      private int featStride_ = 16;
      /**
       * <code>optional uint32 feat_stride = 1 [default = 16];</code>
       */
      public boolean hasFeatStride() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 feat_stride = 1 [default = 16];</code>
       */
      public int getFeatStride() {
        return featStride_;
      }
      /**
       * <code>optional uint32 feat_stride = 1 [default = 16];</code>
       */
      public Builder setFeatStride(int value) {
        bitField0_ |= 0x00000001;
        featStride_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 feat_stride = 1 [default = 16];</code>
       */
      public Builder clearFeatStride() {
        bitField0_ = (bitField0_ & ~0x00000001);
        featStride_ = 16;
        onChanged();
        return this;
      }

      // optional uint32 base_size = 2 [default = 16];
      private int baseSize_ = 16;
      /**
       * <code>optional uint32 base_size = 2 [default = 16];</code>
       */
      public boolean hasBaseSize() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 base_size = 2 [default = 16];</code>
       */
      public int getBaseSize() {
        return baseSize_;
      }
      /**
       * <code>optional uint32 base_size = 2 [default = 16];</code>
       */
      public Builder setBaseSize(int value) {
        bitField0_ |= 0x00000002;
        baseSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 base_size = 2 [default = 16];</code>
       */
      public Builder clearBaseSize() {
        bitField0_ = (bitField0_ & ~0x00000002);
        baseSize_ = 16;
        onChanged();
        return this;
      }

      // optional uint32 min_size = 3 [default = 16];
      private int minSize_ = 16;
      /**
       * <code>optional uint32 min_size = 3 [default = 16];</code>
       */
      public boolean hasMinSize() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 min_size = 3 [default = 16];</code>
       */
      public int getMinSize() {
        return minSize_;
      }
      /**
       * <code>optional uint32 min_size = 3 [default = 16];</code>
       */
      public Builder setMinSize(int value) {
        bitField0_ |= 0x00000004;
        minSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 min_size = 3 [default = 16];</code>
       */
      public Builder clearMinSize() {
        bitField0_ = (bitField0_ & ~0x00000004);
        minSize_ = 16;
        onChanged();
        return this;
      }

      // repeated float ratio = 4;
      private java.util.List<java.lang.Float> ratio_ = java.util.Collections.emptyList();
      private void ensureRatioIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          ratio_ = new java.util.ArrayList<java.lang.Float>(ratio_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated float ratio = 4;</code>
       */
      public java.util.List<java.lang.Float>
          getRatioList() {
        return java.util.Collections.unmodifiableList(ratio_);
      }
      /**
       * <code>repeated float ratio = 4;</code>
       */
      public int getRatioCount() {
        return ratio_.size();
      }
      /**
       * <code>repeated float ratio = 4;</code>
       */
      public float getRatio(int index) {
        return ratio_.get(index);
      }
      /**
       * <code>repeated float ratio = 4;</code>
       */
      public Builder setRatio(
          int index, float value) {
        ensureRatioIsMutable();
        ratio_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float ratio = 4;</code>
       */
      public Builder addRatio(float value) {
        ensureRatioIsMutable();
        ratio_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float ratio = 4;</code>
       */
      public Builder addAllRatio(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureRatioIsMutable();
        super.addAll(values, ratio_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float ratio = 4;</code>
       */
      public Builder clearRatio() {
        ratio_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // repeated float scale = 5;
      private java.util.List<java.lang.Float> scale_ = java.util.Collections.emptyList();
      private void ensureScaleIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          scale_ = new java.util.ArrayList<java.lang.Float>(scale_);
          bitField0_ |= 0x00000010;
         }
      }
      /**
       * <code>repeated float scale = 5;</code>
       */
      public java.util.List<java.lang.Float>
          getScaleList() {
        return java.util.Collections.unmodifiableList(scale_);
      }
      /**
       * <code>repeated float scale = 5;</code>
       */
      public int getScaleCount() {
        return scale_.size();
      }
      /**
       * <code>repeated float scale = 5;</code>
       */
      public float getScale(int index) {
        return scale_.get(index);
      }
      /**
       * <code>repeated float scale = 5;</code>
       */
      public Builder setScale(
          int index, float value) {
        ensureScaleIsMutable();
        scale_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float scale = 5;</code>
       */
      public Builder addScale(float value) {
        ensureScaleIsMutable();
        scale_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float scale = 5;</code>
       */
      public Builder addAllScale(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureScaleIsMutable();
        super.addAll(values, scale_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float scale = 5;</code>
       */
      public Builder clearScale() {
        scale_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }

      // optional uint32 pre_nms_topn = 6 [default = 6000];
      private int preNmsTopn_ = 6000;
      /**
       * <code>optional uint32 pre_nms_topn = 6 [default = 6000];</code>
       */
      public boolean hasPreNmsTopn() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional uint32 pre_nms_topn = 6 [default = 6000];</code>
       */
      public int getPreNmsTopn() {
        return preNmsTopn_;
      }
      /**
       * <code>optional uint32 pre_nms_topn = 6 [default = 6000];</code>
       */
      public Builder setPreNmsTopn(int value) {
        bitField0_ |= 0x00000020;
        preNmsTopn_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 pre_nms_topn = 6 [default = 6000];</code>
       */
      public Builder clearPreNmsTopn() {
        bitField0_ = (bitField0_ & ~0x00000020);
        preNmsTopn_ = 6000;
        onChanged();
        return this;
      }

      // optional uint32 post_nms_topn = 7 [default = 300];
      private int postNmsTopn_ = 300;
      /**
       * <code>optional uint32 post_nms_topn = 7 [default = 300];</code>
       */
      public boolean hasPostNmsTopn() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional uint32 post_nms_topn = 7 [default = 300];</code>
       */
      public int getPostNmsTopn() {
        return postNmsTopn_;
      }
      /**
       * <code>optional uint32 post_nms_topn = 7 [default = 300];</code>
       */
      public Builder setPostNmsTopn(int value) {
        bitField0_ |= 0x00000040;
        postNmsTopn_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 post_nms_topn = 7 [default = 300];</code>
       */
      public Builder clearPostNmsTopn() {
        bitField0_ = (bitField0_ & ~0x00000040);
        postNmsTopn_ = 300;
        onChanged();
        return this;
      }

      // optional float nms_thresh = 8 [default = 0.7];
      private float nmsThresh_ = 0.7F;
      /**
       * <code>optional float nms_thresh = 8 [default = 0.7];</code>
       */
      public boolean hasNmsThresh() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional float nms_thresh = 8 [default = 0.7];</code>
       */
      public float getNmsThresh() {
        return nmsThresh_;
      }
      /**
       * <code>optional float nms_thresh = 8 [default = 0.7];</code>
       */
      public Builder setNmsThresh(float value) {
        bitField0_ |= 0x00000080;
        nmsThresh_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float nms_thresh = 8 [default = 0.7];</code>
       */
      public Builder clearNmsThresh() {
        bitField0_ = (bitField0_ & ~0x00000080);
        nmsThresh_ = 0.7F;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.ProposalParameter)
    }

    static {
      defaultInstance = new ProposalParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.ProposalParameter)
  }

  public interface SmoothL1LossParameterOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional float sigma = 1 [default = 1];
    /**
     * <code>optional float sigma = 1 [default = 1];</code>
     *
     * <pre>
     * SmoothL1Loss(x) =
     *   0.5 * (sigma * x) ** 2    -- if x &lt; 1.0 / sigma / sigma
     *   |x| - 0.5 / sigma / sigma -- otherwise
     * </pre>
     */
    boolean hasSigma();
    /**
     * <code>optional float sigma = 1 [default = 1];</code>
     *
     * <pre>
     * SmoothL1Loss(x) =
     *   0.5 * (sigma * x) ** 2    -- if x &lt; 1.0 / sigma / sigma
     *   |x| - 0.5 / sigma / sigma -- otherwise
     * </pre>
     */
    float getSigma();
  }
  /**
   * Protobuf type {@code caffe.SmoothL1LossParameter}
   */
  public static final class SmoothL1LossParameter extends
      com.google.protobuf.GeneratedMessage
      implements SmoothL1LossParameterOrBuilder {
    // Use SmoothL1LossParameter.newBuilder() to construct.
    private SmoothL1LossParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private SmoothL1LossParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final SmoothL1LossParameter defaultInstance;
    public static SmoothL1LossParameter getDefaultInstance() {
      return defaultInstance;
    }

    public SmoothL1LossParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private SmoothL1LossParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 13: {
              bitField0_ |= 0x00000001;
              sigma_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_SmoothL1LossParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_SmoothL1LossParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.SmoothL1LossParameter.class, caffe.Caffe.SmoothL1LossParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<SmoothL1LossParameter> PARSER =
        new com.google.protobuf.AbstractParser<SmoothL1LossParameter>() {
      public SmoothL1LossParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SmoothL1LossParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<SmoothL1LossParameter> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional float sigma = 1 [default = 1];
    public static final int SIGMA_FIELD_NUMBER = 1;
    private float sigma_;
    /**
     * <code>optional float sigma = 1 [default = 1];</code>
     *
     * <pre>
     * SmoothL1Loss(x) =
     *   0.5 * (sigma * x) ** 2    -- if x &lt; 1.0 / sigma / sigma
     *   |x| - 0.5 / sigma / sigma -- otherwise
     * </pre>
     */
    public boolean hasSigma() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional float sigma = 1 [default = 1];</code>
     *
     * <pre>
     * SmoothL1Loss(x) =
     *   0.5 * (sigma * x) ** 2    -- if x &lt; 1.0 / sigma / sigma
     *   |x| - 0.5 / sigma / sigma -- otherwise
     * </pre>
     */
    public float getSigma() {
      return sigma_;
    }

    private void initFields() {
      sigma_ = 1F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeFloat(1, sigma_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(1, sigma_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.SmoothL1LossParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.SmoothL1LossParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.SmoothL1LossParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.SmoothL1LossParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.SmoothL1LossParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.SmoothL1LossParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.SmoothL1LossParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.SmoothL1LossParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.SmoothL1LossParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.SmoothL1LossParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.SmoothL1LossParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.SmoothL1LossParameter}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements caffe.Caffe.SmoothL1LossParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_SmoothL1LossParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_SmoothL1LossParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.SmoothL1LossParameter.class, caffe.Caffe.SmoothL1LossParameter.Builder.class);
      }

      // Construct using caffe.Caffe.SmoothL1LossParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        sigma_ = 1F;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_SmoothL1LossParameter_descriptor;
      }

      public caffe.Caffe.SmoothL1LossParameter getDefaultInstanceForType() {
        return caffe.Caffe.SmoothL1LossParameter.getDefaultInstance();
      }

      public caffe.Caffe.SmoothL1LossParameter build() {
        caffe.Caffe.SmoothL1LossParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.SmoothL1LossParameter buildPartial() {
        caffe.Caffe.SmoothL1LossParameter result = new caffe.Caffe.SmoothL1LossParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.sigma_ = sigma_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.SmoothL1LossParameter) {
          return mergeFrom((caffe.Caffe.SmoothL1LossParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.SmoothL1LossParameter other) {
        if (other == caffe.Caffe.SmoothL1LossParameter.getDefaultInstance()) return this;
        if (other.hasSigma()) {
          setSigma(other.getSigma());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.SmoothL1LossParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.SmoothL1LossParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional float sigma = 1 [default = 1];
      private float sigma_ = 1F;
      /**
       * <code>optional float sigma = 1 [default = 1];</code>
       *
       * <pre>
       * SmoothL1Loss(x) =
       *   0.5 * (sigma * x) ** 2    -- if x &lt; 1.0 / sigma / sigma
       *   |x| - 0.5 / sigma / sigma -- otherwise
       * </pre>
       */
      public boolean hasSigma() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional float sigma = 1 [default = 1];</code>
       *
       * <pre>
       * SmoothL1Loss(x) =
       *   0.5 * (sigma * x) ** 2    -- if x &lt; 1.0 / sigma / sigma
       *   |x| - 0.5 / sigma / sigma -- otherwise
       * </pre>
       */
      public float getSigma() {
        return sigma_;
      }
      /**
       * <code>optional float sigma = 1 [default = 1];</code>
       *
       * <pre>
       * SmoothL1Loss(x) =
       *   0.5 * (sigma * x) ** 2    -- if x &lt; 1.0 / sigma / sigma
       *   |x| - 0.5 / sigma / sigma -- otherwise
       * </pre>
       */
      public Builder setSigma(float value) {
        bitField0_ |= 0x00000001;
        sigma_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float sigma = 1 [default = 1];</code>
       *
       * <pre>
       * SmoothL1Loss(x) =
       *   0.5 * (sigma * x) ** 2    -- if x &lt; 1.0 / sigma / sigma
       *   |x| - 0.5 / sigma / sigma -- otherwise
       * </pre>
       */
      public Builder clearSigma() {
        bitField0_ = (bitField0_ & ~0x00000001);
        sigma_ = 1F;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.SmoothL1LossParameter)
    }

    static {
      defaultInstance = new SmoothL1LossParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.SmoothL1LossParameter)
  }

  public interface TransformationParameterOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional float scale = 1 [default = 1];
    /**
     * <code>optional float scale = 1 [default = 1];</code>
     *
     * <pre>
     * For data pre-processing, we can do simple scaling and subtracting the
     * data mean, if provided. Note that the mean subtraction is always carried
     * out before scaling.
     * </pre>
     */
    boolean hasScale();
    /**
     * <code>optional float scale = 1 [default = 1];</code>
     *
     * <pre>
     * For data pre-processing, we can do simple scaling and subtracting the
     * data mean, if provided. Note that the mean subtraction is always carried
     * out before scaling.
     * </pre>
     */
    float getScale();

    // optional bool mirror = 2 [default = false];
    /**
     * <code>optional bool mirror = 2 [default = false];</code>
     *
     * <pre>
     * Specify if we want to randomly mirror data.
     * </pre>
     */
    boolean hasMirror();
    /**
     * <code>optional bool mirror = 2 [default = false];</code>
     *
     * <pre>
     * Specify if we want to randomly mirror data.
     * </pre>
     */
    boolean getMirror();

    // optional uint32 crop_size = 3 [default = 0];
    /**
     * <code>optional uint32 crop_size = 3 [default = 0];</code>
     *
     * <pre>
     * Specify if we would like to randomly crop an image.
     * </pre>
     */
    boolean hasCropSize();
    /**
     * <code>optional uint32 crop_size = 3 [default = 0];</code>
     *
     * <pre>
     * Specify if we would like to randomly crop an image.
     * </pre>
     */
    int getCropSize();

    // optional string mean_file = 4;
    /**
     * <code>optional string mean_file = 4;</code>
     *
     * <pre>
     * mean_file and mean_value cannot be specified at the same time
     * </pre>
     */
    boolean hasMeanFile();
    /**
     * <code>optional string mean_file = 4;</code>
     *
     * <pre>
     * mean_file and mean_value cannot be specified at the same time
     * </pre>
     */
    java.lang.String getMeanFile();
    /**
     * <code>optional string mean_file = 4;</code>
     *
     * <pre>
     * mean_file and mean_value cannot be specified at the same time
     * </pre>
     */
    com.google.protobuf.ByteString
        getMeanFileBytes();

    // repeated float mean_value = 5;
    /**
     * <code>repeated float mean_value = 5;</code>
     *
     * <pre>
     * if specified can be repeated once (would substract it from all the channels)
     * or can be repeated the same number of times as channels
     * (would subtract them from the corresponding channel)
     * </pre>
     */
    java.util.List<java.lang.Float> getMeanValueList();
    /**
     * <code>repeated float mean_value = 5;</code>
     *
     * <pre>
     * if specified can be repeated once (would substract it from all the channels)
     * or can be repeated the same number of times as channels
     * (would subtract them from the corresponding channel)
     * </pre>
     */
    int getMeanValueCount();
    /**
     * <code>repeated float mean_value = 5;</code>
     *
     * <pre>
     * if specified can be repeated once (would substract it from all the channels)
     * or can be repeated the same number of times as channels
     * (would subtract them from the corresponding channel)
     * </pre>
     */
    float getMeanValue(int index);

    // optional bool force_color = 6 [default = false];
    /**
     * <code>optional bool force_color = 6 [default = false];</code>
     *
     * <pre>
     * Force the decoded image to have 3 color channels.
     * </pre>
     */
    boolean hasForceColor();
    /**
     * <code>optional bool force_color = 6 [default = false];</code>
     *
     * <pre>
     * Force the decoded image to have 3 color channels.
     * </pre>
     */
    boolean getForceColor();

    // optional bool force_gray = 7 [default = false];
    /**
     * <code>optional bool force_gray = 7 [default = false];</code>
     *
     * <pre>
     * Force the decoded image to have 1 color channels.
     * </pre>
     */
    boolean hasForceGray();
    /**
     * <code>optional bool force_gray = 7 [default = false];</code>
     *
     * <pre>
     * Force the decoded image to have 1 color channels.
     * </pre>
     */
    boolean getForceGray();
  }
  /**
   * Protobuf type {@code caffe.TransformationParameter}
   *
   * <pre>
   * Message that stores parameters used to apply transformation
   * to the data layer's data
   * </pre>
   */
  public static final class TransformationParameter extends
      com.google.protobuf.GeneratedMessage
      implements TransformationParameterOrBuilder {
    // Use TransformationParameter.newBuilder() to construct.
    private TransformationParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TransformationParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final TransformationParameter defaultInstance;
    public static TransformationParameter getDefaultInstance() {
      return defaultInstance;
    }

    public TransformationParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private TransformationParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 13: {
              bitField0_ |= 0x00000001;
              scale_ = input.readFloat();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              mirror_ = input.readBool();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              cropSize_ = input.readUInt32();
              break;
            }
            case 34: {
              bitField0_ |= 0x00000008;
              meanFile_ = input.readBytes();
              break;
            }
            case 45: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                meanValue_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000010;
              }
              meanValue_.add(input.readFloat());
              break;
            }
            case 42: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010) && input.getBytesUntilLimit() > 0) {
                meanValue_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000010;
              }
              while (input.getBytesUntilLimit() > 0) {
                meanValue_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 48: {
              bitField0_ |= 0x00000010;
              forceColor_ = input.readBool();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000020;
              forceGray_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          meanValue_ = java.util.Collections.unmodifiableList(meanValue_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_TransformationParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_TransformationParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.TransformationParameter.class, caffe.Caffe.TransformationParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<TransformationParameter> PARSER =
        new com.google.protobuf.AbstractParser<TransformationParameter>() {
      public TransformationParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TransformationParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TransformationParameter> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional float scale = 1 [default = 1];
    public static final int SCALE_FIELD_NUMBER = 1;
    private float scale_;
    /**
     * <code>optional float scale = 1 [default = 1];</code>
     *
     * <pre>
     * For data pre-processing, we can do simple scaling and subtracting the
     * data mean, if provided. Note that the mean subtraction is always carried
     * out before scaling.
     * </pre>
     */
    public boolean hasScale() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional float scale = 1 [default = 1];</code>
     *
     * <pre>
     * For data pre-processing, we can do simple scaling and subtracting the
     * data mean, if provided. Note that the mean subtraction is always carried
     * out before scaling.
     * </pre>
     */
    public float getScale() {
      return scale_;
    }

    // optional bool mirror = 2 [default = false];
    public static final int MIRROR_FIELD_NUMBER = 2;
    private boolean mirror_;
    /**
     * <code>optional bool mirror = 2 [default = false];</code>
     *
     * <pre>
     * Specify if we want to randomly mirror data.
     * </pre>
     */
    public boolean hasMirror() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional bool mirror = 2 [default = false];</code>
     *
     * <pre>
     * Specify if we want to randomly mirror data.
     * </pre>
     */
    public boolean getMirror() {
      return mirror_;
    }

    // optional uint32 crop_size = 3 [default = 0];
    public static final int CROP_SIZE_FIELD_NUMBER = 3;
    private int cropSize_;
    /**
     * <code>optional uint32 crop_size = 3 [default = 0];</code>
     *
     * <pre>
     * Specify if we would like to randomly crop an image.
     * </pre>
     */
    public boolean hasCropSize() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 crop_size = 3 [default = 0];</code>
     *
     * <pre>
     * Specify if we would like to randomly crop an image.
     * </pre>
     */
    public int getCropSize() {
      return cropSize_;
    }

    // optional string mean_file = 4;
    public static final int MEAN_FILE_FIELD_NUMBER = 4;
    private java.lang.Object meanFile_;
    /**
     * <code>optional string mean_file = 4;</code>
     *
     * <pre>
     * mean_file and mean_value cannot be specified at the same time
     * </pre>
     */
    public boolean hasMeanFile() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional string mean_file = 4;</code>
     *
     * <pre>
     * mean_file and mean_value cannot be specified at the same time
     * </pre>
     */
    public java.lang.String getMeanFile() {
      java.lang.Object ref = meanFile_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          meanFile_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string mean_file = 4;</code>
     *
     * <pre>
     * mean_file and mean_value cannot be specified at the same time
     * </pre>
     */
    public com.google.protobuf.ByteString
        getMeanFileBytes() {
      java.lang.Object ref = meanFile_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        meanFile_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // repeated float mean_value = 5;
    public static final int MEAN_VALUE_FIELD_NUMBER = 5;
    private java.util.List<java.lang.Float> meanValue_;
    /**
     * <code>repeated float mean_value = 5;</code>
     *
     * <pre>
     * if specified can be repeated once (would substract it from all the channels)
     * or can be repeated the same number of times as channels
     * (would subtract them from the corresponding channel)
     * </pre>
     */
    public java.util.List<java.lang.Float>
        getMeanValueList() {
      return meanValue_;
    }
    /**
     * <code>repeated float mean_value = 5;</code>
     *
     * <pre>
     * if specified can be repeated once (would substract it from all the channels)
     * or can be repeated the same number of times as channels
     * (would subtract them from the corresponding channel)
     * </pre>
     */
    public int getMeanValueCount() {
      return meanValue_.size();
    }
    /**
     * <code>repeated float mean_value = 5;</code>
     *
     * <pre>
     * if specified can be repeated once (would substract it from all the channels)
     * or can be repeated the same number of times as channels
     * (would subtract them from the corresponding channel)
     * </pre>
     */
    public float getMeanValue(int index) {
      return meanValue_.get(index);
    }

    // optional bool force_color = 6 [default = false];
    public static final int FORCE_COLOR_FIELD_NUMBER = 6;
    private boolean forceColor_;
    /**
     * <code>optional bool force_color = 6 [default = false];</code>
     *
     * <pre>
     * Force the decoded image to have 3 color channels.
     * </pre>
     */
    public boolean hasForceColor() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional bool force_color = 6 [default = false];</code>
     *
     * <pre>
     * Force the decoded image to have 3 color channels.
     * </pre>
     */
    public boolean getForceColor() {
      return forceColor_;
    }

    // optional bool force_gray = 7 [default = false];
    public static final int FORCE_GRAY_FIELD_NUMBER = 7;
    private boolean forceGray_;
    /**
     * <code>optional bool force_gray = 7 [default = false];</code>
     *
     * <pre>
     * Force the decoded image to have 1 color channels.
     * </pre>
     */
    public boolean hasForceGray() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional bool force_gray = 7 [default = false];</code>
     *
     * <pre>
     * Force the decoded image to have 1 color channels.
     * </pre>
     */
    public boolean getForceGray() {
      return forceGray_;
    }

    private void initFields() {
      scale_ = 1F;
      mirror_ = false;
      cropSize_ = 0;
      meanFile_ = "";
      meanValue_ = java.util.Collections.emptyList();
      forceColor_ = false;
      forceGray_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeFloat(1, scale_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBool(2, mirror_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, cropSize_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(4, getMeanFileBytes());
      }
      for (int i = 0; i < meanValue_.size(); i++) {
        output.writeFloat(5, meanValue_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBool(6, forceColor_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeBool(7, forceGray_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(1, scale_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, mirror_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, cropSize_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, getMeanFileBytes());
      }
      {
        int dataSize = 0;
        dataSize = 4 * getMeanValueList().size();
        size += dataSize;
        size += 1 * getMeanValueList().size();
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, forceColor_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7, forceGray_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.TransformationParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.TransformationParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.TransformationParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.TransformationParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.TransformationParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.TransformationParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.TransformationParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.TransformationParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.TransformationParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.TransformationParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.TransformationParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.TransformationParameter}
     *
     * <pre>
     * Message that stores parameters used to apply transformation
     * to the data layer's data
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements caffe.Caffe.TransformationParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_TransformationParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_TransformationParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.TransformationParameter.class, caffe.Caffe.TransformationParameter.Builder.class);
      }

      // Construct using caffe.Caffe.TransformationParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        scale_ = 1F;
        bitField0_ = (bitField0_ & ~0x00000001);
        mirror_ = false;
        bitField0_ = (bitField0_ & ~0x00000002);
        cropSize_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        meanFile_ = "";
        bitField0_ = (bitField0_ & ~0x00000008);
        meanValue_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        forceColor_ = false;
        bitField0_ = (bitField0_ & ~0x00000020);
        forceGray_ = false;
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_TransformationParameter_descriptor;
      }

      public caffe.Caffe.TransformationParameter getDefaultInstanceForType() {
        return caffe.Caffe.TransformationParameter.getDefaultInstance();
      }

      public caffe.Caffe.TransformationParameter build() {
        caffe.Caffe.TransformationParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.TransformationParameter buildPartial() {
        caffe.Caffe.TransformationParameter result = new caffe.Caffe.TransformationParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.scale_ = scale_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.mirror_ = mirror_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.cropSize_ = cropSize_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.meanFile_ = meanFile_;
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          meanValue_ = java.util.Collections.unmodifiableList(meanValue_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.meanValue_ = meanValue_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000010;
        }
        result.forceColor_ = forceColor_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000020;
        }
        result.forceGray_ = forceGray_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.TransformationParameter) {
          return mergeFrom((caffe.Caffe.TransformationParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.TransformationParameter other) {
        if (other == caffe.Caffe.TransformationParameter.getDefaultInstance()) return this;
        if (other.hasScale()) {
          setScale(other.getScale());
        }
        if (other.hasMirror()) {
          setMirror(other.getMirror());
        }
        if (other.hasCropSize()) {
          setCropSize(other.getCropSize());
        }
        if (other.hasMeanFile()) {
          bitField0_ |= 0x00000008;
          meanFile_ = other.meanFile_;
          onChanged();
        }
        if (!other.meanValue_.isEmpty()) {
          if (meanValue_.isEmpty()) {
            meanValue_ = other.meanValue_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureMeanValueIsMutable();
            meanValue_.addAll(other.meanValue_);
          }
          onChanged();
        }
        if (other.hasForceColor()) {
          setForceColor(other.getForceColor());
        }
        if (other.hasForceGray()) {
          setForceGray(other.getForceGray());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.TransformationParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.TransformationParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional float scale = 1 [default = 1];
      private float scale_ = 1F;
      /**
       * <code>optional float scale = 1 [default = 1];</code>
       *
       * <pre>
       * For data pre-processing, we can do simple scaling and subtracting the
       * data mean, if provided. Note that the mean subtraction is always carried
       * out before scaling.
       * </pre>
       */
      public boolean hasScale() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional float scale = 1 [default = 1];</code>
       *
       * <pre>
       * For data pre-processing, we can do simple scaling and subtracting the
       * data mean, if provided. Note that the mean subtraction is always carried
       * out before scaling.
       * </pre>
       */
      public float getScale() {
        return scale_;
      }
      /**
       * <code>optional float scale = 1 [default = 1];</code>
       *
       * <pre>
       * For data pre-processing, we can do simple scaling and subtracting the
       * data mean, if provided. Note that the mean subtraction is always carried
       * out before scaling.
       * </pre>
       */
      public Builder setScale(float value) {
        bitField0_ |= 0x00000001;
        scale_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float scale = 1 [default = 1];</code>
       *
       * <pre>
       * For data pre-processing, we can do simple scaling and subtracting the
       * data mean, if provided. Note that the mean subtraction is always carried
       * out before scaling.
       * </pre>
       */
      public Builder clearScale() {
        bitField0_ = (bitField0_ & ~0x00000001);
        scale_ = 1F;
        onChanged();
        return this;
      }

      // optional bool mirror = 2 [default = false];
      private boolean mirror_ ;
      /**
       * <code>optional bool mirror = 2 [default = false];</code>
       *
       * <pre>
       * Specify if we want to randomly mirror data.
       * </pre>
       */
      public boolean hasMirror() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional bool mirror = 2 [default = false];</code>
       *
       * <pre>
       * Specify if we want to randomly mirror data.
       * </pre>
       */
      public boolean getMirror() {
        return mirror_;
      }
      /**
       * <code>optional bool mirror = 2 [default = false];</code>
       *
       * <pre>
       * Specify if we want to randomly mirror data.
       * </pre>
       */
      public Builder setMirror(boolean value) {
        bitField0_ |= 0x00000002;
        mirror_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool mirror = 2 [default = false];</code>
       *
       * <pre>
       * Specify if we want to randomly mirror data.
       * </pre>
       */
      public Builder clearMirror() {
        bitField0_ = (bitField0_ & ~0x00000002);
        mirror_ = false;
        onChanged();
        return this;
      }

      // optional uint32 crop_size = 3 [default = 0];
      private int cropSize_ ;
      /**
       * <code>optional uint32 crop_size = 3 [default = 0];</code>
       *
       * <pre>
       * Specify if we would like to randomly crop an image.
       * </pre>
       */
      public boolean hasCropSize() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 crop_size = 3 [default = 0];</code>
       *
       * <pre>
       * Specify if we would like to randomly crop an image.
       * </pre>
       */
      public int getCropSize() {
        return cropSize_;
      }
      /**
       * <code>optional uint32 crop_size = 3 [default = 0];</code>
       *
       * <pre>
       * Specify if we would like to randomly crop an image.
       * </pre>
       */
      public Builder setCropSize(int value) {
        bitField0_ |= 0x00000004;
        cropSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 crop_size = 3 [default = 0];</code>
       *
       * <pre>
       * Specify if we would like to randomly crop an image.
       * </pre>
       */
      public Builder clearCropSize() {
        bitField0_ = (bitField0_ & ~0x00000004);
        cropSize_ = 0;
        onChanged();
        return this;
      }

      // optional string mean_file = 4;
      private java.lang.Object meanFile_ = "";
      /**
       * <code>optional string mean_file = 4;</code>
       *
       * <pre>
       * mean_file and mean_value cannot be specified at the same time
       * </pre>
       */
      public boolean hasMeanFile() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional string mean_file = 4;</code>
       *
       * <pre>
       * mean_file and mean_value cannot be specified at the same time
       * </pre>
       */
      public java.lang.String getMeanFile() {
        java.lang.Object ref = meanFile_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          meanFile_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string mean_file = 4;</code>
       *
       * <pre>
       * mean_file and mean_value cannot be specified at the same time
       * </pre>
       */
      public com.google.protobuf.ByteString
          getMeanFileBytes() {
        java.lang.Object ref = meanFile_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          meanFile_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string mean_file = 4;</code>
       *
       * <pre>
       * mean_file and mean_value cannot be specified at the same time
       * </pre>
       */
      public Builder setMeanFile(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        meanFile_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string mean_file = 4;</code>
       *
       * <pre>
       * mean_file and mean_value cannot be specified at the same time
       * </pre>
       */
      public Builder clearMeanFile() {
        bitField0_ = (bitField0_ & ~0x00000008);
        meanFile_ = getDefaultInstance().getMeanFile();
        onChanged();
        return this;
      }
      /**
       * <code>optional string mean_file = 4;</code>
       *
       * <pre>
       * mean_file and mean_value cannot be specified at the same time
       * </pre>
       */
      public Builder setMeanFileBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        meanFile_ = value;
        onChanged();
        return this;
      }

      // repeated float mean_value = 5;
      private java.util.List<java.lang.Float> meanValue_ = java.util.Collections.emptyList();
      private void ensureMeanValueIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          meanValue_ = new java.util.ArrayList<java.lang.Float>(meanValue_);
          bitField0_ |= 0x00000010;
         }
      }
      /**
       * <code>repeated float mean_value = 5;</code>
       *
       * <pre>
       * if specified can be repeated once (would substract it from all the channels)
       * or can be repeated the same number of times as channels
       * (would subtract them from the corresponding channel)
       * </pre>
       */
      public java.util.List<java.lang.Float>
          getMeanValueList() {
        return java.util.Collections.unmodifiableList(meanValue_);
      }
      /**
       * <code>repeated float mean_value = 5;</code>
       *
       * <pre>
       * if specified can be repeated once (would substract it from all the channels)
       * or can be repeated the same number of times as channels
       * (would subtract them from the corresponding channel)
       * </pre>
       */
      public int getMeanValueCount() {
        return meanValue_.size();
      }
      /**
       * <code>repeated float mean_value = 5;</code>
       *
       * <pre>
       * if specified can be repeated once (would substract it from all the channels)
       * or can be repeated the same number of times as channels
       * (would subtract them from the corresponding channel)
       * </pre>
       */
      public float getMeanValue(int index) {
        return meanValue_.get(index);
      }
      /**
       * <code>repeated float mean_value = 5;</code>
       *
       * <pre>
       * if specified can be repeated once (would substract it from all the channels)
       * or can be repeated the same number of times as channels
       * (would subtract them from the corresponding channel)
       * </pre>
       */
      public Builder setMeanValue(
          int index, float value) {
        ensureMeanValueIsMutable();
        meanValue_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float mean_value = 5;</code>
       *
       * <pre>
       * if specified can be repeated once (would substract it from all the channels)
       * or can be repeated the same number of times as channels
       * (would subtract them from the corresponding channel)
       * </pre>
       */
      public Builder addMeanValue(float value) {
        ensureMeanValueIsMutable();
        meanValue_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float mean_value = 5;</code>
       *
       * <pre>
       * if specified can be repeated once (would substract it from all the channels)
       * or can be repeated the same number of times as channels
       * (would subtract them from the corresponding channel)
       * </pre>
       */
      public Builder addAllMeanValue(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureMeanValueIsMutable();
        super.addAll(values, meanValue_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float mean_value = 5;</code>
       *
       * <pre>
       * if specified can be repeated once (would substract it from all the channels)
       * or can be repeated the same number of times as channels
       * (would subtract them from the corresponding channel)
       * </pre>
       */
      public Builder clearMeanValue() {
        meanValue_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }

      // optional bool force_color = 6 [default = false];
      private boolean forceColor_ ;
      /**
       * <code>optional bool force_color = 6 [default = false];</code>
       *
       * <pre>
       * Force the decoded image to have 3 color channels.
       * </pre>
       */
      public boolean hasForceColor() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional bool force_color = 6 [default = false];</code>
       *
       * <pre>
       * Force the decoded image to have 3 color channels.
       * </pre>
       */
      public boolean getForceColor() {
        return forceColor_;
      }
      /**
       * <code>optional bool force_color = 6 [default = false];</code>
       *
       * <pre>
       * Force the decoded image to have 3 color channels.
       * </pre>
       */
      public Builder setForceColor(boolean value) {
        bitField0_ |= 0x00000020;
        forceColor_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool force_color = 6 [default = false];</code>
       *
       * <pre>
       * Force the decoded image to have 3 color channels.
       * </pre>
       */
      public Builder clearForceColor() {
        bitField0_ = (bitField0_ & ~0x00000020);
        forceColor_ = false;
        onChanged();
        return this;
      }

      // optional bool force_gray = 7 [default = false];
      private boolean forceGray_ ;
      /**
       * <code>optional bool force_gray = 7 [default = false];</code>
       *
       * <pre>
       * Force the decoded image to have 1 color channels.
       * </pre>
       */
      public boolean hasForceGray() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional bool force_gray = 7 [default = false];</code>
       *
       * <pre>
       * Force the decoded image to have 1 color channels.
       * </pre>
       */
      public boolean getForceGray() {
        return forceGray_;
      }
      /**
       * <code>optional bool force_gray = 7 [default = false];</code>
       *
       * <pre>
       * Force the decoded image to have 1 color channels.
       * </pre>
       */
      public Builder setForceGray(boolean value) {
        bitField0_ |= 0x00000040;
        forceGray_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool force_gray = 7 [default = false];</code>
       *
       * <pre>
       * Force the decoded image to have 1 color channels.
       * </pre>
       */
      public Builder clearForceGray() {
        bitField0_ = (bitField0_ & ~0x00000040);
        forceGray_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.TransformationParameter)
    }

    static {
      defaultInstance = new TransformationParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.TransformationParameter)
  }

  public interface LossParameterOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 ignore_label = 1;
    /**
     * <code>optional int32 ignore_label = 1;</code>
     *
     * <pre>
     * If specified, ignore instances with the given label.
     * </pre>
     */
    boolean hasIgnoreLabel();
    /**
     * <code>optional int32 ignore_label = 1;</code>
     *
     * <pre>
     * If specified, ignore instances with the given label.
     * </pre>
     */
    int getIgnoreLabel();

    // optional .caffe.LossParameter.NormalizationMode normalization = 3 [default = VALID];
    /**
     * <code>optional .caffe.LossParameter.NormalizationMode normalization = 3 [default = VALID];</code>
     */
    boolean hasNormalization();
    /**
     * <code>optional .caffe.LossParameter.NormalizationMode normalization = 3 [default = VALID];</code>
     */
    caffe.Caffe.LossParameter.NormalizationMode getNormalization();

    // optional bool normalize = 2;
    /**
     * <code>optional bool normalize = 2;</code>
     *
     * <pre>
     * Deprecated.  Ignored if normalization is specified.  If normalization
     * is not specified, then setting this to false will be equivalent to
     * normalization = BATCH_SIZE to be consistent with previous behavior.
     * </pre>
     */
    boolean hasNormalize();
    /**
     * <code>optional bool normalize = 2;</code>
     *
     * <pre>
     * Deprecated.  Ignored if normalization is specified.  If normalization
     * is not specified, then setting this to false will be equivalent to
     * normalization = BATCH_SIZE to be consistent with previous behavior.
     * </pre>
     */
    boolean getNormalize();
  }
  /**
   * Protobuf type {@code caffe.LossParameter}
   *
   * <pre>
   * Message that stores parameters shared by loss layers
   * </pre>
   */
  public static final class LossParameter extends
      com.google.protobuf.GeneratedMessage
      implements LossParameterOrBuilder {
    // Use LossParameter.newBuilder() to construct.
    private LossParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private LossParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final LossParameter defaultInstance;
    public static LossParameter getDefaultInstance() {
      return defaultInstance;
    }

    public LossParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private LossParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              ignoreLabel_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000004;
              normalize_ = input.readBool();
              break;
            }
            case 24: {
              int rawValue = input.readEnum();
              caffe.Caffe.LossParameter.NormalizationMode value = caffe.Caffe.LossParameter.NormalizationMode.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(3, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                normalization_ = value;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_LossParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_LossParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.LossParameter.class, caffe.Caffe.LossParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<LossParameter> PARSER =
        new com.google.protobuf.AbstractParser<LossParameter>() {
      public LossParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new LossParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<LossParameter> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code caffe.LossParameter.NormalizationMode}
     *
     * <pre>
     * How to normalize the loss for loss layers that aggregate across batches,
     * spatial dimensions, or other dimensions.  Currently only implemented in
     * SoftmaxWithLoss layer.
     * </pre>
     */
    public enum NormalizationMode
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>FULL = 0;</code>
       *
       * <pre>
       * Divide by the number of examples in the batch times spatial dimensions.
       * Outputs that receive the ignore label will NOT be ignored in computing
       * the normalization factor.
       * </pre>
       */
      FULL(0, 0),
      /**
       * <code>VALID = 1;</code>
       *
       * <pre>
       * Divide by the total number of output locations that do not take the
       * ignore_label.  If ignore_label is not set, this behaves like FULL.
       * </pre>
       */
      VALID(1, 1),
      /**
       * <code>BATCH_SIZE = 2;</code>
       *
       * <pre>
       * Divide by the batch size.
       * </pre>
       */
      BATCH_SIZE(2, 2),
      /**
       * <code>NONE = 3;</code>
       *
       * <pre>
       * Do not normalize the loss.
       * </pre>
       */
      NONE(3, 3),
      ;

      /**
       * <code>FULL = 0;</code>
       *
       * <pre>
       * Divide by the number of examples in the batch times spatial dimensions.
       * Outputs that receive the ignore label will NOT be ignored in computing
       * the normalization factor.
       * </pre>
       */
      public static final int FULL_VALUE = 0;
      /**
       * <code>VALID = 1;</code>
       *
       * <pre>
       * Divide by the total number of output locations that do not take the
       * ignore_label.  If ignore_label is not set, this behaves like FULL.
       * </pre>
       */
      public static final int VALID_VALUE = 1;
      /**
       * <code>BATCH_SIZE = 2;</code>
       *
       * <pre>
       * Divide by the batch size.
       * </pre>
       */
      public static final int BATCH_SIZE_VALUE = 2;
      /**
       * <code>NONE = 3;</code>
       *
       * <pre>
       * Do not normalize the loss.
       * </pre>
       */
      public static final int NONE_VALUE = 3;


      public final int getNumber() { return value; }

      public static NormalizationMode valueOf(int value) {
        switch (value) {
          case 0: return FULL;
          case 1: return VALID;
          case 2: return BATCH_SIZE;
          case 3: return NONE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<NormalizationMode>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<NormalizationMode>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<NormalizationMode>() {
              public NormalizationMode findValueByNumber(int number) {
                return NormalizationMode.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return caffe.Caffe.LossParameter.getDescriptor().getEnumTypes().get(0);
      }

      private static final NormalizationMode[] VALUES = values();

      public static NormalizationMode valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private NormalizationMode(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:caffe.LossParameter.NormalizationMode)
    }

    private int bitField0_;
    // optional int32 ignore_label = 1;
    public static final int IGNORE_LABEL_FIELD_NUMBER = 1;
    private int ignoreLabel_;
    /**
     * <code>optional int32 ignore_label = 1;</code>
     *
     * <pre>
     * If specified, ignore instances with the given label.
     * </pre>
     */
    public boolean hasIgnoreLabel() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 ignore_label = 1;</code>
     *
     * <pre>
     * If specified, ignore instances with the given label.
     * </pre>
     */
    public int getIgnoreLabel() {
      return ignoreLabel_;
    }

    // optional .caffe.LossParameter.NormalizationMode normalization = 3 [default = VALID];
    public static final int NORMALIZATION_FIELD_NUMBER = 3;
    private caffe.Caffe.LossParameter.NormalizationMode normalization_;
    /**
     * <code>optional .caffe.LossParameter.NormalizationMode normalization = 3 [default = VALID];</code>
     */
    public boolean hasNormalization() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .caffe.LossParameter.NormalizationMode normalization = 3 [default = VALID];</code>
     */
    public caffe.Caffe.LossParameter.NormalizationMode getNormalization() {
      return normalization_;
    }

    // optional bool normalize = 2;
    public static final int NORMALIZE_FIELD_NUMBER = 2;
    private boolean normalize_;
    /**
     * <code>optional bool normalize = 2;</code>
     *
     * <pre>
     * Deprecated.  Ignored if normalization is specified.  If normalization
     * is not specified, then setting this to false will be equivalent to
     * normalization = BATCH_SIZE to be consistent with previous behavior.
     * </pre>
     */
    public boolean hasNormalize() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional bool normalize = 2;</code>
     *
     * <pre>
     * Deprecated.  Ignored if normalization is specified.  If normalization
     * is not specified, then setting this to false will be equivalent to
     * normalization = BATCH_SIZE to be consistent with previous behavior.
     * </pre>
     */
    public boolean getNormalize() {
      return normalize_;
    }

    private void initFields() {
      ignoreLabel_ = 0;
      normalization_ = caffe.Caffe.LossParameter.NormalizationMode.VALID;
      normalize_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, ignoreLabel_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBool(2, normalize_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(3, normalization_.getNumber());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, ignoreLabel_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, normalize_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, normalization_.getNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.LossParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.LossParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.LossParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.LossParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.LossParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.LossParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.LossParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.LossParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.LossParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.LossParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.LossParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.LossParameter}
     *
     * <pre>
     * Message that stores parameters shared by loss layers
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements caffe.Caffe.LossParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_LossParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_LossParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.LossParameter.class, caffe.Caffe.LossParameter.Builder.class);
      }

      // Construct using caffe.Caffe.LossParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        ignoreLabel_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        normalization_ = caffe.Caffe.LossParameter.NormalizationMode.VALID;
        bitField0_ = (bitField0_ & ~0x00000002);
        normalize_ = false;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_LossParameter_descriptor;
      }

      public caffe.Caffe.LossParameter getDefaultInstanceForType() {
        return caffe.Caffe.LossParameter.getDefaultInstance();
      }

      public caffe.Caffe.LossParameter build() {
        caffe.Caffe.LossParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.LossParameter buildPartial() {
        caffe.Caffe.LossParameter result = new caffe.Caffe.LossParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.ignoreLabel_ = ignoreLabel_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.normalization_ = normalization_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.normalize_ = normalize_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.LossParameter) {
          return mergeFrom((caffe.Caffe.LossParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.LossParameter other) {
        if (other == caffe.Caffe.LossParameter.getDefaultInstance()) return this;
        if (other.hasIgnoreLabel()) {
          setIgnoreLabel(other.getIgnoreLabel());
        }
        if (other.hasNormalization()) {
          setNormalization(other.getNormalization());
        }
        if (other.hasNormalize()) {
          setNormalize(other.getNormalize());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.LossParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.LossParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 ignore_label = 1;
      private int ignoreLabel_ ;
      /**
       * <code>optional int32 ignore_label = 1;</code>
       *
       * <pre>
       * If specified, ignore instances with the given label.
       * </pre>
       */
      public boolean hasIgnoreLabel() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 ignore_label = 1;</code>
       *
       * <pre>
       * If specified, ignore instances with the given label.
       * </pre>
       */
      public int getIgnoreLabel() {
        return ignoreLabel_;
      }
      /**
       * <code>optional int32 ignore_label = 1;</code>
       *
       * <pre>
       * If specified, ignore instances with the given label.
       * </pre>
       */
      public Builder setIgnoreLabel(int value) {
        bitField0_ |= 0x00000001;
        ignoreLabel_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 ignore_label = 1;</code>
       *
       * <pre>
       * If specified, ignore instances with the given label.
       * </pre>
       */
      public Builder clearIgnoreLabel() {
        bitField0_ = (bitField0_ & ~0x00000001);
        ignoreLabel_ = 0;
        onChanged();
        return this;
      }

      // optional .caffe.LossParameter.NormalizationMode normalization = 3 [default = VALID];
      private caffe.Caffe.LossParameter.NormalizationMode normalization_ = caffe.Caffe.LossParameter.NormalizationMode.VALID;
      /**
       * <code>optional .caffe.LossParameter.NormalizationMode normalization = 3 [default = VALID];</code>
       */
      public boolean hasNormalization() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .caffe.LossParameter.NormalizationMode normalization = 3 [default = VALID];</code>
       */
      public caffe.Caffe.LossParameter.NormalizationMode getNormalization() {
        return normalization_;
      }
      /**
       * <code>optional .caffe.LossParameter.NormalizationMode normalization = 3 [default = VALID];</code>
       */
      public Builder setNormalization(caffe.Caffe.LossParameter.NormalizationMode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        normalization_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .caffe.LossParameter.NormalizationMode normalization = 3 [default = VALID];</code>
       */
      public Builder clearNormalization() {
        bitField0_ = (bitField0_ & ~0x00000002);
        normalization_ = caffe.Caffe.LossParameter.NormalizationMode.VALID;
        onChanged();
        return this;
      }

      // optional bool normalize = 2;
      private boolean normalize_ ;
      /**
       * <code>optional bool normalize = 2;</code>
       *
       * <pre>
       * Deprecated.  Ignored if normalization is specified.  If normalization
       * is not specified, then setting this to false will be equivalent to
       * normalization = BATCH_SIZE to be consistent with previous behavior.
       * </pre>
       */
      public boolean hasNormalize() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional bool normalize = 2;</code>
       *
       * <pre>
       * Deprecated.  Ignored if normalization is specified.  If normalization
       * is not specified, then setting this to false will be equivalent to
       * normalization = BATCH_SIZE to be consistent with previous behavior.
       * </pre>
       */
      public boolean getNormalize() {
        return normalize_;
      }
      /**
       * <code>optional bool normalize = 2;</code>
       *
       * <pre>
       * Deprecated.  Ignored if normalization is specified.  If normalization
       * is not specified, then setting this to false will be equivalent to
       * normalization = BATCH_SIZE to be consistent with previous behavior.
       * </pre>
       */
      public Builder setNormalize(boolean value) {
        bitField0_ |= 0x00000004;
        normalize_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool normalize = 2;</code>
       *
       * <pre>
       * Deprecated.  Ignored if normalization is specified.  If normalization
       * is not specified, then setting this to false will be equivalent to
       * normalization = BATCH_SIZE to be consistent with previous behavior.
       * </pre>
       */
      public Builder clearNormalize() {
        bitField0_ = (bitField0_ & ~0x00000004);
        normalize_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.LossParameter)
    }

    static {
      defaultInstance = new LossParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.LossParameter)
  }

  public interface AccuracyParameterOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional uint32 top_k = 1 [default = 1];
    /**
     * <code>optional uint32 top_k = 1 [default = 1];</code>
     *
     * <pre>
     * When computing accuracy, count as correct by comparing the true label to
     * the top k scoring classes.  By default, only compare to the top scoring
     * class (i.e. argmax).
     * </pre>
     */
    boolean hasTopK();
    /**
     * <code>optional uint32 top_k = 1 [default = 1];</code>
     *
     * <pre>
     * When computing accuracy, count as correct by comparing the true label to
     * the top k scoring classes.  By default, only compare to the top scoring
     * class (i.e. argmax).
     * </pre>
     */
    int getTopK();

    // optional int32 axis = 2 [default = 1];
    /**
     * <code>optional int32 axis = 2 [default = 1];</code>
     *
     * <pre>
     * The "label" axis of the prediction blob, whose argmax corresponds to the
     * predicted label -- may be negative to index from the end (e.g., -1 for the
     * last axis).  For example, if axis == 1 and the predictions are
     * (N x C x H x W), the label blob is expected to contain N*H*W ground truth
     * labels with integer values in {0, 1, ..., C-1}.
     * </pre>
     */
    boolean hasAxis();
    /**
     * <code>optional int32 axis = 2 [default = 1];</code>
     *
     * <pre>
     * The "label" axis of the prediction blob, whose argmax corresponds to the
     * predicted label -- may be negative to index from the end (e.g., -1 for the
     * last axis).  For example, if axis == 1 and the predictions are
     * (N x C x H x W), the label blob is expected to contain N*H*W ground truth
     * labels with integer values in {0, 1, ..., C-1}.
     * </pre>
     */
    int getAxis();

    // optional int32 ignore_label = 3;
    /**
     * <code>optional int32 ignore_label = 3;</code>
     *
     * <pre>
     * If specified, ignore instances with the given label.
     * </pre>
     */
    boolean hasIgnoreLabel();
    /**
     * <code>optional int32 ignore_label = 3;</code>
     *
     * <pre>
     * If specified, ignore instances with the given label.
     * </pre>
     */
    int getIgnoreLabel();
  }
  /**
   * Protobuf type {@code caffe.AccuracyParameter}
   */
  public static final class AccuracyParameter extends
      com.google.protobuf.GeneratedMessage
      implements AccuracyParameterOrBuilder {
    // Use AccuracyParameter.newBuilder() to construct.
    private AccuracyParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private AccuracyParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final AccuracyParameter defaultInstance;
    public static AccuracyParameter getDefaultInstance() {
      return defaultInstance;
    }

    public AccuracyParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private AccuracyParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              topK_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              axis_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              ignoreLabel_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_AccuracyParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_AccuracyParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.AccuracyParameter.class, caffe.Caffe.AccuracyParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<AccuracyParameter> PARSER =
        new com.google.protobuf.AbstractParser<AccuracyParameter>() {
      public AccuracyParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new AccuracyParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<AccuracyParameter> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional uint32 top_k = 1 [default = 1];
    public static final int TOP_K_FIELD_NUMBER = 1;
    private int topK_;
    /**
     * <code>optional uint32 top_k = 1 [default = 1];</code>
     *
     * <pre>
     * When computing accuracy, count as correct by comparing the true label to
     * the top k scoring classes.  By default, only compare to the top scoring
     * class (i.e. argmax).
     * </pre>
     */
    public boolean hasTopK() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 top_k = 1 [default = 1];</code>
     *
     * <pre>
     * When computing accuracy, count as correct by comparing the true label to
     * the top k scoring classes.  By default, only compare to the top scoring
     * class (i.e. argmax).
     * </pre>
     */
    public int getTopK() {
      return topK_;
    }

    // optional int32 axis = 2 [default = 1];
    public static final int AXIS_FIELD_NUMBER = 2;
    private int axis_;
    /**
     * <code>optional int32 axis = 2 [default = 1];</code>
     *
     * <pre>
     * The "label" axis of the prediction blob, whose argmax corresponds to the
     * predicted label -- may be negative to index from the end (e.g., -1 for the
     * last axis).  For example, if axis == 1 and the predictions are
     * (N x C x H x W), the label blob is expected to contain N*H*W ground truth
     * labels with integer values in {0, 1, ..., C-1}.
     * </pre>
     */
    public boolean hasAxis() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 axis = 2 [default = 1];</code>
     *
     * <pre>
     * The "label" axis of the prediction blob, whose argmax corresponds to the
     * predicted label -- may be negative to index from the end (e.g., -1 for the
     * last axis).  For example, if axis == 1 and the predictions are
     * (N x C x H x W), the label blob is expected to contain N*H*W ground truth
     * labels with integer values in {0, 1, ..., C-1}.
     * </pre>
     */
    public int getAxis() {
      return axis_;
    }

    // optional int32 ignore_label = 3;
    public static final int IGNORE_LABEL_FIELD_NUMBER = 3;
    private int ignoreLabel_;
    /**
     * <code>optional int32 ignore_label = 3;</code>
     *
     * <pre>
     * If specified, ignore instances with the given label.
     * </pre>
     */
    public boolean hasIgnoreLabel() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 ignore_label = 3;</code>
     *
     * <pre>
     * If specified, ignore instances with the given label.
     * </pre>
     */
    public int getIgnoreLabel() {
      return ignoreLabel_;
    }

    private void initFields() {
      topK_ = 1;
      axis_ = 1;
      ignoreLabel_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, topK_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, axis_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, ignoreLabel_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, topK_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, axis_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, ignoreLabel_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.AccuracyParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.AccuracyParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.AccuracyParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.AccuracyParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.AccuracyParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.AccuracyParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.AccuracyParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.AccuracyParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.AccuracyParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.AccuracyParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.AccuracyParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.AccuracyParameter}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements caffe.Caffe.AccuracyParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_AccuracyParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_AccuracyParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.AccuracyParameter.class, caffe.Caffe.AccuracyParameter.Builder.class);
      }

      // Construct using caffe.Caffe.AccuracyParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        topK_ = 1;
        bitField0_ = (bitField0_ & ~0x00000001);
        axis_ = 1;
        bitField0_ = (bitField0_ & ~0x00000002);
        ignoreLabel_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_AccuracyParameter_descriptor;
      }

      public caffe.Caffe.AccuracyParameter getDefaultInstanceForType() {
        return caffe.Caffe.AccuracyParameter.getDefaultInstance();
      }

      public caffe.Caffe.AccuracyParameter build() {
        caffe.Caffe.AccuracyParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.AccuracyParameter buildPartial() {
        caffe.Caffe.AccuracyParameter result = new caffe.Caffe.AccuracyParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.topK_ = topK_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.axis_ = axis_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.ignoreLabel_ = ignoreLabel_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.AccuracyParameter) {
          return mergeFrom((caffe.Caffe.AccuracyParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.AccuracyParameter other) {
        if (other == caffe.Caffe.AccuracyParameter.getDefaultInstance()) return this;
        if (other.hasTopK()) {
          setTopK(other.getTopK());
        }
        if (other.hasAxis()) {
          setAxis(other.getAxis());
        }
        if (other.hasIgnoreLabel()) {
          setIgnoreLabel(other.getIgnoreLabel());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.AccuracyParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.AccuracyParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional uint32 top_k = 1 [default = 1];
      private int topK_ = 1;
      /**
       * <code>optional uint32 top_k = 1 [default = 1];</code>
       *
       * <pre>
       * When computing accuracy, count as correct by comparing the true label to
       * the top k scoring classes.  By default, only compare to the top scoring
       * class (i.e. argmax).
       * </pre>
       */
      public boolean hasTopK() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 top_k = 1 [default = 1];</code>
       *
       * <pre>
       * When computing accuracy, count as correct by comparing the true label to
       * the top k scoring classes.  By default, only compare to the top scoring
       * class (i.e. argmax).
       * </pre>
       */
      public int getTopK() {
        return topK_;
      }
      /**
       * <code>optional uint32 top_k = 1 [default = 1];</code>
       *
       * <pre>
       * When computing accuracy, count as correct by comparing the true label to
       * the top k scoring classes.  By default, only compare to the top scoring
       * class (i.e. argmax).
       * </pre>
       */
      public Builder setTopK(int value) {
        bitField0_ |= 0x00000001;
        topK_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 top_k = 1 [default = 1];</code>
       *
       * <pre>
       * When computing accuracy, count as correct by comparing the true label to
       * the top k scoring classes.  By default, only compare to the top scoring
       * class (i.e. argmax).
       * </pre>
       */
      public Builder clearTopK() {
        bitField0_ = (bitField0_ & ~0x00000001);
        topK_ = 1;
        onChanged();
        return this;
      }

      // optional int32 axis = 2 [default = 1];
      private int axis_ = 1;
      /**
       * <code>optional int32 axis = 2 [default = 1];</code>
       *
       * <pre>
       * The "label" axis of the prediction blob, whose argmax corresponds to the
       * predicted label -- may be negative to index from the end (e.g., -1 for the
       * last axis).  For example, if axis == 1 and the predictions are
       * (N x C x H x W), the label blob is expected to contain N*H*W ground truth
       * labels with integer values in {0, 1, ..., C-1}.
       * </pre>
       */
      public boolean hasAxis() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 axis = 2 [default = 1];</code>
       *
       * <pre>
       * The "label" axis of the prediction blob, whose argmax corresponds to the
       * predicted label -- may be negative to index from the end (e.g., -1 for the
       * last axis).  For example, if axis == 1 and the predictions are
       * (N x C x H x W), the label blob is expected to contain N*H*W ground truth
       * labels with integer values in {0, 1, ..., C-1}.
       * </pre>
       */
      public int getAxis() {
        return axis_;
      }
      /**
       * <code>optional int32 axis = 2 [default = 1];</code>
       *
       * <pre>
       * The "label" axis of the prediction blob, whose argmax corresponds to the
       * predicted label -- may be negative to index from the end (e.g., -1 for the
       * last axis).  For example, if axis == 1 and the predictions are
       * (N x C x H x W), the label blob is expected to contain N*H*W ground truth
       * labels with integer values in {0, 1, ..., C-1}.
       * </pre>
       */
      public Builder setAxis(int value) {
        bitField0_ |= 0x00000002;
        axis_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 axis = 2 [default = 1];</code>
       *
       * <pre>
       * The "label" axis of the prediction blob, whose argmax corresponds to the
       * predicted label -- may be negative to index from the end (e.g., -1 for the
       * last axis).  For example, if axis == 1 and the predictions are
       * (N x C x H x W), the label blob is expected to contain N*H*W ground truth
       * labels with integer values in {0, 1, ..., C-1}.
       * </pre>
       */
      public Builder clearAxis() {
        bitField0_ = (bitField0_ & ~0x00000002);
        axis_ = 1;
        onChanged();
        return this;
      }

      // optional int32 ignore_label = 3;
      private int ignoreLabel_ ;
      /**
       * <code>optional int32 ignore_label = 3;</code>
       *
       * <pre>
       * If specified, ignore instances with the given label.
       * </pre>
       */
      public boolean hasIgnoreLabel() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 ignore_label = 3;</code>
       *
       * <pre>
       * If specified, ignore instances with the given label.
       * </pre>
       */
      public int getIgnoreLabel() {
        return ignoreLabel_;
      }
      /**
       * <code>optional int32 ignore_label = 3;</code>
       *
       * <pre>
       * If specified, ignore instances with the given label.
       * </pre>
       */
      public Builder setIgnoreLabel(int value) {
        bitField0_ |= 0x00000004;
        ignoreLabel_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 ignore_label = 3;</code>
       *
       * <pre>
       * If specified, ignore instances with the given label.
       * </pre>
       */
      public Builder clearIgnoreLabel() {
        bitField0_ = (bitField0_ & ~0x00000004);
        ignoreLabel_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.AccuracyParameter)
    }

    static {
      defaultInstance = new AccuracyParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.AccuracyParameter)
  }

  public interface ArgMaxParameterOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional bool out_max_val = 1 [default = false];
    /**
     * <code>optional bool out_max_val = 1 [default = false];</code>
     *
     * <pre>
     * If true produce pairs (argmax, maxval)
     * </pre>
     */
    boolean hasOutMaxVal();
    /**
     * <code>optional bool out_max_val = 1 [default = false];</code>
     *
     * <pre>
     * If true produce pairs (argmax, maxval)
     * </pre>
     */
    boolean getOutMaxVal();

    // optional uint32 top_k = 2 [default = 1];
    /**
     * <code>optional uint32 top_k = 2 [default = 1];</code>
     */
    boolean hasTopK();
    /**
     * <code>optional uint32 top_k = 2 [default = 1];</code>
     */
    int getTopK();

    // optional int32 axis = 3;
    /**
     * <code>optional int32 axis = 3;</code>
     *
     * <pre>
     * The axis along which to maximise -- may be negative to index from the
     * end (e.g., -1 for the last axis).
     * By default ArgMaxLayer maximizes over the flattened trailing dimensions
     * for each index of the first / num dimension.
     * </pre>
     */
    boolean hasAxis();
    /**
     * <code>optional int32 axis = 3;</code>
     *
     * <pre>
     * The axis along which to maximise -- may be negative to index from the
     * end (e.g., -1 for the last axis).
     * By default ArgMaxLayer maximizes over the flattened trailing dimensions
     * for each index of the first / num dimension.
     * </pre>
     */
    int getAxis();
  }
  /**
   * Protobuf type {@code caffe.ArgMaxParameter}
   */
  public static final class ArgMaxParameter extends
      com.google.protobuf.GeneratedMessage
      implements ArgMaxParameterOrBuilder {
    // Use ArgMaxParameter.newBuilder() to construct.
    private ArgMaxParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ArgMaxParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ArgMaxParameter defaultInstance;
    public static ArgMaxParameter getDefaultInstance() {
      return defaultInstance;
    }

    public ArgMaxParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ArgMaxParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              outMaxVal_ = input.readBool();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              topK_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              axis_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_ArgMaxParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_ArgMaxParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.ArgMaxParameter.class, caffe.Caffe.ArgMaxParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<ArgMaxParameter> PARSER =
        new com.google.protobuf.AbstractParser<ArgMaxParameter>() {
      public ArgMaxParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ArgMaxParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ArgMaxParameter> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional bool out_max_val = 1 [default = false];
    public static final int OUT_MAX_VAL_FIELD_NUMBER = 1;
    private boolean outMaxVal_;
    /**
     * <code>optional bool out_max_val = 1 [default = false];</code>
     *
     * <pre>
     * If true produce pairs (argmax, maxval)
     * </pre>
     */
    public boolean hasOutMaxVal() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional bool out_max_val = 1 [default = false];</code>
     *
     * <pre>
     * If true produce pairs (argmax, maxval)
     * </pre>
     */
    public boolean getOutMaxVal() {
      return outMaxVal_;
    }

    // optional uint32 top_k = 2 [default = 1];
    public static final int TOP_K_FIELD_NUMBER = 2;
    private int topK_;
    /**
     * <code>optional uint32 top_k = 2 [default = 1];</code>
     */
    public boolean hasTopK() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 top_k = 2 [default = 1];</code>
     */
    public int getTopK() {
      return topK_;
    }

    // optional int32 axis = 3;
    public static final int AXIS_FIELD_NUMBER = 3;
    private int axis_;
    /**
     * <code>optional int32 axis = 3;</code>
     *
     * <pre>
     * The axis along which to maximise -- may be negative to index from the
     * end (e.g., -1 for the last axis).
     * By default ArgMaxLayer maximizes over the flattened trailing dimensions
     * for each index of the first / num dimension.
     * </pre>
     */
    public boolean hasAxis() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 axis = 3;</code>
     *
     * <pre>
     * The axis along which to maximise -- may be negative to index from the
     * end (e.g., -1 for the last axis).
     * By default ArgMaxLayer maximizes over the flattened trailing dimensions
     * for each index of the first / num dimension.
     * </pre>
     */
    public int getAxis() {
      return axis_;
    }

    private void initFields() {
      outMaxVal_ = false;
      topK_ = 1;
      axis_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBool(1, outMaxVal_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, topK_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, axis_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, outMaxVal_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, topK_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, axis_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.ArgMaxParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.ArgMaxParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.ArgMaxParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.ArgMaxParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.ArgMaxParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.ArgMaxParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.ArgMaxParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.ArgMaxParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.ArgMaxParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.ArgMaxParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.ArgMaxParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.ArgMaxParameter}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements caffe.Caffe.ArgMaxParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_ArgMaxParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_ArgMaxParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.ArgMaxParameter.class, caffe.Caffe.ArgMaxParameter.Builder.class);
      }

      // Construct using caffe.Caffe.ArgMaxParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        outMaxVal_ = false;
        bitField0_ = (bitField0_ & ~0x00000001);
        topK_ = 1;
        bitField0_ = (bitField0_ & ~0x00000002);
        axis_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_ArgMaxParameter_descriptor;
      }

      public caffe.Caffe.ArgMaxParameter getDefaultInstanceForType() {
        return caffe.Caffe.ArgMaxParameter.getDefaultInstance();
      }

      public caffe.Caffe.ArgMaxParameter build() {
        caffe.Caffe.ArgMaxParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.ArgMaxParameter buildPartial() {
        caffe.Caffe.ArgMaxParameter result = new caffe.Caffe.ArgMaxParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.outMaxVal_ = outMaxVal_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.topK_ = topK_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.axis_ = axis_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.ArgMaxParameter) {
          return mergeFrom((caffe.Caffe.ArgMaxParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.ArgMaxParameter other) {
        if (other == caffe.Caffe.ArgMaxParameter.getDefaultInstance()) return this;
        if (other.hasOutMaxVal()) {
          setOutMaxVal(other.getOutMaxVal());
        }
        if (other.hasTopK()) {
          setTopK(other.getTopK());
        }
        if (other.hasAxis()) {
          setAxis(other.getAxis());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.ArgMaxParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.ArgMaxParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional bool out_max_val = 1 [default = false];
      private boolean outMaxVal_ ;
      /**
       * <code>optional bool out_max_val = 1 [default = false];</code>
       *
       * <pre>
       * If true produce pairs (argmax, maxval)
       * </pre>
       */
      public boolean hasOutMaxVal() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional bool out_max_val = 1 [default = false];</code>
       *
       * <pre>
       * If true produce pairs (argmax, maxval)
       * </pre>
       */
      public boolean getOutMaxVal() {
        return outMaxVal_;
      }
      /**
       * <code>optional bool out_max_val = 1 [default = false];</code>
       *
       * <pre>
       * If true produce pairs (argmax, maxval)
       * </pre>
       */
      public Builder setOutMaxVal(boolean value) {
        bitField0_ |= 0x00000001;
        outMaxVal_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool out_max_val = 1 [default = false];</code>
       *
       * <pre>
       * If true produce pairs (argmax, maxval)
       * </pre>
       */
      public Builder clearOutMaxVal() {
        bitField0_ = (bitField0_ & ~0x00000001);
        outMaxVal_ = false;
        onChanged();
        return this;
      }

      // optional uint32 top_k = 2 [default = 1];
      private int topK_ = 1;
      /**
       * <code>optional uint32 top_k = 2 [default = 1];</code>
       */
      public boolean hasTopK() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 top_k = 2 [default = 1];</code>
       */
      public int getTopK() {
        return topK_;
      }
      /**
       * <code>optional uint32 top_k = 2 [default = 1];</code>
       */
      public Builder setTopK(int value) {
        bitField0_ |= 0x00000002;
        topK_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 top_k = 2 [default = 1];</code>
       */
      public Builder clearTopK() {
        bitField0_ = (bitField0_ & ~0x00000002);
        topK_ = 1;
        onChanged();
        return this;
      }

      // optional int32 axis = 3;
      private int axis_ ;
      /**
       * <code>optional int32 axis = 3;</code>
       *
       * <pre>
       * The axis along which to maximise -- may be negative to index from the
       * end (e.g., -1 for the last axis).
       * By default ArgMaxLayer maximizes over the flattened trailing dimensions
       * for each index of the first / num dimension.
       * </pre>
       */
      public boolean hasAxis() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 axis = 3;</code>
       *
       * <pre>
       * The axis along which to maximise -- may be negative to index from the
       * end (e.g., -1 for the last axis).
       * By default ArgMaxLayer maximizes over the flattened trailing dimensions
       * for each index of the first / num dimension.
       * </pre>
       */
      public int getAxis() {
        return axis_;
      }
      /**
       * <code>optional int32 axis = 3;</code>
       *
       * <pre>
       * The axis along which to maximise -- may be negative to index from the
       * end (e.g., -1 for the last axis).
       * By default ArgMaxLayer maximizes over the flattened trailing dimensions
       * for each index of the first / num dimension.
       * </pre>
       */
      public Builder setAxis(int value) {
        bitField0_ |= 0x00000004;
        axis_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 axis = 3;</code>
       *
       * <pre>
       * The axis along which to maximise -- may be negative to index from the
       * end (e.g., -1 for the last axis).
       * By default ArgMaxLayer maximizes over the flattened trailing dimensions
       * for each index of the first / num dimension.
       * </pre>
       */
      public Builder clearAxis() {
        bitField0_ = (bitField0_ & ~0x00000004);
        axis_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.ArgMaxParameter)
    }

    static {
      defaultInstance = new ArgMaxParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.ArgMaxParameter)
  }

  public interface ConcatParameterOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 axis = 2 [default = 1];
    /**
     * <code>optional int32 axis = 2 [default = 1];</code>
     *
     * <pre>
     * The axis along which to concatenate -- may be negative to index from the
     * end (e.g., -1 for the last axis).  Other axes must have the
     * same dimension for all the bottom blobs.
     * By default, ConcatLayer concatenates blobs along the "channels" axis (1).
     * </pre>
     */
    boolean hasAxis();
    /**
     * <code>optional int32 axis = 2 [default = 1];</code>
     *
     * <pre>
     * The axis along which to concatenate -- may be negative to index from the
     * end (e.g., -1 for the last axis).  Other axes must have the
     * same dimension for all the bottom blobs.
     * By default, ConcatLayer concatenates blobs along the "channels" axis (1).
     * </pre>
     */
    int getAxis();

    // optional uint32 concat_dim = 1 [default = 1];
    /**
     * <code>optional uint32 concat_dim = 1 [default = 1];</code>
     *
     * <pre>
     * DEPRECATED: alias for "axis" -- does not support negative indexing.
     * </pre>
     */
    boolean hasConcatDim();
    /**
     * <code>optional uint32 concat_dim = 1 [default = 1];</code>
     *
     * <pre>
     * DEPRECATED: alias for "axis" -- does not support negative indexing.
     * </pre>
     */
    int getConcatDim();
  }
  /**
   * Protobuf type {@code caffe.ConcatParameter}
   */
  public static final class ConcatParameter extends
      com.google.protobuf.GeneratedMessage
      implements ConcatParameterOrBuilder {
    // Use ConcatParameter.newBuilder() to construct.
    private ConcatParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ConcatParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ConcatParameter defaultInstance;
    public static ConcatParameter getDefaultInstance() {
      return defaultInstance;
    }

    public ConcatParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ConcatParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000002;
              concatDim_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000001;
              axis_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_ConcatParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_ConcatParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.ConcatParameter.class, caffe.Caffe.ConcatParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<ConcatParameter> PARSER =
        new com.google.protobuf.AbstractParser<ConcatParameter>() {
      public ConcatParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ConcatParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ConcatParameter> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 axis = 2 [default = 1];
    public static final int AXIS_FIELD_NUMBER = 2;
    private int axis_;
    /**
     * <code>optional int32 axis = 2 [default = 1];</code>
     *
     * <pre>
     * The axis along which to concatenate -- may be negative to index from the
     * end (e.g., -1 for the last axis).  Other axes must have the
     * same dimension for all the bottom blobs.
     * By default, ConcatLayer concatenates blobs along the "channels" axis (1).
     * </pre>
     */
    public boolean hasAxis() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 axis = 2 [default = 1];</code>
     *
     * <pre>
     * The axis along which to concatenate -- may be negative to index from the
     * end (e.g., -1 for the last axis).  Other axes must have the
     * same dimension for all the bottom blobs.
     * By default, ConcatLayer concatenates blobs along the "channels" axis (1).
     * </pre>
     */
    public int getAxis() {
      return axis_;
    }

    // optional uint32 concat_dim = 1 [default = 1];
    public static final int CONCAT_DIM_FIELD_NUMBER = 1;
    private int concatDim_;
    /**
     * <code>optional uint32 concat_dim = 1 [default = 1];</code>
     *
     * <pre>
     * DEPRECATED: alias for "axis" -- does not support negative indexing.
     * </pre>
     */
    public boolean hasConcatDim() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 concat_dim = 1 [default = 1];</code>
     *
     * <pre>
     * DEPRECATED: alias for "axis" -- does not support negative indexing.
     * </pre>
     */
    public int getConcatDim() {
      return concatDim_;
    }

    private void initFields() {
      axis_ = 1;
      concatDim_ = 1;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(1, concatDim_);
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(2, axis_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, concatDim_);
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, axis_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.ConcatParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.ConcatParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.ConcatParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.ConcatParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.ConcatParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.ConcatParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.ConcatParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.ConcatParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.ConcatParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.ConcatParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.ConcatParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.ConcatParameter}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements caffe.Caffe.ConcatParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_ConcatParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_ConcatParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.ConcatParameter.class, caffe.Caffe.ConcatParameter.Builder.class);
      }

      // Construct using caffe.Caffe.ConcatParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        axis_ = 1;
        bitField0_ = (bitField0_ & ~0x00000001);
        concatDim_ = 1;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_ConcatParameter_descriptor;
      }

      public caffe.Caffe.ConcatParameter getDefaultInstanceForType() {
        return caffe.Caffe.ConcatParameter.getDefaultInstance();
      }

      public caffe.Caffe.ConcatParameter build() {
        caffe.Caffe.ConcatParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.ConcatParameter buildPartial() {
        caffe.Caffe.ConcatParameter result = new caffe.Caffe.ConcatParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.axis_ = axis_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.concatDim_ = concatDim_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.ConcatParameter) {
          return mergeFrom((caffe.Caffe.ConcatParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.ConcatParameter other) {
        if (other == caffe.Caffe.ConcatParameter.getDefaultInstance()) return this;
        if (other.hasAxis()) {
          setAxis(other.getAxis());
        }
        if (other.hasConcatDim()) {
          setConcatDim(other.getConcatDim());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.ConcatParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.ConcatParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 axis = 2 [default = 1];
      private int axis_ = 1;
      /**
       * <code>optional int32 axis = 2 [default = 1];</code>
       *
       * <pre>
       * The axis along which to concatenate -- may be negative to index from the
       * end (e.g., -1 for the last axis).  Other axes must have the
       * same dimension for all the bottom blobs.
       * By default, ConcatLayer concatenates blobs along the "channels" axis (1).
       * </pre>
       */
      public boolean hasAxis() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 axis = 2 [default = 1];</code>
       *
       * <pre>
       * The axis along which to concatenate -- may be negative to index from the
       * end (e.g., -1 for the last axis).  Other axes must have the
       * same dimension for all the bottom blobs.
       * By default, ConcatLayer concatenates blobs along the "channels" axis (1).
       * </pre>
       */
      public int getAxis() {
        return axis_;
      }
      /**
       * <code>optional int32 axis = 2 [default = 1];</code>
       *
       * <pre>
       * The axis along which to concatenate -- may be negative to index from the
       * end (e.g., -1 for the last axis).  Other axes must have the
       * same dimension for all the bottom blobs.
       * By default, ConcatLayer concatenates blobs along the "channels" axis (1).
       * </pre>
       */
      public Builder setAxis(int value) {
        bitField0_ |= 0x00000001;
        axis_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 axis = 2 [default = 1];</code>
       *
       * <pre>
       * The axis along which to concatenate -- may be negative to index from the
       * end (e.g., -1 for the last axis).  Other axes must have the
       * same dimension for all the bottom blobs.
       * By default, ConcatLayer concatenates blobs along the "channels" axis (1).
       * </pre>
       */
      public Builder clearAxis() {
        bitField0_ = (bitField0_ & ~0x00000001);
        axis_ = 1;
        onChanged();
        return this;
      }

      // optional uint32 concat_dim = 1 [default = 1];
      private int concatDim_ = 1;
      /**
       * <code>optional uint32 concat_dim = 1 [default = 1];</code>
       *
       * <pre>
       * DEPRECATED: alias for "axis" -- does not support negative indexing.
       * </pre>
       */
      public boolean hasConcatDim() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 concat_dim = 1 [default = 1];</code>
       *
       * <pre>
       * DEPRECATED: alias for "axis" -- does not support negative indexing.
       * </pre>
       */
      public int getConcatDim() {
        return concatDim_;
      }
      /**
       * <code>optional uint32 concat_dim = 1 [default = 1];</code>
       *
       * <pre>
       * DEPRECATED: alias for "axis" -- does not support negative indexing.
       * </pre>
       */
      public Builder setConcatDim(int value) {
        bitField0_ |= 0x00000002;
        concatDim_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 concat_dim = 1 [default = 1];</code>
       *
       * <pre>
       * DEPRECATED: alias for "axis" -- does not support negative indexing.
       * </pre>
       */
      public Builder clearConcatDim() {
        bitField0_ = (bitField0_ & ~0x00000002);
        concatDim_ = 1;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.ConcatParameter)
    }

    static {
      defaultInstance = new ConcatParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.ConcatParameter)
  }

  public interface BatchNormParameterOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional bool use_global_stats = 1;
    /**
     * <code>optional bool use_global_stats = 1;</code>
     *
     * <pre>
     * If false, accumulate global mean/variance values via a moving average. If
     * true, use those accumulated values instead of computing mean/variance
     * across the batch.
     * </pre>
     */
    boolean hasUseGlobalStats();
    /**
     * <code>optional bool use_global_stats = 1;</code>
     *
     * <pre>
     * If false, accumulate global mean/variance values via a moving average. If
     * true, use those accumulated values instead of computing mean/variance
     * across the batch.
     * </pre>
     */
    boolean getUseGlobalStats();

    // optional float moving_average_fraction = 2 [default = 0.999];
    /**
     * <code>optional float moving_average_fraction = 2 [default = 0.999];</code>
     *
     * <pre>
     * How much does the moving average decay each iteration?
     * </pre>
     */
    boolean hasMovingAverageFraction();
    /**
     * <code>optional float moving_average_fraction = 2 [default = 0.999];</code>
     *
     * <pre>
     * How much does the moving average decay each iteration?
     * </pre>
     */
    float getMovingAverageFraction();

    // optional float eps = 3 [default = 1e-05];
    /**
     * <code>optional float eps = 3 [default = 1e-05];</code>
     *
     * <pre>
     * Small value to add to the variance estimate so that we don't divide by
     * zero.
     * </pre>
     */
    boolean hasEps();
    /**
     * <code>optional float eps = 3 [default = 1e-05];</code>
     *
     * <pre>
     * Small value to add to the variance estimate so that we don't divide by
     * zero.
     * </pre>
     */
    float getEps();
  }
  /**
   * Protobuf type {@code caffe.BatchNormParameter}
   */
  public static final class BatchNormParameter extends
      com.google.protobuf.GeneratedMessage
      implements BatchNormParameterOrBuilder {
    // Use BatchNormParameter.newBuilder() to construct.
    private BatchNormParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private BatchNormParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final BatchNormParameter defaultInstance;
    public static BatchNormParameter getDefaultInstance() {
      return defaultInstance;
    }

    public BatchNormParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private BatchNormParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              useGlobalStats_ = input.readBool();
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              movingAverageFraction_ = input.readFloat();
              break;
            }
            case 29: {
              bitField0_ |= 0x00000004;
              eps_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_BatchNormParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_BatchNormParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.BatchNormParameter.class, caffe.Caffe.BatchNormParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<BatchNormParameter> PARSER =
        new com.google.protobuf.AbstractParser<BatchNormParameter>() {
      public BatchNormParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new BatchNormParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<BatchNormParameter> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional bool use_global_stats = 1;
    public static final int USE_GLOBAL_STATS_FIELD_NUMBER = 1;
    private boolean useGlobalStats_;
    /**
     * <code>optional bool use_global_stats = 1;</code>
     *
     * <pre>
     * If false, accumulate global mean/variance values via a moving average. If
     * true, use those accumulated values instead of computing mean/variance
     * across the batch.
     * </pre>
     */
    public boolean hasUseGlobalStats() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional bool use_global_stats = 1;</code>
     *
     * <pre>
     * If false, accumulate global mean/variance values via a moving average. If
     * true, use those accumulated values instead of computing mean/variance
     * across the batch.
     * </pre>
     */
    public boolean getUseGlobalStats() {
      return useGlobalStats_;
    }

    // optional float moving_average_fraction = 2 [default = 0.999];
    public static final int MOVING_AVERAGE_FRACTION_FIELD_NUMBER = 2;
    private float movingAverageFraction_;
    /**
     * <code>optional float moving_average_fraction = 2 [default = 0.999];</code>
     *
     * <pre>
     * How much does the moving average decay each iteration?
     * </pre>
     */
    public boolean hasMovingAverageFraction() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional float moving_average_fraction = 2 [default = 0.999];</code>
     *
     * <pre>
     * How much does the moving average decay each iteration?
     * </pre>
     */
    public float getMovingAverageFraction() {
      return movingAverageFraction_;
    }

    // optional float eps = 3 [default = 1e-05];
    public static final int EPS_FIELD_NUMBER = 3;
    private float eps_;
    /**
     * <code>optional float eps = 3 [default = 1e-05];</code>
     *
     * <pre>
     * Small value to add to the variance estimate so that we don't divide by
     * zero.
     * </pre>
     */
    public boolean hasEps() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional float eps = 3 [default = 1e-05];</code>
     *
     * <pre>
     * Small value to add to the variance estimate so that we don't divide by
     * zero.
     * </pre>
     */
    public float getEps() {
      return eps_;
    }

    private void initFields() {
      useGlobalStats_ = false;
      movingAverageFraction_ = 0.999F;
      eps_ = 1e-05F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBool(1, useGlobalStats_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, movingAverageFraction_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFloat(3, eps_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, useGlobalStats_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, movingAverageFraction_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(3, eps_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.BatchNormParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.BatchNormParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.BatchNormParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.BatchNormParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.BatchNormParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.BatchNormParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.BatchNormParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.BatchNormParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.BatchNormParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.BatchNormParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.BatchNormParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.BatchNormParameter}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements caffe.Caffe.BatchNormParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_BatchNormParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_BatchNormParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.BatchNormParameter.class, caffe.Caffe.BatchNormParameter.Builder.class);
      }

      // Construct using caffe.Caffe.BatchNormParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        useGlobalStats_ = false;
        bitField0_ = (bitField0_ & ~0x00000001);
        movingAverageFraction_ = 0.999F;
        bitField0_ = (bitField0_ & ~0x00000002);
        eps_ = 1e-05F;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_BatchNormParameter_descriptor;
      }

      public caffe.Caffe.BatchNormParameter getDefaultInstanceForType() {
        return caffe.Caffe.BatchNormParameter.getDefaultInstance();
      }

      public caffe.Caffe.BatchNormParameter build() {
        caffe.Caffe.BatchNormParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.BatchNormParameter buildPartial() {
        caffe.Caffe.BatchNormParameter result = new caffe.Caffe.BatchNormParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.useGlobalStats_ = useGlobalStats_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.movingAverageFraction_ = movingAverageFraction_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.eps_ = eps_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.BatchNormParameter) {
          return mergeFrom((caffe.Caffe.BatchNormParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.BatchNormParameter other) {
        if (other == caffe.Caffe.BatchNormParameter.getDefaultInstance()) return this;
        if (other.hasUseGlobalStats()) {
          setUseGlobalStats(other.getUseGlobalStats());
        }
        if (other.hasMovingAverageFraction()) {
          setMovingAverageFraction(other.getMovingAverageFraction());
        }
        if (other.hasEps()) {
          setEps(other.getEps());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.BatchNormParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.BatchNormParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional bool use_global_stats = 1;
      private boolean useGlobalStats_ ;
      /**
       * <code>optional bool use_global_stats = 1;</code>
       *
       * <pre>
       * If false, accumulate global mean/variance values via a moving average. If
       * true, use those accumulated values instead of computing mean/variance
       * across the batch.
       * </pre>
       */
      public boolean hasUseGlobalStats() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional bool use_global_stats = 1;</code>
       *
       * <pre>
       * If false, accumulate global mean/variance values via a moving average. If
       * true, use those accumulated values instead of computing mean/variance
       * across the batch.
       * </pre>
       */
      public boolean getUseGlobalStats() {
        return useGlobalStats_;
      }
      /**
       * <code>optional bool use_global_stats = 1;</code>
       *
       * <pre>
       * If false, accumulate global mean/variance values via a moving average. If
       * true, use those accumulated values instead of computing mean/variance
       * across the batch.
       * </pre>
       */
      public Builder setUseGlobalStats(boolean value) {
        bitField0_ |= 0x00000001;
        useGlobalStats_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool use_global_stats = 1;</code>
       *
       * <pre>
       * If false, accumulate global mean/variance values via a moving average. If
       * true, use those accumulated values instead of computing mean/variance
       * across the batch.
       * </pre>
       */
      public Builder clearUseGlobalStats() {
        bitField0_ = (bitField0_ & ~0x00000001);
        useGlobalStats_ = false;
        onChanged();
        return this;
      }

      // optional float moving_average_fraction = 2 [default = 0.999];
      private float movingAverageFraction_ = 0.999F;
      /**
       * <code>optional float moving_average_fraction = 2 [default = 0.999];</code>
       *
       * <pre>
       * How much does the moving average decay each iteration?
       * </pre>
       */
      public boolean hasMovingAverageFraction() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional float moving_average_fraction = 2 [default = 0.999];</code>
       *
       * <pre>
       * How much does the moving average decay each iteration?
       * </pre>
       */
      public float getMovingAverageFraction() {
        return movingAverageFraction_;
      }
      /**
       * <code>optional float moving_average_fraction = 2 [default = 0.999];</code>
       *
       * <pre>
       * How much does the moving average decay each iteration?
       * </pre>
       */
      public Builder setMovingAverageFraction(float value) {
        bitField0_ |= 0x00000002;
        movingAverageFraction_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float moving_average_fraction = 2 [default = 0.999];</code>
       *
       * <pre>
       * How much does the moving average decay each iteration?
       * </pre>
       */
      public Builder clearMovingAverageFraction() {
        bitField0_ = (bitField0_ & ~0x00000002);
        movingAverageFraction_ = 0.999F;
        onChanged();
        return this;
      }

      // optional float eps = 3 [default = 1e-05];
      private float eps_ = 1e-05F;
      /**
       * <code>optional float eps = 3 [default = 1e-05];</code>
       *
       * <pre>
       * Small value to add to the variance estimate so that we don't divide by
       * zero.
       * </pre>
       */
      public boolean hasEps() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional float eps = 3 [default = 1e-05];</code>
       *
       * <pre>
       * Small value to add to the variance estimate so that we don't divide by
       * zero.
       * </pre>
       */
      public float getEps() {
        return eps_;
      }
      /**
       * <code>optional float eps = 3 [default = 1e-05];</code>
       *
       * <pre>
       * Small value to add to the variance estimate so that we don't divide by
       * zero.
       * </pre>
       */
      public Builder setEps(float value) {
        bitField0_ |= 0x00000004;
        eps_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float eps = 3 [default = 1e-05];</code>
       *
       * <pre>
       * Small value to add to the variance estimate so that we don't divide by
       * zero.
       * </pre>
       */
      public Builder clearEps() {
        bitField0_ = (bitField0_ & ~0x00000004);
        eps_ = 1e-05F;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.BatchNormParameter)
    }

    static {
      defaultInstance = new BatchNormParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.BatchNormParameter)
  }

  public interface BiasParameterOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 axis = 1 [default = 1];
    /**
     * <code>optional int32 axis = 1 [default = 1];</code>
     *
     * <pre>
     * The first axis of bottom[0] (the first input Blob) along which to apply
     * bottom[1] (the second input Blob).  May be negative to index from the end
     * (e.g., -1 for the last axis).
     *
     * For example, if bottom[0] is 4D with shape 100x3x40x60, the output
     * top[0] will have the same shape, and bottom[1] may have any of the
     * following shapes (for the given value of axis):
     *    (axis == 0 == -4) 100; 100x3; 100x3x40; 100x3x40x60
     *    (axis == 1 == -3)          3;     3x40;     3x40x60
     *    (axis == 2 == -2)                   40;       40x60
     *    (axis == 3 == -1)                                60
     * Furthermore, bottom[1] may have the empty shape (regardless of the value of
     * "axis") -- a scalar bias.
     * </pre>
     */
    boolean hasAxis();
    /**
     * <code>optional int32 axis = 1 [default = 1];</code>
     *
     * <pre>
     * The first axis of bottom[0] (the first input Blob) along which to apply
     * bottom[1] (the second input Blob).  May be negative to index from the end
     * (e.g., -1 for the last axis).
     *
     * For example, if bottom[0] is 4D with shape 100x3x40x60, the output
     * top[0] will have the same shape, and bottom[1] may have any of the
     * following shapes (for the given value of axis):
     *    (axis == 0 == -4) 100; 100x3; 100x3x40; 100x3x40x60
     *    (axis == 1 == -3)          3;     3x40;     3x40x60
     *    (axis == 2 == -2)                   40;       40x60
     *    (axis == 3 == -1)                                60
     * Furthermore, bottom[1] may have the empty shape (regardless of the value of
     * "axis") -- a scalar bias.
     * </pre>
     */
    int getAxis();

    // optional int32 num_axes = 2 [default = 1];
    /**
     * <code>optional int32 num_axes = 2 [default = 1];</code>
     *
     * <pre>
     * (num_axes is ignored unless just one bottom is given and the bias is
     * a learned parameter of the layer.  Otherwise, num_axes is determined by the
     * number of axes by the second bottom.)
     * The number of axes of the input (bottom[0]) covered by the bias
     * parameter, or -1 to cover all axes of bottom[0] starting from `axis`.
     * Set num_axes := 0, to add a zero-axis Blob: a scalar.
     * </pre>
     */
    boolean hasNumAxes();
    /**
     * <code>optional int32 num_axes = 2 [default = 1];</code>
     *
     * <pre>
     * (num_axes is ignored unless just one bottom is given and the bias is
     * a learned parameter of the layer.  Otherwise, num_axes is determined by the
     * number of axes by the second bottom.)
     * The number of axes of the input (bottom[0]) covered by the bias
     * parameter, or -1 to cover all axes of bottom[0] starting from `axis`.
     * Set num_axes := 0, to add a zero-axis Blob: a scalar.
     * </pre>
     */
    int getNumAxes();

    // optional .caffe.FillerParameter filler = 3;
    /**
     * <code>optional .caffe.FillerParameter filler = 3;</code>
     *
     * <pre>
     * (filler is ignored unless just one bottom is given and the bias is
     * a learned parameter of the layer.)
     * The initialization for the learned bias parameter.
     * Default is the zero (0) initialization, resulting in the BiasLayer
     * initially performing the identity operation.
     * </pre>
     */
    boolean hasFiller();
    /**
     * <code>optional .caffe.FillerParameter filler = 3;</code>
     *
     * <pre>
     * (filler is ignored unless just one bottom is given and the bias is
     * a learned parameter of the layer.)
     * The initialization for the learned bias parameter.
     * Default is the zero (0) initialization, resulting in the BiasLayer
     * initially performing the identity operation.
     * </pre>
     */
    caffe.Caffe.FillerParameter getFiller();
    /**
     * <code>optional .caffe.FillerParameter filler = 3;</code>
     *
     * <pre>
     * (filler is ignored unless just one bottom is given and the bias is
     * a learned parameter of the layer.)
     * The initialization for the learned bias parameter.
     * Default is the zero (0) initialization, resulting in the BiasLayer
     * initially performing the identity operation.
     * </pre>
     */
    caffe.Caffe.FillerParameterOrBuilder getFillerOrBuilder();
  }
  /**
   * Protobuf type {@code caffe.BiasParameter}
   */
  public static final class BiasParameter extends
      com.google.protobuf.GeneratedMessage
      implements BiasParameterOrBuilder {
    // Use BiasParameter.newBuilder() to construct.
    private BiasParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private BiasParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final BiasParameter defaultInstance;
    public static BiasParameter getDefaultInstance() {
      return defaultInstance;
    }

    public BiasParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private BiasParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              axis_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              numAxes_ = input.readInt32();
              break;
            }
            case 26: {
              caffe.Caffe.FillerParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = filler_.toBuilder();
              }
              filler_ = input.readMessage(caffe.Caffe.FillerParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(filler_);
                filler_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_BiasParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_BiasParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.BiasParameter.class, caffe.Caffe.BiasParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<BiasParameter> PARSER =
        new com.google.protobuf.AbstractParser<BiasParameter>() {
      public BiasParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new BiasParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<BiasParameter> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 axis = 1 [default = 1];
    public static final int AXIS_FIELD_NUMBER = 1;
    private int axis_;
    /**
     * <code>optional int32 axis = 1 [default = 1];</code>
     *
     * <pre>
     * The first axis of bottom[0] (the first input Blob) along which to apply
     * bottom[1] (the second input Blob).  May be negative to index from the end
     * (e.g., -1 for the last axis).
     *
     * For example, if bottom[0] is 4D with shape 100x3x40x60, the output
     * top[0] will have the same shape, and bottom[1] may have any of the
     * following shapes (for the given value of axis):
     *    (axis == 0 == -4) 100; 100x3; 100x3x40; 100x3x40x60
     *    (axis == 1 == -3)          3;     3x40;     3x40x60
     *    (axis == 2 == -2)                   40;       40x60
     *    (axis == 3 == -1)                                60
     * Furthermore, bottom[1] may have the empty shape (regardless of the value of
     * "axis") -- a scalar bias.
     * </pre>
     */
    public boolean hasAxis() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 axis = 1 [default = 1];</code>
     *
     * <pre>
     * The first axis of bottom[0] (the first input Blob) along which to apply
     * bottom[1] (the second input Blob).  May be negative to index from the end
     * (e.g., -1 for the last axis).
     *
     * For example, if bottom[0] is 4D with shape 100x3x40x60, the output
     * top[0] will have the same shape, and bottom[1] may have any of the
     * following shapes (for the given value of axis):
     *    (axis == 0 == -4) 100; 100x3; 100x3x40; 100x3x40x60
     *    (axis == 1 == -3)          3;     3x40;     3x40x60
     *    (axis == 2 == -2)                   40;       40x60
     *    (axis == 3 == -1)                                60
     * Furthermore, bottom[1] may have the empty shape (regardless of the value of
     * "axis") -- a scalar bias.
     * </pre>
     */
    public int getAxis() {
      return axis_;
    }

    // optional int32 num_axes = 2 [default = 1];
    public static final int NUM_AXES_FIELD_NUMBER = 2;
    private int numAxes_;
    /**
     * <code>optional int32 num_axes = 2 [default = 1];</code>
     *
     * <pre>
     * (num_axes is ignored unless just one bottom is given and the bias is
     * a learned parameter of the layer.  Otherwise, num_axes is determined by the
     * number of axes by the second bottom.)
     * The number of axes of the input (bottom[0]) covered by the bias
     * parameter, or -1 to cover all axes of bottom[0] starting from `axis`.
     * Set num_axes := 0, to add a zero-axis Blob: a scalar.
     * </pre>
     */
    public boolean hasNumAxes() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 num_axes = 2 [default = 1];</code>
     *
     * <pre>
     * (num_axes is ignored unless just one bottom is given and the bias is
     * a learned parameter of the layer.  Otherwise, num_axes is determined by the
     * number of axes by the second bottom.)
     * The number of axes of the input (bottom[0]) covered by the bias
     * parameter, or -1 to cover all axes of bottom[0] starting from `axis`.
     * Set num_axes := 0, to add a zero-axis Blob: a scalar.
     * </pre>
     */
    public int getNumAxes() {
      return numAxes_;
    }

    // optional .caffe.FillerParameter filler = 3;
    public static final int FILLER_FIELD_NUMBER = 3;
    private caffe.Caffe.FillerParameter filler_;
    /**
     * <code>optional .caffe.FillerParameter filler = 3;</code>
     *
     * <pre>
     * (filler is ignored unless just one bottom is given and the bias is
     * a learned parameter of the layer.)
     * The initialization for the learned bias parameter.
     * Default is the zero (0) initialization, resulting in the BiasLayer
     * initially performing the identity operation.
     * </pre>
     */
    public boolean hasFiller() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .caffe.FillerParameter filler = 3;</code>
     *
     * <pre>
     * (filler is ignored unless just one bottom is given and the bias is
     * a learned parameter of the layer.)
     * The initialization for the learned bias parameter.
     * Default is the zero (0) initialization, resulting in the BiasLayer
     * initially performing the identity operation.
     * </pre>
     */
    public caffe.Caffe.FillerParameter getFiller() {
      return filler_;
    }
    /**
     * <code>optional .caffe.FillerParameter filler = 3;</code>
     *
     * <pre>
     * (filler is ignored unless just one bottom is given and the bias is
     * a learned parameter of the layer.)
     * The initialization for the learned bias parameter.
     * Default is the zero (0) initialization, resulting in the BiasLayer
     * initially performing the identity operation.
     * </pre>
     */
    public caffe.Caffe.FillerParameterOrBuilder getFillerOrBuilder() {
      return filler_;
    }

    private void initFields() {
      axis_ = 1;
      numAxes_ = 1;
      filler_ = caffe.Caffe.FillerParameter.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, axis_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, numAxes_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, filler_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, axis_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, numAxes_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, filler_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.BiasParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.BiasParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.BiasParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.BiasParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.BiasParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.BiasParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.BiasParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.BiasParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.BiasParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.BiasParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.BiasParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.BiasParameter}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements caffe.Caffe.BiasParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_BiasParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_BiasParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.BiasParameter.class, caffe.Caffe.BiasParameter.Builder.class);
      }

      // Construct using caffe.Caffe.BiasParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getFillerFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        axis_ = 1;
        bitField0_ = (bitField0_ & ~0x00000001);
        numAxes_ = 1;
        bitField0_ = (bitField0_ & ~0x00000002);
        if (fillerBuilder_ == null) {
          filler_ = caffe.Caffe.FillerParameter.getDefaultInstance();
        } else {
          fillerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_BiasParameter_descriptor;
      }

      public caffe.Caffe.BiasParameter getDefaultInstanceForType() {
        return caffe.Caffe.BiasParameter.getDefaultInstance();
      }

      public caffe.Caffe.BiasParameter build() {
        caffe.Caffe.BiasParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.BiasParameter buildPartial() {
        caffe.Caffe.BiasParameter result = new caffe.Caffe.BiasParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.axis_ = axis_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.numAxes_ = numAxes_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (fillerBuilder_ == null) {
          result.filler_ = filler_;
        } else {
          result.filler_ = fillerBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.BiasParameter) {
          return mergeFrom((caffe.Caffe.BiasParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.BiasParameter other) {
        if (other == caffe.Caffe.BiasParameter.getDefaultInstance()) return this;
        if (other.hasAxis()) {
          setAxis(other.getAxis());
        }
        if (other.hasNumAxes()) {
          setNumAxes(other.getNumAxes());
        }
        if (other.hasFiller()) {
          mergeFiller(other.getFiller());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.BiasParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.BiasParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 axis = 1 [default = 1];
      private int axis_ = 1;
      /**
       * <code>optional int32 axis = 1 [default = 1];</code>
       *
       * <pre>
       * The first axis of bottom[0] (the first input Blob) along which to apply
       * bottom[1] (the second input Blob).  May be negative to index from the end
       * (e.g., -1 for the last axis).
       *
       * For example, if bottom[0] is 4D with shape 100x3x40x60, the output
       * top[0] will have the same shape, and bottom[1] may have any of the
       * following shapes (for the given value of axis):
       *    (axis == 0 == -4) 100; 100x3; 100x3x40; 100x3x40x60
       *    (axis == 1 == -3)          3;     3x40;     3x40x60
       *    (axis == 2 == -2)                   40;       40x60
       *    (axis == 3 == -1)                                60
       * Furthermore, bottom[1] may have the empty shape (regardless of the value of
       * "axis") -- a scalar bias.
       * </pre>
       */
      public boolean hasAxis() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 axis = 1 [default = 1];</code>
       *
       * <pre>
       * The first axis of bottom[0] (the first input Blob) along which to apply
       * bottom[1] (the second input Blob).  May be negative to index from the end
       * (e.g., -1 for the last axis).
       *
       * For example, if bottom[0] is 4D with shape 100x3x40x60, the output
       * top[0] will have the same shape, and bottom[1] may have any of the
       * following shapes (for the given value of axis):
       *    (axis == 0 == -4) 100; 100x3; 100x3x40; 100x3x40x60
       *    (axis == 1 == -3)          3;     3x40;     3x40x60
       *    (axis == 2 == -2)                   40;       40x60
       *    (axis == 3 == -1)                                60
       * Furthermore, bottom[1] may have the empty shape (regardless of the value of
       * "axis") -- a scalar bias.
       * </pre>
       */
      public int getAxis() {
        return axis_;
      }
      /**
       * <code>optional int32 axis = 1 [default = 1];</code>
       *
       * <pre>
       * The first axis of bottom[0] (the first input Blob) along which to apply
       * bottom[1] (the second input Blob).  May be negative to index from the end
       * (e.g., -1 for the last axis).
       *
       * For example, if bottom[0] is 4D with shape 100x3x40x60, the output
       * top[0] will have the same shape, and bottom[1] may have any of the
       * following shapes (for the given value of axis):
       *    (axis == 0 == -4) 100; 100x3; 100x3x40; 100x3x40x60
       *    (axis == 1 == -3)          3;     3x40;     3x40x60
       *    (axis == 2 == -2)                   40;       40x60
       *    (axis == 3 == -1)                                60
       * Furthermore, bottom[1] may have the empty shape (regardless of the value of
       * "axis") -- a scalar bias.
       * </pre>
       */
      public Builder setAxis(int value) {
        bitField0_ |= 0x00000001;
        axis_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 axis = 1 [default = 1];</code>
       *
       * <pre>
       * The first axis of bottom[0] (the first input Blob) along which to apply
       * bottom[1] (the second input Blob).  May be negative to index from the end
       * (e.g., -1 for the last axis).
       *
       * For example, if bottom[0] is 4D with shape 100x3x40x60, the output
       * top[0] will have the same shape, and bottom[1] may have any of the
       * following shapes (for the given value of axis):
       *    (axis == 0 == -4) 100; 100x3; 100x3x40; 100x3x40x60
       *    (axis == 1 == -3)          3;     3x40;     3x40x60
       *    (axis == 2 == -2)                   40;       40x60
       *    (axis == 3 == -1)                                60
       * Furthermore, bottom[1] may have the empty shape (regardless of the value of
       * "axis") -- a scalar bias.
       * </pre>
       */
      public Builder clearAxis() {
        bitField0_ = (bitField0_ & ~0x00000001);
        axis_ = 1;
        onChanged();
        return this;
      }

      // optional int32 num_axes = 2 [default = 1];
      private int numAxes_ = 1;
      /**
       * <code>optional int32 num_axes = 2 [default = 1];</code>
       *
       * <pre>
       * (num_axes is ignored unless just one bottom is given and the bias is
       * a learned parameter of the layer.  Otherwise, num_axes is determined by the
       * number of axes by the second bottom.)
       * The number of axes of the input (bottom[0]) covered by the bias
       * parameter, or -1 to cover all axes of bottom[0] starting from `axis`.
       * Set num_axes := 0, to add a zero-axis Blob: a scalar.
       * </pre>
       */
      public boolean hasNumAxes() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 num_axes = 2 [default = 1];</code>
       *
       * <pre>
       * (num_axes is ignored unless just one bottom is given and the bias is
       * a learned parameter of the layer.  Otherwise, num_axes is determined by the
       * number of axes by the second bottom.)
       * The number of axes of the input (bottom[0]) covered by the bias
       * parameter, or -1 to cover all axes of bottom[0] starting from `axis`.
       * Set num_axes := 0, to add a zero-axis Blob: a scalar.
       * </pre>
       */
      public int getNumAxes() {
        return numAxes_;
      }
      /**
       * <code>optional int32 num_axes = 2 [default = 1];</code>
       *
       * <pre>
       * (num_axes is ignored unless just one bottom is given and the bias is
       * a learned parameter of the layer.  Otherwise, num_axes is determined by the
       * number of axes by the second bottom.)
       * The number of axes of the input (bottom[0]) covered by the bias
       * parameter, or -1 to cover all axes of bottom[0] starting from `axis`.
       * Set num_axes := 0, to add a zero-axis Blob: a scalar.
       * </pre>
       */
      public Builder setNumAxes(int value) {
        bitField0_ |= 0x00000002;
        numAxes_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 num_axes = 2 [default = 1];</code>
       *
       * <pre>
       * (num_axes is ignored unless just one bottom is given and the bias is
       * a learned parameter of the layer.  Otherwise, num_axes is determined by the
       * number of axes by the second bottom.)
       * The number of axes of the input (bottom[0]) covered by the bias
       * parameter, or -1 to cover all axes of bottom[0] starting from `axis`.
       * Set num_axes := 0, to add a zero-axis Blob: a scalar.
       * </pre>
       */
      public Builder clearNumAxes() {
        bitField0_ = (bitField0_ & ~0x00000002);
        numAxes_ = 1;
        onChanged();
        return this;
      }

      // optional .caffe.FillerParameter filler = 3;
      private caffe.Caffe.FillerParameter filler_ = caffe.Caffe.FillerParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.FillerParameter, caffe.Caffe.FillerParameter.Builder, caffe.Caffe.FillerParameterOrBuilder> fillerBuilder_;
      /**
       * <code>optional .caffe.FillerParameter filler = 3;</code>
       *
       * <pre>
       * (filler is ignored unless just one bottom is given and the bias is
       * a learned parameter of the layer.)
       * The initialization for the learned bias parameter.
       * Default is the zero (0) initialization, resulting in the BiasLayer
       * initially performing the identity operation.
       * </pre>
       */
      public boolean hasFiller() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .caffe.FillerParameter filler = 3;</code>
       *
       * <pre>
       * (filler is ignored unless just one bottom is given and the bias is
       * a learned parameter of the layer.)
       * The initialization for the learned bias parameter.
       * Default is the zero (0) initialization, resulting in the BiasLayer
       * initially performing the identity operation.
       * </pre>
       */
      public caffe.Caffe.FillerParameter getFiller() {
        if (fillerBuilder_ == null) {
          return filler_;
        } else {
          return fillerBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.FillerParameter filler = 3;</code>
       *
       * <pre>
       * (filler is ignored unless just one bottom is given and the bias is
       * a learned parameter of the layer.)
       * The initialization for the learned bias parameter.
       * Default is the zero (0) initialization, resulting in the BiasLayer
       * initially performing the identity operation.
       * </pre>
       */
      public Builder setFiller(caffe.Caffe.FillerParameter value) {
        if (fillerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          filler_ = value;
          onChanged();
        } else {
          fillerBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter filler = 3;</code>
       *
       * <pre>
       * (filler is ignored unless just one bottom is given and the bias is
       * a learned parameter of the layer.)
       * The initialization for the learned bias parameter.
       * Default is the zero (0) initialization, resulting in the BiasLayer
       * initially performing the identity operation.
       * </pre>
       */
      public Builder setFiller(
          caffe.Caffe.FillerParameter.Builder builderForValue) {
        if (fillerBuilder_ == null) {
          filler_ = builderForValue.build();
          onChanged();
        } else {
          fillerBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter filler = 3;</code>
       *
       * <pre>
       * (filler is ignored unless just one bottom is given and the bias is
       * a learned parameter of the layer.)
       * The initialization for the learned bias parameter.
       * Default is the zero (0) initialization, resulting in the BiasLayer
       * initially performing the identity operation.
       * </pre>
       */
      public Builder mergeFiller(caffe.Caffe.FillerParameter value) {
        if (fillerBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              filler_ != caffe.Caffe.FillerParameter.getDefaultInstance()) {
            filler_ =
              caffe.Caffe.FillerParameter.newBuilder(filler_).mergeFrom(value).buildPartial();
          } else {
            filler_ = value;
          }
          onChanged();
        } else {
          fillerBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter filler = 3;</code>
       *
       * <pre>
       * (filler is ignored unless just one bottom is given and the bias is
       * a learned parameter of the layer.)
       * The initialization for the learned bias parameter.
       * Default is the zero (0) initialization, resulting in the BiasLayer
       * initially performing the identity operation.
       * </pre>
       */
      public Builder clearFiller() {
        if (fillerBuilder_ == null) {
          filler_ = caffe.Caffe.FillerParameter.getDefaultInstance();
          onChanged();
        } else {
          fillerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter filler = 3;</code>
       *
       * <pre>
       * (filler is ignored unless just one bottom is given and the bias is
       * a learned parameter of the layer.)
       * The initialization for the learned bias parameter.
       * Default is the zero (0) initialization, resulting in the BiasLayer
       * initially performing the identity operation.
       * </pre>
       */
      public caffe.Caffe.FillerParameter.Builder getFillerBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getFillerFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.FillerParameter filler = 3;</code>
       *
       * <pre>
       * (filler is ignored unless just one bottom is given and the bias is
       * a learned parameter of the layer.)
       * The initialization for the learned bias parameter.
       * Default is the zero (0) initialization, resulting in the BiasLayer
       * initially performing the identity operation.
       * </pre>
       */
      public caffe.Caffe.FillerParameterOrBuilder getFillerOrBuilder() {
        if (fillerBuilder_ != null) {
          return fillerBuilder_.getMessageOrBuilder();
        } else {
          return filler_;
        }
      }
      /**
       * <code>optional .caffe.FillerParameter filler = 3;</code>
       *
       * <pre>
       * (filler is ignored unless just one bottom is given and the bias is
       * a learned parameter of the layer.)
       * The initialization for the learned bias parameter.
       * Default is the zero (0) initialization, resulting in the BiasLayer
       * initially performing the identity operation.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.FillerParameter, caffe.Caffe.FillerParameter.Builder, caffe.Caffe.FillerParameterOrBuilder> 
          getFillerFieldBuilder() {
        if (fillerBuilder_ == null) {
          fillerBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.FillerParameter, caffe.Caffe.FillerParameter.Builder, caffe.Caffe.FillerParameterOrBuilder>(
                  filler_,
                  getParentForChildren(),
                  isClean());
          filler_ = null;
        }
        return fillerBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:caffe.BiasParameter)
    }

    static {
      defaultInstance = new BiasParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.BiasParameter)
  }

  public interface ContrastiveLossParameterOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional float margin = 1 [default = 1];
    /**
     * <code>optional float margin = 1 [default = 1];</code>
     *
     * <pre>
     * margin for dissimilar pair
     * </pre>
     */
    boolean hasMargin();
    /**
     * <code>optional float margin = 1 [default = 1];</code>
     *
     * <pre>
     * margin for dissimilar pair
     * </pre>
     */
    float getMargin();

    // optional bool legacy_version = 2 [default = false];
    /**
     * <code>optional bool legacy_version = 2 [default = false];</code>
     *
     * <pre>
     * The first implementation of this cost did not exactly match the cost of
     * Hadsell et al 2006 -- using (margin - d^2) instead of (margin - d)^2.
     * legacy_version = false (the default) uses (margin - d)^2 as proposed in the
     * Hadsell paper. New models should probably use this version.
     * legacy_version = true uses (margin - d^2). This is kept to support /
     * reproduce existing models and results
     * </pre>
     */
    boolean hasLegacyVersion();
    /**
     * <code>optional bool legacy_version = 2 [default = false];</code>
     *
     * <pre>
     * The first implementation of this cost did not exactly match the cost of
     * Hadsell et al 2006 -- using (margin - d^2) instead of (margin - d)^2.
     * legacy_version = false (the default) uses (margin - d)^2 as proposed in the
     * Hadsell paper. New models should probably use this version.
     * legacy_version = true uses (margin - d^2). This is kept to support /
     * reproduce existing models and results
     * </pre>
     */
    boolean getLegacyVersion();
  }
  /**
   * Protobuf type {@code caffe.ContrastiveLossParameter}
   */
  public static final class ContrastiveLossParameter extends
      com.google.protobuf.GeneratedMessage
      implements ContrastiveLossParameterOrBuilder {
    // Use ContrastiveLossParameter.newBuilder() to construct.
    private ContrastiveLossParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ContrastiveLossParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ContrastiveLossParameter defaultInstance;
    public static ContrastiveLossParameter getDefaultInstance() {
      return defaultInstance;
    }

    public ContrastiveLossParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ContrastiveLossParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 13: {
              bitField0_ |= 0x00000001;
              margin_ = input.readFloat();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              legacyVersion_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_ContrastiveLossParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_ContrastiveLossParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.ContrastiveLossParameter.class, caffe.Caffe.ContrastiveLossParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<ContrastiveLossParameter> PARSER =
        new com.google.protobuf.AbstractParser<ContrastiveLossParameter>() {
      public ContrastiveLossParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ContrastiveLossParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ContrastiveLossParameter> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional float margin = 1 [default = 1];
    public static final int MARGIN_FIELD_NUMBER = 1;
    private float margin_;
    /**
     * <code>optional float margin = 1 [default = 1];</code>
     *
     * <pre>
     * margin for dissimilar pair
     * </pre>
     */
    public boolean hasMargin() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional float margin = 1 [default = 1];</code>
     *
     * <pre>
     * margin for dissimilar pair
     * </pre>
     */
    public float getMargin() {
      return margin_;
    }

    // optional bool legacy_version = 2 [default = false];
    public static final int LEGACY_VERSION_FIELD_NUMBER = 2;
    private boolean legacyVersion_;
    /**
     * <code>optional bool legacy_version = 2 [default = false];</code>
     *
     * <pre>
     * The first implementation of this cost did not exactly match the cost of
     * Hadsell et al 2006 -- using (margin - d^2) instead of (margin - d)^2.
     * legacy_version = false (the default) uses (margin - d)^2 as proposed in the
     * Hadsell paper. New models should probably use this version.
     * legacy_version = true uses (margin - d^2). This is kept to support /
     * reproduce existing models and results
     * </pre>
     */
    public boolean hasLegacyVersion() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional bool legacy_version = 2 [default = false];</code>
     *
     * <pre>
     * The first implementation of this cost did not exactly match the cost of
     * Hadsell et al 2006 -- using (margin - d^2) instead of (margin - d)^2.
     * legacy_version = false (the default) uses (margin - d)^2 as proposed in the
     * Hadsell paper. New models should probably use this version.
     * legacy_version = true uses (margin - d^2). This is kept to support /
     * reproduce existing models and results
     * </pre>
     */
    public boolean getLegacyVersion() {
      return legacyVersion_;
    }

    private void initFields() {
      margin_ = 1F;
      legacyVersion_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeFloat(1, margin_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBool(2, legacyVersion_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(1, margin_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, legacyVersion_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.ContrastiveLossParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.ContrastiveLossParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.ContrastiveLossParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.ContrastiveLossParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.ContrastiveLossParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.ContrastiveLossParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.ContrastiveLossParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.ContrastiveLossParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.ContrastiveLossParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.ContrastiveLossParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.ContrastiveLossParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.ContrastiveLossParameter}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements caffe.Caffe.ContrastiveLossParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_ContrastiveLossParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_ContrastiveLossParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.ContrastiveLossParameter.class, caffe.Caffe.ContrastiveLossParameter.Builder.class);
      }

      // Construct using caffe.Caffe.ContrastiveLossParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        margin_ = 1F;
        bitField0_ = (bitField0_ & ~0x00000001);
        legacyVersion_ = false;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_ContrastiveLossParameter_descriptor;
      }

      public caffe.Caffe.ContrastiveLossParameter getDefaultInstanceForType() {
        return caffe.Caffe.ContrastiveLossParameter.getDefaultInstance();
      }

      public caffe.Caffe.ContrastiveLossParameter build() {
        caffe.Caffe.ContrastiveLossParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.ContrastiveLossParameter buildPartial() {
        caffe.Caffe.ContrastiveLossParameter result = new caffe.Caffe.ContrastiveLossParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.margin_ = margin_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.legacyVersion_ = legacyVersion_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.ContrastiveLossParameter) {
          return mergeFrom((caffe.Caffe.ContrastiveLossParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.ContrastiveLossParameter other) {
        if (other == caffe.Caffe.ContrastiveLossParameter.getDefaultInstance()) return this;
        if (other.hasMargin()) {
          setMargin(other.getMargin());
        }
        if (other.hasLegacyVersion()) {
          setLegacyVersion(other.getLegacyVersion());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.ContrastiveLossParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.ContrastiveLossParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional float margin = 1 [default = 1];
      private float margin_ = 1F;
      /**
       * <code>optional float margin = 1 [default = 1];</code>
       *
       * <pre>
       * margin for dissimilar pair
       * </pre>
       */
      public boolean hasMargin() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional float margin = 1 [default = 1];</code>
       *
       * <pre>
       * margin for dissimilar pair
       * </pre>
       */
      public float getMargin() {
        return margin_;
      }
      /**
       * <code>optional float margin = 1 [default = 1];</code>
       *
       * <pre>
       * margin for dissimilar pair
       * </pre>
       */
      public Builder setMargin(float value) {
        bitField0_ |= 0x00000001;
        margin_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float margin = 1 [default = 1];</code>
       *
       * <pre>
       * margin for dissimilar pair
       * </pre>
       */
      public Builder clearMargin() {
        bitField0_ = (bitField0_ & ~0x00000001);
        margin_ = 1F;
        onChanged();
        return this;
      }

      // optional bool legacy_version = 2 [default = false];
      private boolean legacyVersion_ ;
      /**
       * <code>optional bool legacy_version = 2 [default = false];</code>
       *
       * <pre>
       * The first implementation of this cost did not exactly match the cost of
       * Hadsell et al 2006 -- using (margin - d^2) instead of (margin - d)^2.
       * legacy_version = false (the default) uses (margin - d)^2 as proposed in the
       * Hadsell paper. New models should probably use this version.
       * legacy_version = true uses (margin - d^2). This is kept to support /
       * reproduce existing models and results
       * </pre>
       */
      public boolean hasLegacyVersion() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional bool legacy_version = 2 [default = false];</code>
       *
       * <pre>
       * The first implementation of this cost did not exactly match the cost of
       * Hadsell et al 2006 -- using (margin - d^2) instead of (margin - d)^2.
       * legacy_version = false (the default) uses (margin - d)^2 as proposed in the
       * Hadsell paper. New models should probably use this version.
       * legacy_version = true uses (margin - d^2). This is kept to support /
       * reproduce existing models and results
       * </pre>
       */
      public boolean getLegacyVersion() {
        return legacyVersion_;
      }
      /**
       * <code>optional bool legacy_version = 2 [default = false];</code>
       *
       * <pre>
       * The first implementation of this cost did not exactly match the cost of
       * Hadsell et al 2006 -- using (margin - d^2) instead of (margin - d)^2.
       * legacy_version = false (the default) uses (margin - d)^2 as proposed in the
       * Hadsell paper. New models should probably use this version.
       * legacy_version = true uses (margin - d^2). This is kept to support /
       * reproduce existing models and results
       * </pre>
       */
      public Builder setLegacyVersion(boolean value) {
        bitField0_ |= 0x00000002;
        legacyVersion_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool legacy_version = 2 [default = false];</code>
       *
       * <pre>
       * The first implementation of this cost did not exactly match the cost of
       * Hadsell et al 2006 -- using (margin - d^2) instead of (margin - d)^2.
       * legacy_version = false (the default) uses (margin - d)^2 as proposed in the
       * Hadsell paper. New models should probably use this version.
       * legacy_version = true uses (margin - d^2). This is kept to support /
       * reproduce existing models and results
       * </pre>
       */
      public Builder clearLegacyVersion() {
        bitField0_ = (bitField0_ & ~0x00000002);
        legacyVersion_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.ContrastiveLossParameter)
    }

    static {
      defaultInstance = new ContrastiveLossParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.ContrastiveLossParameter)
  }

  public interface ConvolutionParameterOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional uint32 num_output = 1;
    /**
     * <code>optional uint32 num_output = 1;</code>
     *
     * <pre>
     * The number of outputs for the layer
     * </pre>
     */
    boolean hasNumOutput();
    /**
     * <code>optional uint32 num_output = 1;</code>
     *
     * <pre>
     * The number of outputs for the layer
     * </pre>
     */
    int getNumOutput();

    // optional bool bias_term = 2 [default = true];
    /**
     * <code>optional bool bias_term = 2 [default = true];</code>
     *
     * <pre>
     * whether to have bias terms
     * </pre>
     */
    boolean hasBiasTerm();
    /**
     * <code>optional bool bias_term = 2 [default = true];</code>
     *
     * <pre>
     * whether to have bias terms
     * </pre>
     */
    boolean getBiasTerm();

    // repeated uint32 pad = 3;
    /**
     * <code>repeated uint32 pad = 3;</code>
     *
     * <pre>
     * Pad, kernel size, and stride are all given as a single value for equal
     * dimensions in all spatial dimensions, or once per spatial dimension.
     * </pre>
     */
    java.util.List<java.lang.Integer> getPadList();
    /**
     * <code>repeated uint32 pad = 3;</code>
     *
     * <pre>
     * Pad, kernel size, and stride are all given as a single value for equal
     * dimensions in all spatial dimensions, or once per spatial dimension.
     * </pre>
     */
    int getPadCount();
    /**
     * <code>repeated uint32 pad = 3;</code>
     *
     * <pre>
     * Pad, kernel size, and stride are all given as a single value for equal
     * dimensions in all spatial dimensions, or once per spatial dimension.
     * </pre>
     */
    int getPad(int index);

    // repeated uint32 kernel_size = 4;
    /**
     * <code>repeated uint32 kernel_size = 4;</code>
     *
     * <pre>
     * The kernel size
     * </pre>
     */
    java.util.List<java.lang.Integer> getKernelSizeList();
    /**
     * <code>repeated uint32 kernel_size = 4;</code>
     *
     * <pre>
     * The kernel size
     * </pre>
     */
    int getKernelSizeCount();
    /**
     * <code>repeated uint32 kernel_size = 4;</code>
     *
     * <pre>
     * The kernel size
     * </pre>
     */
    int getKernelSize(int index);

    // repeated uint32 stride = 6;
    /**
     * <code>repeated uint32 stride = 6;</code>
     *
     * <pre>
     * The stride; defaults to 1
     * </pre>
     */
    java.util.List<java.lang.Integer> getStrideList();
    /**
     * <code>repeated uint32 stride = 6;</code>
     *
     * <pre>
     * The stride; defaults to 1
     * </pre>
     */
    int getStrideCount();
    /**
     * <code>repeated uint32 stride = 6;</code>
     *
     * <pre>
     * The stride; defaults to 1
     * </pre>
     */
    int getStride(int index);

    // repeated uint32 dilation = 18;
    /**
     * <code>repeated uint32 dilation = 18;</code>
     *
     * <pre>
     * Factor used to dilate the kernel, (implicitly) zero-filling the resulting
     * holes. (Kernel dilation is sometimes referred to by its use in the
     * algorithme à trous from Holschneider et al. 1987.)
     * </pre>
     */
    java.util.List<java.lang.Integer> getDilationList();
    /**
     * <code>repeated uint32 dilation = 18;</code>
     *
     * <pre>
     * Factor used to dilate the kernel, (implicitly) zero-filling the resulting
     * holes. (Kernel dilation is sometimes referred to by its use in the
     * algorithme à trous from Holschneider et al. 1987.)
     * </pre>
     */
    int getDilationCount();
    /**
     * <code>repeated uint32 dilation = 18;</code>
     *
     * <pre>
     * Factor used to dilate the kernel, (implicitly) zero-filling the resulting
     * holes. (Kernel dilation is sometimes referred to by its use in the
     * algorithme à trous from Holschneider et al. 1987.)
     * </pre>
     */
    int getDilation(int index);

    // optional uint32 pad_h = 9 [default = 0];
    /**
     * <code>optional uint32 pad_h = 9 [default = 0];</code>
     *
     * <pre>
     * For 2D convolution only, the *_h and *_w versions may also be used to
     * specify both spatial dimensions.
     * </pre>
     */
    boolean hasPadH();
    /**
     * <code>optional uint32 pad_h = 9 [default = 0];</code>
     *
     * <pre>
     * For 2D convolution only, the *_h and *_w versions may also be used to
     * specify both spatial dimensions.
     * </pre>
     */
    int getPadH();

    // optional uint32 pad_w = 10 [default = 0];
    /**
     * <code>optional uint32 pad_w = 10 [default = 0];</code>
     *
     * <pre>
     * The padding width (2D only)
     * </pre>
     */
    boolean hasPadW();
    /**
     * <code>optional uint32 pad_w = 10 [default = 0];</code>
     *
     * <pre>
     * The padding width (2D only)
     * </pre>
     */
    int getPadW();

    // optional uint32 kernel_h = 11;
    /**
     * <code>optional uint32 kernel_h = 11;</code>
     *
     * <pre>
     * The kernel height (2D only)
     * </pre>
     */
    boolean hasKernelH();
    /**
     * <code>optional uint32 kernel_h = 11;</code>
     *
     * <pre>
     * The kernel height (2D only)
     * </pre>
     */
    int getKernelH();

    // optional uint32 kernel_w = 12;
    /**
     * <code>optional uint32 kernel_w = 12;</code>
     *
     * <pre>
     * The kernel width (2D only)
     * </pre>
     */
    boolean hasKernelW();
    /**
     * <code>optional uint32 kernel_w = 12;</code>
     *
     * <pre>
     * The kernel width (2D only)
     * </pre>
     */
    int getKernelW();

    // optional uint32 stride_h = 13;
    /**
     * <code>optional uint32 stride_h = 13;</code>
     *
     * <pre>
     * The stride height (2D only)
     * </pre>
     */
    boolean hasStrideH();
    /**
     * <code>optional uint32 stride_h = 13;</code>
     *
     * <pre>
     * The stride height (2D only)
     * </pre>
     */
    int getStrideH();

    // optional uint32 stride_w = 14;
    /**
     * <code>optional uint32 stride_w = 14;</code>
     *
     * <pre>
     * The stride width (2D only)
     * </pre>
     */
    boolean hasStrideW();
    /**
     * <code>optional uint32 stride_w = 14;</code>
     *
     * <pre>
     * The stride width (2D only)
     * </pre>
     */
    int getStrideW();

    // optional uint32 group = 5 [default = 1];
    /**
     * <code>optional uint32 group = 5 [default = 1];</code>
     *
     * <pre>
     * The group size for group conv
     * </pre>
     */
    boolean hasGroup();
    /**
     * <code>optional uint32 group = 5 [default = 1];</code>
     *
     * <pre>
     * The group size for group conv
     * </pre>
     */
    int getGroup();

    // optional .caffe.FillerParameter weight_filler = 7;
    /**
     * <code>optional .caffe.FillerParameter weight_filler = 7;</code>
     *
     * <pre>
     * The filler for the weight
     * </pre>
     */
    boolean hasWeightFiller();
    /**
     * <code>optional .caffe.FillerParameter weight_filler = 7;</code>
     *
     * <pre>
     * The filler for the weight
     * </pre>
     */
    caffe.Caffe.FillerParameter getWeightFiller();
    /**
     * <code>optional .caffe.FillerParameter weight_filler = 7;</code>
     *
     * <pre>
     * The filler for the weight
     * </pre>
     */
    caffe.Caffe.FillerParameterOrBuilder getWeightFillerOrBuilder();

    // optional .caffe.FillerParameter bias_filler = 8;
    /**
     * <code>optional .caffe.FillerParameter bias_filler = 8;</code>
     *
     * <pre>
     * The filler for the bias
     * </pre>
     */
    boolean hasBiasFiller();
    /**
     * <code>optional .caffe.FillerParameter bias_filler = 8;</code>
     *
     * <pre>
     * The filler for the bias
     * </pre>
     */
    caffe.Caffe.FillerParameter getBiasFiller();
    /**
     * <code>optional .caffe.FillerParameter bias_filler = 8;</code>
     *
     * <pre>
     * The filler for the bias
     * </pre>
     */
    caffe.Caffe.FillerParameterOrBuilder getBiasFillerOrBuilder();

    // optional .caffe.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
    /**
     * <code>optional .caffe.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];</code>
     */
    boolean hasEngine();
    /**
     * <code>optional .caffe.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];</code>
     */
    caffe.Caffe.ConvolutionParameter.Engine getEngine();

    // optional int32 axis = 16 [default = 1];
    /**
     * <code>optional int32 axis = 16 [default = 1];</code>
     *
     * <pre>
     * The axis to interpret as "channels" when performing convolution.
     * Preceding dimensions are treated as independent inputs;
     * succeeding dimensions are treated as "spatial".
     * With (N, C, H, W) inputs, and axis == 1 (the default), we perform
     * N independent 2D convolutions, sliding C-channel (or (C/g)-channels, for
     * groups g&gt;1) filters across the spatial axes (H, W) of the input.
     * With (N, C, D, H, W) inputs, and axis == 1, we perform
     * N independent 3D convolutions, sliding (C/g)-channels
     * filters across the spatial axes (D, H, W) of the input.
     * </pre>
     */
    boolean hasAxis();
    /**
     * <code>optional int32 axis = 16 [default = 1];</code>
     *
     * <pre>
     * The axis to interpret as "channels" when performing convolution.
     * Preceding dimensions are treated as independent inputs;
     * succeeding dimensions are treated as "spatial".
     * With (N, C, H, W) inputs, and axis == 1 (the default), we perform
     * N independent 2D convolutions, sliding C-channel (or (C/g)-channels, for
     * groups g&gt;1) filters across the spatial axes (H, W) of the input.
     * With (N, C, D, H, W) inputs, and axis == 1, we perform
     * N independent 3D convolutions, sliding (C/g)-channels
     * filters across the spatial axes (D, H, W) of the input.
     * </pre>
     */
    int getAxis();

    // optional bool force_nd_im2col = 17 [default = false];
    /**
     * <code>optional bool force_nd_im2col = 17 [default = false];</code>
     *
     * <pre>
     * Whether to force use of the general ND convolution, even if a specific
     * implementation for blobs of the appropriate number of spatial dimensions
     * is available. (Currently, there is only a 2D-specific convolution
     * implementation; for input blobs with num_axes != 2, this option is
     * ignored and the ND implementation will be used.)
     * </pre>
     */
    boolean hasForceNdIm2Col();
    /**
     * <code>optional bool force_nd_im2col = 17 [default = false];</code>
     *
     * <pre>
     * Whether to force use of the general ND convolution, even if a specific
     * implementation for blobs of the appropriate number of spatial dimensions
     * is available. (Currently, there is only a 2D-specific convolution
     * implementation; for input blobs with num_axes != 2, this option is
     * ignored and the ND implementation will be used.)
     * </pre>
     */
    boolean getForceNdIm2Col();
  }
  /**
   * Protobuf type {@code caffe.ConvolutionParameter}
   */
  public static final class ConvolutionParameter extends
      com.google.protobuf.GeneratedMessage
      implements ConvolutionParameterOrBuilder {
    // Use ConvolutionParameter.newBuilder() to construct.
    private ConvolutionParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ConvolutionParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ConvolutionParameter defaultInstance;
    public static ConvolutionParameter getDefaultInstance() {
      return defaultInstance;
    }

    public ConvolutionParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ConvolutionParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              numOutput_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              biasTerm_ = input.readBool();
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                pad_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              pad_.add(input.readUInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                pad_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                pad_.add(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                kernelSize_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              kernelSize_.add(input.readUInt32());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                kernelSize_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                kernelSize_.add(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 40: {
              bitField0_ |= 0x00000100;
              group_ = input.readUInt32();
              break;
            }
            case 48: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                stride_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000010;
              }
              stride_.add(input.readUInt32());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010) && input.getBytesUntilLimit() > 0) {
                stride_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000010;
              }
              while (input.getBytesUntilLimit() > 0) {
                stride_.add(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 58: {
              caffe.Caffe.FillerParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00000200) == 0x00000200)) {
                subBuilder = weightFiller_.toBuilder();
              }
              weightFiller_ = input.readMessage(caffe.Caffe.FillerParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(weightFiller_);
                weightFiller_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000200;
              break;
            }
            case 66: {
              caffe.Caffe.FillerParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00000400) == 0x00000400)) {
                subBuilder = biasFiller_.toBuilder();
              }
              biasFiller_ = input.readMessage(caffe.Caffe.FillerParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(biasFiller_);
                biasFiller_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000400;
              break;
            }
            case 72: {
              bitField0_ |= 0x00000004;
              padH_ = input.readUInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000008;
              padW_ = input.readUInt32();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000010;
              kernelH_ = input.readUInt32();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000020;
              kernelW_ = input.readUInt32();
              break;
            }
            case 104: {
              bitField0_ |= 0x00000040;
              strideH_ = input.readUInt32();
              break;
            }
            case 112: {
              bitField0_ |= 0x00000080;
              strideW_ = input.readUInt32();
              break;
            }
            case 120: {
              int rawValue = input.readEnum();
              caffe.Caffe.ConvolutionParameter.Engine value = caffe.Caffe.ConvolutionParameter.Engine.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(15, rawValue);
              } else {
                bitField0_ |= 0x00000800;
                engine_ = value;
              }
              break;
            }
            case 128: {
              bitField0_ |= 0x00001000;
              axis_ = input.readInt32();
              break;
            }
            case 136: {
              bitField0_ |= 0x00002000;
              forceNdIm2Col_ = input.readBool();
              break;
            }
            case 144: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                dilation_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              dilation_.add(input.readUInt32());
              break;
            }
            case 146: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                dilation_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                dilation_.add(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          pad_ = java.util.Collections.unmodifiableList(pad_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          kernelSize_ = java.util.Collections.unmodifiableList(kernelSize_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          stride_ = java.util.Collections.unmodifiableList(stride_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          dilation_ = java.util.Collections.unmodifiableList(dilation_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_ConvolutionParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_ConvolutionParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.ConvolutionParameter.class, caffe.Caffe.ConvolutionParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<ConvolutionParameter> PARSER =
        new com.google.protobuf.AbstractParser<ConvolutionParameter>() {
      public ConvolutionParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ConvolutionParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ConvolutionParameter> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code caffe.ConvolutionParameter.Engine}
     */
    public enum Engine
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>DEFAULT = 0;</code>
       */
      DEFAULT(0, 0),
      /**
       * <code>CAFFE = 1;</code>
       */
      CAFFE(1, 1),
      /**
       * <code>CUDNN = 2;</code>
       */
      CUDNN(2, 2),
      ;

      /**
       * <code>DEFAULT = 0;</code>
       */
      public static final int DEFAULT_VALUE = 0;
      /**
       * <code>CAFFE = 1;</code>
       */
      public static final int CAFFE_VALUE = 1;
      /**
       * <code>CUDNN = 2;</code>
       */
      public static final int CUDNN_VALUE = 2;


      public final int getNumber() { return value; }

      public static Engine valueOf(int value) {
        switch (value) {
          case 0: return DEFAULT;
          case 1: return CAFFE;
          case 2: return CUDNN;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Engine>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<Engine>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Engine>() {
              public Engine findValueByNumber(int number) {
                return Engine.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return caffe.Caffe.ConvolutionParameter.getDescriptor().getEnumTypes().get(0);
      }

      private static final Engine[] VALUES = values();

      public static Engine valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private Engine(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:caffe.ConvolutionParameter.Engine)
    }

    private int bitField0_;
    // optional uint32 num_output = 1;
    public static final int NUM_OUTPUT_FIELD_NUMBER = 1;
    private int numOutput_;
    /**
     * <code>optional uint32 num_output = 1;</code>
     *
     * <pre>
     * The number of outputs for the layer
     * </pre>
     */
    public boolean hasNumOutput() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 num_output = 1;</code>
     *
     * <pre>
     * The number of outputs for the layer
     * </pre>
     */
    public int getNumOutput() {
      return numOutput_;
    }

    // optional bool bias_term = 2 [default = true];
    public static final int BIAS_TERM_FIELD_NUMBER = 2;
    private boolean biasTerm_;
    /**
     * <code>optional bool bias_term = 2 [default = true];</code>
     *
     * <pre>
     * whether to have bias terms
     * </pre>
     */
    public boolean hasBiasTerm() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional bool bias_term = 2 [default = true];</code>
     *
     * <pre>
     * whether to have bias terms
     * </pre>
     */
    public boolean getBiasTerm() {
      return biasTerm_;
    }

    // repeated uint32 pad = 3;
    public static final int PAD_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> pad_;
    /**
     * <code>repeated uint32 pad = 3;</code>
     *
     * <pre>
     * Pad, kernel size, and stride are all given as a single value for equal
     * dimensions in all spatial dimensions, or once per spatial dimension.
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPadList() {
      return pad_;
    }
    /**
     * <code>repeated uint32 pad = 3;</code>
     *
     * <pre>
     * Pad, kernel size, and stride are all given as a single value for equal
     * dimensions in all spatial dimensions, or once per spatial dimension.
     * </pre>
     */
    public int getPadCount() {
      return pad_.size();
    }
    /**
     * <code>repeated uint32 pad = 3;</code>
     *
     * <pre>
     * Pad, kernel size, and stride are all given as a single value for equal
     * dimensions in all spatial dimensions, or once per spatial dimension.
     * </pre>
     */
    public int getPad(int index) {
      return pad_.get(index);
    }

    // repeated uint32 kernel_size = 4;
    public static final int KERNEL_SIZE_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Integer> kernelSize_;
    /**
     * <code>repeated uint32 kernel_size = 4;</code>
     *
     * <pre>
     * The kernel size
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getKernelSizeList() {
      return kernelSize_;
    }
    /**
     * <code>repeated uint32 kernel_size = 4;</code>
     *
     * <pre>
     * The kernel size
     * </pre>
     */
    public int getKernelSizeCount() {
      return kernelSize_.size();
    }
    /**
     * <code>repeated uint32 kernel_size = 4;</code>
     *
     * <pre>
     * The kernel size
     * </pre>
     */
    public int getKernelSize(int index) {
      return kernelSize_.get(index);
    }

    // repeated uint32 stride = 6;
    public static final int STRIDE_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Integer> stride_;
    /**
     * <code>repeated uint32 stride = 6;</code>
     *
     * <pre>
     * The stride; defaults to 1
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getStrideList() {
      return stride_;
    }
    /**
     * <code>repeated uint32 stride = 6;</code>
     *
     * <pre>
     * The stride; defaults to 1
     * </pre>
     */
    public int getStrideCount() {
      return stride_.size();
    }
    /**
     * <code>repeated uint32 stride = 6;</code>
     *
     * <pre>
     * The stride; defaults to 1
     * </pre>
     */
    public int getStride(int index) {
      return stride_.get(index);
    }

    // repeated uint32 dilation = 18;
    public static final int DILATION_FIELD_NUMBER = 18;
    private java.util.List<java.lang.Integer> dilation_;
    /**
     * <code>repeated uint32 dilation = 18;</code>
     *
     * <pre>
     * Factor used to dilate the kernel, (implicitly) zero-filling the resulting
     * holes. (Kernel dilation is sometimes referred to by its use in the
     * algorithme à trous from Holschneider et al. 1987.)
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getDilationList() {
      return dilation_;
    }
    /**
     * <code>repeated uint32 dilation = 18;</code>
     *
     * <pre>
     * Factor used to dilate the kernel, (implicitly) zero-filling the resulting
     * holes. (Kernel dilation is sometimes referred to by its use in the
     * algorithme à trous from Holschneider et al. 1987.)
     * </pre>
     */
    public int getDilationCount() {
      return dilation_.size();
    }
    /**
     * <code>repeated uint32 dilation = 18;</code>
     *
     * <pre>
     * Factor used to dilate the kernel, (implicitly) zero-filling the resulting
     * holes. (Kernel dilation is sometimes referred to by its use in the
     * algorithme à trous from Holschneider et al. 1987.)
     * </pre>
     */
    public int getDilation(int index) {
      return dilation_.get(index);
    }

    // optional uint32 pad_h = 9 [default = 0];
    public static final int PAD_H_FIELD_NUMBER = 9;
    private int padH_;
    /**
     * <code>optional uint32 pad_h = 9 [default = 0];</code>
     *
     * <pre>
     * For 2D convolution only, the *_h and *_w versions may also be used to
     * specify both spatial dimensions.
     * </pre>
     */
    public boolean hasPadH() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 pad_h = 9 [default = 0];</code>
     *
     * <pre>
     * For 2D convolution only, the *_h and *_w versions may also be used to
     * specify both spatial dimensions.
     * </pre>
     */
    public int getPadH() {
      return padH_;
    }

    // optional uint32 pad_w = 10 [default = 0];
    public static final int PAD_W_FIELD_NUMBER = 10;
    private int padW_;
    /**
     * <code>optional uint32 pad_w = 10 [default = 0];</code>
     *
     * <pre>
     * The padding width (2D only)
     * </pre>
     */
    public boolean hasPadW() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 pad_w = 10 [default = 0];</code>
     *
     * <pre>
     * The padding width (2D only)
     * </pre>
     */
    public int getPadW() {
      return padW_;
    }

    // optional uint32 kernel_h = 11;
    public static final int KERNEL_H_FIELD_NUMBER = 11;
    private int kernelH_;
    /**
     * <code>optional uint32 kernel_h = 11;</code>
     *
     * <pre>
     * The kernel height (2D only)
     * </pre>
     */
    public boolean hasKernelH() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional uint32 kernel_h = 11;</code>
     *
     * <pre>
     * The kernel height (2D only)
     * </pre>
     */
    public int getKernelH() {
      return kernelH_;
    }

    // optional uint32 kernel_w = 12;
    public static final int KERNEL_W_FIELD_NUMBER = 12;
    private int kernelW_;
    /**
     * <code>optional uint32 kernel_w = 12;</code>
     *
     * <pre>
     * The kernel width (2D only)
     * </pre>
     */
    public boolean hasKernelW() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional uint32 kernel_w = 12;</code>
     *
     * <pre>
     * The kernel width (2D only)
     * </pre>
     */
    public int getKernelW() {
      return kernelW_;
    }

    // optional uint32 stride_h = 13;
    public static final int STRIDE_H_FIELD_NUMBER = 13;
    private int strideH_;
    /**
     * <code>optional uint32 stride_h = 13;</code>
     *
     * <pre>
     * The stride height (2D only)
     * </pre>
     */
    public boolean hasStrideH() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional uint32 stride_h = 13;</code>
     *
     * <pre>
     * The stride height (2D only)
     * </pre>
     */
    public int getStrideH() {
      return strideH_;
    }

    // optional uint32 stride_w = 14;
    public static final int STRIDE_W_FIELD_NUMBER = 14;
    private int strideW_;
    /**
     * <code>optional uint32 stride_w = 14;</code>
     *
     * <pre>
     * The stride width (2D only)
     * </pre>
     */
    public boolean hasStrideW() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional uint32 stride_w = 14;</code>
     *
     * <pre>
     * The stride width (2D only)
     * </pre>
     */
    public int getStrideW() {
      return strideW_;
    }

    // optional uint32 group = 5 [default = 1];
    public static final int GROUP_FIELD_NUMBER = 5;
    private int group_;
    /**
     * <code>optional uint32 group = 5 [default = 1];</code>
     *
     * <pre>
     * The group size for group conv
     * </pre>
     */
    public boolean hasGroup() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional uint32 group = 5 [default = 1];</code>
     *
     * <pre>
     * The group size for group conv
     * </pre>
     */
    public int getGroup() {
      return group_;
    }

    // optional .caffe.FillerParameter weight_filler = 7;
    public static final int WEIGHT_FILLER_FIELD_NUMBER = 7;
    private caffe.Caffe.FillerParameter weightFiller_;
    /**
     * <code>optional .caffe.FillerParameter weight_filler = 7;</code>
     *
     * <pre>
     * The filler for the weight
     * </pre>
     */
    public boolean hasWeightFiller() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional .caffe.FillerParameter weight_filler = 7;</code>
     *
     * <pre>
     * The filler for the weight
     * </pre>
     */
    public caffe.Caffe.FillerParameter getWeightFiller() {
      return weightFiller_;
    }
    /**
     * <code>optional .caffe.FillerParameter weight_filler = 7;</code>
     *
     * <pre>
     * The filler for the weight
     * </pre>
     */
    public caffe.Caffe.FillerParameterOrBuilder getWeightFillerOrBuilder() {
      return weightFiller_;
    }

    // optional .caffe.FillerParameter bias_filler = 8;
    public static final int BIAS_FILLER_FIELD_NUMBER = 8;
    private caffe.Caffe.FillerParameter biasFiller_;
    /**
     * <code>optional .caffe.FillerParameter bias_filler = 8;</code>
     *
     * <pre>
     * The filler for the bias
     * </pre>
     */
    public boolean hasBiasFiller() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional .caffe.FillerParameter bias_filler = 8;</code>
     *
     * <pre>
     * The filler for the bias
     * </pre>
     */
    public caffe.Caffe.FillerParameter getBiasFiller() {
      return biasFiller_;
    }
    /**
     * <code>optional .caffe.FillerParameter bias_filler = 8;</code>
     *
     * <pre>
     * The filler for the bias
     * </pre>
     */
    public caffe.Caffe.FillerParameterOrBuilder getBiasFillerOrBuilder() {
      return biasFiller_;
    }

    // optional .caffe.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
    public static final int ENGINE_FIELD_NUMBER = 15;
    private caffe.Caffe.ConvolutionParameter.Engine engine_;
    /**
     * <code>optional .caffe.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];</code>
     */
    public boolean hasEngine() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional .caffe.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];</code>
     */
    public caffe.Caffe.ConvolutionParameter.Engine getEngine() {
      return engine_;
    }

    // optional int32 axis = 16 [default = 1];
    public static final int AXIS_FIELD_NUMBER = 16;
    private int axis_;
    /**
     * <code>optional int32 axis = 16 [default = 1];</code>
     *
     * <pre>
     * The axis to interpret as "channels" when performing convolution.
     * Preceding dimensions are treated as independent inputs;
     * succeeding dimensions are treated as "spatial".
     * With (N, C, H, W) inputs, and axis == 1 (the default), we perform
     * N independent 2D convolutions, sliding C-channel (or (C/g)-channels, for
     * groups g&gt;1) filters across the spatial axes (H, W) of the input.
     * With (N, C, D, H, W) inputs, and axis == 1, we perform
     * N independent 3D convolutions, sliding (C/g)-channels
     * filters across the spatial axes (D, H, W) of the input.
     * </pre>
     */
    public boolean hasAxis() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional int32 axis = 16 [default = 1];</code>
     *
     * <pre>
     * The axis to interpret as "channels" when performing convolution.
     * Preceding dimensions are treated as independent inputs;
     * succeeding dimensions are treated as "spatial".
     * With (N, C, H, W) inputs, and axis == 1 (the default), we perform
     * N independent 2D convolutions, sliding C-channel (or (C/g)-channels, for
     * groups g&gt;1) filters across the spatial axes (H, W) of the input.
     * With (N, C, D, H, W) inputs, and axis == 1, we perform
     * N independent 3D convolutions, sliding (C/g)-channels
     * filters across the spatial axes (D, H, W) of the input.
     * </pre>
     */
    public int getAxis() {
      return axis_;
    }

    // optional bool force_nd_im2col = 17 [default = false];
    public static final int FORCE_ND_IM2COL_FIELD_NUMBER = 17;
    private boolean forceNdIm2Col_;
    /**
     * <code>optional bool force_nd_im2col = 17 [default = false];</code>
     *
     * <pre>
     * Whether to force use of the general ND convolution, even if a specific
     * implementation for blobs of the appropriate number of spatial dimensions
     * is available. (Currently, there is only a 2D-specific convolution
     * implementation; for input blobs with num_axes != 2, this option is
     * ignored and the ND implementation will be used.)
     * </pre>
     */
    public boolean hasForceNdIm2Col() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional bool force_nd_im2col = 17 [default = false];</code>
     *
     * <pre>
     * Whether to force use of the general ND convolution, even if a specific
     * implementation for blobs of the appropriate number of spatial dimensions
     * is available. (Currently, there is only a 2D-specific convolution
     * implementation; for input blobs with num_axes != 2, this option is
     * ignored and the ND implementation will be used.)
     * </pre>
     */
    public boolean getForceNdIm2Col() {
      return forceNdIm2Col_;
    }

    private void initFields() {
      numOutput_ = 0;
      biasTerm_ = true;
      pad_ = java.util.Collections.emptyList();
      kernelSize_ = java.util.Collections.emptyList();
      stride_ = java.util.Collections.emptyList();
      dilation_ = java.util.Collections.emptyList();
      padH_ = 0;
      padW_ = 0;
      kernelH_ = 0;
      kernelW_ = 0;
      strideH_ = 0;
      strideW_ = 0;
      group_ = 1;
      weightFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
      biasFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
      engine_ = caffe.Caffe.ConvolutionParameter.Engine.DEFAULT;
      axis_ = 1;
      forceNdIm2Col_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, numOutput_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBool(2, biasTerm_);
      }
      for (int i = 0; i < pad_.size(); i++) {
        output.writeUInt32(3, pad_.get(i));
      }
      for (int i = 0; i < kernelSize_.size(); i++) {
        output.writeUInt32(4, kernelSize_.get(i));
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeUInt32(5, group_);
      }
      for (int i = 0; i < stride_.size(); i++) {
        output.writeUInt32(6, stride_.get(i));
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeMessage(7, weightFiller_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeMessage(8, biasFiller_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(9, padH_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(10, padW_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(11, kernelH_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeUInt32(12, kernelW_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeUInt32(13, strideH_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeUInt32(14, strideW_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeEnum(15, engine_.getNumber());
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeInt32(16, axis_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeBool(17, forceNdIm2Col_);
      }
      for (int i = 0; i < dilation_.size(); i++) {
        output.writeUInt32(18, dilation_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, numOutput_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, biasTerm_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < pad_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(pad_.get(i));
        }
        size += dataSize;
        size += 1 * getPadList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < kernelSize_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(kernelSize_.get(i));
        }
        size += dataSize;
        size += 1 * getKernelSizeList().size();
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, group_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < stride_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(stride_.get(i));
        }
        size += dataSize;
        size += 1 * getStrideList().size();
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, weightFiller_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, biasFiller_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(9, padH_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(10, padW_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(11, kernelH_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(12, kernelW_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(13, strideH_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(14, strideW_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(15, engine_.getNumber());
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(16, axis_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(17, forceNdIm2Col_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < dilation_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(dilation_.get(i));
        }
        size += dataSize;
        size += 2 * getDilationList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.ConvolutionParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.ConvolutionParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.ConvolutionParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.ConvolutionParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.ConvolutionParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.ConvolutionParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.ConvolutionParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.ConvolutionParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.ConvolutionParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.ConvolutionParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.ConvolutionParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.ConvolutionParameter}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements caffe.Caffe.ConvolutionParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_ConvolutionParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_ConvolutionParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.ConvolutionParameter.class, caffe.Caffe.ConvolutionParameter.Builder.class);
      }

      // Construct using caffe.Caffe.ConvolutionParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getWeightFillerFieldBuilder();
          getBiasFillerFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        numOutput_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        biasTerm_ = true;
        bitField0_ = (bitField0_ & ~0x00000002);
        pad_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        kernelSize_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        stride_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        dilation_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        padH_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        padW_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        kernelH_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        kernelW_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        strideH_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        strideW_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        group_ = 1;
        bitField0_ = (bitField0_ & ~0x00001000);
        if (weightFillerBuilder_ == null) {
          weightFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
        } else {
          weightFillerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00002000);
        if (biasFillerBuilder_ == null) {
          biasFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
        } else {
          biasFillerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00004000);
        engine_ = caffe.Caffe.ConvolutionParameter.Engine.DEFAULT;
        bitField0_ = (bitField0_ & ~0x00008000);
        axis_ = 1;
        bitField0_ = (bitField0_ & ~0x00010000);
        forceNdIm2Col_ = false;
        bitField0_ = (bitField0_ & ~0x00020000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_ConvolutionParameter_descriptor;
      }

      public caffe.Caffe.ConvolutionParameter getDefaultInstanceForType() {
        return caffe.Caffe.ConvolutionParameter.getDefaultInstance();
      }

      public caffe.Caffe.ConvolutionParameter build() {
        caffe.Caffe.ConvolutionParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.ConvolutionParameter buildPartial() {
        caffe.Caffe.ConvolutionParameter result = new caffe.Caffe.ConvolutionParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.numOutput_ = numOutput_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.biasTerm_ = biasTerm_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          pad_ = java.util.Collections.unmodifiableList(pad_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.pad_ = pad_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          kernelSize_ = java.util.Collections.unmodifiableList(kernelSize_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.kernelSize_ = kernelSize_;
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          stride_ = java.util.Collections.unmodifiableList(stride_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.stride_ = stride_;
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          dilation_ = java.util.Collections.unmodifiableList(dilation_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.dilation_ = dilation_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000004;
        }
        result.padH_ = padH_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000008;
        }
        result.padW_ = padW_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000010;
        }
        result.kernelH_ = kernelH_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000020;
        }
        result.kernelW_ = kernelW_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000040;
        }
        result.strideH_ = strideH_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000080;
        }
        result.strideW_ = strideW_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00000100;
        }
        result.group_ = group_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00000200;
        }
        if (weightFillerBuilder_ == null) {
          result.weightFiller_ = weightFiller_;
        } else {
          result.weightFiller_ = weightFillerBuilder_.build();
        }
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00000400;
        }
        if (biasFillerBuilder_ == null) {
          result.biasFiller_ = biasFiller_;
        } else {
          result.biasFiller_ = biasFillerBuilder_.build();
        }
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00000800;
        }
        result.engine_ = engine_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.axis_ = axis_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.forceNdIm2Col_ = forceNdIm2Col_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.ConvolutionParameter) {
          return mergeFrom((caffe.Caffe.ConvolutionParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.ConvolutionParameter other) {
        if (other == caffe.Caffe.ConvolutionParameter.getDefaultInstance()) return this;
        if (other.hasNumOutput()) {
          setNumOutput(other.getNumOutput());
        }
        if (other.hasBiasTerm()) {
          setBiasTerm(other.getBiasTerm());
        }
        if (!other.pad_.isEmpty()) {
          if (pad_.isEmpty()) {
            pad_ = other.pad_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensurePadIsMutable();
            pad_.addAll(other.pad_);
          }
          onChanged();
        }
        if (!other.kernelSize_.isEmpty()) {
          if (kernelSize_.isEmpty()) {
            kernelSize_ = other.kernelSize_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureKernelSizeIsMutable();
            kernelSize_.addAll(other.kernelSize_);
          }
          onChanged();
        }
        if (!other.stride_.isEmpty()) {
          if (stride_.isEmpty()) {
            stride_ = other.stride_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureStrideIsMutable();
            stride_.addAll(other.stride_);
          }
          onChanged();
        }
        if (!other.dilation_.isEmpty()) {
          if (dilation_.isEmpty()) {
            dilation_ = other.dilation_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureDilationIsMutable();
            dilation_.addAll(other.dilation_);
          }
          onChanged();
        }
        if (other.hasPadH()) {
          setPadH(other.getPadH());
        }
        if (other.hasPadW()) {
          setPadW(other.getPadW());
        }
        if (other.hasKernelH()) {
          setKernelH(other.getKernelH());
        }
        if (other.hasKernelW()) {
          setKernelW(other.getKernelW());
        }
        if (other.hasStrideH()) {
          setStrideH(other.getStrideH());
        }
        if (other.hasStrideW()) {
          setStrideW(other.getStrideW());
        }
        if (other.hasGroup()) {
          setGroup(other.getGroup());
        }
        if (other.hasWeightFiller()) {
          mergeWeightFiller(other.getWeightFiller());
        }
        if (other.hasBiasFiller()) {
          mergeBiasFiller(other.getBiasFiller());
        }
        if (other.hasEngine()) {
          setEngine(other.getEngine());
        }
        if (other.hasAxis()) {
          setAxis(other.getAxis());
        }
        if (other.hasForceNdIm2Col()) {
          setForceNdIm2Col(other.getForceNdIm2Col());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.ConvolutionParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.ConvolutionParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional uint32 num_output = 1;
      private int numOutput_ ;
      /**
       * <code>optional uint32 num_output = 1;</code>
       *
       * <pre>
       * The number of outputs for the layer
       * </pre>
       */
      public boolean hasNumOutput() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 num_output = 1;</code>
       *
       * <pre>
       * The number of outputs for the layer
       * </pre>
       */
      public int getNumOutput() {
        return numOutput_;
      }
      /**
       * <code>optional uint32 num_output = 1;</code>
       *
       * <pre>
       * The number of outputs for the layer
       * </pre>
       */
      public Builder setNumOutput(int value) {
        bitField0_ |= 0x00000001;
        numOutput_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 num_output = 1;</code>
       *
       * <pre>
       * The number of outputs for the layer
       * </pre>
       */
      public Builder clearNumOutput() {
        bitField0_ = (bitField0_ & ~0x00000001);
        numOutput_ = 0;
        onChanged();
        return this;
      }

      // optional bool bias_term = 2 [default = true];
      private boolean biasTerm_ = true;
      /**
       * <code>optional bool bias_term = 2 [default = true];</code>
       *
       * <pre>
       * whether to have bias terms
       * </pre>
       */
      public boolean hasBiasTerm() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional bool bias_term = 2 [default = true];</code>
       *
       * <pre>
       * whether to have bias terms
       * </pre>
       */
      public boolean getBiasTerm() {
        return biasTerm_;
      }
      /**
       * <code>optional bool bias_term = 2 [default = true];</code>
       *
       * <pre>
       * whether to have bias terms
       * </pre>
       */
      public Builder setBiasTerm(boolean value) {
        bitField0_ |= 0x00000002;
        biasTerm_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool bias_term = 2 [default = true];</code>
       *
       * <pre>
       * whether to have bias terms
       * </pre>
       */
      public Builder clearBiasTerm() {
        bitField0_ = (bitField0_ & ~0x00000002);
        biasTerm_ = true;
        onChanged();
        return this;
      }

      // repeated uint32 pad = 3;
      private java.util.List<java.lang.Integer> pad_ = java.util.Collections.emptyList();
      private void ensurePadIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          pad_ = new java.util.ArrayList<java.lang.Integer>(pad_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated uint32 pad = 3;</code>
       *
       * <pre>
       * Pad, kernel size, and stride are all given as a single value for equal
       * dimensions in all spatial dimensions, or once per spatial dimension.
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPadList() {
        return java.util.Collections.unmodifiableList(pad_);
      }
      /**
       * <code>repeated uint32 pad = 3;</code>
       *
       * <pre>
       * Pad, kernel size, and stride are all given as a single value for equal
       * dimensions in all spatial dimensions, or once per spatial dimension.
       * </pre>
       */
      public int getPadCount() {
        return pad_.size();
      }
      /**
       * <code>repeated uint32 pad = 3;</code>
       *
       * <pre>
       * Pad, kernel size, and stride are all given as a single value for equal
       * dimensions in all spatial dimensions, or once per spatial dimension.
       * </pre>
       */
      public int getPad(int index) {
        return pad_.get(index);
      }
      /**
       * <code>repeated uint32 pad = 3;</code>
       *
       * <pre>
       * Pad, kernel size, and stride are all given as a single value for equal
       * dimensions in all spatial dimensions, or once per spatial dimension.
       * </pre>
       */
      public Builder setPad(
          int index, int value) {
        ensurePadIsMutable();
        pad_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 pad = 3;</code>
       *
       * <pre>
       * Pad, kernel size, and stride are all given as a single value for equal
       * dimensions in all spatial dimensions, or once per spatial dimension.
       * </pre>
       */
      public Builder addPad(int value) {
        ensurePadIsMutable();
        pad_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 pad = 3;</code>
       *
       * <pre>
       * Pad, kernel size, and stride are all given as a single value for equal
       * dimensions in all spatial dimensions, or once per spatial dimension.
       * </pre>
       */
      public Builder addAllPad(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePadIsMutable();
        super.addAll(values, pad_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 pad = 3;</code>
       *
       * <pre>
       * Pad, kernel size, and stride are all given as a single value for equal
       * dimensions in all spatial dimensions, or once per spatial dimension.
       * </pre>
       */
      public Builder clearPad() {
        pad_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      // repeated uint32 kernel_size = 4;
      private java.util.List<java.lang.Integer> kernelSize_ = java.util.Collections.emptyList();
      private void ensureKernelSizeIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          kernelSize_ = new java.util.ArrayList<java.lang.Integer>(kernelSize_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated uint32 kernel_size = 4;</code>
       *
       * <pre>
       * The kernel size
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getKernelSizeList() {
        return java.util.Collections.unmodifiableList(kernelSize_);
      }
      /**
       * <code>repeated uint32 kernel_size = 4;</code>
       *
       * <pre>
       * The kernel size
       * </pre>
       */
      public int getKernelSizeCount() {
        return kernelSize_.size();
      }
      /**
       * <code>repeated uint32 kernel_size = 4;</code>
       *
       * <pre>
       * The kernel size
       * </pre>
       */
      public int getKernelSize(int index) {
        return kernelSize_.get(index);
      }
      /**
       * <code>repeated uint32 kernel_size = 4;</code>
       *
       * <pre>
       * The kernel size
       * </pre>
       */
      public Builder setKernelSize(
          int index, int value) {
        ensureKernelSizeIsMutable();
        kernelSize_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 kernel_size = 4;</code>
       *
       * <pre>
       * The kernel size
       * </pre>
       */
      public Builder addKernelSize(int value) {
        ensureKernelSizeIsMutable();
        kernelSize_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 kernel_size = 4;</code>
       *
       * <pre>
       * The kernel size
       * </pre>
       */
      public Builder addAllKernelSize(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureKernelSizeIsMutable();
        super.addAll(values, kernelSize_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 kernel_size = 4;</code>
       *
       * <pre>
       * The kernel size
       * </pre>
       */
      public Builder clearKernelSize() {
        kernelSize_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // repeated uint32 stride = 6;
      private java.util.List<java.lang.Integer> stride_ = java.util.Collections.emptyList();
      private void ensureStrideIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          stride_ = new java.util.ArrayList<java.lang.Integer>(stride_);
          bitField0_ |= 0x00000010;
         }
      }
      /**
       * <code>repeated uint32 stride = 6;</code>
       *
       * <pre>
       * The stride; defaults to 1
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getStrideList() {
        return java.util.Collections.unmodifiableList(stride_);
      }
      /**
       * <code>repeated uint32 stride = 6;</code>
       *
       * <pre>
       * The stride; defaults to 1
       * </pre>
       */
      public int getStrideCount() {
        return stride_.size();
      }
      /**
       * <code>repeated uint32 stride = 6;</code>
       *
       * <pre>
       * The stride; defaults to 1
       * </pre>
       */
      public int getStride(int index) {
        return stride_.get(index);
      }
      /**
       * <code>repeated uint32 stride = 6;</code>
       *
       * <pre>
       * The stride; defaults to 1
       * </pre>
       */
      public Builder setStride(
          int index, int value) {
        ensureStrideIsMutable();
        stride_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 stride = 6;</code>
       *
       * <pre>
       * The stride; defaults to 1
       * </pre>
       */
      public Builder addStride(int value) {
        ensureStrideIsMutable();
        stride_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 stride = 6;</code>
       *
       * <pre>
       * The stride; defaults to 1
       * </pre>
       */
      public Builder addAllStride(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureStrideIsMutable();
        super.addAll(values, stride_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 stride = 6;</code>
       *
       * <pre>
       * The stride; defaults to 1
       * </pre>
       */
      public Builder clearStride() {
        stride_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }

      // repeated uint32 dilation = 18;
      private java.util.List<java.lang.Integer> dilation_ = java.util.Collections.emptyList();
      private void ensureDilationIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          dilation_ = new java.util.ArrayList<java.lang.Integer>(dilation_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <code>repeated uint32 dilation = 18;</code>
       *
       * <pre>
       * Factor used to dilate the kernel, (implicitly) zero-filling the resulting
       * holes. (Kernel dilation is sometimes referred to by its use in the
       * algorithme à trous from Holschneider et al. 1987.)
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getDilationList() {
        return java.util.Collections.unmodifiableList(dilation_);
      }
      /**
       * <code>repeated uint32 dilation = 18;</code>
       *
       * <pre>
       * Factor used to dilate the kernel, (implicitly) zero-filling the resulting
       * holes. (Kernel dilation is sometimes referred to by its use in the
       * algorithme à trous from Holschneider et al. 1987.)
       * </pre>
       */
      public int getDilationCount() {
        return dilation_.size();
      }
      /**
       * <code>repeated uint32 dilation = 18;</code>
       *
       * <pre>
       * Factor used to dilate the kernel, (implicitly) zero-filling the resulting
       * holes. (Kernel dilation is sometimes referred to by its use in the
       * algorithme à trous from Holschneider et al. 1987.)
       * </pre>
       */
      public int getDilation(int index) {
        return dilation_.get(index);
      }
      /**
       * <code>repeated uint32 dilation = 18;</code>
       *
       * <pre>
       * Factor used to dilate the kernel, (implicitly) zero-filling the resulting
       * holes. (Kernel dilation is sometimes referred to by its use in the
       * algorithme à trous from Holschneider et al. 1987.)
       * </pre>
       */
      public Builder setDilation(
          int index, int value) {
        ensureDilationIsMutable();
        dilation_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 dilation = 18;</code>
       *
       * <pre>
       * Factor used to dilate the kernel, (implicitly) zero-filling the resulting
       * holes. (Kernel dilation is sometimes referred to by its use in the
       * algorithme à trous from Holschneider et al. 1987.)
       * </pre>
       */
      public Builder addDilation(int value) {
        ensureDilationIsMutable();
        dilation_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 dilation = 18;</code>
       *
       * <pre>
       * Factor used to dilate the kernel, (implicitly) zero-filling the resulting
       * holes. (Kernel dilation is sometimes referred to by its use in the
       * algorithme à trous from Holschneider et al. 1987.)
       * </pre>
       */
      public Builder addAllDilation(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureDilationIsMutable();
        super.addAll(values, dilation_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 dilation = 18;</code>
       *
       * <pre>
       * Factor used to dilate the kernel, (implicitly) zero-filling the resulting
       * holes. (Kernel dilation is sometimes referred to by its use in the
       * algorithme à trous from Holschneider et al. 1987.)
       * </pre>
       */
      public Builder clearDilation() {
        dilation_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      // optional uint32 pad_h = 9 [default = 0];
      private int padH_ ;
      /**
       * <code>optional uint32 pad_h = 9 [default = 0];</code>
       *
       * <pre>
       * For 2D convolution only, the *_h and *_w versions may also be used to
       * specify both spatial dimensions.
       * </pre>
       */
      public boolean hasPadH() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional uint32 pad_h = 9 [default = 0];</code>
       *
       * <pre>
       * For 2D convolution only, the *_h and *_w versions may also be used to
       * specify both spatial dimensions.
       * </pre>
       */
      public int getPadH() {
        return padH_;
      }
      /**
       * <code>optional uint32 pad_h = 9 [default = 0];</code>
       *
       * <pre>
       * For 2D convolution only, the *_h and *_w versions may also be used to
       * specify both spatial dimensions.
       * </pre>
       */
      public Builder setPadH(int value) {
        bitField0_ |= 0x00000040;
        padH_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 pad_h = 9 [default = 0];</code>
       *
       * <pre>
       * For 2D convolution only, the *_h and *_w versions may also be used to
       * specify both spatial dimensions.
       * </pre>
       */
      public Builder clearPadH() {
        bitField0_ = (bitField0_ & ~0x00000040);
        padH_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 pad_w = 10 [default = 0];
      private int padW_ ;
      /**
       * <code>optional uint32 pad_w = 10 [default = 0];</code>
       *
       * <pre>
       * The padding width (2D only)
       * </pre>
       */
      public boolean hasPadW() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional uint32 pad_w = 10 [default = 0];</code>
       *
       * <pre>
       * The padding width (2D only)
       * </pre>
       */
      public int getPadW() {
        return padW_;
      }
      /**
       * <code>optional uint32 pad_w = 10 [default = 0];</code>
       *
       * <pre>
       * The padding width (2D only)
       * </pre>
       */
      public Builder setPadW(int value) {
        bitField0_ |= 0x00000080;
        padW_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 pad_w = 10 [default = 0];</code>
       *
       * <pre>
       * The padding width (2D only)
       * </pre>
       */
      public Builder clearPadW() {
        bitField0_ = (bitField0_ & ~0x00000080);
        padW_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 kernel_h = 11;
      private int kernelH_ ;
      /**
       * <code>optional uint32 kernel_h = 11;</code>
       *
       * <pre>
       * The kernel height (2D only)
       * </pre>
       */
      public boolean hasKernelH() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional uint32 kernel_h = 11;</code>
       *
       * <pre>
       * The kernel height (2D only)
       * </pre>
       */
      public int getKernelH() {
        return kernelH_;
      }
      /**
       * <code>optional uint32 kernel_h = 11;</code>
       *
       * <pre>
       * The kernel height (2D only)
       * </pre>
       */
      public Builder setKernelH(int value) {
        bitField0_ |= 0x00000100;
        kernelH_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 kernel_h = 11;</code>
       *
       * <pre>
       * The kernel height (2D only)
       * </pre>
       */
      public Builder clearKernelH() {
        bitField0_ = (bitField0_ & ~0x00000100);
        kernelH_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 kernel_w = 12;
      private int kernelW_ ;
      /**
       * <code>optional uint32 kernel_w = 12;</code>
       *
       * <pre>
       * The kernel width (2D only)
       * </pre>
       */
      public boolean hasKernelW() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional uint32 kernel_w = 12;</code>
       *
       * <pre>
       * The kernel width (2D only)
       * </pre>
       */
      public int getKernelW() {
        return kernelW_;
      }
      /**
       * <code>optional uint32 kernel_w = 12;</code>
       *
       * <pre>
       * The kernel width (2D only)
       * </pre>
       */
      public Builder setKernelW(int value) {
        bitField0_ |= 0x00000200;
        kernelW_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 kernel_w = 12;</code>
       *
       * <pre>
       * The kernel width (2D only)
       * </pre>
       */
      public Builder clearKernelW() {
        bitField0_ = (bitField0_ & ~0x00000200);
        kernelW_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 stride_h = 13;
      private int strideH_ ;
      /**
       * <code>optional uint32 stride_h = 13;</code>
       *
       * <pre>
       * The stride height (2D only)
       * </pre>
       */
      public boolean hasStrideH() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional uint32 stride_h = 13;</code>
       *
       * <pre>
       * The stride height (2D only)
       * </pre>
       */
      public int getStrideH() {
        return strideH_;
      }
      /**
       * <code>optional uint32 stride_h = 13;</code>
       *
       * <pre>
       * The stride height (2D only)
       * </pre>
       */
      public Builder setStrideH(int value) {
        bitField0_ |= 0x00000400;
        strideH_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 stride_h = 13;</code>
       *
       * <pre>
       * The stride height (2D only)
       * </pre>
       */
      public Builder clearStrideH() {
        bitField0_ = (bitField0_ & ~0x00000400);
        strideH_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 stride_w = 14;
      private int strideW_ ;
      /**
       * <code>optional uint32 stride_w = 14;</code>
       *
       * <pre>
       * The stride width (2D only)
       * </pre>
       */
      public boolean hasStrideW() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional uint32 stride_w = 14;</code>
       *
       * <pre>
       * The stride width (2D only)
       * </pre>
       */
      public int getStrideW() {
        return strideW_;
      }
      /**
       * <code>optional uint32 stride_w = 14;</code>
       *
       * <pre>
       * The stride width (2D only)
       * </pre>
       */
      public Builder setStrideW(int value) {
        bitField0_ |= 0x00000800;
        strideW_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 stride_w = 14;</code>
       *
       * <pre>
       * The stride width (2D only)
       * </pre>
       */
      public Builder clearStrideW() {
        bitField0_ = (bitField0_ & ~0x00000800);
        strideW_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 group = 5 [default = 1];
      private int group_ = 1;
      /**
       * <code>optional uint32 group = 5 [default = 1];</code>
       *
       * <pre>
       * The group size for group conv
       * </pre>
       */
      public boolean hasGroup() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional uint32 group = 5 [default = 1];</code>
       *
       * <pre>
       * The group size for group conv
       * </pre>
       */
      public int getGroup() {
        return group_;
      }
      /**
       * <code>optional uint32 group = 5 [default = 1];</code>
       *
       * <pre>
       * The group size for group conv
       * </pre>
       */
      public Builder setGroup(int value) {
        bitField0_ |= 0x00001000;
        group_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 group = 5 [default = 1];</code>
       *
       * <pre>
       * The group size for group conv
       * </pre>
       */
      public Builder clearGroup() {
        bitField0_ = (bitField0_ & ~0x00001000);
        group_ = 1;
        onChanged();
        return this;
      }

      // optional .caffe.FillerParameter weight_filler = 7;
      private caffe.Caffe.FillerParameter weightFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.FillerParameter, caffe.Caffe.FillerParameter.Builder, caffe.Caffe.FillerParameterOrBuilder> weightFillerBuilder_;
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 7;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public boolean hasWeightFiller() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 7;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public caffe.Caffe.FillerParameter getWeightFiller() {
        if (weightFillerBuilder_ == null) {
          return weightFiller_;
        } else {
          return weightFillerBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 7;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public Builder setWeightFiller(caffe.Caffe.FillerParameter value) {
        if (weightFillerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          weightFiller_ = value;
          onChanged();
        } else {
          weightFillerBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00002000;
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 7;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public Builder setWeightFiller(
          caffe.Caffe.FillerParameter.Builder builderForValue) {
        if (weightFillerBuilder_ == null) {
          weightFiller_ = builderForValue.build();
          onChanged();
        } else {
          weightFillerBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00002000;
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 7;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public Builder mergeWeightFiller(caffe.Caffe.FillerParameter value) {
        if (weightFillerBuilder_ == null) {
          if (((bitField0_ & 0x00002000) == 0x00002000) &&
              weightFiller_ != caffe.Caffe.FillerParameter.getDefaultInstance()) {
            weightFiller_ =
              caffe.Caffe.FillerParameter.newBuilder(weightFiller_).mergeFrom(value).buildPartial();
          } else {
            weightFiller_ = value;
          }
          onChanged();
        } else {
          weightFillerBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00002000;
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 7;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public Builder clearWeightFiller() {
        if (weightFillerBuilder_ == null) {
          weightFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
          onChanged();
        } else {
          weightFillerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00002000);
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 7;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public caffe.Caffe.FillerParameter.Builder getWeightFillerBuilder() {
        bitField0_ |= 0x00002000;
        onChanged();
        return getWeightFillerFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 7;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public caffe.Caffe.FillerParameterOrBuilder getWeightFillerOrBuilder() {
        if (weightFillerBuilder_ != null) {
          return weightFillerBuilder_.getMessageOrBuilder();
        } else {
          return weightFiller_;
        }
      }
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 7;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.FillerParameter, caffe.Caffe.FillerParameter.Builder, caffe.Caffe.FillerParameterOrBuilder> 
          getWeightFillerFieldBuilder() {
        if (weightFillerBuilder_ == null) {
          weightFillerBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.FillerParameter, caffe.Caffe.FillerParameter.Builder, caffe.Caffe.FillerParameterOrBuilder>(
                  weightFiller_,
                  getParentForChildren(),
                  isClean());
          weightFiller_ = null;
        }
        return weightFillerBuilder_;
      }

      // optional .caffe.FillerParameter bias_filler = 8;
      private caffe.Caffe.FillerParameter biasFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.FillerParameter, caffe.Caffe.FillerParameter.Builder, caffe.Caffe.FillerParameterOrBuilder> biasFillerBuilder_;
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 8;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public boolean hasBiasFiller() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 8;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public caffe.Caffe.FillerParameter getBiasFiller() {
        if (biasFillerBuilder_ == null) {
          return biasFiller_;
        } else {
          return biasFillerBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 8;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public Builder setBiasFiller(caffe.Caffe.FillerParameter value) {
        if (biasFillerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          biasFiller_ = value;
          onChanged();
        } else {
          biasFillerBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00004000;
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 8;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public Builder setBiasFiller(
          caffe.Caffe.FillerParameter.Builder builderForValue) {
        if (biasFillerBuilder_ == null) {
          biasFiller_ = builderForValue.build();
          onChanged();
        } else {
          biasFillerBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00004000;
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 8;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public Builder mergeBiasFiller(caffe.Caffe.FillerParameter value) {
        if (biasFillerBuilder_ == null) {
          if (((bitField0_ & 0x00004000) == 0x00004000) &&
              biasFiller_ != caffe.Caffe.FillerParameter.getDefaultInstance()) {
            biasFiller_ =
              caffe.Caffe.FillerParameter.newBuilder(biasFiller_).mergeFrom(value).buildPartial();
          } else {
            biasFiller_ = value;
          }
          onChanged();
        } else {
          biasFillerBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00004000;
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 8;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public Builder clearBiasFiller() {
        if (biasFillerBuilder_ == null) {
          biasFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
          onChanged();
        } else {
          biasFillerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00004000);
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 8;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public caffe.Caffe.FillerParameter.Builder getBiasFillerBuilder() {
        bitField0_ |= 0x00004000;
        onChanged();
        return getBiasFillerFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 8;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public caffe.Caffe.FillerParameterOrBuilder getBiasFillerOrBuilder() {
        if (biasFillerBuilder_ != null) {
          return biasFillerBuilder_.getMessageOrBuilder();
        } else {
          return biasFiller_;
        }
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 8;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.FillerParameter, caffe.Caffe.FillerParameter.Builder, caffe.Caffe.FillerParameterOrBuilder> 
          getBiasFillerFieldBuilder() {
        if (biasFillerBuilder_ == null) {
          biasFillerBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.FillerParameter, caffe.Caffe.FillerParameter.Builder, caffe.Caffe.FillerParameterOrBuilder>(
                  biasFiller_,
                  getParentForChildren(),
                  isClean());
          biasFiller_ = null;
        }
        return biasFillerBuilder_;
      }

      // optional .caffe.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
      private caffe.Caffe.ConvolutionParameter.Engine engine_ = caffe.Caffe.ConvolutionParameter.Engine.DEFAULT;
      /**
       * <code>optional .caffe.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];</code>
       */
      public boolean hasEngine() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional .caffe.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];</code>
       */
      public caffe.Caffe.ConvolutionParameter.Engine getEngine() {
        return engine_;
      }
      /**
       * <code>optional .caffe.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];</code>
       */
      public Builder setEngine(caffe.Caffe.ConvolutionParameter.Engine value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00008000;
        engine_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .caffe.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];</code>
       */
      public Builder clearEngine() {
        bitField0_ = (bitField0_ & ~0x00008000);
        engine_ = caffe.Caffe.ConvolutionParameter.Engine.DEFAULT;
        onChanged();
        return this;
      }

      // optional int32 axis = 16 [default = 1];
      private int axis_ = 1;
      /**
       * <code>optional int32 axis = 16 [default = 1];</code>
       *
       * <pre>
       * The axis to interpret as "channels" when performing convolution.
       * Preceding dimensions are treated as independent inputs;
       * succeeding dimensions are treated as "spatial".
       * With (N, C, H, W) inputs, and axis == 1 (the default), we perform
       * N independent 2D convolutions, sliding C-channel (or (C/g)-channels, for
       * groups g&gt;1) filters across the spatial axes (H, W) of the input.
       * With (N, C, D, H, W) inputs, and axis == 1, we perform
       * N independent 3D convolutions, sliding (C/g)-channels
       * filters across the spatial axes (D, H, W) of the input.
       * </pre>
       */
      public boolean hasAxis() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional int32 axis = 16 [default = 1];</code>
       *
       * <pre>
       * The axis to interpret as "channels" when performing convolution.
       * Preceding dimensions are treated as independent inputs;
       * succeeding dimensions are treated as "spatial".
       * With (N, C, H, W) inputs, and axis == 1 (the default), we perform
       * N independent 2D convolutions, sliding C-channel (or (C/g)-channels, for
       * groups g&gt;1) filters across the spatial axes (H, W) of the input.
       * With (N, C, D, H, W) inputs, and axis == 1, we perform
       * N independent 3D convolutions, sliding (C/g)-channels
       * filters across the spatial axes (D, H, W) of the input.
       * </pre>
       */
      public int getAxis() {
        return axis_;
      }
      /**
       * <code>optional int32 axis = 16 [default = 1];</code>
       *
       * <pre>
       * The axis to interpret as "channels" when performing convolution.
       * Preceding dimensions are treated as independent inputs;
       * succeeding dimensions are treated as "spatial".
       * With (N, C, H, W) inputs, and axis == 1 (the default), we perform
       * N independent 2D convolutions, sliding C-channel (or (C/g)-channels, for
       * groups g&gt;1) filters across the spatial axes (H, W) of the input.
       * With (N, C, D, H, W) inputs, and axis == 1, we perform
       * N independent 3D convolutions, sliding (C/g)-channels
       * filters across the spatial axes (D, H, W) of the input.
       * </pre>
       */
      public Builder setAxis(int value) {
        bitField0_ |= 0x00010000;
        axis_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 axis = 16 [default = 1];</code>
       *
       * <pre>
       * The axis to interpret as "channels" when performing convolution.
       * Preceding dimensions are treated as independent inputs;
       * succeeding dimensions are treated as "spatial".
       * With (N, C, H, W) inputs, and axis == 1 (the default), we perform
       * N independent 2D convolutions, sliding C-channel (or (C/g)-channels, for
       * groups g&gt;1) filters across the spatial axes (H, W) of the input.
       * With (N, C, D, H, W) inputs, and axis == 1, we perform
       * N independent 3D convolutions, sliding (C/g)-channels
       * filters across the spatial axes (D, H, W) of the input.
       * </pre>
       */
      public Builder clearAxis() {
        bitField0_ = (bitField0_ & ~0x00010000);
        axis_ = 1;
        onChanged();
        return this;
      }

      // optional bool force_nd_im2col = 17 [default = false];
      private boolean forceNdIm2Col_ ;
      /**
       * <code>optional bool force_nd_im2col = 17 [default = false];</code>
       *
       * <pre>
       * Whether to force use of the general ND convolution, even if a specific
       * implementation for blobs of the appropriate number of spatial dimensions
       * is available. (Currently, there is only a 2D-specific convolution
       * implementation; for input blobs with num_axes != 2, this option is
       * ignored and the ND implementation will be used.)
       * </pre>
       */
      public boolean hasForceNdIm2Col() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional bool force_nd_im2col = 17 [default = false];</code>
       *
       * <pre>
       * Whether to force use of the general ND convolution, even if a specific
       * implementation for blobs of the appropriate number of spatial dimensions
       * is available. (Currently, there is only a 2D-specific convolution
       * implementation; for input blobs with num_axes != 2, this option is
       * ignored and the ND implementation will be used.)
       * </pre>
       */
      public boolean getForceNdIm2Col() {
        return forceNdIm2Col_;
      }
      /**
       * <code>optional bool force_nd_im2col = 17 [default = false];</code>
       *
       * <pre>
       * Whether to force use of the general ND convolution, even if a specific
       * implementation for blobs of the appropriate number of spatial dimensions
       * is available. (Currently, there is only a 2D-specific convolution
       * implementation; for input blobs with num_axes != 2, this option is
       * ignored and the ND implementation will be used.)
       * </pre>
       */
      public Builder setForceNdIm2Col(boolean value) {
        bitField0_ |= 0x00020000;
        forceNdIm2Col_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool force_nd_im2col = 17 [default = false];</code>
       *
       * <pre>
       * Whether to force use of the general ND convolution, even if a specific
       * implementation for blobs of the appropriate number of spatial dimensions
       * is available. (Currently, there is only a 2D-specific convolution
       * implementation; for input blobs with num_axes != 2, this option is
       * ignored and the ND implementation will be used.)
       * </pre>
       */
      public Builder clearForceNdIm2Col() {
        bitField0_ = (bitField0_ & ~0x00020000);
        forceNdIm2Col_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.ConvolutionParameter)
    }

    static {
      defaultInstance = new ConvolutionParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.ConvolutionParameter)
  }

  public interface CropParameterOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 axis = 1 [default = 2];
    /**
     * <code>optional int32 axis = 1 [default = 2];</code>
     *
     * <pre>
     * To crop, elements of the first bottom are selected to fit the dimensions
     * of the second, reference bottom. The crop is configured by
     * - the crop `axis` to pick the dimensions for cropping
     * - the crop `offset` to set the shift for all/each dimension
     * to align the cropped bottom with the reference bottom.
     * All dimensions up to but excluding `axis` are preserved, while
     * the dimensions including and trailing `axis` are cropped.
     * If only one `offset` is set, then all dimensions are offset by this amount.
     * Otherwise, the number of offsets must equal the number of cropped axes to
     * shift the crop in each dimension accordingly.
     * Note: standard dimensions are N,C,H,W so the default is a spatial crop,
     * and `axis` may be negative to index from the end (e.g., -1 for the last
     * axis).
     * </pre>
     */
    boolean hasAxis();
    /**
     * <code>optional int32 axis = 1 [default = 2];</code>
     *
     * <pre>
     * To crop, elements of the first bottom are selected to fit the dimensions
     * of the second, reference bottom. The crop is configured by
     * - the crop `axis` to pick the dimensions for cropping
     * - the crop `offset` to set the shift for all/each dimension
     * to align the cropped bottom with the reference bottom.
     * All dimensions up to but excluding `axis` are preserved, while
     * the dimensions including and trailing `axis` are cropped.
     * If only one `offset` is set, then all dimensions are offset by this amount.
     * Otherwise, the number of offsets must equal the number of cropped axes to
     * shift the crop in each dimension accordingly.
     * Note: standard dimensions are N,C,H,W so the default is a spatial crop,
     * and `axis` may be negative to index from the end (e.g., -1 for the last
     * axis).
     * </pre>
     */
    int getAxis();

    // repeated uint32 offset = 2;
    /**
     * <code>repeated uint32 offset = 2;</code>
     */
    java.util.List<java.lang.Integer> getOffsetList();
    /**
     * <code>repeated uint32 offset = 2;</code>
     */
    int getOffsetCount();
    /**
     * <code>repeated uint32 offset = 2;</code>
     */
    int getOffset(int index);
  }
  /**
   * Protobuf type {@code caffe.CropParameter}
   */
  public static final class CropParameter extends
      com.google.protobuf.GeneratedMessage
      implements CropParameterOrBuilder {
    // Use CropParameter.newBuilder() to construct.
    private CropParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CropParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CropParameter defaultInstance;
    public static CropParameter getDefaultInstance() {
      return defaultInstance;
    }

    public CropParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CropParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              axis_ = input.readInt32();
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                offset_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              offset_.add(input.readUInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                offset_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                offset_.add(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          offset_ = java.util.Collections.unmodifiableList(offset_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_CropParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_CropParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.CropParameter.class, caffe.Caffe.CropParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<CropParameter> PARSER =
        new com.google.protobuf.AbstractParser<CropParameter>() {
      public CropParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CropParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CropParameter> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 axis = 1 [default = 2];
    public static final int AXIS_FIELD_NUMBER = 1;
    private int axis_;
    /**
     * <code>optional int32 axis = 1 [default = 2];</code>
     *
     * <pre>
     * To crop, elements of the first bottom are selected to fit the dimensions
     * of the second, reference bottom. The crop is configured by
     * - the crop `axis` to pick the dimensions for cropping
     * - the crop `offset` to set the shift for all/each dimension
     * to align the cropped bottom with the reference bottom.
     * All dimensions up to but excluding `axis` are preserved, while
     * the dimensions including and trailing `axis` are cropped.
     * If only one `offset` is set, then all dimensions are offset by this amount.
     * Otherwise, the number of offsets must equal the number of cropped axes to
     * shift the crop in each dimension accordingly.
     * Note: standard dimensions are N,C,H,W so the default is a spatial crop,
     * and `axis` may be negative to index from the end (e.g., -1 for the last
     * axis).
     * </pre>
     */
    public boolean hasAxis() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 axis = 1 [default = 2];</code>
     *
     * <pre>
     * To crop, elements of the first bottom are selected to fit the dimensions
     * of the second, reference bottom. The crop is configured by
     * - the crop `axis` to pick the dimensions for cropping
     * - the crop `offset` to set the shift for all/each dimension
     * to align the cropped bottom with the reference bottom.
     * All dimensions up to but excluding `axis` are preserved, while
     * the dimensions including and trailing `axis` are cropped.
     * If only one `offset` is set, then all dimensions are offset by this amount.
     * Otherwise, the number of offsets must equal the number of cropped axes to
     * shift the crop in each dimension accordingly.
     * Note: standard dimensions are N,C,H,W so the default is a spatial crop,
     * and `axis` may be negative to index from the end (e.g., -1 for the last
     * axis).
     * </pre>
     */
    public int getAxis() {
      return axis_;
    }

    // repeated uint32 offset = 2;
    public static final int OFFSET_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> offset_;
    /**
     * <code>repeated uint32 offset = 2;</code>
     */
    public java.util.List<java.lang.Integer>
        getOffsetList() {
      return offset_;
    }
    /**
     * <code>repeated uint32 offset = 2;</code>
     */
    public int getOffsetCount() {
      return offset_.size();
    }
    /**
     * <code>repeated uint32 offset = 2;</code>
     */
    public int getOffset(int index) {
      return offset_.get(index);
    }

    private void initFields() {
      axis_ = 2;
      offset_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, axis_);
      }
      for (int i = 0; i < offset_.size(); i++) {
        output.writeUInt32(2, offset_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, axis_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < offset_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(offset_.get(i));
        }
        size += dataSize;
        size += 1 * getOffsetList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.CropParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.CropParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.CropParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.CropParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.CropParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.CropParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.CropParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.CropParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.CropParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.CropParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.CropParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.CropParameter}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements caffe.Caffe.CropParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_CropParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_CropParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.CropParameter.class, caffe.Caffe.CropParameter.Builder.class);
      }

      // Construct using caffe.Caffe.CropParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        axis_ = 2;
        bitField0_ = (bitField0_ & ~0x00000001);
        offset_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_CropParameter_descriptor;
      }

      public caffe.Caffe.CropParameter getDefaultInstanceForType() {
        return caffe.Caffe.CropParameter.getDefaultInstance();
      }

      public caffe.Caffe.CropParameter build() {
        caffe.Caffe.CropParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.CropParameter buildPartial() {
        caffe.Caffe.CropParameter result = new caffe.Caffe.CropParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.axis_ = axis_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          offset_ = java.util.Collections.unmodifiableList(offset_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.offset_ = offset_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.CropParameter) {
          return mergeFrom((caffe.Caffe.CropParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.CropParameter other) {
        if (other == caffe.Caffe.CropParameter.getDefaultInstance()) return this;
        if (other.hasAxis()) {
          setAxis(other.getAxis());
        }
        if (!other.offset_.isEmpty()) {
          if (offset_.isEmpty()) {
            offset_ = other.offset_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureOffsetIsMutable();
            offset_.addAll(other.offset_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.CropParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.CropParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 axis = 1 [default = 2];
      private int axis_ = 2;
      /**
       * <code>optional int32 axis = 1 [default = 2];</code>
       *
       * <pre>
       * To crop, elements of the first bottom are selected to fit the dimensions
       * of the second, reference bottom. The crop is configured by
       * - the crop `axis` to pick the dimensions for cropping
       * - the crop `offset` to set the shift for all/each dimension
       * to align the cropped bottom with the reference bottom.
       * All dimensions up to but excluding `axis` are preserved, while
       * the dimensions including and trailing `axis` are cropped.
       * If only one `offset` is set, then all dimensions are offset by this amount.
       * Otherwise, the number of offsets must equal the number of cropped axes to
       * shift the crop in each dimension accordingly.
       * Note: standard dimensions are N,C,H,W so the default is a spatial crop,
       * and `axis` may be negative to index from the end (e.g., -1 for the last
       * axis).
       * </pre>
       */
      public boolean hasAxis() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 axis = 1 [default = 2];</code>
       *
       * <pre>
       * To crop, elements of the first bottom are selected to fit the dimensions
       * of the second, reference bottom. The crop is configured by
       * - the crop `axis` to pick the dimensions for cropping
       * - the crop `offset` to set the shift for all/each dimension
       * to align the cropped bottom with the reference bottom.
       * All dimensions up to but excluding `axis` are preserved, while
       * the dimensions including and trailing `axis` are cropped.
       * If only one `offset` is set, then all dimensions are offset by this amount.
       * Otherwise, the number of offsets must equal the number of cropped axes to
       * shift the crop in each dimension accordingly.
       * Note: standard dimensions are N,C,H,W so the default is a spatial crop,
       * and `axis` may be negative to index from the end (e.g., -1 for the last
       * axis).
       * </pre>
       */
      public int getAxis() {
        return axis_;
      }
      /**
       * <code>optional int32 axis = 1 [default = 2];</code>
       *
       * <pre>
       * To crop, elements of the first bottom are selected to fit the dimensions
       * of the second, reference bottom. The crop is configured by
       * - the crop `axis` to pick the dimensions for cropping
       * - the crop `offset` to set the shift for all/each dimension
       * to align the cropped bottom with the reference bottom.
       * All dimensions up to but excluding `axis` are preserved, while
       * the dimensions including and trailing `axis` are cropped.
       * If only one `offset` is set, then all dimensions are offset by this amount.
       * Otherwise, the number of offsets must equal the number of cropped axes to
       * shift the crop in each dimension accordingly.
       * Note: standard dimensions are N,C,H,W so the default is a spatial crop,
       * and `axis` may be negative to index from the end (e.g., -1 for the last
       * axis).
       * </pre>
       */
      public Builder setAxis(int value) {
        bitField0_ |= 0x00000001;
        axis_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 axis = 1 [default = 2];</code>
       *
       * <pre>
       * To crop, elements of the first bottom are selected to fit the dimensions
       * of the second, reference bottom. The crop is configured by
       * - the crop `axis` to pick the dimensions for cropping
       * - the crop `offset` to set the shift for all/each dimension
       * to align the cropped bottom with the reference bottom.
       * All dimensions up to but excluding `axis` are preserved, while
       * the dimensions including and trailing `axis` are cropped.
       * If only one `offset` is set, then all dimensions are offset by this amount.
       * Otherwise, the number of offsets must equal the number of cropped axes to
       * shift the crop in each dimension accordingly.
       * Note: standard dimensions are N,C,H,W so the default is a spatial crop,
       * and `axis` may be negative to index from the end (e.g., -1 for the last
       * axis).
       * </pre>
       */
      public Builder clearAxis() {
        bitField0_ = (bitField0_ & ~0x00000001);
        axis_ = 2;
        onChanged();
        return this;
      }

      // repeated uint32 offset = 2;
      private java.util.List<java.lang.Integer> offset_ = java.util.Collections.emptyList();
      private void ensureOffsetIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          offset_ = new java.util.ArrayList<java.lang.Integer>(offset_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated uint32 offset = 2;</code>
       */
      public java.util.List<java.lang.Integer>
          getOffsetList() {
        return java.util.Collections.unmodifiableList(offset_);
      }
      /**
       * <code>repeated uint32 offset = 2;</code>
       */
      public int getOffsetCount() {
        return offset_.size();
      }
      /**
       * <code>repeated uint32 offset = 2;</code>
       */
      public int getOffset(int index) {
        return offset_.get(index);
      }
      /**
       * <code>repeated uint32 offset = 2;</code>
       */
      public Builder setOffset(
          int index, int value) {
        ensureOffsetIsMutable();
        offset_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 offset = 2;</code>
       */
      public Builder addOffset(int value) {
        ensureOffsetIsMutable();
        offset_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 offset = 2;</code>
       */
      public Builder addAllOffset(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureOffsetIsMutable();
        super.addAll(values, offset_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 offset = 2;</code>
       */
      public Builder clearOffset() {
        offset_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.CropParameter)
    }

    static {
      defaultInstance = new CropParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.CropParameter)
  }

  public interface DataParameterOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional string source = 1;
    /**
     * <code>optional string source = 1;</code>
     *
     * <pre>
     * Specify the data source.
     * </pre>
     */
    boolean hasSource();
    /**
     * <code>optional string source = 1;</code>
     *
     * <pre>
     * Specify the data source.
     * </pre>
     */
    java.lang.String getSource();
    /**
     * <code>optional string source = 1;</code>
     *
     * <pre>
     * Specify the data source.
     * </pre>
     */
    com.google.protobuf.ByteString
        getSourceBytes();

    // optional uint32 batch_size = 4;
    /**
     * <code>optional uint32 batch_size = 4;</code>
     *
     * <pre>
     * Specify the batch size.
     * </pre>
     */
    boolean hasBatchSize();
    /**
     * <code>optional uint32 batch_size = 4;</code>
     *
     * <pre>
     * Specify the batch size.
     * </pre>
     */
    int getBatchSize();

    // optional uint32 rand_skip = 7 [default = 0];
    /**
     * <code>optional uint32 rand_skip = 7 [default = 0];</code>
     *
     * <pre>
     * The rand_skip variable is for the data layer to skip a few data points
     * to avoid all asynchronous sgd clients to start at the same point. The skip
     * point would be set as rand_skip * rand(0,1). Note that rand_skip should not
     * be larger than the number of keys in the database.
     * DEPRECATED. Each solver accesses a different subset of the database.
     * </pre>
     */
    boolean hasRandSkip();
    /**
     * <code>optional uint32 rand_skip = 7 [default = 0];</code>
     *
     * <pre>
     * The rand_skip variable is for the data layer to skip a few data points
     * to avoid all asynchronous sgd clients to start at the same point. The skip
     * point would be set as rand_skip * rand(0,1). Note that rand_skip should not
     * be larger than the number of keys in the database.
     * DEPRECATED. Each solver accesses a different subset of the database.
     * </pre>
     */
    int getRandSkip();

    // optional .caffe.DataParameter.DB backend = 8 [default = LEVELDB];
    /**
     * <code>optional .caffe.DataParameter.DB backend = 8 [default = LEVELDB];</code>
     */
    boolean hasBackend();
    /**
     * <code>optional .caffe.DataParameter.DB backend = 8 [default = LEVELDB];</code>
     */
    caffe.Caffe.DataParameter.DB getBackend();

    // optional float scale = 2 [default = 1];
    /**
     * <code>optional float scale = 2 [default = 1];</code>
     *
     * <pre>
     * DEPRECATED. See TransformationParameter. For data pre-processing, we can do
     * simple scaling and subtracting the data mean, if provided. Note that the
     * mean subtraction is always carried out before scaling.
     * </pre>
     */
    boolean hasScale();
    /**
     * <code>optional float scale = 2 [default = 1];</code>
     *
     * <pre>
     * DEPRECATED. See TransformationParameter. For data pre-processing, we can do
     * simple scaling and subtracting the data mean, if provided. Note that the
     * mean subtraction is always carried out before scaling.
     * </pre>
     */
    float getScale();

    // optional string mean_file = 3;
    /**
     * <code>optional string mean_file = 3;</code>
     */
    boolean hasMeanFile();
    /**
     * <code>optional string mean_file = 3;</code>
     */
    java.lang.String getMeanFile();
    /**
     * <code>optional string mean_file = 3;</code>
     */
    com.google.protobuf.ByteString
        getMeanFileBytes();

    // optional uint32 crop_size = 5 [default = 0];
    /**
     * <code>optional uint32 crop_size = 5 [default = 0];</code>
     *
     * <pre>
     * DEPRECATED. See TransformationParameter. Specify if we would like to randomly
     * crop an image.
     * </pre>
     */
    boolean hasCropSize();
    /**
     * <code>optional uint32 crop_size = 5 [default = 0];</code>
     *
     * <pre>
     * DEPRECATED. See TransformationParameter. Specify if we would like to randomly
     * crop an image.
     * </pre>
     */
    int getCropSize();

    // optional bool mirror = 6 [default = false];
    /**
     * <code>optional bool mirror = 6 [default = false];</code>
     *
     * <pre>
     * DEPRECATED. See TransformationParameter. Specify if we want to randomly mirror
     * data.
     * </pre>
     */
    boolean hasMirror();
    /**
     * <code>optional bool mirror = 6 [default = false];</code>
     *
     * <pre>
     * DEPRECATED. See TransformationParameter. Specify if we want to randomly mirror
     * data.
     * </pre>
     */
    boolean getMirror();

    // optional bool force_encoded_color = 9 [default = false];
    /**
     * <code>optional bool force_encoded_color = 9 [default = false];</code>
     *
     * <pre>
     * Force the encoded image to have 3 color channels
     * </pre>
     */
    boolean hasForceEncodedColor();
    /**
     * <code>optional bool force_encoded_color = 9 [default = false];</code>
     *
     * <pre>
     * Force the encoded image to have 3 color channels
     * </pre>
     */
    boolean getForceEncodedColor();

    // optional uint32 prefetch = 10 [default = 4];
    /**
     * <code>optional uint32 prefetch = 10 [default = 4];</code>
     *
     * <pre>
     * Prefetch queue (Number of batches to prefetch to host memory, increase if
     * data access bandwidth varies).
     * </pre>
     */
    boolean hasPrefetch();
    /**
     * <code>optional uint32 prefetch = 10 [default = 4];</code>
     *
     * <pre>
     * Prefetch queue (Number of batches to prefetch to host memory, increase if
     * data access bandwidth varies).
     * </pre>
     */
    int getPrefetch();
  }
  /**
   * Protobuf type {@code caffe.DataParameter}
   */
  public static final class DataParameter extends
      com.google.protobuf.GeneratedMessage
      implements DataParameterOrBuilder {
    // Use DataParameter.newBuilder() to construct.
    private DataParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private DataParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final DataParameter defaultInstance;
    public static DataParameter getDefaultInstance() {
      return defaultInstance;
    }

    public DataParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private DataParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              source_ = input.readBytes();
              break;
            }
            case 21: {
              bitField0_ |= 0x00000010;
              scale_ = input.readFloat();
              break;
            }
            case 26: {
              bitField0_ |= 0x00000020;
              meanFile_ = input.readBytes();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000002;
              batchSize_ = input.readUInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000040;
              cropSize_ = input.readUInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000080;
              mirror_ = input.readBool();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000004;
              randSkip_ = input.readUInt32();
              break;
            }
            case 64: {
              int rawValue = input.readEnum();
              caffe.Caffe.DataParameter.DB value = caffe.Caffe.DataParameter.DB.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(8, rawValue);
              } else {
                bitField0_ |= 0x00000008;
                backend_ = value;
              }
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              forceEncodedColor_ = input.readBool();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              prefetch_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_DataParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_DataParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.DataParameter.class, caffe.Caffe.DataParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<DataParameter> PARSER =
        new com.google.protobuf.AbstractParser<DataParameter>() {
      public DataParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DataParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<DataParameter> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code caffe.DataParameter.DB}
     */
    public enum DB
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>LEVELDB = 0;</code>
       */
      LEVELDB(0, 0),
      /**
       * <code>LMDB = 1;</code>
       */
      LMDB(1, 1),
      ;

      /**
       * <code>LEVELDB = 0;</code>
       */
      public static final int LEVELDB_VALUE = 0;
      /**
       * <code>LMDB = 1;</code>
       */
      public static final int LMDB_VALUE = 1;


      public final int getNumber() { return value; }

      public static DB valueOf(int value) {
        switch (value) {
          case 0: return LEVELDB;
          case 1: return LMDB;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<DB>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<DB>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<DB>() {
              public DB findValueByNumber(int number) {
                return DB.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return caffe.Caffe.DataParameter.getDescriptor().getEnumTypes().get(0);
      }

      private static final DB[] VALUES = values();

      public static DB valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private DB(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:caffe.DataParameter.DB)
    }

    private int bitField0_;
    // optional string source = 1;
    public static final int SOURCE_FIELD_NUMBER = 1;
    private java.lang.Object source_;
    /**
     * <code>optional string source = 1;</code>
     *
     * <pre>
     * Specify the data source.
     * </pre>
     */
    public boolean hasSource() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string source = 1;</code>
     *
     * <pre>
     * Specify the data source.
     * </pre>
     */
    public java.lang.String getSource() {
      java.lang.Object ref = source_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          source_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string source = 1;</code>
     *
     * <pre>
     * Specify the data source.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getSourceBytes() {
      java.lang.Object ref = source_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        source_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional uint32 batch_size = 4;
    public static final int BATCH_SIZE_FIELD_NUMBER = 4;
    private int batchSize_;
    /**
     * <code>optional uint32 batch_size = 4;</code>
     *
     * <pre>
     * Specify the batch size.
     * </pre>
     */
    public boolean hasBatchSize() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 batch_size = 4;</code>
     *
     * <pre>
     * Specify the batch size.
     * </pre>
     */
    public int getBatchSize() {
      return batchSize_;
    }

    // optional uint32 rand_skip = 7 [default = 0];
    public static final int RAND_SKIP_FIELD_NUMBER = 7;
    private int randSkip_;
    /**
     * <code>optional uint32 rand_skip = 7 [default = 0];</code>
     *
     * <pre>
     * The rand_skip variable is for the data layer to skip a few data points
     * to avoid all asynchronous sgd clients to start at the same point. The skip
     * point would be set as rand_skip * rand(0,1). Note that rand_skip should not
     * be larger than the number of keys in the database.
     * DEPRECATED. Each solver accesses a different subset of the database.
     * </pre>
     */
    public boolean hasRandSkip() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 rand_skip = 7 [default = 0];</code>
     *
     * <pre>
     * The rand_skip variable is for the data layer to skip a few data points
     * to avoid all asynchronous sgd clients to start at the same point. The skip
     * point would be set as rand_skip * rand(0,1). Note that rand_skip should not
     * be larger than the number of keys in the database.
     * DEPRECATED. Each solver accesses a different subset of the database.
     * </pre>
     */
    public int getRandSkip() {
      return randSkip_;
    }

    // optional .caffe.DataParameter.DB backend = 8 [default = LEVELDB];
    public static final int BACKEND_FIELD_NUMBER = 8;
    private caffe.Caffe.DataParameter.DB backend_;
    /**
     * <code>optional .caffe.DataParameter.DB backend = 8 [default = LEVELDB];</code>
     */
    public boolean hasBackend() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .caffe.DataParameter.DB backend = 8 [default = LEVELDB];</code>
     */
    public caffe.Caffe.DataParameter.DB getBackend() {
      return backend_;
    }

    // optional float scale = 2 [default = 1];
    public static final int SCALE_FIELD_NUMBER = 2;
    private float scale_;
    /**
     * <code>optional float scale = 2 [default = 1];</code>
     *
     * <pre>
     * DEPRECATED. See TransformationParameter. For data pre-processing, we can do
     * simple scaling and subtracting the data mean, if provided. Note that the
     * mean subtraction is always carried out before scaling.
     * </pre>
     */
    public boolean hasScale() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional float scale = 2 [default = 1];</code>
     *
     * <pre>
     * DEPRECATED. See TransformationParameter. For data pre-processing, we can do
     * simple scaling and subtracting the data mean, if provided. Note that the
     * mean subtraction is always carried out before scaling.
     * </pre>
     */
    public float getScale() {
      return scale_;
    }

    // optional string mean_file = 3;
    public static final int MEAN_FILE_FIELD_NUMBER = 3;
    private java.lang.Object meanFile_;
    /**
     * <code>optional string mean_file = 3;</code>
     */
    public boolean hasMeanFile() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional string mean_file = 3;</code>
     */
    public java.lang.String getMeanFile() {
      java.lang.Object ref = meanFile_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          meanFile_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string mean_file = 3;</code>
     */
    public com.google.protobuf.ByteString
        getMeanFileBytes() {
      java.lang.Object ref = meanFile_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        meanFile_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional uint32 crop_size = 5 [default = 0];
    public static final int CROP_SIZE_FIELD_NUMBER = 5;
    private int cropSize_;
    /**
     * <code>optional uint32 crop_size = 5 [default = 0];</code>
     *
     * <pre>
     * DEPRECATED. See TransformationParameter. Specify if we would like to randomly
     * crop an image.
     * </pre>
     */
    public boolean hasCropSize() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional uint32 crop_size = 5 [default = 0];</code>
     *
     * <pre>
     * DEPRECATED. See TransformationParameter. Specify if we would like to randomly
     * crop an image.
     * </pre>
     */
    public int getCropSize() {
      return cropSize_;
    }

    // optional bool mirror = 6 [default = false];
    public static final int MIRROR_FIELD_NUMBER = 6;
    private boolean mirror_;
    /**
     * <code>optional bool mirror = 6 [default = false];</code>
     *
     * <pre>
     * DEPRECATED. See TransformationParameter. Specify if we want to randomly mirror
     * data.
     * </pre>
     */
    public boolean hasMirror() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional bool mirror = 6 [default = false];</code>
     *
     * <pre>
     * DEPRECATED. See TransformationParameter. Specify if we want to randomly mirror
     * data.
     * </pre>
     */
    public boolean getMirror() {
      return mirror_;
    }

    // optional bool force_encoded_color = 9 [default = false];
    public static final int FORCE_ENCODED_COLOR_FIELD_NUMBER = 9;
    private boolean forceEncodedColor_;
    /**
     * <code>optional bool force_encoded_color = 9 [default = false];</code>
     *
     * <pre>
     * Force the encoded image to have 3 color channels
     * </pre>
     */
    public boolean hasForceEncodedColor() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional bool force_encoded_color = 9 [default = false];</code>
     *
     * <pre>
     * Force the encoded image to have 3 color channels
     * </pre>
     */
    public boolean getForceEncodedColor() {
      return forceEncodedColor_;
    }

    // optional uint32 prefetch = 10 [default = 4];
    public static final int PREFETCH_FIELD_NUMBER = 10;
    private int prefetch_;
    /**
     * <code>optional uint32 prefetch = 10 [default = 4];</code>
     *
     * <pre>
     * Prefetch queue (Number of batches to prefetch to host memory, increase if
     * data access bandwidth varies).
     * </pre>
     */
    public boolean hasPrefetch() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional uint32 prefetch = 10 [default = 4];</code>
     *
     * <pre>
     * Prefetch queue (Number of batches to prefetch to host memory, increase if
     * data access bandwidth varies).
     * </pre>
     */
    public int getPrefetch() {
      return prefetch_;
    }

    private void initFields() {
      source_ = "";
      batchSize_ = 0;
      randSkip_ = 0;
      backend_ = caffe.Caffe.DataParameter.DB.LEVELDB;
      scale_ = 1F;
      meanFile_ = "";
      cropSize_ = 0;
      mirror_ = false;
      forceEncodedColor_ = false;
      prefetch_ = 4;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getSourceBytes());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeFloat(2, scale_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeBytes(3, getMeanFileBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(4, batchSize_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeUInt32(5, cropSize_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeBool(6, mirror_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(7, randSkip_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeEnum(8, backend_.getNumber());
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeBool(9, forceEncodedColor_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeUInt32(10, prefetch_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getSourceBytes());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, scale_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getMeanFileBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, batchSize_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, cropSize_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, mirror_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, randSkip_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(8, backend_.getNumber());
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(9, forceEncodedColor_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(10, prefetch_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.DataParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.DataParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.DataParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.DataParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.DataParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.DataParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.DataParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.DataParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.DataParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.DataParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.DataParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.DataParameter}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements caffe.Caffe.DataParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_DataParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_DataParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.DataParameter.class, caffe.Caffe.DataParameter.Builder.class);
      }

      // Construct using caffe.Caffe.DataParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        source_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        batchSize_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        randSkip_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        backend_ = caffe.Caffe.DataParameter.DB.LEVELDB;
        bitField0_ = (bitField0_ & ~0x00000008);
        scale_ = 1F;
        bitField0_ = (bitField0_ & ~0x00000010);
        meanFile_ = "";
        bitField0_ = (bitField0_ & ~0x00000020);
        cropSize_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        mirror_ = false;
        bitField0_ = (bitField0_ & ~0x00000080);
        forceEncodedColor_ = false;
        bitField0_ = (bitField0_ & ~0x00000100);
        prefetch_ = 4;
        bitField0_ = (bitField0_ & ~0x00000200);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_DataParameter_descriptor;
      }

      public caffe.Caffe.DataParameter getDefaultInstanceForType() {
        return caffe.Caffe.DataParameter.getDefaultInstance();
      }

      public caffe.Caffe.DataParameter build() {
        caffe.Caffe.DataParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.DataParameter buildPartial() {
        caffe.Caffe.DataParameter result = new caffe.Caffe.DataParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.source_ = source_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.batchSize_ = batchSize_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.randSkip_ = randSkip_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.backend_ = backend_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.scale_ = scale_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.meanFile_ = meanFile_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.cropSize_ = cropSize_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.mirror_ = mirror_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.forceEncodedColor_ = forceEncodedColor_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.prefetch_ = prefetch_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.DataParameter) {
          return mergeFrom((caffe.Caffe.DataParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.DataParameter other) {
        if (other == caffe.Caffe.DataParameter.getDefaultInstance()) return this;
        if (other.hasSource()) {
          bitField0_ |= 0x00000001;
          source_ = other.source_;
          onChanged();
        }
        if (other.hasBatchSize()) {
          setBatchSize(other.getBatchSize());
        }
        if (other.hasRandSkip()) {
          setRandSkip(other.getRandSkip());
        }
        if (other.hasBackend()) {
          setBackend(other.getBackend());
        }
        if (other.hasScale()) {
          setScale(other.getScale());
        }
        if (other.hasMeanFile()) {
          bitField0_ |= 0x00000020;
          meanFile_ = other.meanFile_;
          onChanged();
        }
        if (other.hasCropSize()) {
          setCropSize(other.getCropSize());
        }
        if (other.hasMirror()) {
          setMirror(other.getMirror());
        }
        if (other.hasForceEncodedColor()) {
          setForceEncodedColor(other.getForceEncodedColor());
        }
        if (other.hasPrefetch()) {
          setPrefetch(other.getPrefetch());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.DataParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.DataParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional string source = 1;
      private java.lang.Object source_ = "";
      /**
       * <code>optional string source = 1;</code>
       *
       * <pre>
       * Specify the data source.
       * </pre>
       */
      public boolean hasSource() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string source = 1;</code>
       *
       * <pre>
       * Specify the data source.
       * </pre>
       */
      public java.lang.String getSource() {
        java.lang.Object ref = source_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          source_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string source = 1;</code>
       *
       * <pre>
       * Specify the data source.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getSourceBytes() {
        java.lang.Object ref = source_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          source_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string source = 1;</code>
       *
       * <pre>
       * Specify the data source.
       * </pre>
       */
      public Builder setSource(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        source_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string source = 1;</code>
       *
       * <pre>
       * Specify the data source.
       * </pre>
       */
      public Builder clearSource() {
        bitField0_ = (bitField0_ & ~0x00000001);
        source_ = getDefaultInstance().getSource();
        onChanged();
        return this;
      }
      /**
       * <code>optional string source = 1;</code>
       *
       * <pre>
       * Specify the data source.
       * </pre>
       */
      public Builder setSourceBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        source_ = value;
        onChanged();
        return this;
      }

      // optional uint32 batch_size = 4;
      private int batchSize_ ;
      /**
       * <code>optional uint32 batch_size = 4;</code>
       *
       * <pre>
       * Specify the batch size.
       * </pre>
       */
      public boolean hasBatchSize() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 batch_size = 4;</code>
       *
       * <pre>
       * Specify the batch size.
       * </pre>
       */
      public int getBatchSize() {
        return batchSize_;
      }
      /**
       * <code>optional uint32 batch_size = 4;</code>
       *
       * <pre>
       * Specify the batch size.
       * </pre>
       */
      public Builder setBatchSize(int value) {
        bitField0_ |= 0x00000002;
        batchSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 batch_size = 4;</code>
       *
       * <pre>
       * Specify the batch size.
       * </pre>
       */
      public Builder clearBatchSize() {
        bitField0_ = (bitField0_ & ~0x00000002);
        batchSize_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 rand_skip = 7 [default = 0];
      private int randSkip_ ;
      /**
       * <code>optional uint32 rand_skip = 7 [default = 0];</code>
       *
       * <pre>
       * The rand_skip variable is for the data layer to skip a few data points
       * to avoid all asynchronous sgd clients to start at the same point. The skip
       * point would be set as rand_skip * rand(0,1). Note that rand_skip should not
       * be larger than the number of keys in the database.
       * DEPRECATED. Each solver accesses a different subset of the database.
       * </pre>
       */
      public boolean hasRandSkip() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 rand_skip = 7 [default = 0];</code>
       *
       * <pre>
       * The rand_skip variable is for the data layer to skip a few data points
       * to avoid all asynchronous sgd clients to start at the same point. The skip
       * point would be set as rand_skip * rand(0,1). Note that rand_skip should not
       * be larger than the number of keys in the database.
       * DEPRECATED. Each solver accesses a different subset of the database.
       * </pre>
       */
      public int getRandSkip() {
        return randSkip_;
      }
      /**
       * <code>optional uint32 rand_skip = 7 [default = 0];</code>
       *
       * <pre>
       * The rand_skip variable is for the data layer to skip a few data points
       * to avoid all asynchronous sgd clients to start at the same point. The skip
       * point would be set as rand_skip * rand(0,1). Note that rand_skip should not
       * be larger than the number of keys in the database.
       * DEPRECATED. Each solver accesses a different subset of the database.
       * </pre>
       */
      public Builder setRandSkip(int value) {
        bitField0_ |= 0x00000004;
        randSkip_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 rand_skip = 7 [default = 0];</code>
       *
       * <pre>
       * The rand_skip variable is for the data layer to skip a few data points
       * to avoid all asynchronous sgd clients to start at the same point. The skip
       * point would be set as rand_skip * rand(0,1). Note that rand_skip should not
       * be larger than the number of keys in the database.
       * DEPRECATED. Each solver accesses a different subset of the database.
       * </pre>
       */
      public Builder clearRandSkip() {
        bitField0_ = (bitField0_ & ~0x00000004);
        randSkip_ = 0;
        onChanged();
        return this;
      }

      // optional .caffe.DataParameter.DB backend = 8 [default = LEVELDB];
      private caffe.Caffe.DataParameter.DB backend_ = caffe.Caffe.DataParameter.DB.LEVELDB;
      /**
       * <code>optional .caffe.DataParameter.DB backend = 8 [default = LEVELDB];</code>
       */
      public boolean hasBackend() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .caffe.DataParameter.DB backend = 8 [default = LEVELDB];</code>
       */
      public caffe.Caffe.DataParameter.DB getBackend() {
        return backend_;
      }
      /**
       * <code>optional .caffe.DataParameter.DB backend = 8 [default = LEVELDB];</code>
       */
      public Builder setBackend(caffe.Caffe.DataParameter.DB value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000008;
        backend_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .caffe.DataParameter.DB backend = 8 [default = LEVELDB];</code>
       */
      public Builder clearBackend() {
        bitField0_ = (bitField0_ & ~0x00000008);
        backend_ = caffe.Caffe.DataParameter.DB.LEVELDB;
        onChanged();
        return this;
      }

      // optional float scale = 2 [default = 1];
      private float scale_ = 1F;
      /**
       * <code>optional float scale = 2 [default = 1];</code>
       *
       * <pre>
       * DEPRECATED. See TransformationParameter. For data pre-processing, we can do
       * simple scaling and subtracting the data mean, if provided. Note that the
       * mean subtraction is always carried out before scaling.
       * </pre>
       */
      public boolean hasScale() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional float scale = 2 [default = 1];</code>
       *
       * <pre>
       * DEPRECATED. See TransformationParameter. For data pre-processing, we can do
       * simple scaling and subtracting the data mean, if provided. Note that the
       * mean subtraction is always carried out before scaling.
       * </pre>
       */
      public float getScale() {
        return scale_;
      }
      /**
       * <code>optional float scale = 2 [default = 1];</code>
       *
       * <pre>
       * DEPRECATED. See TransformationParameter. For data pre-processing, we can do
       * simple scaling and subtracting the data mean, if provided. Note that the
       * mean subtraction is always carried out before scaling.
       * </pre>
       */
      public Builder setScale(float value) {
        bitField0_ |= 0x00000010;
        scale_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float scale = 2 [default = 1];</code>
       *
       * <pre>
       * DEPRECATED. See TransformationParameter. For data pre-processing, we can do
       * simple scaling and subtracting the data mean, if provided. Note that the
       * mean subtraction is always carried out before scaling.
       * </pre>
       */
      public Builder clearScale() {
        bitField0_ = (bitField0_ & ~0x00000010);
        scale_ = 1F;
        onChanged();
        return this;
      }

      // optional string mean_file = 3;
      private java.lang.Object meanFile_ = "";
      /**
       * <code>optional string mean_file = 3;</code>
       */
      public boolean hasMeanFile() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional string mean_file = 3;</code>
       */
      public java.lang.String getMeanFile() {
        java.lang.Object ref = meanFile_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          meanFile_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string mean_file = 3;</code>
       */
      public com.google.protobuf.ByteString
          getMeanFileBytes() {
        java.lang.Object ref = meanFile_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          meanFile_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string mean_file = 3;</code>
       */
      public Builder setMeanFile(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
        meanFile_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string mean_file = 3;</code>
       */
      public Builder clearMeanFile() {
        bitField0_ = (bitField0_ & ~0x00000020);
        meanFile_ = getDefaultInstance().getMeanFile();
        onChanged();
        return this;
      }
      /**
       * <code>optional string mean_file = 3;</code>
       */
      public Builder setMeanFileBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
        meanFile_ = value;
        onChanged();
        return this;
      }

      // optional uint32 crop_size = 5 [default = 0];
      private int cropSize_ ;
      /**
       * <code>optional uint32 crop_size = 5 [default = 0];</code>
       *
       * <pre>
       * DEPRECATED. See TransformationParameter. Specify if we would like to randomly
       * crop an image.
       * </pre>
       */
      public boolean hasCropSize() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional uint32 crop_size = 5 [default = 0];</code>
       *
       * <pre>
       * DEPRECATED. See TransformationParameter. Specify if we would like to randomly
       * crop an image.
       * </pre>
       */
      public int getCropSize() {
        return cropSize_;
      }
      /**
       * <code>optional uint32 crop_size = 5 [default = 0];</code>
       *
       * <pre>
       * DEPRECATED. See TransformationParameter. Specify if we would like to randomly
       * crop an image.
       * </pre>
       */
      public Builder setCropSize(int value) {
        bitField0_ |= 0x00000040;
        cropSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 crop_size = 5 [default = 0];</code>
       *
       * <pre>
       * DEPRECATED. See TransformationParameter. Specify if we would like to randomly
       * crop an image.
       * </pre>
       */
      public Builder clearCropSize() {
        bitField0_ = (bitField0_ & ~0x00000040);
        cropSize_ = 0;
        onChanged();
        return this;
      }

      // optional bool mirror = 6 [default = false];
      private boolean mirror_ ;
      /**
       * <code>optional bool mirror = 6 [default = false];</code>
       *
       * <pre>
       * DEPRECATED. See TransformationParameter. Specify if we want to randomly mirror
       * data.
       * </pre>
       */
      public boolean hasMirror() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional bool mirror = 6 [default = false];</code>
       *
       * <pre>
       * DEPRECATED. See TransformationParameter. Specify if we want to randomly mirror
       * data.
       * </pre>
       */
      public boolean getMirror() {
        return mirror_;
      }
      /**
       * <code>optional bool mirror = 6 [default = false];</code>
       *
       * <pre>
       * DEPRECATED. See TransformationParameter. Specify if we want to randomly mirror
       * data.
       * </pre>
       */
      public Builder setMirror(boolean value) {
        bitField0_ |= 0x00000080;
        mirror_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool mirror = 6 [default = false];</code>
       *
       * <pre>
       * DEPRECATED. See TransformationParameter. Specify if we want to randomly mirror
       * data.
       * </pre>
       */
      public Builder clearMirror() {
        bitField0_ = (bitField0_ & ~0x00000080);
        mirror_ = false;
        onChanged();
        return this;
      }

      // optional bool force_encoded_color = 9 [default = false];
      private boolean forceEncodedColor_ ;
      /**
       * <code>optional bool force_encoded_color = 9 [default = false];</code>
       *
       * <pre>
       * Force the encoded image to have 3 color channels
       * </pre>
       */
      public boolean hasForceEncodedColor() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional bool force_encoded_color = 9 [default = false];</code>
       *
       * <pre>
       * Force the encoded image to have 3 color channels
       * </pre>
       */
      public boolean getForceEncodedColor() {
        return forceEncodedColor_;
      }
      /**
       * <code>optional bool force_encoded_color = 9 [default = false];</code>
       *
       * <pre>
       * Force the encoded image to have 3 color channels
       * </pre>
       */
      public Builder setForceEncodedColor(boolean value) {
        bitField0_ |= 0x00000100;
        forceEncodedColor_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool force_encoded_color = 9 [default = false];</code>
       *
       * <pre>
       * Force the encoded image to have 3 color channels
       * </pre>
       */
      public Builder clearForceEncodedColor() {
        bitField0_ = (bitField0_ & ~0x00000100);
        forceEncodedColor_ = false;
        onChanged();
        return this;
      }

      // optional uint32 prefetch = 10 [default = 4];
      private int prefetch_ = 4;
      /**
       * <code>optional uint32 prefetch = 10 [default = 4];</code>
       *
       * <pre>
       * Prefetch queue (Number of batches to prefetch to host memory, increase if
       * data access bandwidth varies).
       * </pre>
       */
      public boolean hasPrefetch() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional uint32 prefetch = 10 [default = 4];</code>
       *
       * <pre>
       * Prefetch queue (Number of batches to prefetch to host memory, increase if
       * data access bandwidth varies).
       * </pre>
       */
      public int getPrefetch() {
        return prefetch_;
      }
      /**
       * <code>optional uint32 prefetch = 10 [default = 4];</code>
       *
       * <pre>
       * Prefetch queue (Number of batches to prefetch to host memory, increase if
       * data access bandwidth varies).
       * </pre>
       */
      public Builder setPrefetch(int value) {
        bitField0_ |= 0x00000200;
        prefetch_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 prefetch = 10 [default = 4];</code>
       *
       * <pre>
       * Prefetch queue (Number of batches to prefetch to host memory, increase if
       * data access bandwidth varies).
       * </pre>
       */
      public Builder clearPrefetch() {
        bitField0_ = (bitField0_ & ~0x00000200);
        prefetch_ = 4;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.DataParameter)
    }

    static {
      defaultInstance = new DataParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.DataParameter)
  }

  public interface DropoutParameterOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional float dropout_ratio = 1 [default = 0.5];
    /**
     * <code>optional float dropout_ratio = 1 [default = 0.5];</code>
     *
     * <pre>
     * dropout ratio
     * </pre>
     */
    boolean hasDropoutRatio();
    /**
     * <code>optional float dropout_ratio = 1 [default = 0.5];</code>
     *
     * <pre>
     * dropout ratio
     * </pre>
     */
    float getDropoutRatio();
  }
  /**
   * Protobuf type {@code caffe.DropoutParameter}
   */
  public static final class DropoutParameter extends
      com.google.protobuf.GeneratedMessage
      implements DropoutParameterOrBuilder {
    // Use DropoutParameter.newBuilder() to construct.
    private DropoutParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private DropoutParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final DropoutParameter defaultInstance;
    public static DropoutParameter getDefaultInstance() {
      return defaultInstance;
    }

    public DropoutParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private DropoutParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 13: {
              bitField0_ |= 0x00000001;
              dropoutRatio_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_DropoutParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_DropoutParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.DropoutParameter.class, caffe.Caffe.DropoutParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<DropoutParameter> PARSER =
        new com.google.protobuf.AbstractParser<DropoutParameter>() {
      public DropoutParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DropoutParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<DropoutParameter> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional float dropout_ratio = 1 [default = 0.5];
    public static final int DROPOUT_RATIO_FIELD_NUMBER = 1;
    private float dropoutRatio_;
    /**
     * <code>optional float dropout_ratio = 1 [default = 0.5];</code>
     *
     * <pre>
     * dropout ratio
     * </pre>
     */
    public boolean hasDropoutRatio() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional float dropout_ratio = 1 [default = 0.5];</code>
     *
     * <pre>
     * dropout ratio
     * </pre>
     */
    public float getDropoutRatio() {
      return dropoutRatio_;
    }

    private void initFields() {
      dropoutRatio_ = 0.5F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeFloat(1, dropoutRatio_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(1, dropoutRatio_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.DropoutParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.DropoutParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.DropoutParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.DropoutParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.DropoutParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.DropoutParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.DropoutParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.DropoutParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.DropoutParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.DropoutParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.DropoutParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.DropoutParameter}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements caffe.Caffe.DropoutParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_DropoutParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_DropoutParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.DropoutParameter.class, caffe.Caffe.DropoutParameter.Builder.class);
      }

      // Construct using caffe.Caffe.DropoutParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        dropoutRatio_ = 0.5F;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_DropoutParameter_descriptor;
      }

      public caffe.Caffe.DropoutParameter getDefaultInstanceForType() {
        return caffe.Caffe.DropoutParameter.getDefaultInstance();
      }

      public caffe.Caffe.DropoutParameter build() {
        caffe.Caffe.DropoutParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.DropoutParameter buildPartial() {
        caffe.Caffe.DropoutParameter result = new caffe.Caffe.DropoutParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.dropoutRatio_ = dropoutRatio_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.DropoutParameter) {
          return mergeFrom((caffe.Caffe.DropoutParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.DropoutParameter other) {
        if (other == caffe.Caffe.DropoutParameter.getDefaultInstance()) return this;
        if (other.hasDropoutRatio()) {
          setDropoutRatio(other.getDropoutRatio());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.DropoutParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.DropoutParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional float dropout_ratio = 1 [default = 0.5];
      private float dropoutRatio_ = 0.5F;
      /**
       * <code>optional float dropout_ratio = 1 [default = 0.5];</code>
       *
       * <pre>
       * dropout ratio
       * </pre>
       */
      public boolean hasDropoutRatio() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional float dropout_ratio = 1 [default = 0.5];</code>
       *
       * <pre>
       * dropout ratio
       * </pre>
       */
      public float getDropoutRatio() {
        return dropoutRatio_;
      }
      /**
       * <code>optional float dropout_ratio = 1 [default = 0.5];</code>
       *
       * <pre>
       * dropout ratio
       * </pre>
       */
      public Builder setDropoutRatio(float value) {
        bitField0_ |= 0x00000001;
        dropoutRatio_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float dropout_ratio = 1 [default = 0.5];</code>
       *
       * <pre>
       * dropout ratio
       * </pre>
       */
      public Builder clearDropoutRatio() {
        bitField0_ = (bitField0_ & ~0x00000001);
        dropoutRatio_ = 0.5F;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.DropoutParameter)
    }

    static {
      defaultInstance = new DropoutParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.DropoutParameter)
  }

  public interface DummyDataParameterOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated .caffe.FillerParameter data_filler = 1;
    /**
     * <code>repeated .caffe.FillerParameter data_filler = 1;</code>
     *
     * <pre>
     * This layer produces N &gt;= 1 top blobs.  DummyDataParameter must specify 1 or N
     * shape fields, and 0, 1 or N data_fillers.
     *
     * If 0 data_fillers are specified, ConstantFiller with a value of 0 is used.
     * If 1 data_filler is specified, it is applied to all top blobs.  If N are
     * specified, the ith is applied to the ith top blob.
     * </pre>
     */
    java.util.List<caffe.Caffe.FillerParameter> 
        getDataFillerList();
    /**
     * <code>repeated .caffe.FillerParameter data_filler = 1;</code>
     *
     * <pre>
     * This layer produces N &gt;= 1 top blobs.  DummyDataParameter must specify 1 or N
     * shape fields, and 0, 1 or N data_fillers.
     *
     * If 0 data_fillers are specified, ConstantFiller with a value of 0 is used.
     * If 1 data_filler is specified, it is applied to all top blobs.  If N are
     * specified, the ith is applied to the ith top blob.
     * </pre>
     */
    caffe.Caffe.FillerParameter getDataFiller(int index);
    /**
     * <code>repeated .caffe.FillerParameter data_filler = 1;</code>
     *
     * <pre>
     * This layer produces N &gt;= 1 top blobs.  DummyDataParameter must specify 1 or N
     * shape fields, and 0, 1 or N data_fillers.
     *
     * If 0 data_fillers are specified, ConstantFiller with a value of 0 is used.
     * If 1 data_filler is specified, it is applied to all top blobs.  If N are
     * specified, the ith is applied to the ith top blob.
     * </pre>
     */
    int getDataFillerCount();
    /**
     * <code>repeated .caffe.FillerParameter data_filler = 1;</code>
     *
     * <pre>
     * This layer produces N &gt;= 1 top blobs.  DummyDataParameter must specify 1 or N
     * shape fields, and 0, 1 or N data_fillers.
     *
     * If 0 data_fillers are specified, ConstantFiller with a value of 0 is used.
     * If 1 data_filler is specified, it is applied to all top blobs.  If N are
     * specified, the ith is applied to the ith top blob.
     * </pre>
     */
    java.util.List<? extends caffe.Caffe.FillerParameterOrBuilder> 
        getDataFillerOrBuilderList();
    /**
     * <code>repeated .caffe.FillerParameter data_filler = 1;</code>
     *
     * <pre>
     * This layer produces N &gt;= 1 top blobs.  DummyDataParameter must specify 1 or N
     * shape fields, and 0, 1 or N data_fillers.
     *
     * If 0 data_fillers are specified, ConstantFiller with a value of 0 is used.
     * If 1 data_filler is specified, it is applied to all top blobs.  If N are
     * specified, the ith is applied to the ith top blob.
     * </pre>
     */
    caffe.Caffe.FillerParameterOrBuilder getDataFillerOrBuilder(
        int index);

    // repeated .caffe.BlobShape shape = 6;
    /**
     * <code>repeated .caffe.BlobShape shape = 6;</code>
     */
    java.util.List<caffe.Caffe.BlobShape> 
        getShapeList();
    /**
     * <code>repeated .caffe.BlobShape shape = 6;</code>
     */
    caffe.Caffe.BlobShape getShape(int index);
    /**
     * <code>repeated .caffe.BlobShape shape = 6;</code>
     */
    int getShapeCount();
    /**
     * <code>repeated .caffe.BlobShape shape = 6;</code>
     */
    java.util.List<? extends caffe.Caffe.BlobShapeOrBuilder> 
        getShapeOrBuilderList();
    /**
     * <code>repeated .caffe.BlobShape shape = 6;</code>
     */
    caffe.Caffe.BlobShapeOrBuilder getShapeOrBuilder(
        int index);

    // repeated uint32 num = 2;
    /**
     * <code>repeated uint32 num = 2;</code>
     *
     * <pre>
     * 4D dimensions -- deprecated.  Use "shape" instead.
     * </pre>
     */
    java.util.List<java.lang.Integer> getNumList();
    /**
     * <code>repeated uint32 num = 2;</code>
     *
     * <pre>
     * 4D dimensions -- deprecated.  Use "shape" instead.
     * </pre>
     */
    int getNumCount();
    /**
     * <code>repeated uint32 num = 2;</code>
     *
     * <pre>
     * 4D dimensions -- deprecated.  Use "shape" instead.
     * </pre>
     */
    int getNum(int index);

    // repeated uint32 channels = 3;
    /**
     * <code>repeated uint32 channels = 3;</code>
     */
    java.util.List<java.lang.Integer> getChannelsList();
    /**
     * <code>repeated uint32 channels = 3;</code>
     */
    int getChannelsCount();
    /**
     * <code>repeated uint32 channels = 3;</code>
     */
    int getChannels(int index);

    // repeated uint32 height = 4;
    /**
     * <code>repeated uint32 height = 4;</code>
     */
    java.util.List<java.lang.Integer> getHeightList();
    /**
     * <code>repeated uint32 height = 4;</code>
     */
    int getHeightCount();
    /**
     * <code>repeated uint32 height = 4;</code>
     */
    int getHeight(int index);

    // repeated uint32 width = 5;
    /**
     * <code>repeated uint32 width = 5;</code>
     */
    java.util.List<java.lang.Integer> getWidthList();
    /**
     * <code>repeated uint32 width = 5;</code>
     */
    int getWidthCount();
    /**
     * <code>repeated uint32 width = 5;</code>
     */
    int getWidth(int index);
  }
  /**
   * Protobuf type {@code caffe.DummyDataParameter}
   *
   * <pre>
   * DummyDataLayer fills any number of arbitrarily shaped blobs with random
   * (or constant) data generated by "Fillers" (see "message FillerParameter").
   * </pre>
   */
  public static final class DummyDataParameter extends
      com.google.protobuf.GeneratedMessage
      implements DummyDataParameterOrBuilder {
    // Use DummyDataParameter.newBuilder() to construct.
    private DummyDataParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private DummyDataParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final DummyDataParameter defaultInstance;
    public static DummyDataParameter getDefaultInstance() {
      return defaultInstance;
    }

    public DummyDataParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private DummyDataParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                dataFiller_ = new java.util.ArrayList<caffe.Caffe.FillerParameter>();
                mutable_bitField0_ |= 0x00000001;
              }
              dataFiller_.add(input.readMessage(caffe.Caffe.FillerParameter.PARSER, extensionRegistry));
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                num_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              num_.add(input.readUInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                num_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                num_.add(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                channels_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              channels_.add(input.readUInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                channels_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                channels_.add(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                height_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000010;
              }
              height_.add(input.readUInt32());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010) && input.getBytesUntilLimit() > 0) {
                height_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000010;
              }
              while (input.getBytesUntilLimit() > 0) {
                height_.add(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 40: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                width_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              width_.add(input.readUInt32());
              break;
            }
            case 42: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                width_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                width_.add(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 50: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                shape_ = new java.util.ArrayList<caffe.Caffe.BlobShape>();
                mutable_bitField0_ |= 0x00000002;
              }
              shape_.add(input.readMessage(caffe.Caffe.BlobShape.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          dataFiller_ = java.util.Collections.unmodifiableList(dataFiller_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          num_ = java.util.Collections.unmodifiableList(num_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          channels_ = java.util.Collections.unmodifiableList(channels_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          height_ = java.util.Collections.unmodifiableList(height_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          width_ = java.util.Collections.unmodifiableList(width_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          shape_ = java.util.Collections.unmodifiableList(shape_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_DummyDataParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_DummyDataParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.DummyDataParameter.class, caffe.Caffe.DummyDataParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<DummyDataParameter> PARSER =
        new com.google.protobuf.AbstractParser<DummyDataParameter>() {
      public DummyDataParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DummyDataParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<DummyDataParameter> getParserForType() {
      return PARSER;
    }

    // repeated .caffe.FillerParameter data_filler = 1;
    public static final int DATA_FILLER_FIELD_NUMBER = 1;
    private java.util.List<caffe.Caffe.FillerParameter> dataFiller_;
    /**
     * <code>repeated .caffe.FillerParameter data_filler = 1;</code>
     *
     * <pre>
     * This layer produces N &gt;= 1 top blobs.  DummyDataParameter must specify 1 or N
     * shape fields, and 0, 1 or N data_fillers.
     *
     * If 0 data_fillers are specified, ConstantFiller with a value of 0 is used.
     * If 1 data_filler is specified, it is applied to all top blobs.  If N are
     * specified, the ith is applied to the ith top blob.
     * </pre>
     */
    public java.util.List<caffe.Caffe.FillerParameter> getDataFillerList() {
      return dataFiller_;
    }
    /**
     * <code>repeated .caffe.FillerParameter data_filler = 1;</code>
     *
     * <pre>
     * This layer produces N &gt;= 1 top blobs.  DummyDataParameter must specify 1 or N
     * shape fields, and 0, 1 or N data_fillers.
     *
     * If 0 data_fillers are specified, ConstantFiller with a value of 0 is used.
     * If 1 data_filler is specified, it is applied to all top blobs.  If N are
     * specified, the ith is applied to the ith top blob.
     * </pre>
     */
    public java.util.List<? extends caffe.Caffe.FillerParameterOrBuilder> 
        getDataFillerOrBuilderList() {
      return dataFiller_;
    }
    /**
     * <code>repeated .caffe.FillerParameter data_filler = 1;</code>
     *
     * <pre>
     * This layer produces N &gt;= 1 top blobs.  DummyDataParameter must specify 1 or N
     * shape fields, and 0, 1 or N data_fillers.
     *
     * If 0 data_fillers are specified, ConstantFiller with a value of 0 is used.
     * If 1 data_filler is specified, it is applied to all top blobs.  If N are
     * specified, the ith is applied to the ith top blob.
     * </pre>
     */
    public int getDataFillerCount() {
      return dataFiller_.size();
    }
    /**
     * <code>repeated .caffe.FillerParameter data_filler = 1;</code>
     *
     * <pre>
     * This layer produces N &gt;= 1 top blobs.  DummyDataParameter must specify 1 or N
     * shape fields, and 0, 1 or N data_fillers.
     *
     * If 0 data_fillers are specified, ConstantFiller with a value of 0 is used.
     * If 1 data_filler is specified, it is applied to all top blobs.  If N are
     * specified, the ith is applied to the ith top blob.
     * </pre>
     */
    public caffe.Caffe.FillerParameter getDataFiller(int index) {
      return dataFiller_.get(index);
    }
    /**
     * <code>repeated .caffe.FillerParameter data_filler = 1;</code>
     *
     * <pre>
     * This layer produces N &gt;= 1 top blobs.  DummyDataParameter must specify 1 or N
     * shape fields, and 0, 1 or N data_fillers.
     *
     * If 0 data_fillers are specified, ConstantFiller with a value of 0 is used.
     * If 1 data_filler is specified, it is applied to all top blobs.  If N are
     * specified, the ith is applied to the ith top blob.
     * </pre>
     */
    public caffe.Caffe.FillerParameterOrBuilder getDataFillerOrBuilder(
        int index) {
      return dataFiller_.get(index);
    }

    // repeated .caffe.BlobShape shape = 6;
    public static final int SHAPE_FIELD_NUMBER = 6;
    private java.util.List<caffe.Caffe.BlobShape> shape_;
    /**
     * <code>repeated .caffe.BlobShape shape = 6;</code>
     */
    public java.util.List<caffe.Caffe.BlobShape> getShapeList() {
      return shape_;
    }
    /**
     * <code>repeated .caffe.BlobShape shape = 6;</code>
     */
    public java.util.List<? extends caffe.Caffe.BlobShapeOrBuilder> 
        getShapeOrBuilderList() {
      return shape_;
    }
    /**
     * <code>repeated .caffe.BlobShape shape = 6;</code>
     */
    public int getShapeCount() {
      return shape_.size();
    }
    /**
     * <code>repeated .caffe.BlobShape shape = 6;</code>
     */
    public caffe.Caffe.BlobShape getShape(int index) {
      return shape_.get(index);
    }
    /**
     * <code>repeated .caffe.BlobShape shape = 6;</code>
     */
    public caffe.Caffe.BlobShapeOrBuilder getShapeOrBuilder(
        int index) {
      return shape_.get(index);
    }

    // repeated uint32 num = 2;
    public static final int NUM_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> num_;
    /**
     * <code>repeated uint32 num = 2;</code>
     *
     * <pre>
     * 4D dimensions -- deprecated.  Use "shape" instead.
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getNumList() {
      return num_;
    }
    /**
     * <code>repeated uint32 num = 2;</code>
     *
     * <pre>
     * 4D dimensions -- deprecated.  Use "shape" instead.
     * </pre>
     */
    public int getNumCount() {
      return num_.size();
    }
    /**
     * <code>repeated uint32 num = 2;</code>
     *
     * <pre>
     * 4D dimensions -- deprecated.  Use "shape" instead.
     * </pre>
     */
    public int getNum(int index) {
      return num_.get(index);
    }

    // repeated uint32 channels = 3;
    public static final int CHANNELS_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> channels_;
    /**
     * <code>repeated uint32 channels = 3;</code>
     */
    public java.util.List<java.lang.Integer>
        getChannelsList() {
      return channels_;
    }
    /**
     * <code>repeated uint32 channels = 3;</code>
     */
    public int getChannelsCount() {
      return channels_.size();
    }
    /**
     * <code>repeated uint32 channels = 3;</code>
     */
    public int getChannels(int index) {
      return channels_.get(index);
    }

    // repeated uint32 height = 4;
    public static final int HEIGHT_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Integer> height_;
    /**
     * <code>repeated uint32 height = 4;</code>
     */
    public java.util.List<java.lang.Integer>
        getHeightList() {
      return height_;
    }
    /**
     * <code>repeated uint32 height = 4;</code>
     */
    public int getHeightCount() {
      return height_.size();
    }
    /**
     * <code>repeated uint32 height = 4;</code>
     */
    public int getHeight(int index) {
      return height_.get(index);
    }

    // repeated uint32 width = 5;
    public static final int WIDTH_FIELD_NUMBER = 5;
    private java.util.List<java.lang.Integer> width_;
    /**
     * <code>repeated uint32 width = 5;</code>
     */
    public java.util.List<java.lang.Integer>
        getWidthList() {
      return width_;
    }
    /**
     * <code>repeated uint32 width = 5;</code>
     */
    public int getWidthCount() {
      return width_.size();
    }
    /**
     * <code>repeated uint32 width = 5;</code>
     */
    public int getWidth(int index) {
      return width_.get(index);
    }

    private void initFields() {
      dataFiller_ = java.util.Collections.emptyList();
      shape_ = java.util.Collections.emptyList();
      num_ = java.util.Collections.emptyList();
      channels_ = java.util.Collections.emptyList();
      height_ = java.util.Collections.emptyList();
      width_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < dataFiller_.size(); i++) {
        output.writeMessage(1, dataFiller_.get(i));
      }
      for (int i = 0; i < num_.size(); i++) {
        output.writeUInt32(2, num_.get(i));
      }
      for (int i = 0; i < channels_.size(); i++) {
        output.writeUInt32(3, channels_.get(i));
      }
      for (int i = 0; i < height_.size(); i++) {
        output.writeUInt32(4, height_.get(i));
      }
      for (int i = 0; i < width_.size(); i++) {
        output.writeUInt32(5, width_.get(i));
      }
      for (int i = 0; i < shape_.size(); i++) {
        output.writeMessage(6, shape_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < dataFiller_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, dataFiller_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < num_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(num_.get(i));
        }
        size += dataSize;
        size += 1 * getNumList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < channels_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(channels_.get(i));
        }
        size += dataSize;
        size += 1 * getChannelsList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < height_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(height_.get(i));
        }
        size += dataSize;
        size += 1 * getHeightList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < width_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(width_.get(i));
        }
        size += dataSize;
        size += 1 * getWidthList().size();
      }
      for (int i = 0; i < shape_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, shape_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.DummyDataParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.DummyDataParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.DummyDataParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.DummyDataParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.DummyDataParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.DummyDataParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.DummyDataParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.DummyDataParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.DummyDataParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.DummyDataParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.DummyDataParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.DummyDataParameter}
     *
     * <pre>
     * DummyDataLayer fills any number of arbitrarily shaped blobs with random
     * (or constant) data generated by "Fillers" (see "message FillerParameter").
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements caffe.Caffe.DummyDataParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_DummyDataParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_DummyDataParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.DummyDataParameter.class, caffe.Caffe.DummyDataParameter.Builder.class);
      }

      // Construct using caffe.Caffe.DummyDataParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getDataFillerFieldBuilder();
          getShapeFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (dataFillerBuilder_ == null) {
          dataFiller_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          dataFillerBuilder_.clear();
        }
        if (shapeBuilder_ == null) {
          shape_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          shapeBuilder_.clear();
        }
        num_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        channels_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        height_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        width_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_DummyDataParameter_descriptor;
      }

      public caffe.Caffe.DummyDataParameter getDefaultInstanceForType() {
        return caffe.Caffe.DummyDataParameter.getDefaultInstance();
      }

      public caffe.Caffe.DummyDataParameter build() {
        caffe.Caffe.DummyDataParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.DummyDataParameter buildPartial() {
        caffe.Caffe.DummyDataParameter result = new caffe.Caffe.DummyDataParameter(this);
        int from_bitField0_ = bitField0_;
        if (dataFillerBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            dataFiller_ = java.util.Collections.unmodifiableList(dataFiller_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.dataFiller_ = dataFiller_;
        } else {
          result.dataFiller_ = dataFillerBuilder_.build();
        }
        if (shapeBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            shape_ = java.util.Collections.unmodifiableList(shape_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.shape_ = shape_;
        } else {
          result.shape_ = shapeBuilder_.build();
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          num_ = java.util.Collections.unmodifiableList(num_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.num_ = num_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          channels_ = java.util.Collections.unmodifiableList(channels_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.channels_ = channels_;
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          height_ = java.util.Collections.unmodifiableList(height_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.height_ = height_;
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          width_ = java.util.Collections.unmodifiableList(width_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.width_ = width_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.DummyDataParameter) {
          return mergeFrom((caffe.Caffe.DummyDataParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.DummyDataParameter other) {
        if (other == caffe.Caffe.DummyDataParameter.getDefaultInstance()) return this;
        if (dataFillerBuilder_ == null) {
          if (!other.dataFiller_.isEmpty()) {
            if (dataFiller_.isEmpty()) {
              dataFiller_ = other.dataFiller_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureDataFillerIsMutable();
              dataFiller_.addAll(other.dataFiller_);
            }
            onChanged();
          }
        } else {
          if (!other.dataFiller_.isEmpty()) {
            if (dataFillerBuilder_.isEmpty()) {
              dataFillerBuilder_.dispose();
              dataFillerBuilder_ = null;
              dataFiller_ = other.dataFiller_;
              bitField0_ = (bitField0_ & ~0x00000001);
              dataFillerBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getDataFillerFieldBuilder() : null;
            } else {
              dataFillerBuilder_.addAllMessages(other.dataFiller_);
            }
          }
        }
        if (shapeBuilder_ == null) {
          if (!other.shape_.isEmpty()) {
            if (shape_.isEmpty()) {
              shape_ = other.shape_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureShapeIsMutable();
              shape_.addAll(other.shape_);
            }
            onChanged();
          }
        } else {
          if (!other.shape_.isEmpty()) {
            if (shapeBuilder_.isEmpty()) {
              shapeBuilder_.dispose();
              shapeBuilder_ = null;
              shape_ = other.shape_;
              bitField0_ = (bitField0_ & ~0x00000002);
              shapeBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getShapeFieldBuilder() : null;
            } else {
              shapeBuilder_.addAllMessages(other.shape_);
            }
          }
        }
        if (!other.num_.isEmpty()) {
          if (num_.isEmpty()) {
            num_ = other.num_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureNumIsMutable();
            num_.addAll(other.num_);
          }
          onChanged();
        }
        if (!other.channels_.isEmpty()) {
          if (channels_.isEmpty()) {
            channels_ = other.channels_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureChannelsIsMutable();
            channels_.addAll(other.channels_);
          }
          onChanged();
        }
        if (!other.height_.isEmpty()) {
          if (height_.isEmpty()) {
            height_ = other.height_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureHeightIsMutable();
            height_.addAll(other.height_);
          }
          onChanged();
        }
        if (!other.width_.isEmpty()) {
          if (width_.isEmpty()) {
            width_ = other.width_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureWidthIsMutable();
            width_.addAll(other.width_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.DummyDataParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.DummyDataParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated .caffe.FillerParameter data_filler = 1;
      private java.util.List<caffe.Caffe.FillerParameter> dataFiller_ =
        java.util.Collections.emptyList();
      private void ensureDataFillerIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          dataFiller_ = new java.util.ArrayList<caffe.Caffe.FillerParameter>(dataFiller_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          caffe.Caffe.FillerParameter, caffe.Caffe.FillerParameter.Builder, caffe.Caffe.FillerParameterOrBuilder> dataFillerBuilder_;

      /**
       * <code>repeated .caffe.FillerParameter data_filler = 1;</code>
       *
       * <pre>
       * This layer produces N &gt;= 1 top blobs.  DummyDataParameter must specify 1 or N
       * shape fields, and 0, 1 or N data_fillers.
       *
       * If 0 data_fillers are specified, ConstantFiller with a value of 0 is used.
       * If 1 data_filler is specified, it is applied to all top blobs.  If N are
       * specified, the ith is applied to the ith top blob.
       * </pre>
       */
      public java.util.List<caffe.Caffe.FillerParameter> getDataFillerList() {
        if (dataFillerBuilder_ == null) {
          return java.util.Collections.unmodifiableList(dataFiller_);
        } else {
          return dataFillerBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .caffe.FillerParameter data_filler = 1;</code>
       *
       * <pre>
       * This layer produces N &gt;= 1 top blobs.  DummyDataParameter must specify 1 or N
       * shape fields, and 0, 1 or N data_fillers.
       *
       * If 0 data_fillers are specified, ConstantFiller with a value of 0 is used.
       * If 1 data_filler is specified, it is applied to all top blobs.  If N are
       * specified, the ith is applied to the ith top blob.
       * </pre>
       */
      public int getDataFillerCount() {
        if (dataFillerBuilder_ == null) {
          return dataFiller_.size();
        } else {
          return dataFillerBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .caffe.FillerParameter data_filler = 1;</code>
       *
       * <pre>
       * This layer produces N &gt;= 1 top blobs.  DummyDataParameter must specify 1 or N
       * shape fields, and 0, 1 or N data_fillers.
       *
       * If 0 data_fillers are specified, ConstantFiller with a value of 0 is used.
       * If 1 data_filler is specified, it is applied to all top blobs.  If N are
       * specified, the ith is applied to the ith top blob.
       * </pre>
       */
      public caffe.Caffe.FillerParameter getDataFiller(int index) {
        if (dataFillerBuilder_ == null) {
          return dataFiller_.get(index);
        } else {
          return dataFillerBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .caffe.FillerParameter data_filler = 1;</code>
       *
       * <pre>
       * This layer produces N &gt;= 1 top blobs.  DummyDataParameter must specify 1 or N
       * shape fields, and 0, 1 or N data_fillers.
       *
       * If 0 data_fillers are specified, ConstantFiller with a value of 0 is used.
       * If 1 data_filler is specified, it is applied to all top blobs.  If N are
       * specified, the ith is applied to the ith top blob.
       * </pre>
       */
      public Builder setDataFiller(
          int index, caffe.Caffe.FillerParameter value) {
        if (dataFillerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataFillerIsMutable();
          dataFiller_.set(index, value);
          onChanged();
        } else {
          dataFillerBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.FillerParameter data_filler = 1;</code>
       *
       * <pre>
       * This layer produces N &gt;= 1 top blobs.  DummyDataParameter must specify 1 or N
       * shape fields, and 0, 1 or N data_fillers.
       *
       * If 0 data_fillers are specified, ConstantFiller with a value of 0 is used.
       * If 1 data_filler is specified, it is applied to all top blobs.  If N are
       * specified, the ith is applied to the ith top blob.
       * </pre>
       */
      public Builder setDataFiller(
          int index, caffe.Caffe.FillerParameter.Builder builderForValue) {
        if (dataFillerBuilder_ == null) {
          ensureDataFillerIsMutable();
          dataFiller_.set(index, builderForValue.build());
          onChanged();
        } else {
          dataFillerBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.FillerParameter data_filler = 1;</code>
       *
       * <pre>
       * This layer produces N &gt;= 1 top blobs.  DummyDataParameter must specify 1 or N
       * shape fields, and 0, 1 or N data_fillers.
       *
       * If 0 data_fillers are specified, ConstantFiller with a value of 0 is used.
       * If 1 data_filler is specified, it is applied to all top blobs.  If N are
       * specified, the ith is applied to the ith top blob.
       * </pre>
       */
      public Builder addDataFiller(caffe.Caffe.FillerParameter value) {
        if (dataFillerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataFillerIsMutable();
          dataFiller_.add(value);
          onChanged();
        } else {
          dataFillerBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.FillerParameter data_filler = 1;</code>
       *
       * <pre>
       * This layer produces N &gt;= 1 top blobs.  DummyDataParameter must specify 1 or N
       * shape fields, and 0, 1 or N data_fillers.
       *
       * If 0 data_fillers are specified, ConstantFiller with a value of 0 is used.
       * If 1 data_filler is specified, it is applied to all top blobs.  If N are
       * specified, the ith is applied to the ith top blob.
       * </pre>
       */
      public Builder addDataFiller(
          int index, caffe.Caffe.FillerParameter value) {
        if (dataFillerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataFillerIsMutable();
          dataFiller_.add(index, value);
          onChanged();
        } else {
          dataFillerBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.FillerParameter data_filler = 1;</code>
       *
       * <pre>
       * This layer produces N &gt;= 1 top blobs.  DummyDataParameter must specify 1 or N
       * shape fields, and 0, 1 or N data_fillers.
       *
       * If 0 data_fillers are specified, ConstantFiller with a value of 0 is used.
       * If 1 data_filler is specified, it is applied to all top blobs.  If N are
       * specified, the ith is applied to the ith top blob.
       * </pre>
       */
      public Builder addDataFiller(
          caffe.Caffe.FillerParameter.Builder builderForValue) {
        if (dataFillerBuilder_ == null) {
          ensureDataFillerIsMutable();
          dataFiller_.add(builderForValue.build());
          onChanged();
        } else {
          dataFillerBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.FillerParameter data_filler = 1;</code>
       *
       * <pre>
       * This layer produces N &gt;= 1 top blobs.  DummyDataParameter must specify 1 or N
       * shape fields, and 0, 1 or N data_fillers.
       *
       * If 0 data_fillers are specified, ConstantFiller with a value of 0 is used.
       * If 1 data_filler is specified, it is applied to all top blobs.  If N are
       * specified, the ith is applied to the ith top blob.
       * </pre>
       */
      public Builder addDataFiller(
          int index, caffe.Caffe.FillerParameter.Builder builderForValue) {
        if (dataFillerBuilder_ == null) {
          ensureDataFillerIsMutable();
          dataFiller_.add(index, builderForValue.build());
          onChanged();
        } else {
          dataFillerBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.FillerParameter data_filler = 1;</code>
       *
       * <pre>
       * This layer produces N &gt;= 1 top blobs.  DummyDataParameter must specify 1 or N
       * shape fields, and 0, 1 or N data_fillers.
       *
       * If 0 data_fillers are specified, ConstantFiller with a value of 0 is used.
       * If 1 data_filler is specified, it is applied to all top blobs.  If N are
       * specified, the ith is applied to the ith top blob.
       * </pre>
       */
      public Builder addAllDataFiller(
          java.lang.Iterable<? extends caffe.Caffe.FillerParameter> values) {
        if (dataFillerBuilder_ == null) {
          ensureDataFillerIsMutable();
          super.addAll(values, dataFiller_);
          onChanged();
        } else {
          dataFillerBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.FillerParameter data_filler = 1;</code>
       *
       * <pre>
       * This layer produces N &gt;= 1 top blobs.  DummyDataParameter must specify 1 or N
       * shape fields, and 0, 1 or N data_fillers.
       *
       * If 0 data_fillers are specified, ConstantFiller with a value of 0 is used.
       * If 1 data_filler is specified, it is applied to all top blobs.  If N are
       * specified, the ith is applied to the ith top blob.
       * </pre>
       */
      public Builder clearDataFiller() {
        if (dataFillerBuilder_ == null) {
          dataFiller_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          dataFillerBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .caffe.FillerParameter data_filler = 1;</code>
       *
       * <pre>
       * This layer produces N &gt;= 1 top blobs.  DummyDataParameter must specify 1 or N
       * shape fields, and 0, 1 or N data_fillers.
       *
       * If 0 data_fillers are specified, ConstantFiller with a value of 0 is used.
       * If 1 data_filler is specified, it is applied to all top blobs.  If N are
       * specified, the ith is applied to the ith top blob.
       * </pre>
       */
      public Builder removeDataFiller(int index) {
        if (dataFillerBuilder_ == null) {
          ensureDataFillerIsMutable();
          dataFiller_.remove(index);
          onChanged();
        } else {
          dataFillerBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.FillerParameter data_filler = 1;</code>
       *
       * <pre>
       * This layer produces N &gt;= 1 top blobs.  DummyDataParameter must specify 1 or N
       * shape fields, and 0, 1 or N data_fillers.
       *
       * If 0 data_fillers are specified, ConstantFiller with a value of 0 is used.
       * If 1 data_filler is specified, it is applied to all top blobs.  If N are
       * specified, the ith is applied to the ith top blob.
       * </pre>
       */
      public caffe.Caffe.FillerParameter.Builder getDataFillerBuilder(
          int index) {
        return getDataFillerFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .caffe.FillerParameter data_filler = 1;</code>
       *
       * <pre>
       * This layer produces N &gt;= 1 top blobs.  DummyDataParameter must specify 1 or N
       * shape fields, and 0, 1 or N data_fillers.
       *
       * If 0 data_fillers are specified, ConstantFiller with a value of 0 is used.
       * If 1 data_filler is specified, it is applied to all top blobs.  If N are
       * specified, the ith is applied to the ith top blob.
       * </pre>
       */
      public caffe.Caffe.FillerParameterOrBuilder getDataFillerOrBuilder(
          int index) {
        if (dataFillerBuilder_ == null) {
          return dataFiller_.get(index);  } else {
          return dataFillerBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .caffe.FillerParameter data_filler = 1;</code>
       *
       * <pre>
       * This layer produces N &gt;= 1 top blobs.  DummyDataParameter must specify 1 or N
       * shape fields, and 0, 1 or N data_fillers.
       *
       * If 0 data_fillers are specified, ConstantFiller with a value of 0 is used.
       * If 1 data_filler is specified, it is applied to all top blobs.  If N are
       * specified, the ith is applied to the ith top blob.
       * </pre>
       */
      public java.util.List<? extends caffe.Caffe.FillerParameterOrBuilder> 
           getDataFillerOrBuilderList() {
        if (dataFillerBuilder_ != null) {
          return dataFillerBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(dataFiller_);
        }
      }
      /**
       * <code>repeated .caffe.FillerParameter data_filler = 1;</code>
       *
       * <pre>
       * This layer produces N &gt;= 1 top blobs.  DummyDataParameter must specify 1 or N
       * shape fields, and 0, 1 or N data_fillers.
       *
       * If 0 data_fillers are specified, ConstantFiller with a value of 0 is used.
       * If 1 data_filler is specified, it is applied to all top blobs.  If N are
       * specified, the ith is applied to the ith top blob.
       * </pre>
       */
      public caffe.Caffe.FillerParameter.Builder addDataFillerBuilder() {
        return getDataFillerFieldBuilder().addBuilder(
            caffe.Caffe.FillerParameter.getDefaultInstance());
      }
      /**
       * <code>repeated .caffe.FillerParameter data_filler = 1;</code>
       *
       * <pre>
       * This layer produces N &gt;= 1 top blobs.  DummyDataParameter must specify 1 or N
       * shape fields, and 0, 1 or N data_fillers.
       *
       * If 0 data_fillers are specified, ConstantFiller with a value of 0 is used.
       * If 1 data_filler is specified, it is applied to all top blobs.  If N are
       * specified, the ith is applied to the ith top blob.
       * </pre>
       */
      public caffe.Caffe.FillerParameter.Builder addDataFillerBuilder(
          int index) {
        return getDataFillerFieldBuilder().addBuilder(
            index, caffe.Caffe.FillerParameter.getDefaultInstance());
      }
      /**
       * <code>repeated .caffe.FillerParameter data_filler = 1;</code>
       *
       * <pre>
       * This layer produces N &gt;= 1 top blobs.  DummyDataParameter must specify 1 or N
       * shape fields, and 0, 1 or N data_fillers.
       *
       * If 0 data_fillers are specified, ConstantFiller with a value of 0 is used.
       * If 1 data_filler is specified, it is applied to all top blobs.  If N are
       * specified, the ith is applied to the ith top blob.
       * </pre>
       */
      public java.util.List<caffe.Caffe.FillerParameter.Builder> 
           getDataFillerBuilderList() {
        return getDataFillerFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          caffe.Caffe.FillerParameter, caffe.Caffe.FillerParameter.Builder, caffe.Caffe.FillerParameterOrBuilder> 
          getDataFillerFieldBuilder() {
        if (dataFillerBuilder_ == null) {
          dataFillerBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              caffe.Caffe.FillerParameter, caffe.Caffe.FillerParameter.Builder, caffe.Caffe.FillerParameterOrBuilder>(
                  dataFiller_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          dataFiller_ = null;
        }
        return dataFillerBuilder_;
      }

      // repeated .caffe.BlobShape shape = 6;
      private java.util.List<caffe.Caffe.BlobShape> shape_ =
        java.util.Collections.emptyList();
      private void ensureShapeIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          shape_ = new java.util.ArrayList<caffe.Caffe.BlobShape>(shape_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          caffe.Caffe.BlobShape, caffe.Caffe.BlobShape.Builder, caffe.Caffe.BlobShapeOrBuilder> shapeBuilder_;

      /**
       * <code>repeated .caffe.BlobShape shape = 6;</code>
       */
      public java.util.List<caffe.Caffe.BlobShape> getShapeList() {
        if (shapeBuilder_ == null) {
          return java.util.Collections.unmodifiableList(shape_);
        } else {
          return shapeBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .caffe.BlobShape shape = 6;</code>
       */
      public int getShapeCount() {
        if (shapeBuilder_ == null) {
          return shape_.size();
        } else {
          return shapeBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .caffe.BlobShape shape = 6;</code>
       */
      public caffe.Caffe.BlobShape getShape(int index) {
        if (shapeBuilder_ == null) {
          return shape_.get(index);
        } else {
          return shapeBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .caffe.BlobShape shape = 6;</code>
       */
      public Builder setShape(
          int index, caffe.Caffe.BlobShape value) {
        if (shapeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureShapeIsMutable();
          shape_.set(index, value);
          onChanged();
        } else {
          shapeBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobShape shape = 6;</code>
       */
      public Builder setShape(
          int index, caffe.Caffe.BlobShape.Builder builderForValue) {
        if (shapeBuilder_ == null) {
          ensureShapeIsMutable();
          shape_.set(index, builderForValue.build());
          onChanged();
        } else {
          shapeBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobShape shape = 6;</code>
       */
      public Builder addShape(caffe.Caffe.BlobShape value) {
        if (shapeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureShapeIsMutable();
          shape_.add(value);
          onChanged();
        } else {
          shapeBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobShape shape = 6;</code>
       */
      public Builder addShape(
          int index, caffe.Caffe.BlobShape value) {
        if (shapeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureShapeIsMutable();
          shape_.add(index, value);
          onChanged();
        } else {
          shapeBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobShape shape = 6;</code>
       */
      public Builder addShape(
          caffe.Caffe.BlobShape.Builder builderForValue) {
        if (shapeBuilder_ == null) {
          ensureShapeIsMutable();
          shape_.add(builderForValue.build());
          onChanged();
        } else {
          shapeBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobShape shape = 6;</code>
       */
      public Builder addShape(
          int index, caffe.Caffe.BlobShape.Builder builderForValue) {
        if (shapeBuilder_ == null) {
          ensureShapeIsMutable();
          shape_.add(index, builderForValue.build());
          onChanged();
        } else {
          shapeBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobShape shape = 6;</code>
       */
      public Builder addAllShape(
          java.lang.Iterable<? extends caffe.Caffe.BlobShape> values) {
        if (shapeBuilder_ == null) {
          ensureShapeIsMutable();
          super.addAll(values, shape_);
          onChanged();
        } else {
          shapeBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobShape shape = 6;</code>
       */
      public Builder clearShape() {
        if (shapeBuilder_ == null) {
          shape_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          shapeBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobShape shape = 6;</code>
       */
      public Builder removeShape(int index) {
        if (shapeBuilder_ == null) {
          ensureShapeIsMutable();
          shape_.remove(index);
          onChanged();
        } else {
          shapeBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobShape shape = 6;</code>
       */
      public caffe.Caffe.BlobShape.Builder getShapeBuilder(
          int index) {
        return getShapeFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .caffe.BlobShape shape = 6;</code>
       */
      public caffe.Caffe.BlobShapeOrBuilder getShapeOrBuilder(
          int index) {
        if (shapeBuilder_ == null) {
          return shape_.get(index);  } else {
          return shapeBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .caffe.BlobShape shape = 6;</code>
       */
      public java.util.List<? extends caffe.Caffe.BlobShapeOrBuilder> 
           getShapeOrBuilderList() {
        if (shapeBuilder_ != null) {
          return shapeBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(shape_);
        }
      }
      /**
       * <code>repeated .caffe.BlobShape shape = 6;</code>
       */
      public caffe.Caffe.BlobShape.Builder addShapeBuilder() {
        return getShapeFieldBuilder().addBuilder(
            caffe.Caffe.BlobShape.getDefaultInstance());
      }
      /**
       * <code>repeated .caffe.BlobShape shape = 6;</code>
       */
      public caffe.Caffe.BlobShape.Builder addShapeBuilder(
          int index) {
        return getShapeFieldBuilder().addBuilder(
            index, caffe.Caffe.BlobShape.getDefaultInstance());
      }
      /**
       * <code>repeated .caffe.BlobShape shape = 6;</code>
       */
      public java.util.List<caffe.Caffe.BlobShape.Builder> 
           getShapeBuilderList() {
        return getShapeFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          caffe.Caffe.BlobShape, caffe.Caffe.BlobShape.Builder, caffe.Caffe.BlobShapeOrBuilder> 
          getShapeFieldBuilder() {
        if (shapeBuilder_ == null) {
          shapeBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              caffe.Caffe.BlobShape, caffe.Caffe.BlobShape.Builder, caffe.Caffe.BlobShapeOrBuilder>(
                  shape_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          shape_ = null;
        }
        return shapeBuilder_;
      }

      // repeated uint32 num = 2;
      private java.util.List<java.lang.Integer> num_ = java.util.Collections.emptyList();
      private void ensureNumIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          num_ = new java.util.ArrayList<java.lang.Integer>(num_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated uint32 num = 2;</code>
       *
       * <pre>
       * 4D dimensions -- deprecated.  Use "shape" instead.
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getNumList() {
        return java.util.Collections.unmodifiableList(num_);
      }
      /**
       * <code>repeated uint32 num = 2;</code>
       *
       * <pre>
       * 4D dimensions -- deprecated.  Use "shape" instead.
       * </pre>
       */
      public int getNumCount() {
        return num_.size();
      }
      /**
       * <code>repeated uint32 num = 2;</code>
       *
       * <pre>
       * 4D dimensions -- deprecated.  Use "shape" instead.
       * </pre>
       */
      public int getNum(int index) {
        return num_.get(index);
      }
      /**
       * <code>repeated uint32 num = 2;</code>
       *
       * <pre>
       * 4D dimensions -- deprecated.  Use "shape" instead.
       * </pre>
       */
      public Builder setNum(
          int index, int value) {
        ensureNumIsMutable();
        num_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 num = 2;</code>
       *
       * <pre>
       * 4D dimensions -- deprecated.  Use "shape" instead.
       * </pre>
       */
      public Builder addNum(int value) {
        ensureNumIsMutable();
        num_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 num = 2;</code>
       *
       * <pre>
       * 4D dimensions -- deprecated.  Use "shape" instead.
       * </pre>
       */
      public Builder addAllNum(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureNumIsMutable();
        super.addAll(values, num_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 num = 2;</code>
       *
       * <pre>
       * 4D dimensions -- deprecated.  Use "shape" instead.
       * </pre>
       */
      public Builder clearNum() {
        num_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      // repeated uint32 channels = 3;
      private java.util.List<java.lang.Integer> channels_ = java.util.Collections.emptyList();
      private void ensureChannelsIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          channels_ = new java.util.ArrayList<java.lang.Integer>(channels_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated uint32 channels = 3;</code>
       */
      public java.util.List<java.lang.Integer>
          getChannelsList() {
        return java.util.Collections.unmodifiableList(channels_);
      }
      /**
       * <code>repeated uint32 channels = 3;</code>
       */
      public int getChannelsCount() {
        return channels_.size();
      }
      /**
       * <code>repeated uint32 channels = 3;</code>
       */
      public int getChannels(int index) {
        return channels_.get(index);
      }
      /**
       * <code>repeated uint32 channels = 3;</code>
       */
      public Builder setChannels(
          int index, int value) {
        ensureChannelsIsMutable();
        channels_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 channels = 3;</code>
       */
      public Builder addChannels(int value) {
        ensureChannelsIsMutable();
        channels_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 channels = 3;</code>
       */
      public Builder addAllChannels(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureChannelsIsMutable();
        super.addAll(values, channels_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 channels = 3;</code>
       */
      public Builder clearChannels() {
        channels_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // repeated uint32 height = 4;
      private java.util.List<java.lang.Integer> height_ = java.util.Collections.emptyList();
      private void ensureHeightIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          height_ = new java.util.ArrayList<java.lang.Integer>(height_);
          bitField0_ |= 0x00000010;
         }
      }
      /**
       * <code>repeated uint32 height = 4;</code>
       */
      public java.util.List<java.lang.Integer>
          getHeightList() {
        return java.util.Collections.unmodifiableList(height_);
      }
      /**
       * <code>repeated uint32 height = 4;</code>
       */
      public int getHeightCount() {
        return height_.size();
      }
      /**
       * <code>repeated uint32 height = 4;</code>
       */
      public int getHeight(int index) {
        return height_.get(index);
      }
      /**
       * <code>repeated uint32 height = 4;</code>
       */
      public Builder setHeight(
          int index, int value) {
        ensureHeightIsMutable();
        height_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 height = 4;</code>
       */
      public Builder addHeight(int value) {
        ensureHeightIsMutable();
        height_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 height = 4;</code>
       */
      public Builder addAllHeight(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureHeightIsMutable();
        super.addAll(values, height_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 height = 4;</code>
       */
      public Builder clearHeight() {
        height_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }

      // repeated uint32 width = 5;
      private java.util.List<java.lang.Integer> width_ = java.util.Collections.emptyList();
      private void ensureWidthIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          width_ = new java.util.ArrayList<java.lang.Integer>(width_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <code>repeated uint32 width = 5;</code>
       */
      public java.util.List<java.lang.Integer>
          getWidthList() {
        return java.util.Collections.unmodifiableList(width_);
      }
      /**
       * <code>repeated uint32 width = 5;</code>
       */
      public int getWidthCount() {
        return width_.size();
      }
      /**
       * <code>repeated uint32 width = 5;</code>
       */
      public int getWidth(int index) {
        return width_.get(index);
      }
      /**
       * <code>repeated uint32 width = 5;</code>
       */
      public Builder setWidth(
          int index, int value) {
        ensureWidthIsMutable();
        width_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 width = 5;</code>
       */
      public Builder addWidth(int value) {
        ensureWidthIsMutable();
        width_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 width = 5;</code>
       */
      public Builder addAllWidth(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureWidthIsMutable();
        super.addAll(values, width_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 width = 5;</code>
       */
      public Builder clearWidth() {
        width_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.DummyDataParameter)
    }

    static {
      defaultInstance = new DummyDataParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.DummyDataParameter)
  }

  public interface EltwiseParameterOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional .caffe.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
    /**
     * <code>optional .caffe.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];</code>
     *
     * <pre>
     * element-wise operation
     * </pre>
     */
    boolean hasOperation();
    /**
     * <code>optional .caffe.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];</code>
     *
     * <pre>
     * element-wise operation
     * </pre>
     */
    caffe.Caffe.EltwiseParameter.EltwiseOp getOperation();

    // repeated float coeff = 2;
    /**
     * <code>repeated float coeff = 2;</code>
     *
     * <pre>
     * blob-wise coefficient for SUM operation
     * </pre>
     */
    java.util.List<java.lang.Float> getCoeffList();
    /**
     * <code>repeated float coeff = 2;</code>
     *
     * <pre>
     * blob-wise coefficient for SUM operation
     * </pre>
     */
    int getCoeffCount();
    /**
     * <code>repeated float coeff = 2;</code>
     *
     * <pre>
     * blob-wise coefficient for SUM operation
     * </pre>
     */
    float getCoeff(int index);

    // optional bool stable_prod_grad = 3 [default = true];
    /**
     * <code>optional bool stable_prod_grad = 3 [default = true];</code>
     *
     * <pre>
     * Whether to use an asymptotically slower (for &gt;2 inputs) but stabler method
     * of computing the gradient for the PROD operation. (No effect for SUM op.)
     * </pre>
     */
    boolean hasStableProdGrad();
    /**
     * <code>optional bool stable_prod_grad = 3 [default = true];</code>
     *
     * <pre>
     * Whether to use an asymptotically slower (for &gt;2 inputs) but stabler method
     * of computing the gradient for the PROD operation. (No effect for SUM op.)
     * </pre>
     */
    boolean getStableProdGrad();
  }
  /**
   * Protobuf type {@code caffe.EltwiseParameter}
   */
  public static final class EltwiseParameter extends
      com.google.protobuf.GeneratedMessage
      implements EltwiseParameterOrBuilder {
    // Use EltwiseParameter.newBuilder() to construct.
    private EltwiseParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private EltwiseParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final EltwiseParameter defaultInstance;
    public static EltwiseParameter getDefaultInstance() {
      return defaultInstance;
    }

    public EltwiseParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private EltwiseParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              caffe.Caffe.EltwiseParameter.EltwiseOp value = caffe.Caffe.EltwiseParameter.EltwiseOp.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                operation_ = value;
              }
              break;
            }
            case 21: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                coeff_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000002;
              }
              coeff_.add(input.readFloat());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                coeff_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                coeff_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              bitField0_ |= 0x00000002;
              stableProdGrad_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          coeff_ = java.util.Collections.unmodifiableList(coeff_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_EltwiseParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_EltwiseParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.EltwiseParameter.class, caffe.Caffe.EltwiseParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<EltwiseParameter> PARSER =
        new com.google.protobuf.AbstractParser<EltwiseParameter>() {
      public EltwiseParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new EltwiseParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<EltwiseParameter> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code caffe.EltwiseParameter.EltwiseOp}
     */
    public enum EltwiseOp
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>PROD = 0;</code>
       */
      PROD(0, 0),
      /**
       * <code>SUM = 1;</code>
       */
      SUM(1, 1),
      /**
       * <code>MAX = 2;</code>
       */
      MAX(2, 2),
      ;

      /**
       * <code>PROD = 0;</code>
       */
      public static final int PROD_VALUE = 0;
      /**
       * <code>SUM = 1;</code>
       */
      public static final int SUM_VALUE = 1;
      /**
       * <code>MAX = 2;</code>
       */
      public static final int MAX_VALUE = 2;


      public final int getNumber() { return value; }

      public static EltwiseOp valueOf(int value) {
        switch (value) {
          case 0: return PROD;
          case 1: return SUM;
          case 2: return MAX;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<EltwiseOp>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<EltwiseOp>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<EltwiseOp>() {
              public EltwiseOp findValueByNumber(int number) {
                return EltwiseOp.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return caffe.Caffe.EltwiseParameter.getDescriptor().getEnumTypes().get(0);
      }

      private static final EltwiseOp[] VALUES = values();

      public static EltwiseOp valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private EltwiseOp(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:caffe.EltwiseParameter.EltwiseOp)
    }

    private int bitField0_;
    // optional .caffe.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
    public static final int OPERATION_FIELD_NUMBER = 1;
    private caffe.Caffe.EltwiseParameter.EltwiseOp operation_;
    /**
     * <code>optional .caffe.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];</code>
     *
     * <pre>
     * element-wise operation
     * </pre>
     */
    public boolean hasOperation() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .caffe.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];</code>
     *
     * <pre>
     * element-wise operation
     * </pre>
     */
    public caffe.Caffe.EltwiseParameter.EltwiseOp getOperation() {
      return operation_;
    }

    // repeated float coeff = 2;
    public static final int COEFF_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Float> coeff_;
    /**
     * <code>repeated float coeff = 2;</code>
     *
     * <pre>
     * blob-wise coefficient for SUM operation
     * </pre>
     */
    public java.util.List<java.lang.Float>
        getCoeffList() {
      return coeff_;
    }
    /**
     * <code>repeated float coeff = 2;</code>
     *
     * <pre>
     * blob-wise coefficient for SUM operation
     * </pre>
     */
    public int getCoeffCount() {
      return coeff_.size();
    }
    /**
     * <code>repeated float coeff = 2;</code>
     *
     * <pre>
     * blob-wise coefficient for SUM operation
     * </pre>
     */
    public float getCoeff(int index) {
      return coeff_.get(index);
    }

    // optional bool stable_prod_grad = 3 [default = true];
    public static final int STABLE_PROD_GRAD_FIELD_NUMBER = 3;
    private boolean stableProdGrad_;
    /**
     * <code>optional bool stable_prod_grad = 3 [default = true];</code>
     *
     * <pre>
     * Whether to use an asymptotically slower (for &gt;2 inputs) but stabler method
     * of computing the gradient for the PROD operation. (No effect for SUM op.)
     * </pre>
     */
    public boolean hasStableProdGrad() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional bool stable_prod_grad = 3 [default = true];</code>
     *
     * <pre>
     * Whether to use an asymptotically slower (for &gt;2 inputs) but stabler method
     * of computing the gradient for the PROD operation. (No effect for SUM op.)
     * </pre>
     */
    public boolean getStableProdGrad() {
      return stableProdGrad_;
    }

    private void initFields() {
      operation_ = caffe.Caffe.EltwiseParameter.EltwiseOp.SUM;
      coeff_ = java.util.Collections.emptyList();
      stableProdGrad_ = true;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, operation_.getNumber());
      }
      for (int i = 0; i < coeff_.size(); i++) {
        output.writeFloat(2, coeff_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBool(3, stableProdGrad_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, operation_.getNumber());
      }
      {
        int dataSize = 0;
        dataSize = 4 * getCoeffList().size();
        size += dataSize;
        size += 1 * getCoeffList().size();
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, stableProdGrad_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.EltwiseParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.EltwiseParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.EltwiseParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.EltwiseParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.EltwiseParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.EltwiseParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.EltwiseParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.EltwiseParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.EltwiseParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.EltwiseParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.EltwiseParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.EltwiseParameter}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements caffe.Caffe.EltwiseParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_EltwiseParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_EltwiseParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.EltwiseParameter.class, caffe.Caffe.EltwiseParameter.Builder.class);
      }

      // Construct using caffe.Caffe.EltwiseParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        operation_ = caffe.Caffe.EltwiseParameter.EltwiseOp.SUM;
        bitField0_ = (bitField0_ & ~0x00000001);
        coeff_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        stableProdGrad_ = true;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_EltwiseParameter_descriptor;
      }

      public caffe.Caffe.EltwiseParameter getDefaultInstanceForType() {
        return caffe.Caffe.EltwiseParameter.getDefaultInstance();
      }

      public caffe.Caffe.EltwiseParameter build() {
        caffe.Caffe.EltwiseParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.EltwiseParameter buildPartial() {
        caffe.Caffe.EltwiseParameter result = new caffe.Caffe.EltwiseParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.operation_ = operation_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          coeff_ = java.util.Collections.unmodifiableList(coeff_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.coeff_ = coeff_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.stableProdGrad_ = stableProdGrad_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.EltwiseParameter) {
          return mergeFrom((caffe.Caffe.EltwiseParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.EltwiseParameter other) {
        if (other == caffe.Caffe.EltwiseParameter.getDefaultInstance()) return this;
        if (other.hasOperation()) {
          setOperation(other.getOperation());
        }
        if (!other.coeff_.isEmpty()) {
          if (coeff_.isEmpty()) {
            coeff_ = other.coeff_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureCoeffIsMutable();
            coeff_.addAll(other.coeff_);
          }
          onChanged();
        }
        if (other.hasStableProdGrad()) {
          setStableProdGrad(other.getStableProdGrad());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.EltwiseParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.EltwiseParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .caffe.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
      private caffe.Caffe.EltwiseParameter.EltwiseOp operation_ = caffe.Caffe.EltwiseParameter.EltwiseOp.SUM;
      /**
       * <code>optional .caffe.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];</code>
       *
       * <pre>
       * element-wise operation
       * </pre>
       */
      public boolean hasOperation() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .caffe.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];</code>
       *
       * <pre>
       * element-wise operation
       * </pre>
       */
      public caffe.Caffe.EltwiseParameter.EltwiseOp getOperation() {
        return operation_;
      }
      /**
       * <code>optional .caffe.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];</code>
       *
       * <pre>
       * element-wise operation
       * </pre>
       */
      public Builder setOperation(caffe.Caffe.EltwiseParameter.EltwiseOp value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        operation_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .caffe.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];</code>
       *
       * <pre>
       * element-wise operation
       * </pre>
       */
      public Builder clearOperation() {
        bitField0_ = (bitField0_ & ~0x00000001);
        operation_ = caffe.Caffe.EltwiseParameter.EltwiseOp.SUM;
        onChanged();
        return this;
      }

      // repeated float coeff = 2;
      private java.util.List<java.lang.Float> coeff_ = java.util.Collections.emptyList();
      private void ensureCoeffIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          coeff_ = new java.util.ArrayList<java.lang.Float>(coeff_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated float coeff = 2;</code>
       *
       * <pre>
       * blob-wise coefficient for SUM operation
       * </pre>
       */
      public java.util.List<java.lang.Float>
          getCoeffList() {
        return java.util.Collections.unmodifiableList(coeff_);
      }
      /**
       * <code>repeated float coeff = 2;</code>
       *
       * <pre>
       * blob-wise coefficient for SUM operation
       * </pre>
       */
      public int getCoeffCount() {
        return coeff_.size();
      }
      /**
       * <code>repeated float coeff = 2;</code>
       *
       * <pre>
       * blob-wise coefficient for SUM operation
       * </pre>
       */
      public float getCoeff(int index) {
        return coeff_.get(index);
      }
      /**
       * <code>repeated float coeff = 2;</code>
       *
       * <pre>
       * blob-wise coefficient for SUM operation
       * </pre>
       */
      public Builder setCoeff(
          int index, float value) {
        ensureCoeffIsMutable();
        coeff_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float coeff = 2;</code>
       *
       * <pre>
       * blob-wise coefficient for SUM operation
       * </pre>
       */
      public Builder addCoeff(float value) {
        ensureCoeffIsMutable();
        coeff_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float coeff = 2;</code>
       *
       * <pre>
       * blob-wise coefficient for SUM operation
       * </pre>
       */
      public Builder addAllCoeff(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureCoeffIsMutable();
        super.addAll(values, coeff_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float coeff = 2;</code>
       *
       * <pre>
       * blob-wise coefficient for SUM operation
       * </pre>
       */
      public Builder clearCoeff() {
        coeff_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // optional bool stable_prod_grad = 3 [default = true];
      private boolean stableProdGrad_ = true;
      /**
       * <code>optional bool stable_prod_grad = 3 [default = true];</code>
       *
       * <pre>
       * Whether to use an asymptotically slower (for &gt;2 inputs) but stabler method
       * of computing the gradient for the PROD operation. (No effect for SUM op.)
       * </pre>
       */
      public boolean hasStableProdGrad() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional bool stable_prod_grad = 3 [default = true];</code>
       *
       * <pre>
       * Whether to use an asymptotically slower (for &gt;2 inputs) but stabler method
       * of computing the gradient for the PROD operation. (No effect for SUM op.)
       * </pre>
       */
      public boolean getStableProdGrad() {
        return stableProdGrad_;
      }
      /**
       * <code>optional bool stable_prod_grad = 3 [default = true];</code>
       *
       * <pre>
       * Whether to use an asymptotically slower (for &gt;2 inputs) but stabler method
       * of computing the gradient for the PROD operation. (No effect for SUM op.)
       * </pre>
       */
      public Builder setStableProdGrad(boolean value) {
        bitField0_ |= 0x00000004;
        stableProdGrad_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool stable_prod_grad = 3 [default = true];</code>
       *
       * <pre>
       * Whether to use an asymptotically slower (for &gt;2 inputs) but stabler method
       * of computing the gradient for the PROD operation. (No effect for SUM op.)
       * </pre>
       */
      public Builder clearStableProdGrad() {
        bitField0_ = (bitField0_ & ~0x00000004);
        stableProdGrad_ = true;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.EltwiseParameter)
    }

    static {
      defaultInstance = new EltwiseParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.EltwiseParameter)
  }

  public interface ELUParameterOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional float alpha = 1 [default = 1];
    /**
     * <code>optional float alpha = 1 [default = 1];</code>
     *
     * <pre>
     * Described in:
     * Clevert, D.-A., Unterthiner, T., &amp; Hochreiter, S. (2015). Fast and Accurate
     * Deep Network Learning by Exponential Linear Units (ELUs). arXiv
     * </pre>
     */
    boolean hasAlpha();
    /**
     * <code>optional float alpha = 1 [default = 1];</code>
     *
     * <pre>
     * Described in:
     * Clevert, D.-A., Unterthiner, T., &amp; Hochreiter, S. (2015). Fast and Accurate
     * Deep Network Learning by Exponential Linear Units (ELUs). arXiv
     * </pre>
     */
    float getAlpha();
  }
  /**
   * Protobuf type {@code caffe.ELUParameter}
   *
   * <pre>
   * Message that stores parameters used by ELULayer
   * </pre>
   */
  public static final class ELUParameter extends
      com.google.protobuf.GeneratedMessage
      implements ELUParameterOrBuilder {
    // Use ELUParameter.newBuilder() to construct.
    private ELUParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ELUParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ELUParameter defaultInstance;
    public static ELUParameter getDefaultInstance() {
      return defaultInstance;
    }

    public ELUParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ELUParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 13: {
              bitField0_ |= 0x00000001;
              alpha_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_ELUParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_ELUParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.ELUParameter.class, caffe.Caffe.ELUParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<ELUParameter> PARSER =
        new com.google.protobuf.AbstractParser<ELUParameter>() {
      public ELUParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ELUParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ELUParameter> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional float alpha = 1 [default = 1];
    public static final int ALPHA_FIELD_NUMBER = 1;
    private float alpha_;
    /**
     * <code>optional float alpha = 1 [default = 1];</code>
     *
     * <pre>
     * Described in:
     * Clevert, D.-A., Unterthiner, T., &amp; Hochreiter, S. (2015). Fast and Accurate
     * Deep Network Learning by Exponential Linear Units (ELUs). arXiv
     * </pre>
     */
    public boolean hasAlpha() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional float alpha = 1 [default = 1];</code>
     *
     * <pre>
     * Described in:
     * Clevert, D.-A., Unterthiner, T., &amp; Hochreiter, S. (2015). Fast and Accurate
     * Deep Network Learning by Exponential Linear Units (ELUs). arXiv
     * </pre>
     */
    public float getAlpha() {
      return alpha_;
    }

    private void initFields() {
      alpha_ = 1F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeFloat(1, alpha_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(1, alpha_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.ELUParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.ELUParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.ELUParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.ELUParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.ELUParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.ELUParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.ELUParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.ELUParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.ELUParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.ELUParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.ELUParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.ELUParameter}
     *
     * <pre>
     * Message that stores parameters used by ELULayer
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements caffe.Caffe.ELUParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_ELUParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_ELUParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.ELUParameter.class, caffe.Caffe.ELUParameter.Builder.class);
      }

      // Construct using caffe.Caffe.ELUParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        alpha_ = 1F;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_ELUParameter_descriptor;
      }

      public caffe.Caffe.ELUParameter getDefaultInstanceForType() {
        return caffe.Caffe.ELUParameter.getDefaultInstance();
      }

      public caffe.Caffe.ELUParameter build() {
        caffe.Caffe.ELUParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.ELUParameter buildPartial() {
        caffe.Caffe.ELUParameter result = new caffe.Caffe.ELUParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.alpha_ = alpha_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.ELUParameter) {
          return mergeFrom((caffe.Caffe.ELUParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.ELUParameter other) {
        if (other == caffe.Caffe.ELUParameter.getDefaultInstance()) return this;
        if (other.hasAlpha()) {
          setAlpha(other.getAlpha());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.ELUParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.ELUParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional float alpha = 1 [default = 1];
      private float alpha_ = 1F;
      /**
       * <code>optional float alpha = 1 [default = 1];</code>
       *
       * <pre>
       * Described in:
       * Clevert, D.-A., Unterthiner, T., &amp; Hochreiter, S. (2015). Fast and Accurate
       * Deep Network Learning by Exponential Linear Units (ELUs). arXiv
       * </pre>
       */
      public boolean hasAlpha() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional float alpha = 1 [default = 1];</code>
       *
       * <pre>
       * Described in:
       * Clevert, D.-A., Unterthiner, T., &amp; Hochreiter, S. (2015). Fast and Accurate
       * Deep Network Learning by Exponential Linear Units (ELUs). arXiv
       * </pre>
       */
      public float getAlpha() {
        return alpha_;
      }
      /**
       * <code>optional float alpha = 1 [default = 1];</code>
       *
       * <pre>
       * Described in:
       * Clevert, D.-A., Unterthiner, T., &amp; Hochreiter, S. (2015). Fast and Accurate
       * Deep Network Learning by Exponential Linear Units (ELUs). arXiv
       * </pre>
       */
      public Builder setAlpha(float value) {
        bitField0_ |= 0x00000001;
        alpha_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float alpha = 1 [default = 1];</code>
       *
       * <pre>
       * Described in:
       * Clevert, D.-A., Unterthiner, T., &amp; Hochreiter, S. (2015). Fast and Accurate
       * Deep Network Learning by Exponential Linear Units (ELUs). arXiv
       * </pre>
       */
      public Builder clearAlpha() {
        bitField0_ = (bitField0_ & ~0x00000001);
        alpha_ = 1F;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.ELUParameter)
    }

    static {
      defaultInstance = new ELUParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.ELUParameter)
  }

  public interface EmbedParameterOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional uint32 num_output = 1;
    /**
     * <code>optional uint32 num_output = 1;</code>
     *
     * <pre>
     * The number of outputs for the layer
     * </pre>
     */
    boolean hasNumOutput();
    /**
     * <code>optional uint32 num_output = 1;</code>
     *
     * <pre>
     * The number of outputs for the layer
     * </pre>
     */
    int getNumOutput();

    // optional uint32 input_dim = 2;
    /**
     * <code>optional uint32 input_dim = 2;</code>
     *
     * <pre>
     * The input is given as integers to be interpreted as one-hot
     * vector indices with dimension num_input.  Hence num_input should be
     * 1 greater than the maximum possible input value.
     * </pre>
     */
    boolean hasInputDim();
    /**
     * <code>optional uint32 input_dim = 2;</code>
     *
     * <pre>
     * The input is given as integers to be interpreted as one-hot
     * vector indices with dimension num_input.  Hence num_input should be
     * 1 greater than the maximum possible input value.
     * </pre>
     */
    int getInputDim();

    // optional bool bias_term = 3 [default = true];
    /**
     * <code>optional bool bias_term = 3 [default = true];</code>
     *
     * <pre>
     * Whether to use a bias term
     * </pre>
     */
    boolean hasBiasTerm();
    /**
     * <code>optional bool bias_term = 3 [default = true];</code>
     *
     * <pre>
     * Whether to use a bias term
     * </pre>
     */
    boolean getBiasTerm();

    // optional .caffe.FillerParameter weight_filler = 4;
    /**
     * <code>optional .caffe.FillerParameter weight_filler = 4;</code>
     *
     * <pre>
     * The filler for the weight
     * </pre>
     */
    boolean hasWeightFiller();
    /**
     * <code>optional .caffe.FillerParameter weight_filler = 4;</code>
     *
     * <pre>
     * The filler for the weight
     * </pre>
     */
    caffe.Caffe.FillerParameter getWeightFiller();
    /**
     * <code>optional .caffe.FillerParameter weight_filler = 4;</code>
     *
     * <pre>
     * The filler for the weight
     * </pre>
     */
    caffe.Caffe.FillerParameterOrBuilder getWeightFillerOrBuilder();

    // optional .caffe.FillerParameter bias_filler = 5;
    /**
     * <code>optional .caffe.FillerParameter bias_filler = 5;</code>
     *
     * <pre>
     * The filler for the bias
     * </pre>
     */
    boolean hasBiasFiller();
    /**
     * <code>optional .caffe.FillerParameter bias_filler = 5;</code>
     *
     * <pre>
     * The filler for the bias
     * </pre>
     */
    caffe.Caffe.FillerParameter getBiasFiller();
    /**
     * <code>optional .caffe.FillerParameter bias_filler = 5;</code>
     *
     * <pre>
     * The filler for the bias
     * </pre>
     */
    caffe.Caffe.FillerParameterOrBuilder getBiasFillerOrBuilder();
  }
  /**
   * Protobuf type {@code caffe.EmbedParameter}
   *
   * <pre>
   * Message that stores parameters used by EmbedLayer
   * </pre>
   */
  public static final class EmbedParameter extends
      com.google.protobuf.GeneratedMessage
      implements EmbedParameterOrBuilder {
    // Use EmbedParameter.newBuilder() to construct.
    private EmbedParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private EmbedParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final EmbedParameter defaultInstance;
    public static EmbedParameter getDefaultInstance() {
      return defaultInstance;
    }

    public EmbedParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private EmbedParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              numOutput_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              inputDim_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              biasTerm_ = input.readBool();
              break;
            }
            case 34: {
              caffe.Caffe.FillerParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = weightFiller_.toBuilder();
              }
              weightFiller_ = input.readMessage(caffe.Caffe.FillerParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(weightFiller_);
                weightFiller_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 42: {
              caffe.Caffe.FillerParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = biasFiller_.toBuilder();
              }
              biasFiller_ = input.readMessage(caffe.Caffe.FillerParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(biasFiller_);
                biasFiller_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_EmbedParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_EmbedParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.EmbedParameter.class, caffe.Caffe.EmbedParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<EmbedParameter> PARSER =
        new com.google.protobuf.AbstractParser<EmbedParameter>() {
      public EmbedParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new EmbedParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<EmbedParameter> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional uint32 num_output = 1;
    public static final int NUM_OUTPUT_FIELD_NUMBER = 1;
    private int numOutput_;
    /**
     * <code>optional uint32 num_output = 1;</code>
     *
     * <pre>
     * The number of outputs for the layer
     * </pre>
     */
    public boolean hasNumOutput() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 num_output = 1;</code>
     *
     * <pre>
     * The number of outputs for the layer
     * </pre>
     */
    public int getNumOutput() {
      return numOutput_;
    }

    // optional uint32 input_dim = 2;
    public static final int INPUT_DIM_FIELD_NUMBER = 2;
    private int inputDim_;
    /**
     * <code>optional uint32 input_dim = 2;</code>
     *
     * <pre>
     * The input is given as integers to be interpreted as one-hot
     * vector indices with dimension num_input.  Hence num_input should be
     * 1 greater than the maximum possible input value.
     * </pre>
     */
    public boolean hasInputDim() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 input_dim = 2;</code>
     *
     * <pre>
     * The input is given as integers to be interpreted as one-hot
     * vector indices with dimension num_input.  Hence num_input should be
     * 1 greater than the maximum possible input value.
     * </pre>
     */
    public int getInputDim() {
      return inputDim_;
    }

    // optional bool bias_term = 3 [default = true];
    public static final int BIAS_TERM_FIELD_NUMBER = 3;
    private boolean biasTerm_;
    /**
     * <code>optional bool bias_term = 3 [default = true];</code>
     *
     * <pre>
     * Whether to use a bias term
     * </pre>
     */
    public boolean hasBiasTerm() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional bool bias_term = 3 [default = true];</code>
     *
     * <pre>
     * Whether to use a bias term
     * </pre>
     */
    public boolean getBiasTerm() {
      return biasTerm_;
    }

    // optional .caffe.FillerParameter weight_filler = 4;
    public static final int WEIGHT_FILLER_FIELD_NUMBER = 4;
    private caffe.Caffe.FillerParameter weightFiller_;
    /**
     * <code>optional .caffe.FillerParameter weight_filler = 4;</code>
     *
     * <pre>
     * The filler for the weight
     * </pre>
     */
    public boolean hasWeightFiller() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .caffe.FillerParameter weight_filler = 4;</code>
     *
     * <pre>
     * The filler for the weight
     * </pre>
     */
    public caffe.Caffe.FillerParameter getWeightFiller() {
      return weightFiller_;
    }
    /**
     * <code>optional .caffe.FillerParameter weight_filler = 4;</code>
     *
     * <pre>
     * The filler for the weight
     * </pre>
     */
    public caffe.Caffe.FillerParameterOrBuilder getWeightFillerOrBuilder() {
      return weightFiller_;
    }

    // optional .caffe.FillerParameter bias_filler = 5;
    public static final int BIAS_FILLER_FIELD_NUMBER = 5;
    private caffe.Caffe.FillerParameter biasFiller_;
    /**
     * <code>optional .caffe.FillerParameter bias_filler = 5;</code>
     *
     * <pre>
     * The filler for the bias
     * </pre>
     */
    public boolean hasBiasFiller() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .caffe.FillerParameter bias_filler = 5;</code>
     *
     * <pre>
     * The filler for the bias
     * </pre>
     */
    public caffe.Caffe.FillerParameter getBiasFiller() {
      return biasFiller_;
    }
    /**
     * <code>optional .caffe.FillerParameter bias_filler = 5;</code>
     *
     * <pre>
     * The filler for the bias
     * </pre>
     */
    public caffe.Caffe.FillerParameterOrBuilder getBiasFillerOrBuilder() {
      return biasFiller_;
    }

    private void initFields() {
      numOutput_ = 0;
      inputDim_ = 0;
      biasTerm_ = true;
      weightFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
      biasFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, numOutput_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, inputDim_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBool(3, biasTerm_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(4, weightFiller_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(5, biasFiller_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, numOutput_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, inputDim_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, biasTerm_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, weightFiller_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, biasFiller_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.EmbedParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.EmbedParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.EmbedParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.EmbedParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.EmbedParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.EmbedParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.EmbedParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.EmbedParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.EmbedParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.EmbedParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.EmbedParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.EmbedParameter}
     *
     * <pre>
     * Message that stores parameters used by EmbedLayer
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements caffe.Caffe.EmbedParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_EmbedParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_EmbedParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.EmbedParameter.class, caffe.Caffe.EmbedParameter.Builder.class);
      }

      // Construct using caffe.Caffe.EmbedParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getWeightFillerFieldBuilder();
          getBiasFillerFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        numOutput_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        inputDim_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        biasTerm_ = true;
        bitField0_ = (bitField0_ & ~0x00000004);
        if (weightFillerBuilder_ == null) {
          weightFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
        } else {
          weightFillerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        if (biasFillerBuilder_ == null) {
          biasFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
        } else {
          biasFillerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_EmbedParameter_descriptor;
      }

      public caffe.Caffe.EmbedParameter getDefaultInstanceForType() {
        return caffe.Caffe.EmbedParameter.getDefaultInstance();
      }

      public caffe.Caffe.EmbedParameter build() {
        caffe.Caffe.EmbedParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.EmbedParameter buildPartial() {
        caffe.Caffe.EmbedParameter result = new caffe.Caffe.EmbedParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.numOutput_ = numOutput_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.inputDim_ = inputDim_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.biasTerm_ = biasTerm_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        if (weightFillerBuilder_ == null) {
          result.weightFiller_ = weightFiller_;
        } else {
          result.weightFiller_ = weightFillerBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        if (biasFillerBuilder_ == null) {
          result.biasFiller_ = biasFiller_;
        } else {
          result.biasFiller_ = biasFillerBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.EmbedParameter) {
          return mergeFrom((caffe.Caffe.EmbedParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.EmbedParameter other) {
        if (other == caffe.Caffe.EmbedParameter.getDefaultInstance()) return this;
        if (other.hasNumOutput()) {
          setNumOutput(other.getNumOutput());
        }
        if (other.hasInputDim()) {
          setInputDim(other.getInputDim());
        }
        if (other.hasBiasTerm()) {
          setBiasTerm(other.getBiasTerm());
        }
        if (other.hasWeightFiller()) {
          mergeWeightFiller(other.getWeightFiller());
        }
        if (other.hasBiasFiller()) {
          mergeBiasFiller(other.getBiasFiller());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.EmbedParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.EmbedParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional uint32 num_output = 1;
      private int numOutput_ ;
      /**
       * <code>optional uint32 num_output = 1;</code>
       *
       * <pre>
       * The number of outputs for the layer
       * </pre>
       */
      public boolean hasNumOutput() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 num_output = 1;</code>
       *
       * <pre>
       * The number of outputs for the layer
       * </pre>
       */
      public int getNumOutput() {
        return numOutput_;
      }
      /**
       * <code>optional uint32 num_output = 1;</code>
       *
       * <pre>
       * The number of outputs for the layer
       * </pre>
       */
      public Builder setNumOutput(int value) {
        bitField0_ |= 0x00000001;
        numOutput_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 num_output = 1;</code>
       *
       * <pre>
       * The number of outputs for the layer
       * </pre>
       */
      public Builder clearNumOutput() {
        bitField0_ = (bitField0_ & ~0x00000001);
        numOutput_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 input_dim = 2;
      private int inputDim_ ;
      /**
       * <code>optional uint32 input_dim = 2;</code>
       *
       * <pre>
       * The input is given as integers to be interpreted as one-hot
       * vector indices with dimension num_input.  Hence num_input should be
       * 1 greater than the maximum possible input value.
       * </pre>
       */
      public boolean hasInputDim() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 input_dim = 2;</code>
       *
       * <pre>
       * The input is given as integers to be interpreted as one-hot
       * vector indices with dimension num_input.  Hence num_input should be
       * 1 greater than the maximum possible input value.
       * </pre>
       */
      public int getInputDim() {
        return inputDim_;
      }
      /**
       * <code>optional uint32 input_dim = 2;</code>
       *
       * <pre>
       * The input is given as integers to be interpreted as one-hot
       * vector indices with dimension num_input.  Hence num_input should be
       * 1 greater than the maximum possible input value.
       * </pre>
       */
      public Builder setInputDim(int value) {
        bitField0_ |= 0x00000002;
        inputDim_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 input_dim = 2;</code>
       *
       * <pre>
       * The input is given as integers to be interpreted as one-hot
       * vector indices with dimension num_input.  Hence num_input should be
       * 1 greater than the maximum possible input value.
       * </pre>
       */
      public Builder clearInputDim() {
        bitField0_ = (bitField0_ & ~0x00000002);
        inputDim_ = 0;
        onChanged();
        return this;
      }

      // optional bool bias_term = 3 [default = true];
      private boolean biasTerm_ = true;
      /**
       * <code>optional bool bias_term = 3 [default = true];</code>
       *
       * <pre>
       * Whether to use a bias term
       * </pre>
       */
      public boolean hasBiasTerm() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional bool bias_term = 3 [default = true];</code>
       *
       * <pre>
       * Whether to use a bias term
       * </pre>
       */
      public boolean getBiasTerm() {
        return biasTerm_;
      }
      /**
       * <code>optional bool bias_term = 3 [default = true];</code>
       *
       * <pre>
       * Whether to use a bias term
       * </pre>
       */
      public Builder setBiasTerm(boolean value) {
        bitField0_ |= 0x00000004;
        biasTerm_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool bias_term = 3 [default = true];</code>
       *
       * <pre>
       * Whether to use a bias term
       * </pre>
       */
      public Builder clearBiasTerm() {
        bitField0_ = (bitField0_ & ~0x00000004);
        biasTerm_ = true;
        onChanged();
        return this;
      }

      // optional .caffe.FillerParameter weight_filler = 4;
      private caffe.Caffe.FillerParameter weightFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.FillerParameter, caffe.Caffe.FillerParameter.Builder, caffe.Caffe.FillerParameterOrBuilder> weightFillerBuilder_;
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 4;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public boolean hasWeightFiller() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 4;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public caffe.Caffe.FillerParameter getWeightFiller() {
        if (weightFillerBuilder_ == null) {
          return weightFiller_;
        } else {
          return weightFillerBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 4;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public Builder setWeightFiller(caffe.Caffe.FillerParameter value) {
        if (weightFillerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          weightFiller_ = value;
          onChanged();
        } else {
          weightFillerBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 4;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public Builder setWeightFiller(
          caffe.Caffe.FillerParameter.Builder builderForValue) {
        if (weightFillerBuilder_ == null) {
          weightFiller_ = builderForValue.build();
          onChanged();
        } else {
          weightFillerBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 4;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public Builder mergeWeightFiller(caffe.Caffe.FillerParameter value) {
        if (weightFillerBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              weightFiller_ != caffe.Caffe.FillerParameter.getDefaultInstance()) {
            weightFiller_ =
              caffe.Caffe.FillerParameter.newBuilder(weightFiller_).mergeFrom(value).buildPartial();
          } else {
            weightFiller_ = value;
          }
          onChanged();
        } else {
          weightFillerBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 4;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public Builder clearWeightFiller() {
        if (weightFillerBuilder_ == null) {
          weightFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
          onChanged();
        } else {
          weightFillerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 4;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public caffe.Caffe.FillerParameter.Builder getWeightFillerBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getWeightFillerFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 4;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public caffe.Caffe.FillerParameterOrBuilder getWeightFillerOrBuilder() {
        if (weightFillerBuilder_ != null) {
          return weightFillerBuilder_.getMessageOrBuilder();
        } else {
          return weightFiller_;
        }
      }
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 4;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.FillerParameter, caffe.Caffe.FillerParameter.Builder, caffe.Caffe.FillerParameterOrBuilder> 
          getWeightFillerFieldBuilder() {
        if (weightFillerBuilder_ == null) {
          weightFillerBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.FillerParameter, caffe.Caffe.FillerParameter.Builder, caffe.Caffe.FillerParameterOrBuilder>(
                  weightFiller_,
                  getParentForChildren(),
                  isClean());
          weightFiller_ = null;
        }
        return weightFillerBuilder_;
      }

      // optional .caffe.FillerParameter bias_filler = 5;
      private caffe.Caffe.FillerParameter biasFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.FillerParameter, caffe.Caffe.FillerParameter.Builder, caffe.Caffe.FillerParameterOrBuilder> biasFillerBuilder_;
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 5;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public boolean hasBiasFiller() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 5;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public caffe.Caffe.FillerParameter getBiasFiller() {
        if (biasFillerBuilder_ == null) {
          return biasFiller_;
        } else {
          return biasFillerBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 5;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public Builder setBiasFiller(caffe.Caffe.FillerParameter value) {
        if (biasFillerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          biasFiller_ = value;
          onChanged();
        } else {
          biasFillerBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 5;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public Builder setBiasFiller(
          caffe.Caffe.FillerParameter.Builder builderForValue) {
        if (biasFillerBuilder_ == null) {
          biasFiller_ = builderForValue.build();
          onChanged();
        } else {
          biasFillerBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 5;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public Builder mergeBiasFiller(caffe.Caffe.FillerParameter value) {
        if (biasFillerBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              biasFiller_ != caffe.Caffe.FillerParameter.getDefaultInstance()) {
            biasFiller_ =
              caffe.Caffe.FillerParameter.newBuilder(biasFiller_).mergeFrom(value).buildPartial();
          } else {
            biasFiller_ = value;
          }
          onChanged();
        } else {
          biasFillerBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 5;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public Builder clearBiasFiller() {
        if (biasFillerBuilder_ == null) {
          biasFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
          onChanged();
        } else {
          biasFillerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 5;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public caffe.Caffe.FillerParameter.Builder getBiasFillerBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getBiasFillerFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 5;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public caffe.Caffe.FillerParameterOrBuilder getBiasFillerOrBuilder() {
        if (biasFillerBuilder_ != null) {
          return biasFillerBuilder_.getMessageOrBuilder();
        } else {
          return biasFiller_;
        }
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 5;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.FillerParameter, caffe.Caffe.FillerParameter.Builder, caffe.Caffe.FillerParameterOrBuilder> 
          getBiasFillerFieldBuilder() {
        if (biasFillerBuilder_ == null) {
          biasFillerBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.FillerParameter, caffe.Caffe.FillerParameter.Builder, caffe.Caffe.FillerParameterOrBuilder>(
                  biasFiller_,
                  getParentForChildren(),
                  isClean());
          biasFiller_ = null;
        }
        return biasFillerBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:caffe.EmbedParameter)
    }

    static {
      defaultInstance = new EmbedParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.EmbedParameter)
  }

  public interface ExpParameterOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional float base = 1 [default = -1];
    /**
     * <code>optional float base = 1 [default = -1];</code>
     *
     * <pre>
     * ExpLayer computes outputs y = base ^ (shift + scale * x), for base &gt; 0.
     * Or if base is set to the default (-1), base is set to e,
     * so y = exp(shift + scale * x).
     * </pre>
     */
    boolean hasBase();
    /**
     * <code>optional float base = 1 [default = -1];</code>
     *
     * <pre>
     * ExpLayer computes outputs y = base ^ (shift + scale * x), for base &gt; 0.
     * Or if base is set to the default (-1), base is set to e,
     * so y = exp(shift + scale * x).
     * </pre>
     */
    float getBase();

    // optional float scale = 2 [default = 1];
    /**
     * <code>optional float scale = 2 [default = 1];</code>
     */
    boolean hasScale();
    /**
     * <code>optional float scale = 2 [default = 1];</code>
     */
    float getScale();

    // optional float shift = 3 [default = 0];
    /**
     * <code>optional float shift = 3 [default = 0];</code>
     */
    boolean hasShift();
    /**
     * <code>optional float shift = 3 [default = 0];</code>
     */
    float getShift();
  }
  /**
   * Protobuf type {@code caffe.ExpParameter}
   *
   * <pre>
   * Message that stores parameters used by ExpLayer
   * </pre>
   */
  public static final class ExpParameter extends
      com.google.protobuf.GeneratedMessage
      implements ExpParameterOrBuilder {
    // Use ExpParameter.newBuilder() to construct.
    private ExpParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ExpParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ExpParameter defaultInstance;
    public static ExpParameter getDefaultInstance() {
      return defaultInstance;
    }

    public ExpParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ExpParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 13: {
              bitField0_ |= 0x00000001;
              base_ = input.readFloat();
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              scale_ = input.readFloat();
              break;
            }
            case 29: {
              bitField0_ |= 0x00000004;
              shift_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_ExpParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_ExpParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.ExpParameter.class, caffe.Caffe.ExpParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<ExpParameter> PARSER =
        new com.google.protobuf.AbstractParser<ExpParameter>() {
      public ExpParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ExpParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ExpParameter> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional float base = 1 [default = -1];
    public static final int BASE_FIELD_NUMBER = 1;
    private float base_;
    /**
     * <code>optional float base = 1 [default = -1];</code>
     *
     * <pre>
     * ExpLayer computes outputs y = base ^ (shift + scale * x), for base &gt; 0.
     * Or if base is set to the default (-1), base is set to e,
     * so y = exp(shift + scale * x).
     * </pre>
     */
    public boolean hasBase() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional float base = 1 [default = -1];</code>
     *
     * <pre>
     * ExpLayer computes outputs y = base ^ (shift + scale * x), for base &gt; 0.
     * Or if base is set to the default (-1), base is set to e,
     * so y = exp(shift + scale * x).
     * </pre>
     */
    public float getBase() {
      return base_;
    }

    // optional float scale = 2 [default = 1];
    public static final int SCALE_FIELD_NUMBER = 2;
    private float scale_;
    /**
     * <code>optional float scale = 2 [default = 1];</code>
     */
    public boolean hasScale() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional float scale = 2 [default = 1];</code>
     */
    public float getScale() {
      return scale_;
    }

    // optional float shift = 3 [default = 0];
    public static final int SHIFT_FIELD_NUMBER = 3;
    private float shift_;
    /**
     * <code>optional float shift = 3 [default = 0];</code>
     */
    public boolean hasShift() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional float shift = 3 [default = 0];</code>
     */
    public float getShift() {
      return shift_;
    }

    private void initFields() {
      base_ = -1F;
      scale_ = 1F;
      shift_ = 0F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeFloat(1, base_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, scale_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFloat(3, shift_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(1, base_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, scale_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(3, shift_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.ExpParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.ExpParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.ExpParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.ExpParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.ExpParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.ExpParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.ExpParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.ExpParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.ExpParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.ExpParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.ExpParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.ExpParameter}
     *
     * <pre>
     * Message that stores parameters used by ExpLayer
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements caffe.Caffe.ExpParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_ExpParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_ExpParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.ExpParameter.class, caffe.Caffe.ExpParameter.Builder.class);
      }

      // Construct using caffe.Caffe.ExpParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        base_ = -1F;
        bitField0_ = (bitField0_ & ~0x00000001);
        scale_ = 1F;
        bitField0_ = (bitField0_ & ~0x00000002);
        shift_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_ExpParameter_descriptor;
      }

      public caffe.Caffe.ExpParameter getDefaultInstanceForType() {
        return caffe.Caffe.ExpParameter.getDefaultInstance();
      }

      public caffe.Caffe.ExpParameter build() {
        caffe.Caffe.ExpParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.ExpParameter buildPartial() {
        caffe.Caffe.ExpParameter result = new caffe.Caffe.ExpParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.base_ = base_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.scale_ = scale_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.shift_ = shift_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.ExpParameter) {
          return mergeFrom((caffe.Caffe.ExpParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.ExpParameter other) {
        if (other == caffe.Caffe.ExpParameter.getDefaultInstance()) return this;
        if (other.hasBase()) {
          setBase(other.getBase());
        }
        if (other.hasScale()) {
          setScale(other.getScale());
        }
        if (other.hasShift()) {
          setShift(other.getShift());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.ExpParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.ExpParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional float base = 1 [default = -1];
      private float base_ = -1F;
      /**
       * <code>optional float base = 1 [default = -1];</code>
       *
       * <pre>
       * ExpLayer computes outputs y = base ^ (shift + scale * x), for base &gt; 0.
       * Or if base is set to the default (-1), base is set to e,
       * so y = exp(shift + scale * x).
       * </pre>
       */
      public boolean hasBase() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional float base = 1 [default = -1];</code>
       *
       * <pre>
       * ExpLayer computes outputs y = base ^ (shift + scale * x), for base &gt; 0.
       * Or if base is set to the default (-1), base is set to e,
       * so y = exp(shift + scale * x).
       * </pre>
       */
      public float getBase() {
        return base_;
      }
      /**
       * <code>optional float base = 1 [default = -1];</code>
       *
       * <pre>
       * ExpLayer computes outputs y = base ^ (shift + scale * x), for base &gt; 0.
       * Or if base is set to the default (-1), base is set to e,
       * so y = exp(shift + scale * x).
       * </pre>
       */
      public Builder setBase(float value) {
        bitField0_ |= 0x00000001;
        base_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float base = 1 [default = -1];</code>
       *
       * <pre>
       * ExpLayer computes outputs y = base ^ (shift + scale * x), for base &gt; 0.
       * Or if base is set to the default (-1), base is set to e,
       * so y = exp(shift + scale * x).
       * </pre>
       */
      public Builder clearBase() {
        bitField0_ = (bitField0_ & ~0x00000001);
        base_ = -1F;
        onChanged();
        return this;
      }

      // optional float scale = 2 [default = 1];
      private float scale_ = 1F;
      /**
       * <code>optional float scale = 2 [default = 1];</code>
       */
      public boolean hasScale() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional float scale = 2 [default = 1];</code>
       */
      public float getScale() {
        return scale_;
      }
      /**
       * <code>optional float scale = 2 [default = 1];</code>
       */
      public Builder setScale(float value) {
        bitField0_ |= 0x00000002;
        scale_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float scale = 2 [default = 1];</code>
       */
      public Builder clearScale() {
        bitField0_ = (bitField0_ & ~0x00000002);
        scale_ = 1F;
        onChanged();
        return this;
      }

      // optional float shift = 3 [default = 0];
      private float shift_ ;
      /**
       * <code>optional float shift = 3 [default = 0];</code>
       */
      public boolean hasShift() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional float shift = 3 [default = 0];</code>
       */
      public float getShift() {
        return shift_;
      }
      /**
       * <code>optional float shift = 3 [default = 0];</code>
       */
      public Builder setShift(float value) {
        bitField0_ |= 0x00000004;
        shift_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float shift = 3 [default = 0];</code>
       */
      public Builder clearShift() {
        bitField0_ = (bitField0_ & ~0x00000004);
        shift_ = 0F;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.ExpParameter)
    }

    static {
      defaultInstance = new ExpParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.ExpParameter)
  }

  public interface FlattenParameterOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 axis = 1 [default = 1];
    /**
     * <code>optional int32 axis = 1 [default = 1];</code>
     *
     * <pre>
     * The first axis to flatten: all preceding axes are retained in the output.
     * May be negative to index from the end (e.g., -1 for the last axis).
     * </pre>
     */
    boolean hasAxis();
    /**
     * <code>optional int32 axis = 1 [default = 1];</code>
     *
     * <pre>
     * The first axis to flatten: all preceding axes are retained in the output.
     * May be negative to index from the end (e.g., -1 for the last axis).
     * </pre>
     */
    int getAxis();

    // optional int32 end_axis = 2 [default = -1];
    /**
     * <code>optional int32 end_axis = 2 [default = -1];</code>
     *
     * <pre>
     * The last axis to flatten: all following axes are retained in the output.
     * May be negative to index from the end (e.g., the default -1 for the last
     * axis).
     * </pre>
     */
    boolean hasEndAxis();
    /**
     * <code>optional int32 end_axis = 2 [default = -1];</code>
     *
     * <pre>
     * The last axis to flatten: all following axes are retained in the output.
     * May be negative to index from the end (e.g., the default -1 for the last
     * axis).
     * </pre>
     */
    int getEndAxis();
  }
  /**
   * Protobuf type {@code caffe.FlattenParameter}
   *
   * <pre>
   *&#47; Message that stores parameters used by FlattenLayer
   * </pre>
   */
  public static final class FlattenParameter extends
      com.google.protobuf.GeneratedMessage
      implements FlattenParameterOrBuilder {
    // Use FlattenParameter.newBuilder() to construct.
    private FlattenParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private FlattenParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final FlattenParameter defaultInstance;
    public static FlattenParameter getDefaultInstance() {
      return defaultInstance;
    }

    public FlattenParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private FlattenParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              axis_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              endAxis_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_FlattenParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_FlattenParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.FlattenParameter.class, caffe.Caffe.FlattenParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<FlattenParameter> PARSER =
        new com.google.protobuf.AbstractParser<FlattenParameter>() {
      public FlattenParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new FlattenParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<FlattenParameter> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 axis = 1 [default = 1];
    public static final int AXIS_FIELD_NUMBER = 1;
    private int axis_;
    /**
     * <code>optional int32 axis = 1 [default = 1];</code>
     *
     * <pre>
     * The first axis to flatten: all preceding axes are retained in the output.
     * May be negative to index from the end (e.g., -1 for the last axis).
     * </pre>
     */
    public boolean hasAxis() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 axis = 1 [default = 1];</code>
     *
     * <pre>
     * The first axis to flatten: all preceding axes are retained in the output.
     * May be negative to index from the end (e.g., -1 for the last axis).
     * </pre>
     */
    public int getAxis() {
      return axis_;
    }

    // optional int32 end_axis = 2 [default = -1];
    public static final int END_AXIS_FIELD_NUMBER = 2;
    private int endAxis_;
    /**
     * <code>optional int32 end_axis = 2 [default = -1];</code>
     *
     * <pre>
     * The last axis to flatten: all following axes are retained in the output.
     * May be negative to index from the end (e.g., the default -1 for the last
     * axis).
     * </pre>
     */
    public boolean hasEndAxis() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 end_axis = 2 [default = -1];</code>
     *
     * <pre>
     * The last axis to flatten: all following axes are retained in the output.
     * May be negative to index from the end (e.g., the default -1 for the last
     * axis).
     * </pre>
     */
    public int getEndAxis() {
      return endAxis_;
    }

    private void initFields() {
      axis_ = 1;
      endAxis_ = -1;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, axis_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, endAxis_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, axis_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, endAxis_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.FlattenParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.FlattenParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.FlattenParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.FlattenParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.FlattenParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.FlattenParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.FlattenParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.FlattenParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.FlattenParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.FlattenParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.FlattenParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.FlattenParameter}
     *
     * <pre>
     *&#47; Message that stores parameters used by FlattenLayer
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements caffe.Caffe.FlattenParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_FlattenParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_FlattenParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.FlattenParameter.class, caffe.Caffe.FlattenParameter.Builder.class);
      }

      // Construct using caffe.Caffe.FlattenParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        axis_ = 1;
        bitField0_ = (bitField0_ & ~0x00000001);
        endAxis_ = -1;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_FlattenParameter_descriptor;
      }

      public caffe.Caffe.FlattenParameter getDefaultInstanceForType() {
        return caffe.Caffe.FlattenParameter.getDefaultInstance();
      }

      public caffe.Caffe.FlattenParameter build() {
        caffe.Caffe.FlattenParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.FlattenParameter buildPartial() {
        caffe.Caffe.FlattenParameter result = new caffe.Caffe.FlattenParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.axis_ = axis_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.endAxis_ = endAxis_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.FlattenParameter) {
          return mergeFrom((caffe.Caffe.FlattenParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.FlattenParameter other) {
        if (other == caffe.Caffe.FlattenParameter.getDefaultInstance()) return this;
        if (other.hasAxis()) {
          setAxis(other.getAxis());
        }
        if (other.hasEndAxis()) {
          setEndAxis(other.getEndAxis());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.FlattenParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.FlattenParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 axis = 1 [default = 1];
      private int axis_ = 1;
      /**
       * <code>optional int32 axis = 1 [default = 1];</code>
       *
       * <pre>
       * The first axis to flatten: all preceding axes are retained in the output.
       * May be negative to index from the end (e.g., -1 for the last axis).
       * </pre>
       */
      public boolean hasAxis() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 axis = 1 [default = 1];</code>
       *
       * <pre>
       * The first axis to flatten: all preceding axes are retained in the output.
       * May be negative to index from the end (e.g., -1 for the last axis).
       * </pre>
       */
      public int getAxis() {
        return axis_;
      }
      /**
       * <code>optional int32 axis = 1 [default = 1];</code>
       *
       * <pre>
       * The first axis to flatten: all preceding axes are retained in the output.
       * May be negative to index from the end (e.g., -1 for the last axis).
       * </pre>
       */
      public Builder setAxis(int value) {
        bitField0_ |= 0x00000001;
        axis_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 axis = 1 [default = 1];</code>
       *
       * <pre>
       * The first axis to flatten: all preceding axes are retained in the output.
       * May be negative to index from the end (e.g., -1 for the last axis).
       * </pre>
       */
      public Builder clearAxis() {
        bitField0_ = (bitField0_ & ~0x00000001);
        axis_ = 1;
        onChanged();
        return this;
      }

      // optional int32 end_axis = 2 [default = -1];
      private int endAxis_ = -1;
      /**
       * <code>optional int32 end_axis = 2 [default = -1];</code>
       *
       * <pre>
       * The last axis to flatten: all following axes are retained in the output.
       * May be negative to index from the end (e.g., the default -1 for the last
       * axis).
       * </pre>
       */
      public boolean hasEndAxis() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 end_axis = 2 [default = -1];</code>
       *
       * <pre>
       * The last axis to flatten: all following axes are retained in the output.
       * May be negative to index from the end (e.g., the default -1 for the last
       * axis).
       * </pre>
       */
      public int getEndAxis() {
        return endAxis_;
      }
      /**
       * <code>optional int32 end_axis = 2 [default = -1];</code>
       *
       * <pre>
       * The last axis to flatten: all following axes are retained in the output.
       * May be negative to index from the end (e.g., the default -1 for the last
       * axis).
       * </pre>
       */
      public Builder setEndAxis(int value) {
        bitField0_ |= 0x00000002;
        endAxis_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 end_axis = 2 [default = -1];</code>
       *
       * <pre>
       * The last axis to flatten: all following axes are retained in the output.
       * May be negative to index from the end (e.g., the default -1 for the last
       * axis).
       * </pre>
       */
      public Builder clearEndAxis() {
        bitField0_ = (bitField0_ & ~0x00000002);
        endAxis_ = -1;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.FlattenParameter)
    }

    static {
      defaultInstance = new FlattenParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.FlattenParameter)
  }

  public interface HDF5DataParameterOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional string source = 1;
    /**
     * <code>optional string source = 1;</code>
     *
     * <pre>
     * Specify the data source.
     * </pre>
     */
    boolean hasSource();
    /**
     * <code>optional string source = 1;</code>
     *
     * <pre>
     * Specify the data source.
     * </pre>
     */
    java.lang.String getSource();
    /**
     * <code>optional string source = 1;</code>
     *
     * <pre>
     * Specify the data source.
     * </pre>
     */
    com.google.protobuf.ByteString
        getSourceBytes();

    // optional uint32 batch_size = 2;
    /**
     * <code>optional uint32 batch_size = 2;</code>
     *
     * <pre>
     * Specify the batch size.
     * </pre>
     */
    boolean hasBatchSize();
    /**
     * <code>optional uint32 batch_size = 2;</code>
     *
     * <pre>
     * Specify the batch size.
     * </pre>
     */
    int getBatchSize();

    // optional bool shuffle = 3 [default = false];
    /**
     * <code>optional bool shuffle = 3 [default = false];</code>
     *
     * <pre>
     * Specify whether to shuffle the data.
     * If shuffle == true, the ordering of the HDF5 files is shuffled,
     * and the ordering of data within any given HDF5 file is shuffled,
     * but data between different files are not interleaved; all of a file's
     * data are output (in a random order) before moving onto another file.
     * </pre>
     */
    boolean hasShuffle();
    /**
     * <code>optional bool shuffle = 3 [default = false];</code>
     *
     * <pre>
     * Specify whether to shuffle the data.
     * If shuffle == true, the ordering of the HDF5 files is shuffled,
     * and the ordering of data within any given HDF5 file is shuffled,
     * but data between different files are not interleaved; all of a file's
     * data are output (in a random order) before moving onto another file.
     * </pre>
     */
    boolean getShuffle();
  }
  /**
   * Protobuf type {@code caffe.HDF5DataParameter}
   *
   * <pre>
   * Message that stores parameters used by HDF5DataLayer
   * </pre>
   */
  public static final class HDF5DataParameter extends
      com.google.protobuf.GeneratedMessage
      implements HDF5DataParameterOrBuilder {
    // Use HDF5DataParameter.newBuilder() to construct.
    private HDF5DataParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private HDF5DataParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final HDF5DataParameter defaultInstance;
    public static HDF5DataParameter getDefaultInstance() {
      return defaultInstance;
    }

    public HDF5DataParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private HDF5DataParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              source_ = input.readBytes();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              batchSize_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              shuffle_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_HDF5DataParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_HDF5DataParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.HDF5DataParameter.class, caffe.Caffe.HDF5DataParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<HDF5DataParameter> PARSER =
        new com.google.protobuf.AbstractParser<HDF5DataParameter>() {
      public HDF5DataParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new HDF5DataParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<HDF5DataParameter> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional string source = 1;
    public static final int SOURCE_FIELD_NUMBER = 1;
    private java.lang.Object source_;
    /**
     * <code>optional string source = 1;</code>
     *
     * <pre>
     * Specify the data source.
     * </pre>
     */
    public boolean hasSource() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string source = 1;</code>
     *
     * <pre>
     * Specify the data source.
     * </pre>
     */
    public java.lang.String getSource() {
      java.lang.Object ref = source_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          source_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string source = 1;</code>
     *
     * <pre>
     * Specify the data source.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getSourceBytes() {
      java.lang.Object ref = source_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        source_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional uint32 batch_size = 2;
    public static final int BATCH_SIZE_FIELD_NUMBER = 2;
    private int batchSize_;
    /**
     * <code>optional uint32 batch_size = 2;</code>
     *
     * <pre>
     * Specify the batch size.
     * </pre>
     */
    public boolean hasBatchSize() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 batch_size = 2;</code>
     *
     * <pre>
     * Specify the batch size.
     * </pre>
     */
    public int getBatchSize() {
      return batchSize_;
    }

    // optional bool shuffle = 3 [default = false];
    public static final int SHUFFLE_FIELD_NUMBER = 3;
    private boolean shuffle_;
    /**
     * <code>optional bool shuffle = 3 [default = false];</code>
     *
     * <pre>
     * Specify whether to shuffle the data.
     * If shuffle == true, the ordering of the HDF5 files is shuffled,
     * and the ordering of data within any given HDF5 file is shuffled,
     * but data between different files are not interleaved; all of a file's
     * data are output (in a random order) before moving onto another file.
     * </pre>
     */
    public boolean hasShuffle() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional bool shuffle = 3 [default = false];</code>
     *
     * <pre>
     * Specify whether to shuffle the data.
     * If shuffle == true, the ordering of the HDF5 files is shuffled,
     * and the ordering of data within any given HDF5 file is shuffled,
     * but data between different files are not interleaved; all of a file's
     * data are output (in a random order) before moving onto another file.
     * </pre>
     */
    public boolean getShuffle() {
      return shuffle_;
    }

    private void initFields() {
      source_ = "";
      batchSize_ = 0;
      shuffle_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getSourceBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, batchSize_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBool(3, shuffle_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getSourceBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, batchSize_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, shuffle_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.HDF5DataParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.HDF5DataParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.HDF5DataParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.HDF5DataParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.HDF5DataParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.HDF5DataParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.HDF5DataParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.HDF5DataParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.HDF5DataParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.HDF5DataParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.HDF5DataParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.HDF5DataParameter}
     *
     * <pre>
     * Message that stores parameters used by HDF5DataLayer
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements caffe.Caffe.HDF5DataParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_HDF5DataParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_HDF5DataParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.HDF5DataParameter.class, caffe.Caffe.HDF5DataParameter.Builder.class);
      }

      // Construct using caffe.Caffe.HDF5DataParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        source_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        batchSize_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        shuffle_ = false;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_HDF5DataParameter_descriptor;
      }

      public caffe.Caffe.HDF5DataParameter getDefaultInstanceForType() {
        return caffe.Caffe.HDF5DataParameter.getDefaultInstance();
      }

      public caffe.Caffe.HDF5DataParameter build() {
        caffe.Caffe.HDF5DataParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.HDF5DataParameter buildPartial() {
        caffe.Caffe.HDF5DataParameter result = new caffe.Caffe.HDF5DataParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.source_ = source_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.batchSize_ = batchSize_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.shuffle_ = shuffle_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.HDF5DataParameter) {
          return mergeFrom((caffe.Caffe.HDF5DataParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.HDF5DataParameter other) {
        if (other == caffe.Caffe.HDF5DataParameter.getDefaultInstance()) return this;
        if (other.hasSource()) {
          bitField0_ |= 0x00000001;
          source_ = other.source_;
          onChanged();
        }
        if (other.hasBatchSize()) {
          setBatchSize(other.getBatchSize());
        }
        if (other.hasShuffle()) {
          setShuffle(other.getShuffle());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.HDF5DataParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.HDF5DataParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional string source = 1;
      private java.lang.Object source_ = "";
      /**
       * <code>optional string source = 1;</code>
       *
       * <pre>
       * Specify the data source.
       * </pre>
       */
      public boolean hasSource() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string source = 1;</code>
       *
       * <pre>
       * Specify the data source.
       * </pre>
       */
      public java.lang.String getSource() {
        java.lang.Object ref = source_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          source_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string source = 1;</code>
       *
       * <pre>
       * Specify the data source.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getSourceBytes() {
        java.lang.Object ref = source_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          source_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string source = 1;</code>
       *
       * <pre>
       * Specify the data source.
       * </pre>
       */
      public Builder setSource(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        source_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string source = 1;</code>
       *
       * <pre>
       * Specify the data source.
       * </pre>
       */
      public Builder clearSource() {
        bitField0_ = (bitField0_ & ~0x00000001);
        source_ = getDefaultInstance().getSource();
        onChanged();
        return this;
      }
      /**
       * <code>optional string source = 1;</code>
       *
       * <pre>
       * Specify the data source.
       * </pre>
       */
      public Builder setSourceBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        source_ = value;
        onChanged();
        return this;
      }

      // optional uint32 batch_size = 2;
      private int batchSize_ ;
      /**
       * <code>optional uint32 batch_size = 2;</code>
       *
       * <pre>
       * Specify the batch size.
       * </pre>
       */
      public boolean hasBatchSize() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 batch_size = 2;</code>
       *
       * <pre>
       * Specify the batch size.
       * </pre>
       */
      public int getBatchSize() {
        return batchSize_;
      }
      /**
       * <code>optional uint32 batch_size = 2;</code>
       *
       * <pre>
       * Specify the batch size.
       * </pre>
       */
      public Builder setBatchSize(int value) {
        bitField0_ |= 0x00000002;
        batchSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 batch_size = 2;</code>
       *
       * <pre>
       * Specify the batch size.
       * </pre>
       */
      public Builder clearBatchSize() {
        bitField0_ = (bitField0_ & ~0x00000002);
        batchSize_ = 0;
        onChanged();
        return this;
      }

      // optional bool shuffle = 3 [default = false];
      private boolean shuffle_ ;
      /**
       * <code>optional bool shuffle = 3 [default = false];</code>
       *
       * <pre>
       * Specify whether to shuffle the data.
       * If shuffle == true, the ordering of the HDF5 files is shuffled,
       * and the ordering of data within any given HDF5 file is shuffled,
       * but data between different files are not interleaved; all of a file's
       * data are output (in a random order) before moving onto another file.
       * </pre>
       */
      public boolean hasShuffle() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional bool shuffle = 3 [default = false];</code>
       *
       * <pre>
       * Specify whether to shuffle the data.
       * If shuffle == true, the ordering of the HDF5 files is shuffled,
       * and the ordering of data within any given HDF5 file is shuffled,
       * but data between different files are not interleaved; all of a file's
       * data are output (in a random order) before moving onto another file.
       * </pre>
       */
      public boolean getShuffle() {
        return shuffle_;
      }
      /**
       * <code>optional bool shuffle = 3 [default = false];</code>
       *
       * <pre>
       * Specify whether to shuffle the data.
       * If shuffle == true, the ordering of the HDF5 files is shuffled,
       * and the ordering of data within any given HDF5 file is shuffled,
       * but data between different files are not interleaved; all of a file's
       * data are output (in a random order) before moving onto another file.
       * </pre>
       */
      public Builder setShuffle(boolean value) {
        bitField0_ |= 0x00000004;
        shuffle_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool shuffle = 3 [default = false];</code>
       *
       * <pre>
       * Specify whether to shuffle the data.
       * If shuffle == true, the ordering of the HDF5 files is shuffled,
       * and the ordering of data within any given HDF5 file is shuffled,
       * but data between different files are not interleaved; all of a file's
       * data are output (in a random order) before moving onto another file.
       * </pre>
       */
      public Builder clearShuffle() {
        bitField0_ = (bitField0_ & ~0x00000004);
        shuffle_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.HDF5DataParameter)
    }

    static {
      defaultInstance = new HDF5DataParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.HDF5DataParameter)
  }

  public interface HDF5OutputParameterOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional string file_name = 1;
    /**
     * <code>optional string file_name = 1;</code>
     */
    boolean hasFileName();
    /**
     * <code>optional string file_name = 1;</code>
     */
    java.lang.String getFileName();
    /**
     * <code>optional string file_name = 1;</code>
     */
    com.google.protobuf.ByteString
        getFileNameBytes();
  }
  /**
   * Protobuf type {@code caffe.HDF5OutputParameter}
   */
  public static final class HDF5OutputParameter extends
      com.google.protobuf.GeneratedMessage
      implements HDF5OutputParameterOrBuilder {
    // Use HDF5OutputParameter.newBuilder() to construct.
    private HDF5OutputParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private HDF5OutputParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final HDF5OutputParameter defaultInstance;
    public static HDF5OutputParameter getDefaultInstance() {
      return defaultInstance;
    }

    public HDF5OutputParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private HDF5OutputParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              fileName_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_HDF5OutputParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_HDF5OutputParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.HDF5OutputParameter.class, caffe.Caffe.HDF5OutputParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<HDF5OutputParameter> PARSER =
        new com.google.protobuf.AbstractParser<HDF5OutputParameter>() {
      public HDF5OutputParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new HDF5OutputParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<HDF5OutputParameter> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional string file_name = 1;
    public static final int FILE_NAME_FIELD_NUMBER = 1;
    private java.lang.Object fileName_;
    /**
     * <code>optional string file_name = 1;</code>
     */
    public boolean hasFileName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string file_name = 1;</code>
     */
    public java.lang.String getFileName() {
      java.lang.Object ref = fileName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          fileName_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string file_name = 1;</code>
     */
    public com.google.protobuf.ByteString
        getFileNameBytes() {
      java.lang.Object ref = fileName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        fileName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      fileName_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getFileNameBytes());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getFileNameBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.HDF5OutputParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.HDF5OutputParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.HDF5OutputParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.HDF5OutputParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.HDF5OutputParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.HDF5OutputParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.HDF5OutputParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.HDF5OutputParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.HDF5OutputParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.HDF5OutputParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.HDF5OutputParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.HDF5OutputParameter}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements caffe.Caffe.HDF5OutputParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_HDF5OutputParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_HDF5OutputParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.HDF5OutputParameter.class, caffe.Caffe.HDF5OutputParameter.Builder.class);
      }

      // Construct using caffe.Caffe.HDF5OutputParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        fileName_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_HDF5OutputParameter_descriptor;
      }

      public caffe.Caffe.HDF5OutputParameter getDefaultInstanceForType() {
        return caffe.Caffe.HDF5OutputParameter.getDefaultInstance();
      }

      public caffe.Caffe.HDF5OutputParameter build() {
        caffe.Caffe.HDF5OutputParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.HDF5OutputParameter buildPartial() {
        caffe.Caffe.HDF5OutputParameter result = new caffe.Caffe.HDF5OutputParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.fileName_ = fileName_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.HDF5OutputParameter) {
          return mergeFrom((caffe.Caffe.HDF5OutputParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.HDF5OutputParameter other) {
        if (other == caffe.Caffe.HDF5OutputParameter.getDefaultInstance()) return this;
        if (other.hasFileName()) {
          bitField0_ |= 0x00000001;
          fileName_ = other.fileName_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.HDF5OutputParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.HDF5OutputParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional string file_name = 1;
      private java.lang.Object fileName_ = "";
      /**
       * <code>optional string file_name = 1;</code>
       */
      public boolean hasFileName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string file_name = 1;</code>
       */
      public java.lang.String getFileName() {
        java.lang.Object ref = fileName_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          fileName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string file_name = 1;</code>
       */
      public com.google.protobuf.ByteString
          getFileNameBytes() {
        java.lang.Object ref = fileName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          fileName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string file_name = 1;</code>
       */
      public Builder setFileName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        fileName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string file_name = 1;</code>
       */
      public Builder clearFileName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        fileName_ = getDefaultInstance().getFileName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string file_name = 1;</code>
       */
      public Builder setFileNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        fileName_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.HDF5OutputParameter)
    }

    static {
      defaultInstance = new HDF5OutputParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.HDF5OutputParameter)
  }

  public interface HingeLossParameterOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional .caffe.HingeLossParameter.Norm norm = 1 [default = L1];
    /**
     * <code>optional .caffe.HingeLossParameter.Norm norm = 1 [default = L1];</code>
     *
     * <pre>
     * Specify the Norm to use L1 or L2
     * </pre>
     */
    boolean hasNorm();
    /**
     * <code>optional .caffe.HingeLossParameter.Norm norm = 1 [default = L1];</code>
     *
     * <pre>
     * Specify the Norm to use L1 or L2
     * </pre>
     */
    caffe.Caffe.HingeLossParameter.Norm getNorm();
  }
  /**
   * Protobuf type {@code caffe.HingeLossParameter}
   */
  public static final class HingeLossParameter extends
      com.google.protobuf.GeneratedMessage
      implements HingeLossParameterOrBuilder {
    // Use HingeLossParameter.newBuilder() to construct.
    private HingeLossParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private HingeLossParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final HingeLossParameter defaultInstance;
    public static HingeLossParameter getDefaultInstance() {
      return defaultInstance;
    }

    public HingeLossParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private HingeLossParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              caffe.Caffe.HingeLossParameter.Norm value = caffe.Caffe.HingeLossParameter.Norm.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                norm_ = value;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_HingeLossParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_HingeLossParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.HingeLossParameter.class, caffe.Caffe.HingeLossParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<HingeLossParameter> PARSER =
        new com.google.protobuf.AbstractParser<HingeLossParameter>() {
      public HingeLossParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new HingeLossParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<HingeLossParameter> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code caffe.HingeLossParameter.Norm}
     */
    public enum Norm
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>L1 = 1;</code>
       */
      L1(0, 1),
      /**
       * <code>L2 = 2;</code>
       */
      L2(1, 2),
      ;

      /**
       * <code>L1 = 1;</code>
       */
      public static final int L1_VALUE = 1;
      /**
       * <code>L2 = 2;</code>
       */
      public static final int L2_VALUE = 2;


      public final int getNumber() { return value; }

      public static Norm valueOf(int value) {
        switch (value) {
          case 1: return L1;
          case 2: return L2;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Norm>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<Norm>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Norm>() {
              public Norm findValueByNumber(int number) {
                return Norm.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return caffe.Caffe.HingeLossParameter.getDescriptor().getEnumTypes().get(0);
      }

      private static final Norm[] VALUES = values();

      public static Norm valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private Norm(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:caffe.HingeLossParameter.Norm)
    }

    private int bitField0_;
    // optional .caffe.HingeLossParameter.Norm norm = 1 [default = L1];
    public static final int NORM_FIELD_NUMBER = 1;
    private caffe.Caffe.HingeLossParameter.Norm norm_;
    /**
     * <code>optional .caffe.HingeLossParameter.Norm norm = 1 [default = L1];</code>
     *
     * <pre>
     * Specify the Norm to use L1 or L2
     * </pre>
     */
    public boolean hasNorm() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .caffe.HingeLossParameter.Norm norm = 1 [default = L1];</code>
     *
     * <pre>
     * Specify the Norm to use L1 or L2
     * </pre>
     */
    public caffe.Caffe.HingeLossParameter.Norm getNorm() {
      return norm_;
    }

    private void initFields() {
      norm_ = caffe.Caffe.HingeLossParameter.Norm.L1;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, norm_.getNumber());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, norm_.getNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.HingeLossParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.HingeLossParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.HingeLossParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.HingeLossParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.HingeLossParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.HingeLossParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.HingeLossParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.HingeLossParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.HingeLossParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.HingeLossParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.HingeLossParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.HingeLossParameter}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements caffe.Caffe.HingeLossParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_HingeLossParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_HingeLossParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.HingeLossParameter.class, caffe.Caffe.HingeLossParameter.Builder.class);
      }

      // Construct using caffe.Caffe.HingeLossParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        norm_ = caffe.Caffe.HingeLossParameter.Norm.L1;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_HingeLossParameter_descriptor;
      }

      public caffe.Caffe.HingeLossParameter getDefaultInstanceForType() {
        return caffe.Caffe.HingeLossParameter.getDefaultInstance();
      }

      public caffe.Caffe.HingeLossParameter build() {
        caffe.Caffe.HingeLossParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.HingeLossParameter buildPartial() {
        caffe.Caffe.HingeLossParameter result = new caffe.Caffe.HingeLossParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.norm_ = norm_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.HingeLossParameter) {
          return mergeFrom((caffe.Caffe.HingeLossParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.HingeLossParameter other) {
        if (other == caffe.Caffe.HingeLossParameter.getDefaultInstance()) return this;
        if (other.hasNorm()) {
          setNorm(other.getNorm());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.HingeLossParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.HingeLossParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .caffe.HingeLossParameter.Norm norm = 1 [default = L1];
      private caffe.Caffe.HingeLossParameter.Norm norm_ = caffe.Caffe.HingeLossParameter.Norm.L1;
      /**
       * <code>optional .caffe.HingeLossParameter.Norm norm = 1 [default = L1];</code>
       *
       * <pre>
       * Specify the Norm to use L1 or L2
       * </pre>
       */
      public boolean hasNorm() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .caffe.HingeLossParameter.Norm norm = 1 [default = L1];</code>
       *
       * <pre>
       * Specify the Norm to use L1 or L2
       * </pre>
       */
      public caffe.Caffe.HingeLossParameter.Norm getNorm() {
        return norm_;
      }
      /**
       * <code>optional .caffe.HingeLossParameter.Norm norm = 1 [default = L1];</code>
       *
       * <pre>
       * Specify the Norm to use L1 or L2
       * </pre>
       */
      public Builder setNorm(caffe.Caffe.HingeLossParameter.Norm value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        norm_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .caffe.HingeLossParameter.Norm norm = 1 [default = L1];</code>
       *
       * <pre>
       * Specify the Norm to use L1 or L2
       * </pre>
       */
      public Builder clearNorm() {
        bitField0_ = (bitField0_ & ~0x00000001);
        norm_ = caffe.Caffe.HingeLossParameter.Norm.L1;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.HingeLossParameter)
    }

    static {
      defaultInstance = new HingeLossParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.HingeLossParameter)
  }

  public interface ImageDataParameterOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional string source = 1;
    /**
     * <code>optional string source = 1;</code>
     *
     * <pre>
     * Specify the data source.
     * </pre>
     */
    boolean hasSource();
    /**
     * <code>optional string source = 1;</code>
     *
     * <pre>
     * Specify the data source.
     * </pre>
     */
    java.lang.String getSource();
    /**
     * <code>optional string source = 1;</code>
     *
     * <pre>
     * Specify the data source.
     * </pre>
     */
    com.google.protobuf.ByteString
        getSourceBytes();

    // optional uint32 batch_size = 4 [default = 1];
    /**
     * <code>optional uint32 batch_size = 4 [default = 1];</code>
     *
     * <pre>
     * Specify the batch size.
     * </pre>
     */
    boolean hasBatchSize();
    /**
     * <code>optional uint32 batch_size = 4 [default = 1];</code>
     *
     * <pre>
     * Specify the batch size.
     * </pre>
     */
    int getBatchSize();

    // optional uint32 rand_skip = 7 [default = 0];
    /**
     * <code>optional uint32 rand_skip = 7 [default = 0];</code>
     *
     * <pre>
     * The rand_skip variable is for the data layer to skip a few data points
     * to avoid all asynchronous sgd clients to start at the same point. The skip
     * point would be set as rand_skip * rand(0,1). Note that rand_skip should not
     * be larger than the number of keys in the database.
     * </pre>
     */
    boolean hasRandSkip();
    /**
     * <code>optional uint32 rand_skip = 7 [default = 0];</code>
     *
     * <pre>
     * The rand_skip variable is for the data layer to skip a few data points
     * to avoid all asynchronous sgd clients to start at the same point. The skip
     * point would be set as rand_skip * rand(0,1). Note that rand_skip should not
     * be larger than the number of keys in the database.
     * </pre>
     */
    int getRandSkip();

    // optional bool shuffle = 8 [default = false];
    /**
     * <code>optional bool shuffle = 8 [default = false];</code>
     *
     * <pre>
     * Whether or not ImageLayer should shuffle the list of files at every epoch.
     * </pre>
     */
    boolean hasShuffle();
    /**
     * <code>optional bool shuffle = 8 [default = false];</code>
     *
     * <pre>
     * Whether or not ImageLayer should shuffle the list of files at every epoch.
     * </pre>
     */
    boolean getShuffle();

    // optional uint32 new_height = 9 [default = 0];
    /**
     * <code>optional uint32 new_height = 9 [default = 0];</code>
     *
     * <pre>
     * It will also resize images if new_height or new_width are not zero.
     * </pre>
     */
    boolean hasNewHeight();
    /**
     * <code>optional uint32 new_height = 9 [default = 0];</code>
     *
     * <pre>
     * It will also resize images if new_height or new_width are not zero.
     * </pre>
     */
    int getNewHeight();

    // optional uint32 new_width = 10 [default = 0];
    /**
     * <code>optional uint32 new_width = 10 [default = 0];</code>
     */
    boolean hasNewWidth();
    /**
     * <code>optional uint32 new_width = 10 [default = 0];</code>
     */
    int getNewWidth();

    // optional bool is_color = 11 [default = true];
    /**
     * <code>optional bool is_color = 11 [default = true];</code>
     *
     * <pre>
     * Specify if the images are color or gray
     * </pre>
     */
    boolean hasIsColor();
    /**
     * <code>optional bool is_color = 11 [default = true];</code>
     *
     * <pre>
     * Specify if the images are color or gray
     * </pre>
     */
    boolean getIsColor();

    // optional float scale = 2 [default = 1];
    /**
     * <code>optional float scale = 2 [default = 1];</code>
     *
     * <pre>
     * DEPRECATED. See TransformationParameter. For data pre-processing, we can do
     * simple scaling and subtracting the data mean, if provided. Note that the
     * mean subtraction is always carried out before scaling.
     * </pre>
     */
    boolean hasScale();
    /**
     * <code>optional float scale = 2 [default = 1];</code>
     *
     * <pre>
     * DEPRECATED. See TransformationParameter. For data pre-processing, we can do
     * simple scaling and subtracting the data mean, if provided. Note that the
     * mean subtraction is always carried out before scaling.
     * </pre>
     */
    float getScale();

    // optional string mean_file = 3;
    /**
     * <code>optional string mean_file = 3;</code>
     */
    boolean hasMeanFile();
    /**
     * <code>optional string mean_file = 3;</code>
     */
    java.lang.String getMeanFile();
    /**
     * <code>optional string mean_file = 3;</code>
     */
    com.google.protobuf.ByteString
        getMeanFileBytes();

    // optional uint32 crop_size = 5 [default = 0];
    /**
     * <code>optional uint32 crop_size = 5 [default = 0];</code>
     *
     * <pre>
     * DEPRECATED. See TransformationParameter. Specify if we would like to randomly
     * crop an image.
     * </pre>
     */
    boolean hasCropSize();
    /**
     * <code>optional uint32 crop_size = 5 [default = 0];</code>
     *
     * <pre>
     * DEPRECATED. See TransformationParameter. Specify if we would like to randomly
     * crop an image.
     * </pre>
     */
    int getCropSize();

    // optional bool mirror = 6 [default = false];
    /**
     * <code>optional bool mirror = 6 [default = false];</code>
     *
     * <pre>
     * DEPRECATED. See TransformationParameter. Specify if we want to randomly mirror
     * data.
     * </pre>
     */
    boolean hasMirror();
    /**
     * <code>optional bool mirror = 6 [default = false];</code>
     *
     * <pre>
     * DEPRECATED. See TransformationParameter. Specify if we want to randomly mirror
     * data.
     * </pre>
     */
    boolean getMirror();

    // optional string root_folder = 12 [default = ""];
    /**
     * <code>optional string root_folder = 12 [default = ""];</code>
     */
    boolean hasRootFolder();
    /**
     * <code>optional string root_folder = 12 [default = ""];</code>
     */
    java.lang.String getRootFolder();
    /**
     * <code>optional string root_folder = 12 [default = ""];</code>
     */
    com.google.protobuf.ByteString
        getRootFolderBytes();
  }
  /**
   * Protobuf type {@code caffe.ImageDataParameter}
   */
  public static final class ImageDataParameter extends
      com.google.protobuf.GeneratedMessage
      implements ImageDataParameterOrBuilder {
    // Use ImageDataParameter.newBuilder() to construct.
    private ImageDataParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ImageDataParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ImageDataParameter defaultInstance;
    public static ImageDataParameter getDefaultInstance() {
      return defaultInstance;
    }

    public ImageDataParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ImageDataParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              source_ = input.readBytes();
              break;
            }
            case 21: {
              bitField0_ |= 0x00000080;
              scale_ = input.readFloat();
              break;
            }
            case 26: {
              bitField0_ |= 0x00000100;
              meanFile_ = input.readBytes();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000002;
              batchSize_ = input.readUInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000200;
              cropSize_ = input.readUInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000400;
              mirror_ = input.readBool();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000004;
              randSkip_ = input.readUInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000008;
              shuffle_ = input.readBool();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000010;
              newHeight_ = input.readUInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000020;
              newWidth_ = input.readUInt32();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000040;
              isColor_ = input.readBool();
              break;
            }
            case 98: {
              bitField0_ |= 0x00000800;
              rootFolder_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_ImageDataParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_ImageDataParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.ImageDataParameter.class, caffe.Caffe.ImageDataParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<ImageDataParameter> PARSER =
        new com.google.protobuf.AbstractParser<ImageDataParameter>() {
      public ImageDataParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ImageDataParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ImageDataParameter> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional string source = 1;
    public static final int SOURCE_FIELD_NUMBER = 1;
    private java.lang.Object source_;
    /**
     * <code>optional string source = 1;</code>
     *
     * <pre>
     * Specify the data source.
     * </pre>
     */
    public boolean hasSource() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string source = 1;</code>
     *
     * <pre>
     * Specify the data source.
     * </pre>
     */
    public java.lang.String getSource() {
      java.lang.Object ref = source_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          source_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string source = 1;</code>
     *
     * <pre>
     * Specify the data source.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getSourceBytes() {
      java.lang.Object ref = source_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        source_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional uint32 batch_size = 4 [default = 1];
    public static final int BATCH_SIZE_FIELD_NUMBER = 4;
    private int batchSize_;
    /**
     * <code>optional uint32 batch_size = 4 [default = 1];</code>
     *
     * <pre>
     * Specify the batch size.
     * </pre>
     */
    public boolean hasBatchSize() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 batch_size = 4 [default = 1];</code>
     *
     * <pre>
     * Specify the batch size.
     * </pre>
     */
    public int getBatchSize() {
      return batchSize_;
    }

    // optional uint32 rand_skip = 7 [default = 0];
    public static final int RAND_SKIP_FIELD_NUMBER = 7;
    private int randSkip_;
    /**
     * <code>optional uint32 rand_skip = 7 [default = 0];</code>
     *
     * <pre>
     * The rand_skip variable is for the data layer to skip a few data points
     * to avoid all asynchronous sgd clients to start at the same point. The skip
     * point would be set as rand_skip * rand(0,1). Note that rand_skip should not
     * be larger than the number of keys in the database.
     * </pre>
     */
    public boolean hasRandSkip() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 rand_skip = 7 [default = 0];</code>
     *
     * <pre>
     * The rand_skip variable is for the data layer to skip a few data points
     * to avoid all asynchronous sgd clients to start at the same point. The skip
     * point would be set as rand_skip * rand(0,1). Note that rand_skip should not
     * be larger than the number of keys in the database.
     * </pre>
     */
    public int getRandSkip() {
      return randSkip_;
    }

    // optional bool shuffle = 8 [default = false];
    public static final int SHUFFLE_FIELD_NUMBER = 8;
    private boolean shuffle_;
    /**
     * <code>optional bool shuffle = 8 [default = false];</code>
     *
     * <pre>
     * Whether or not ImageLayer should shuffle the list of files at every epoch.
     * </pre>
     */
    public boolean hasShuffle() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional bool shuffle = 8 [default = false];</code>
     *
     * <pre>
     * Whether or not ImageLayer should shuffle the list of files at every epoch.
     * </pre>
     */
    public boolean getShuffle() {
      return shuffle_;
    }

    // optional uint32 new_height = 9 [default = 0];
    public static final int NEW_HEIGHT_FIELD_NUMBER = 9;
    private int newHeight_;
    /**
     * <code>optional uint32 new_height = 9 [default = 0];</code>
     *
     * <pre>
     * It will also resize images if new_height or new_width are not zero.
     * </pre>
     */
    public boolean hasNewHeight() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional uint32 new_height = 9 [default = 0];</code>
     *
     * <pre>
     * It will also resize images if new_height or new_width are not zero.
     * </pre>
     */
    public int getNewHeight() {
      return newHeight_;
    }

    // optional uint32 new_width = 10 [default = 0];
    public static final int NEW_WIDTH_FIELD_NUMBER = 10;
    private int newWidth_;
    /**
     * <code>optional uint32 new_width = 10 [default = 0];</code>
     */
    public boolean hasNewWidth() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional uint32 new_width = 10 [default = 0];</code>
     */
    public int getNewWidth() {
      return newWidth_;
    }

    // optional bool is_color = 11 [default = true];
    public static final int IS_COLOR_FIELD_NUMBER = 11;
    private boolean isColor_;
    /**
     * <code>optional bool is_color = 11 [default = true];</code>
     *
     * <pre>
     * Specify if the images are color or gray
     * </pre>
     */
    public boolean hasIsColor() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional bool is_color = 11 [default = true];</code>
     *
     * <pre>
     * Specify if the images are color or gray
     * </pre>
     */
    public boolean getIsColor() {
      return isColor_;
    }

    // optional float scale = 2 [default = 1];
    public static final int SCALE_FIELD_NUMBER = 2;
    private float scale_;
    /**
     * <code>optional float scale = 2 [default = 1];</code>
     *
     * <pre>
     * DEPRECATED. See TransformationParameter. For data pre-processing, we can do
     * simple scaling and subtracting the data mean, if provided. Note that the
     * mean subtraction is always carried out before scaling.
     * </pre>
     */
    public boolean hasScale() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional float scale = 2 [default = 1];</code>
     *
     * <pre>
     * DEPRECATED. See TransformationParameter. For data pre-processing, we can do
     * simple scaling and subtracting the data mean, if provided. Note that the
     * mean subtraction is always carried out before scaling.
     * </pre>
     */
    public float getScale() {
      return scale_;
    }

    // optional string mean_file = 3;
    public static final int MEAN_FILE_FIELD_NUMBER = 3;
    private java.lang.Object meanFile_;
    /**
     * <code>optional string mean_file = 3;</code>
     */
    public boolean hasMeanFile() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional string mean_file = 3;</code>
     */
    public java.lang.String getMeanFile() {
      java.lang.Object ref = meanFile_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          meanFile_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string mean_file = 3;</code>
     */
    public com.google.protobuf.ByteString
        getMeanFileBytes() {
      java.lang.Object ref = meanFile_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        meanFile_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional uint32 crop_size = 5 [default = 0];
    public static final int CROP_SIZE_FIELD_NUMBER = 5;
    private int cropSize_;
    /**
     * <code>optional uint32 crop_size = 5 [default = 0];</code>
     *
     * <pre>
     * DEPRECATED. See TransformationParameter. Specify if we would like to randomly
     * crop an image.
     * </pre>
     */
    public boolean hasCropSize() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional uint32 crop_size = 5 [default = 0];</code>
     *
     * <pre>
     * DEPRECATED. See TransformationParameter. Specify if we would like to randomly
     * crop an image.
     * </pre>
     */
    public int getCropSize() {
      return cropSize_;
    }

    // optional bool mirror = 6 [default = false];
    public static final int MIRROR_FIELD_NUMBER = 6;
    private boolean mirror_;
    /**
     * <code>optional bool mirror = 6 [default = false];</code>
     *
     * <pre>
     * DEPRECATED. See TransformationParameter. Specify if we want to randomly mirror
     * data.
     * </pre>
     */
    public boolean hasMirror() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional bool mirror = 6 [default = false];</code>
     *
     * <pre>
     * DEPRECATED. See TransformationParameter. Specify if we want to randomly mirror
     * data.
     * </pre>
     */
    public boolean getMirror() {
      return mirror_;
    }

    // optional string root_folder = 12 [default = ""];
    public static final int ROOT_FOLDER_FIELD_NUMBER = 12;
    private java.lang.Object rootFolder_;
    /**
     * <code>optional string root_folder = 12 [default = ""];</code>
     */
    public boolean hasRootFolder() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional string root_folder = 12 [default = ""];</code>
     */
    public java.lang.String getRootFolder() {
      java.lang.Object ref = rootFolder_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          rootFolder_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string root_folder = 12 [default = ""];</code>
     */
    public com.google.protobuf.ByteString
        getRootFolderBytes() {
      java.lang.Object ref = rootFolder_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        rootFolder_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      source_ = "";
      batchSize_ = 1;
      randSkip_ = 0;
      shuffle_ = false;
      newHeight_ = 0;
      newWidth_ = 0;
      isColor_ = true;
      scale_ = 1F;
      meanFile_ = "";
      cropSize_ = 0;
      mirror_ = false;
      rootFolder_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getSourceBytes());
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeFloat(2, scale_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeBytes(3, getMeanFileBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(4, batchSize_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeUInt32(5, cropSize_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeBool(6, mirror_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(7, randSkip_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBool(8, shuffle_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(9, newHeight_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeUInt32(10, newWidth_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeBool(11, isColor_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeBytes(12, getRootFolderBytes());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getSourceBytes());
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, scale_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getMeanFileBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, batchSize_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, cropSize_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, mirror_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, randSkip_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(8, shuffle_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(9, newHeight_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(10, newWidth_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(11, isColor_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(12, getRootFolderBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.ImageDataParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.ImageDataParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.ImageDataParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.ImageDataParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.ImageDataParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.ImageDataParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.ImageDataParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.ImageDataParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.ImageDataParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.ImageDataParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.ImageDataParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.ImageDataParameter}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements caffe.Caffe.ImageDataParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_ImageDataParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_ImageDataParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.ImageDataParameter.class, caffe.Caffe.ImageDataParameter.Builder.class);
      }

      // Construct using caffe.Caffe.ImageDataParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        source_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        batchSize_ = 1;
        bitField0_ = (bitField0_ & ~0x00000002);
        randSkip_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        shuffle_ = false;
        bitField0_ = (bitField0_ & ~0x00000008);
        newHeight_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        newWidth_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        isColor_ = true;
        bitField0_ = (bitField0_ & ~0x00000040);
        scale_ = 1F;
        bitField0_ = (bitField0_ & ~0x00000080);
        meanFile_ = "";
        bitField0_ = (bitField0_ & ~0x00000100);
        cropSize_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        mirror_ = false;
        bitField0_ = (bitField0_ & ~0x00000400);
        rootFolder_ = "";
        bitField0_ = (bitField0_ & ~0x00000800);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_ImageDataParameter_descriptor;
      }

      public caffe.Caffe.ImageDataParameter getDefaultInstanceForType() {
        return caffe.Caffe.ImageDataParameter.getDefaultInstance();
      }

      public caffe.Caffe.ImageDataParameter build() {
        caffe.Caffe.ImageDataParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.ImageDataParameter buildPartial() {
        caffe.Caffe.ImageDataParameter result = new caffe.Caffe.ImageDataParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.source_ = source_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.batchSize_ = batchSize_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.randSkip_ = randSkip_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.shuffle_ = shuffle_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.newHeight_ = newHeight_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.newWidth_ = newWidth_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.isColor_ = isColor_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.scale_ = scale_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.meanFile_ = meanFile_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.cropSize_ = cropSize_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.mirror_ = mirror_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.rootFolder_ = rootFolder_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.ImageDataParameter) {
          return mergeFrom((caffe.Caffe.ImageDataParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.ImageDataParameter other) {
        if (other == caffe.Caffe.ImageDataParameter.getDefaultInstance()) return this;
        if (other.hasSource()) {
          bitField0_ |= 0x00000001;
          source_ = other.source_;
          onChanged();
        }
        if (other.hasBatchSize()) {
          setBatchSize(other.getBatchSize());
        }
        if (other.hasRandSkip()) {
          setRandSkip(other.getRandSkip());
        }
        if (other.hasShuffle()) {
          setShuffle(other.getShuffle());
        }
        if (other.hasNewHeight()) {
          setNewHeight(other.getNewHeight());
        }
        if (other.hasNewWidth()) {
          setNewWidth(other.getNewWidth());
        }
        if (other.hasIsColor()) {
          setIsColor(other.getIsColor());
        }
        if (other.hasScale()) {
          setScale(other.getScale());
        }
        if (other.hasMeanFile()) {
          bitField0_ |= 0x00000100;
          meanFile_ = other.meanFile_;
          onChanged();
        }
        if (other.hasCropSize()) {
          setCropSize(other.getCropSize());
        }
        if (other.hasMirror()) {
          setMirror(other.getMirror());
        }
        if (other.hasRootFolder()) {
          bitField0_ |= 0x00000800;
          rootFolder_ = other.rootFolder_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.ImageDataParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.ImageDataParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional string source = 1;
      private java.lang.Object source_ = "";
      /**
       * <code>optional string source = 1;</code>
       *
       * <pre>
       * Specify the data source.
       * </pre>
       */
      public boolean hasSource() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string source = 1;</code>
       *
       * <pre>
       * Specify the data source.
       * </pre>
       */
      public java.lang.String getSource() {
        java.lang.Object ref = source_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          source_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string source = 1;</code>
       *
       * <pre>
       * Specify the data source.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getSourceBytes() {
        java.lang.Object ref = source_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          source_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string source = 1;</code>
       *
       * <pre>
       * Specify the data source.
       * </pre>
       */
      public Builder setSource(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        source_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string source = 1;</code>
       *
       * <pre>
       * Specify the data source.
       * </pre>
       */
      public Builder clearSource() {
        bitField0_ = (bitField0_ & ~0x00000001);
        source_ = getDefaultInstance().getSource();
        onChanged();
        return this;
      }
      /**
       * <code>optional string source = 1;</code>
       *
       * <pre>
       * Specify the data source.
       * </pre>
       */
      public Builder setSourceBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        source_ = value;
        onChanged();
        return this;
      }

      // optional uint32 batch_size = 4 [default = 1];
      private int batchSize_ = 1;
      /**
       * <code>optional uint32 batch_size = 4 [default = 1];</code>
       *
       * <pre>
       * Specify the batch size.
       * </pre>
       */
      public boolean hasBatchSize() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 batch_size = 4 [default = 1];</code>
       *
       * <pre>
       * Specify the batch size.
       * </pre>
       */
      public int getBatchSize() {
        return batchSize_;
      }
      /**
       * <code>optional uint32 batch_size = 4 [default = 1];</code>
       *
       * <pre>
       * Specify the batch size.
       * </pre>
       */
      public Builder setBatchSize(int value) {
        bitField0_ |= 0x00000002;
        batchSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 batch_size = 4 [default = 1];</code>
       *
       * <pre>
       * Specify the batch size.
       * </pre>
       */
      public Builder clearBatchSize() {
        bitField0_ = (bitField0_ & ~0x00000002);
        batchSize_ = 1;
        onChanged();
        return this;
      }

      // optional uint32 rand_skip = 7 [default = 0];
      private int randSkip_ ;
      /**
       * <code>optional uint32 rand_skip = 7 [default = 0];</code>
       *
       * <pre>
       * The rand_skip variable is for the data layer to skip a few data points
       * to avoid all asynchronous sgd clients to start at the same point. The skip
       * point would be set as rand_skip * rand(0,1). Note that rand_skip should not
       * be larger than the number of keys in the database.
       * </pre>
       */
      public boolean hasRandSkip() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 rand_skip = 7 [default = 0];</code>
       *
       * <pre>
       * The rand_skip variable is for the data layer to skip a few data points
       * to avoid all asynchronous sgd clients to start at the same point. The skip
       * point would be set as rand_skip * rand(0,1). Note that rand_skip should not
       * be larger than the number of keys in the database.
       * </pre>
       */
      public int getRandSkip() {
        return randSkip_;
      }
      /**
       * <code>optional uint32 rand_skip = 7 [default = 0];</code>
       *
       * <pre>
       * The rand_skip variable is for the data layer to skip a few data points
       * to avoid all asynchronous sgd clients to start at the same point. The skip
       * point would be set as rand_skip * rand(0,1). Note that rand_skip should not
       * be larger than the number of keys in the database.
       * </pre>
       */
      public Builder setRandSkip(int value) {
        bitField0_ |= 0x00000004;
        randSkip_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 rand_skip = 7 [default = 0];</code>
       *
       * <pre>
       * The rand_skip variable is for the data layer to skip a few data points
       * to avoid all asynchronous sgd clients to start at the same point. The skip
       * point would be set as rand_skip * rand(0,1). Note that rand_skip should not
       * be larger than the number of keys in the database.
       * </pre>
       */
      public Builder clearRandSkip() {
        bitField0_ = (bitField0_ & ~0x00000004);
        randSkip_ = 0;
        onChanged();
        return this;
      }

      // optional bool shuffle = 8 [default = false];
      private boolean shuffle_ ;
      /**
       * <code>optional bool shuffle = 8 [default = false];</code>
       *
       * <pre>
       * Whether or not ImageLayer should shuffle the list of files at every epoch.
       * </pre>
       */
      public boolean hasShuffle() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional bool shuffle = 8 [default = false];</code>
       *
       * <pre>
       * Whether or not ImageLayer should shuffle the list of files at every epoch.
       * </pre>
       */
      public boolean getShuffle() {
        return shuffle_;
      }
      /**
       * <code>optional bool shuffle = 8 [default = false];</code>
       *
       * <pre>
       * Whether or not ImageLayer should shuffle the list of files at every epoch.
       * </pre>
       */
      public Builder setShuffle(boolean value) {
        bitField0_ |= 0x00000008;
        shuffle_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool shuffle = 8 [default = false];</code>
       *
       * <pre>
       * Whether or not ImageLayer should shuffle the list of files at every epoch.
       * </pre>
       */
      public Builder clearShuffle() {
        bitField0_ = (bitField0_ & ~0x00000008);
        shuffle_ = false;
        onChanged();
        return this;
      }

      // optional uint32 new_height = 9 [default = 0];
      private int newHeight_ ;
      /**
       * <code>optional uint32 new_height = 9 [default = 0];</code>
       *
       * <pre>
       * It will also resize images if new_height or new_width are not zero.
       * </pre>
       */
      public boolean hasNewHeight() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional uint32 new_height = 9 [default = 0];</code>
       *
       * <pre>
       * It will also resize images if new_height or new_width are not zero.
       * </pre>
       */
      public int getNewHeight() {
        return newHeight_;
      }
      /**
       * <code>optional uint32 new_height = 9 [default = 0];</code>
       *
       * <pre>
       * It will also resize images if new_height or new_width are not zero.
       * </pre>
       */
      public Builder setNewHeight(int value) {
        bitField0_ |= 0x00000010;
        newHeight_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 new_height = 9 [default = 0];</code>
       *
       * <pre>
       * It will also resize images if new_height or new_width are not zero.
       * </pre>
       */
      public Builder clearNewHeight() {
        bitField0_ = (bitField0_ & ~0x00000010);
        newHeight_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 new_width = 10 [default = 0];
      private int newWidth_ ;
      /**
       * <code>optional uint32 new_width = 10 [default = 0];</code>
       */
      public boolean hasNewWidth() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional uint32 new_width = 10 [default = 0];</code>
       */
      public int getNewWidth() {
        return newWidth_;
      }
      /**
       * <code>optional uint32 new_width = 10 [default = 0];</code>
       */
      public Builder setNewWidth(int value) {
        bitField0_ |= 0x00000020;
        newWidth_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 new_width = 10 [default = 0];</code>
       */
      public Builder clearNewWidth() {
        bitField0_ = (bitField0_ & ~0x00000020);
        newWidth_ = 0;
        onChanged();
        return this;
      }

      // optional bool is_color = 11 [default = true];
      private boolean isColor_ = true;
      /**
       * <code>optional bool is_color = 11 [default = true];</code>
       *
       * <pre>
       * Specify if the images are color or gray
       * </pre>
       */
      public boolean hasIsColor() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional bool is_color = 11 [default = true];</code>
       *
       * <pre>
       * Specify if the images are color or gray
       * </pre>
       */
      public boolean getIsColor() {
        return isColor_;
      }
      /**
       * <code>optional bool is_color = 11 [default = true];</code>
       *
       * <pre>
       * Specify if the images are color or gray
       * </pre>
       */
      public Builder setIsColor(boolean value) {
        bitField0_ |= 0x00000040;
        isColor_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool is_color = 11 [default = true];</code>
       *
       * <pre>
       * Specify if the images are color or gray
       * </pre>
       */
      public Builder clearIsColor() {
        bitField0_ = (bitField0_ & ~0x00000040);
        isColor_ = true;
        onChanged();
        return this;
      }

      // optional float scale = 2 [default = 1];
      private float scale_ = 1F;
      /**
       * <code>optional float scale = 2 [default = 1];</code>
       *
       * <pre>
       * DEPRECATED. See TransformationParameter. For data pre-processing, we can do
       * simple scaling and subtracting the data mean, if provided. Note that the
       * mean subtraction is always carried out before scaling.
       * </pre>
       */
      public boolean hasScale() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional float scale = 2 [default = 1];</code>
       *
       * <pre>
       * DEPRECATED. See TransformationParameter. For data pre-processing, we can do
       * simple scaling and subtracting the data mean, if provided. Note that the
       * mean subtraction is always carried out before scaling.
       * </pre>
       */
      public float getScale() {
        return scale_;
      }
      /**
       * <code>optional float scale = 2 [default = 1];</code>
       *
       * <pre>
       * DEPRECATED. See TransformationParameter. For data pre-processing, we can do
       * simple scaling and subtracting the data mean, if provided. Note that the
       * mean subtraction is always carried out before scaling.
       * </pre>
       */
      public Builder setScale(float value) {
        bitField0_ |= 0x00000080;
        scale_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float scale = 2 [default = 1];</code>
       *
       * <pre>
       * DEPRECATED. See TransformationParameter. For data pre-processing, we can do
       * simple scaling and subtracting the data mean, if provided. Note that the
       * mean subtraction is always carried out before scaling.
       * </pre>
       */
      public Builder clearScale() {
        bitField0_ = (bitField0_ & ~0x00000080);
        scale_ = 1F;
        onChanged();
        return this;
      }

      // optional string mean_file = 3;
      private java.lang.Object meanFile_ = "";
      /**
       * <code>optional string mean_file = 3;</code>
       */
      public boolean hasMeanFile() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional string mean_file = 3;</code>
       */
      public java.lang.String getMeanFile() {
        java.lang.Object ref = meanFile_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          meanFile_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string mean_file = 3;</code>
       */
      public com.google.protobuf.ByteString
          getMeanFileBytes() {
        java.lang.Object ref = meanFile_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          meanFile_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string mean_file = 3;</code>
       */
      public Builder setMeanFile(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000100;
        meanFile_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string mean_file = 3;</code>
       */
      public Builder clearMeanFile() {
        bitField0_ = (bitField0_ & ~0x00000100);
        meanFile_ = getDefaultInstance().getMeanFile();
        onChanged();
        return this;
      }
      /**
       * <code>optional string mean_file = 3;</code>
       */
      public Builder setMeanFileBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000100;
        meanFile_ = value;
        onChanged();
        return this;
      }

      // optional uint32 crop_size = 5 [default = 0];
      private int cropSize_ ;
      /**
       * <code>optional uint32 crop_size = 5 [default = 0];</code>
       *
       * <pre>
       * DEPRECATED. See TransformationParameter. Specify if we would like to randomly
       * crop an image.
       * </pre>
       */
      public boolean hasCropSize() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional uint32 crop_size = 5 [default = 0];</code>
       *
       * <pre>
       * DEPRECATED. See TransformationParameter. Specify if we would like to randomly
       * crop an image.
       * </pre>
       */
      public int getCropSize() {
        return cropSize_;
      }
      /**
       * <code>optional uint32 crop_size = 5 [default = 0];</code>
       *
       * <pre>
       * DEPRECATED. See TransformationParameter. Specify if we would like to randomly
       * crop an image.
       * </pre>
       */
      public Builder setCropSize(int value) {
        bitField0_ |= 0x00000200;
        cropSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 crop_size = 5 [default = 0];</code>
       *
       * <pre>
       * DEPRECATED. See TransformationParameter. Specify if we would like to randomly
       * crop an image.
       * </pre>
       */
      public Builder clearCropSize() {
        bitField0_ = (bitField0_ & ~0x00000200);
        cropSize_ = 0;
        onChanged();
        return this;
      }

      // optional bool mirror = 6 [default = false];
      private boolean mirror_ ;
      /**
       * <code>optional bool mirror = 6 [default = false];</code>
       *
       * <pre>
       * DEPRECATED. See TransformationParameter. Specify if we want to randomly mirror
       * data.
       * </pre>
       */
      public boolean hasMirror() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional bool mirror = 6 [default = false];</code>
       *
       * <pre>
       * DEPRECATED. See TransformationParameter. Specify if we want to randomly mirror
       * data.
       * </pre>
       */
      public boolean getMirror() {
        return mirror_;
      }
      /**
       * <code>optional bool mirror = 6 [default = false];</code>
       *
       * <pre>
       * DEPRECATED. See TransformationParameter. Specify if we want to randomly mirror
       * data.
       * </pre>
       */
      public Builder setMirror(boolean value) {
        bitField0_ |= 0x00000400;
        mirror_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool mirror = 6 [default = false];</code>
       *
       * <pre>
       * DEPRECATED. See TransformationParameter. Specify if we want to randomly mirror
       * data.
       * </pre>
       */
      public Builder clearMirror() {
        bitField0_ = (bitField0_ & ~0x00000400);
        mirror_ = false;
        onChanged();
        return this;
      }

      // optional string root_folder = 12 [default = ""];
      private java.lang.Object rootFolder_ = "";
      /**
       * <code>optional string root_folder = 12 [default = ""];</code>
       */
      public boolean hasRootFolder() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional string root_folder = 12 [default = ""];</code>
       */
      public java.lang.String getRootFolder() {
        java.lang.Object ref = rootFolder_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          rootFolder_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string root_folder = 12 [default = ""];</code>
       */
      public com.google.protobuf.ByteString
          getRootFolderBytes() {
        java.lang.Object ref = rootFolder_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          rootFolder_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string root_folder = 12 [default = ""];</code>
       */
      public Builder setRootFolder(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000800;
        rootFolder_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string root_folder = 12 [default = ""];</code>
       */
      public Builder clearRootFolder() {
        bitField0_ = (bitField0_ & ~0x00000800);
        rootFolder_ = getDefaultInstance().getRootFolder();
        onChanged();
        return this;
      }
      /**
       * <code>optional string root_folder = 12 [default = ""];</code>
       */
      public Builder setRootFolderBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000800;
        rootFolder_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.ImageDataParameter)
    }

    static {
      defaultInstance = new ImageDataParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.ImageDataParameter)
  }

  public interface InfogainLossParameterOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional string source = 1;
    /**
     * <code>optional string source = 1;</code>
     *
     * <pre>
     * Specify the infogain matrix source.
     * </pre>
     */
    boolean hasSource();
    /**
     * <code>optional string source = 1;</code>
     *
     * <pre>
     * Specify the infogain matrix source.
     * </pre>
     */
    java.lang.String getSource();
    /**
     * <code>optional string source = 1;</code>
     *
     * <pre>
     * Specify the infogain matrix source.
     * </pre>
     */
    com.google.protobuf.ByteString
        getSourceBytes();
  }
  /**
   * Protobuf type {@code caffe.InfogainLossParameter}
   */
  public static final class InfogainLossParameter extends
      com.google.protobuf.GeneratedMessage
      implements InfogainLossParameterOrBuilder {
    // Use InfogainLossParameter.newBuilder() to construct.
    private InfogainLossParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private InfogainLossParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final InfogainLossParameter defaultInstance;
    public static InfogainLossParameter getDefaultInstance() {
      return defaultInstance;
    }

    public InfogainLossParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private InfogainLossParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              source_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_InfogainLossParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_InfogainLossParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.InfogainLossParameter.class, caffe.Caffe.InfogainLossParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<InfogainLossParameter> PARSER =
        new com.google.protobuf.AbstractParser<InfogainLossParameter>() {
      public InfogainLossParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new InfogainLossParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<InfogainLossParameter> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional string source = 1;
    public static final int SOURCE_FIELD_NUMBER = 1;
    private java.lang.Object source_;
    /**
     * <code>optional string source = 1;</code>
     *
     * <pre>
     * Specify the infogain matrix source.
     * </pre>
     */
    public boolean hasSource() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string source = 1;</code>
     *
     * <pre>
     * Specify the infogain matrix source.
     * </pre>
     */
    public java.lang.String getSource() {
      java.lang.Object ref = source_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          source_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string source = 1;</code>
     *
     * <pre>
     * Specify the infogain matrix source.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getSourceBytes() {
      java.lang.Object ref = source_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        source_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      source_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getSourceBytes());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getSourceBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.InfogainLossParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.InfogainLossParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.InfogainLossParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.InfogainLossParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.InfogainLossParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.InfogainLossParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.InfogainLossParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.InfogainLossParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.InfogainLossParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.InfogainLossParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.InfogainLossParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.InfogainLossParameter}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements caffe.Caffe.InfogainLossParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_InfogainLossParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_InfogainLossParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.InfogainLossParameter.class, caffe.Caffe.InfogainLossParameter.Builder.class);
      }

      // Construct using caffe.Caffe.InfogainLossParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        source_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_InfogainLossParameter_descriptor;
      }

      public caffe.Caffe.InfogainLossParameter getDefaultInstanceForType() {
        return caffe.Caffe.InfogainLossParameter.getDefaultInstance();
      }

      public caffe.Caffe.InfogainLossParameter build() {
        caffe.Caffe.InfogainLossParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.InfogainLossParameter buildPartial() {
        caffe.Caffe.InfogainLossParameter result = new caffe.Caffe.InfogainLossParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.source_ = source_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.InfogainLossParameter) {
          return mergeFrom((caffe.Caffe.InfogainLossParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.InfogainLossParameter other) {
        if (other == caffe.Caffe.InfogainLossParameter.getDefaultInstance()) return this;
        if (other.hasSource()) {
          bitField0_ |= 0x00000001;
          source_ = other.source_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.InfogainLossParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.InfogainLossParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional string source = 1;
      private java.lang.Object source_ = "";
      /**
       * <code>optional string source = 1;</code>
       *
       * <pre>
       * Specify the infogain matrix source.
       * </pre>
       */
      public boolean hasSource() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string source = 1;</code>
       *
       * <pre>
       * Specify the infogain matrix source.
       * </pre>
       */
      public java.lang.String getSource() {
        java.lang.Object ref = source_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          source_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string source = 1;</code>
       *
       * <pre>
       * Specify the infogain matrix source.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getSourceBytes() {
        java.lang.Object ref = source_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          source_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string source = 1;</code>
       *
       * <pre>
       * Specify the infogain matrix source.
       * </pre>
       */
      public Builder setSource(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        source_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string source = 1;</code>
       *
       * <pre>
       * Specify the infogain matrix source.
       * </pre>
       */
      public Builder clearSource() {
        bitField0_ = (bitField0_ & ~0x00000001);
        source_ = getDefaultInstance().getSource();
        onChanged();
        return this;
      }
      /**
       * <code>optional string source = 1;</code>
       *
       * <pre>
       * Specify the infogain matrix source.
       * </pre>
       */
      public Builder setSourceBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        source_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.InfogainLossParameter)
    }

    static {
      defaultInstance = new InfogainLossParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.InfogainLossParameter)
  }

  public interface InnerProductParameterOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional uint32 num_output = 1;
    /**
     * <code>optional uint32 num_output = 1;</code>
     *
     * <pre>
     * The number of outputs for the layer
     * </pre>
     */
    boolean hasNumOutput();
    /**
     * <code>optional uint32 num_output = 1;</code>
     *
     * <pre>
     * The number of outputs for the layer
     * </pre>
     */
    int getNumOutput();

    // optional bool bias_term = 2 [default = true];
    /**
     * <code>optional bool bias_term = 2 [default = true];</code>
     *
     * <pre>
     * whether to have bias terms
     * </pre>
     */
    boolean hasBiasTerm();
    /**
     * <code>optional bool bias_term = 2 [default = true];</code>
     *
     * <pre>
     * whether to have bias terms
     * </pre>
     */
    boolean getBiasTerm();

    // optional .caffe.FillerParameter weight_filler = 3;
    /**
     * <code>optional .caffe.FillerParameter weight_filler = 3;</code>
     *
     * <pre>
     * The filler for the weight
     * </pre>
     */
    boolean hasWeightFiller();
    /**
     * <code>optional .caffe.FillerParameter weight_filler = 3;</code>
     *
     * <pre>
     * The filler for the weight
     * </pre>
     */
    caffe.Caffe.FillerParameter getWeightFiller();
    /**
     * <code>optional .caffe.FillerParameter weight_filler = 3;</code>
     *
     * <pre>
     * The filler for the weight
     * </pre>
     */
    caffe.Caffe.FillerParameterOrBuilder getWeightFillerOrBuilder();

    // optional .caffe.FillerParameter bias_filler = 4;
    /**
     * <code>optional .caffe.FillerParameter bias_filler = 4;</code>
     *
     * <pre>
     * The filler for the bias
     * </pre>
     */
    boolean hasBiasFiller();
    /**
     * <code>optional .caffe.FillerParameter bias_filler = 4;</code>
     *
     * <pre>
     * The filler for the bias
     * </pre>
     */
    caffe.Caffe.FillerParameter getBiasFiller();
    /**
     * <code>optional .caffe.FillerParameter bias_filler = 4;</code>
     *
     * <pre>
     * The filler for the bias
     * </pre>
     */
    caffe.Caffe.FillerParameterOrBuilder getBiasFillerOrBuilder();

    // optional int32 axis = 5 [default = 1];
    /**
     * <code>optional int32 axis = 5 [default = 1];</code>
     *
     * <pre>
     * The first axis to be lumped into a single inner product computation;
     * all preceding axes are retained in the output.
     * May be negative to index from the end (e.g., -1 for the last axis).
     * </pre>
     */
    boolean hasAxis();
    /**
     * <code>optional int32 axis = 5 [default = 1];</code>
     *
     * <pre>
     * The first axis to be lumped into a single inner product computation;
     * all preceding axes are retained in the output.
     * May be negative to index from the end (e.g., -1 for the last axis).
     * </pre>
     */
    int getAxis();

    // optional bool transpose = 6 [default = false];
    /**
     * <code>optional bool transpose = 6 [default = false];</code>
     *
     * <pre>
     * Specify whether to transpose the weight matrix or not.
     * If transpose == true, any operations will be performed on the transpose
     * of the weight matrix. The weight matrix itself is not going to be transposed
     * but rather the transfer flag of operations will be toggled accordingly.
     * </pre>
     */
    boolean hasTranspose();
    /**
     * <code>optional bool transpose = 6 [default = false];</code>
     *
     * <pre>
     * Specify whether to transpose the weight matrix or not.
     * If transpose == true, any operations will be performed on the transpose
     * of the weight matrix. The weight matrix itself is not going to be transposed
     * but rather the transfer flag of operations will be toggled accordingly.
     * </pre>
     */
    boolean getTranspose();
  }
  /**
   * Protobuf type {@code caffe.InnerProductParameter}
   */
  public static final class InnerProductParameter extends
      com.google.protobuf.GeneratedMessage
      implements InnerProductParameterOrBuilder {
    // Use InnerProductParameter.newBuilder() to construct.
    private InnerProductParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private InnerProductParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final InnerProductParameter defaultInstance;
    public static InnerProductParameter getDefaultInstance() {
      return defaultInstance;
    }

    public InnerProductParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private InnerProductParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              numOutput_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              biasTerm_ = input.readBool();
              break;
            }
            case 26: {
              caffe.Caffe.FillerParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = weightFiller_.toBuilder();
              }
              weightFiller_ = input.readMessage(caffe.Caffe.FillerParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(weightFiller_);
                weightFiller_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 34: {
              caffe.Caffe.FillerParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = biasFiller_.toBuilder();
              }
              biasFiller_ = input.readMessage(caffe.Caffe.FillerParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(biasFiller_);
                biasFiller_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              axis_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              transpose_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_InnerProductParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_InnerProductParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.InnerProductParameter.class, caffe.Caffe.InnerProductParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<InnerProductParameter> PARSER =
        new com.google.protobuf.AbstractParser<InnerProductParameter>() {
      public InnerProductParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new InnerProductParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<InnerProductParameter> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional uint32 num_output = 1;
    public static final int NUM_OUTPUT_FIELD_NUMBER = 1;
    private int numOutput_;
    /**
     * <code>optional uint32 num_output = 1;</code>
     *
     * <pre>
     * The number of outputs for the layer
     * </pre>
     */
    public boolean hasNumOutput() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 num_output = 1;</code>
     *
     * <pre>
     * The number of outputs for the layer
     * </pre>
     */
    public int getNumOutput() {
      return numOutput_;
    }

    // optional bool bias_term = 2 [default = true];
    public static final int BIAS_TERM_FIELD_NUMBER = 2;
    private boolean biasTerm_;
    /**
     * <code>optional bool bias_term = 2 [default = true];</code>
     *
     * <pre>
     * whether to have bias terms
     * </pre>
     */
    public boolean hasBiasTerm() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional bool bias_term = 2 [default = true];</code>
     *
     * <pre>
     * whether to have bias terms
     * </pre>
     */
    public boolean getBiasTerm() {
      return biasTerm_;
    }

    // optional .caffe.FillerParameter weight_filler = 3;
    public static final int WEIGHT_FILLER_FIELD_NUMBER = 3;
    private caffe.Caffe.FillerParameter weightFiller_;
    /**
     * <code>optional .caffe.FillerParameter weight_filler = 3;</code>
     *
     * <pre>
     * The filler for the weight
     * </pre>
     */
    public boolean hasWeightFiller() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .caffe.FillerParameter weight_filler = 3;</code>
     *
     * <pre>
     * The filler for the weight
     * </pre>
     */
    public caffe.Caffe.FillerParameter getWeightFiller() {
      return weightFiller_;
    }
    /**
     * <code>optional .caffe.FillerParameter weight_filler = 3;</code>
     *
     * <pre>
     * The filler for the weight
     * </pre>
     */
    public caffe.Caffe.FillerParameterOrBuilder getWeightFillerOrBuilder() {
      return weightFiller_;
    }

    // optional .caffe.FillerParameter bias_filler = 4;
    public static final int BIAS_FILLER_FIELD_NUMBER = 4;
    private caffe.Caffe.FillerParameter biasFiller_;
    /**
     * <code>optional .caffe.FillerParameter bias_filler = 4;</code>
     *
     * <pre>
     * The filler for the bias
     * </pre>
     */
    public boolean hasBiasFiller() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .caffe.FillerParameter bias_filler = 4;</code>
     *
     * <pre>
     * The filler for the bias
     * </pre>
     */
    public caffe.Caffe.FillerParameter getBiasFiller() {
      return biasFiller_;
    }
    /**
     * <code>optional .caffe.FillerParameter bias_filler = 4;</code>
     *
     * <pre>
     * The filler for the bias
     * </pre>
     */
    public caffe.Caffe.FillerParameterOrBuilder getBiasFillerOrBuilder() {
      return biasFiller_;
    }

    // optional int32 axis = 5 [default = 1];
    public static final int AXIS_FIELD_NUMBER = 5;
    private int axis_;
    /**
     * <code>optional int32 axis = 5 [default = 1];</code>
     *
     * <pre>
     * The first axis to be lumped into a single inner product computation;
     * all preceding axes are retained in the output.
     * May be negative to index from the end (e.g., -1 for the last axis).
     * </pre>
     */
    public boolean hasAxis() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 axis = 5 [default = 1];</code>
     *
     * <pre>
     * The first axis to be lumped into a single inner product computation;
     * all preceding axes are retained in the output.
     * May be negative to index from the end (e.g., -1 for the last axis).
     * </pre>
     */
    public int getAxis() {
      return axis_;
    }

    // optional bool transpose = 6 [default = false];
    public static final int TRANSPOSE_FIELD_NUMBER = 6;
    private boolean transpose_;
    /**
     * <code>optional bool transpose = 6 [default = false];</code>
     *
     * <pre>
     * Specify whether to transpose the weight matrix or not.
     * If transpose == true, any operations will be performed on the transpose
     * of the weight matrix. The weight matrix itself is not going to be transposed
     * but rather the transfer flag of operations will be toggled accordingly.
     * </pre>
     */
    public boolean hasTranspose() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional bool transpose = 6 [default = false];</code>
     *
     * <pre>
     * Specify whether to transpose the weight matrix or not.
     * If transpose == true, any operations will be performed on the transpose
     * of the weight matrix. The weight matrix itself is not going to be transposed
     * but rather the transfer flag of operations will be toggled accordingly.
     * </pre>
     */
    public boolean getTranspose() {
      return transpose_;
    }

    private void initFields() {
      numOutput_ = 0;
      biasTerm_ = true;
      weightFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
      biasFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
      axis_ = 1;
      transpose_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, numOutput_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBool(2, biasTerm_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, weightFiller_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(4, biasFiller_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, axis_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeBool(6, transpose_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, numOutput_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, biasTerm_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, weightFiller_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, biasFiller_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, axis_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, transpose_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.InnerProductParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.InnerProductParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.InnerProductParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.InnerProductParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.InnerProductParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.InnerProductParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.InnerProductParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.InnerProductParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.InnerProductParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.InnerProductParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.InnerProductParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.InnerProductParameter}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements caffe.Caffe.InnerProductParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_InnerProductParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_InnerProductParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.InnerProductParameter.class, caffe.Caffe.InnerProductParameter.Builder.class);
      }

      // Construct using caffe.Caffe.InnerProductParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getWeightFillerFieldBuilder();
          getBiasFillerFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        numOutput_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        biasTerm_ = true;
        bitField0_ = (bitField0_ & ~0x00000002);
        if (weightFillerBuilder_ == null) {
          weightFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
        } else {
          weightFillerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        if (biasFillerBuilder_ == null) {
          biasFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
        } else {
          biasFillerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        axis_ = 1;
        bitField0_ = (bitField0_ & ~0x00000010);
        transpose_ = false;
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_InnerProductParameter_descriptor;
      }

      public caffe.Caffe.InnerProductParameter getDefaultInstanceForType() {
        return caffe.Caffe.InnerProductParameter.getDefaultInstance();
      }

      public caffe.Caffe.InnerProductParameter build() {
        caffe.Caffe.InnerProductParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.InnerProductParameter buildPartial() {
        caffe.Caffe.InnerProductParameter result = new caffe.Caffe.InnerProductParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.numOutput_ = numOutput_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.biasTerm_ = biasTerm_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (weightFillerBuilder_ == null) {
          result.weightFiller_ = weightFiller_;
        } else {
          result.weightFiller_ = weightFillerBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        if (biasFillerBuilder_ == null) {
          result.biasFiller_ = biasFiller_;
        } else {
          result.biasFiller_ = biasFillerBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.axis_ = axis_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.transpose_ = transpose_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.InnerProductParameter) {
          return mergeFrom((caffe.Caffe.InnerProductParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.InnerProductParameter other) {
        if (other == caffe.Caffe.InnerProductParameter.getDefaultInstance()) return this;
        if (other.hasNumOutput()) {
          setNumOutput(other.getNumOutput());
        }
        if (other.hasBiasTerm()) {
          setBiasTerm(other.getBiasTerm());
        }
        if (other.hasWeightFiller()) {
          mergeWeightFiller(other.getWeightFiller());
        }
        if (other.hasBiasFiller()) {
          mergeBiasFiller(other.getBiasFiller());
        }
        if (other.hasAxis()) {
          setAxis(other.getAxis());
        }
        if (other.hasTranspose()) {
          setTranspose(other.getTranspose());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.InnerProductParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.InnerProductParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional uint32 num_output = 1;
      private int numOutput_ ;
      /**
       * <code>optional uint32 num_output = 1;</code>
       *
       * <pre>
       * The number of outputs for the layer
       * </pre>
       */
      public boolean hasNumOutput() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 num_output = 1;</code>
       *
       * <pre>
       * The number of outputs for the layer
       * </pre>
       */
      public int getNumOutput() {
        return numOutput_;
      }
      /**
       * <code>optional uint32 num_output = 1;</code>
       *
       * <pre>
       * The number of outputs for the layer
       * </pre>
       */
      public Builder setNumOutput(int value) {
        bitField0_ |= 0x00000001;
        numOutput_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 num_output = 1;</code>
       *
       * <pre>
       * The number of outputs for the layer
       * </pre>
       */
      public Builder clearNumOutput() {
        bitField0_ = (bitField0_ & ~0x00000001);
        numOutput_ = 0;
        onChanged();
        return this;
      }

      // optional bool bias_term = 2 [default = true];
      private boolean biasTerm_ = true;
      /**
       * <code>optional bool bias_term = 2 [default = true];</code>
       *
       * <pre>
       * whether to have bias terms
       * </pre>
       */
      public boolean hasBiasTerm() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional bool bias_term = 2 [default = true];</code>
       *
       * <pre>
       * whether to have bias terms
       * </pre>
       */
      public boolean getBiasTerm() {
        return biasTerm_;
      }
      /**
       * <code>optional bool bias_term = 2 [default = true];</code>
       *
       * <pre>
       * whether to have bias terms
       * </pre>
       */
      public Builder setBiasTerm(boolean value) {
        bitField0_ |= 0x00000002;
        biasTerm_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool bias_term = 2 [default = true];</code>
       *
       * <pre>
       * whether to have bias terms
       * </pre>
       */
      public Builder clearBiasTerm() {
        bitField0_ = (bitField0_ & ~0x00000002);
        biasTerm_ = true;
        onChanged();
        return this;
      }

      // optional .caffe.FillerParameter weight_filler = 3;
      private caffe.Caffe.FillerParameter weightFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.FillerParameter, caffe.Caffe.FillerParameter.Builder, caffe.Caffe.FillerParameterOrBuilder> weightFillerBuilder_;
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 3;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public boolean hasWeightFiller() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 3;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public caffe.Caffe.FillerParameter getWeightFiller() {
        if (weightFillerBuilder_ == null) {
          return weightFiller_;
        } else {
          return weightFillerBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 3;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public Builder setWeightFiller(caffe.Caffe.FillerParameter value) {
        if (weightFillerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          weightFiller_ = value;
          onChanged();
        } else {
          weightFillerBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 3;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public Builder setWeightFiller(
          caffe.Caffe.FillerParameter.Builder builderForValue) {
        if (weightFillerBuilder_ == null) {
          weightFiller_ = builderForValue.build();
          onChanged();
        } else {
          weightFillerBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 3;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public Builder mergeWeightFiller(caffe.Caffe.FillerParameter value) {
        if (weightFillerBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              weightFiller_ != caffe.Caffe.FillerParameter.getDefaultInstance()) {
            weightFiller_ =
              caffe.Caffe.FillerParameter.newBuilder(weightFiller_).mergeFrom(value).buildPartial();
          } else {
            weightFiller_ = value;
          }
          onChanged();
        } else {
          weightFillerBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 3;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public Builder clearWeightFiller() {
        if (weightFillerBuilder_ == null) {
          weightFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
          onChanged();
        } else {
          weightFillerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 3;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public caffe.Caffe.FillerParameter.Builder getWeightFillerBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getWeightFillerFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 3;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public caffe.Caffe.FillerParameterOrBuilder getWeightFillerOrBuilder() {
        if (weightFillerBuilder_ != null) {
          return weightFillerBuilder_.getMessageOrBuilder();
        } else {
          return weightFiller_;
        }
      }
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 3;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.FillerParameter, caffe.Caffe.FillerParameter.Builder, caffe.Caffe.FillerParameterOrBuilder> 
          getWeightFillerFieldBuilder() {
        if (weightFillerBuilder_ == null) {
          weightFillerBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.FillerParameter, caffe.Caffe.FillerParameter.Builder, caffe.Caffe.FillerParameterOrBuilder>(
                  weightFiller_,
                  getParentForChildren(),
                  isClean());
          weightFiller_ = null;
        }
        return weightFillerBuilder_;
      }

      // optional .caffe.FillerParameter bias_filler = 4;
      private caffe.Caffe.FillerParameter biasFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.FillerParameter, caffe.Caffe.FillerParameter.Builder, caffe.Caffe.FillerParameterOrBuilder> biasFillerBuilder_;
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 4;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public boolean hasBiasFiller() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 4;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public caffe.Caffe.FillerParameter getBiasFiller() {
        if (biasFillerBuilder_ == null) {
          return biasFiller_;
        } else {
          return biasFillerBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 4;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public Builder setBiasFiller(caffe.Caffe.FillerParameter value) {
        if (biasFillerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          biasFiller_ = value;
          onChanged();
        } else {
          biasFillerBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 4;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public Builder setBiasFiller(
          caffe.Caffe.FillerParameter.Builder builderForValue) {
        if (biasFillerBuilder_ == null) {
          biasFiller_ = builderForValue.build();
          onChanged();
        } else {
          biasFillerBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 4;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public Builder mergeBiasFiller(caffe.Caffe.FillerParameter value) {
        if (biasFillerBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              biasFiller_ != caffe.Caffe.FillerParameter.getDefaultInstance()) {
            biasFiller_ =
              caffe.Caffe.FillerParameter.newBuilder(biasFiller_).mergeFrom(value).buildPartial();
          } else {
            biasFiller_ = value;
          }
          onChanged();
        } else {
          biasFillerBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 4;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public Builder clearBiasFiller() {
        if (biasFillerBuilder_ == null) {
          biasFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
          onChanged();
        } else {
          biasFillerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 4;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public caffe.Caffe.FillerParameter.Builder getBiasFillerBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getBiasFillerFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 4;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public caffe.Caffe.FillerParameterOrBuilder getBiasFillerOrBuilder() {
        if (biasFillerBuilder_ != null) {
          return biasFillerBuilder_.getMessageOrBuilder();
        } else {
          return biasFiller_;
        }
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 4;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.FillerParameter, caffe.Caffe.FillerParameter.Builder, caffe.Caffe.FillerParameterOrBuilder> 
          getBiasFillerFieldBuilder() {
        if (biasFillerBuilder_ == null) {
          biasFillerBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.FillerParameter, caffe.Caffe.FillerParameter.Builder, caffe.Caffe.FillerParameterOrBuilder>(
                  biasFiller_,
                  getParentForChildren(),
                  isClean());
          biasFiller_ = null;
        }
        return biasFillerBuilder_;
      }

      // optional int32 axis = 5 [default = 1];
      private int axis_ = 1;
      /**
       * <code>optional int32 axis = 5 [default = 1];</code>
       *
       * <pre>
       * The first axis to be lumped into a single inner product computation;
       * all preceding axes are retained in the output.
       * May be negative to index from the end (e.g., -1 for the last axis).
       * </pre>
       */
      public boolean hasAxis() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 axis = 5 [default = 1];</code>
       *
       * <pre>
       * The first axis to be lumped into a single inner product computation;
       * all preceding axes are retained in the output.
       * May be negative to index from the end (e.g., -1 for the last axis).
       * </pre>
       */
      public int getAxis() {
        return axis_;
      }
      /**
       * <code>optional int32 axis = 5 [default = 1];</code>
       *
       * <pre>
       * The first axis to be lumped into a single inner product computation;
       * all preceding axes are retained in the output.
       * May be negative to index from the end (e.g., -1 for the last axis).
       * </pre>
       */
      public Builder setAxis(int value) {
        bitField0_ |= 0x00000010;
        axis_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 axis = 5 [default = 1];</code>
       *
       * <pre>
       * The first axis to be lumped into a single inner product computation;
       * all preceding axes are retained in the output.
       * May be negative to index from the end (e.g., -1 for the last axis).
       * </pre>
       */
      public Builder clearAxis() {
        bitField0_ = (bitField0_ & ~0x00000010);
        axis_ = 1;
        onChanged();
        return this;
      }

      // optional bool transpose = 6 [default = false];
      private boolean transpose_ ;
      /**
       * <code>optional bool transpose = 6 [default = false];</code>
       *
       * <pre>
       * Specify whether to transpose the weight matrix or not.
       * If transpose == true, any operations will be performed on the transpose
       * of the weight matrix. The weight matrix itself is not going to be transposed
       * but rather the transfer flag of operations will be toggled accordingly.
       * </pre>
       */
      public boolean hasTranspose() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional bool transpose = 6 [default = false];</code>
       *
       * <pre>
       * Specify whether to transpose the weight matrix or not.
       * If transpose == true, any operations will be performed on the transpose
       * of the weight matrix. The weight matrix itself is not going to be transposed
       * but rather the transfer flag of operations will be toggled accordingly.
       * </pre>
       */
      public boolean getTranspose() {
        return transpose_;
      }
      /**
       * <code>optional bool transpose = 6 [default = false];</code>
       *
       * <pre>
       * Specify whether to transpose the weight matrix or not.
       * If transpose == true, any operations will be performed on the transpose
       * of the weight matrix. The weight matrix itself is not going to be transposed
       * but rather the transfer flag of operations will be toggled accordingly.
       * </pre>
       */
      public Builder setTranspose(boolean value) {
        bitField0_ |= 0x00000020;
        transpose_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool transpose = 6 [default = false];</code>
       *
       * <pre>
       * Specify whether to transpose the weight matrix or not.
       * If transpose == true, any operations will be performed on the transpose
       * of the weight matrix. The weight matrix itself is not going to be transposed
       * but rather the transfer flag of operations will be toggled accordingly.
       * </pre>
       */
      public Builder clearTranspose() {
        bitField0_ = (bitField0_ & ~0x00000020);
        transpose_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.InnerProductParameter)
    }

    static {
      defaultInstance = new InnerProductParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.InnerProductParameter)
  }

  public interface InputParameterOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated .caffe.BlobShape shape = 1;
    /**
     * <code>repeated .caffe.BlobShape shape = 1;</code>
     *
     * <pre>
     * This layer produces N &gt;= 1 top blob(s) to be assigned manually.
     * Define N shapes to set a shape for each top.
     * Define 1 shape to set the same shape for every top.
     * Define no shape to defer to reshaping manually.
     * </pre>
     */
    java.util.List<caffe.Caffe.BlobShape> 
        getShapeList();
    /**
     * <code>repeated .caffe.BlobShape shape = 1;</code>
     *
     * <pre>
     * This layer produces N &gt;= 1 top blob(s) to be assigned manually.
     * Define N shapes to set a shape for each top.
     * Define 1 shape to set the same shape for every top.
     * Define no shape to defer to reshaping manually.
     * </pre>
     */
    caffe.Caffe.BlobShape getShape(int index);
    /**
     * <code>repeated .caffe.BlobShape shape = 1;</code>
     *
     * <pre>
     * This layer produces N &gt;= 1 top blob(s) to be assigned manually.
     * Define N shapes to set a shape for each top.
     * Define 1 shape to set the same shape for every top.
     * Define no shape to defer to reshaping manually.
     * </pre>
     */
    int getShapeCount();
    /**
     * <code>repeated .caffe.BlobShape shape = 1;</code>
     *
     * <pre>
     * This layer produces N &gt;= 1 top blob(s) to be assigned manually.
     * Define N shapes to set a shape for each top.
     * Define 1 shape to set the same shape for every top.
     * Define no shape to defer to reshaping manually.
     * </pre>
     */
    java.util.List<? extends caffe.Caffe.BlobShapeOrBuilder> 
        getShapeOrBuilderList();
    /**
     * <code>repeated .caffe.BlobShape shape = 1;</code>
     *
     * <pre>
     * This layer produces N &gt;= 1 top blob(s) to be assigned manually.
     * Define N shapes to set a shape for each top.
     * Define 1 shape to set the same shape for every top.
     * Define no shape to defer to reshaping manually.
     * </pre>
     */
    caffe.Caffe.BlobShapeOrBuilder getShapeOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code caffe.InputParameter}
   */
  public static final class InputParameter extends
      com.google.protobuf.GeneratedMessage
      implements InputParameterOrBuilder {
    // Use InputParameter.newBuilder() to construct.
    private InputParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private InputParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final InputParameter defaultInstance;
    public static InputParameter getDefaultInstance() {
      return defaultInstance;
    }

    public InputParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private InputParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                shape_ = new java.util.ArrayList<caffe.Caffe.BlobShape>();
                mutable_bitField0_ |= 0x00000001;
              }
              shape_.add(input.readMessage(caffe.Caffe.BlobShape.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          shape_ = java.util.Collections.unmodifiableList(shape_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_InputParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_InputParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.InputParameter.class, caffe.Caffe.InputParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<InputParameter> PARSER =
        new com.google.protobuf.AbstractParser<InputParameter>() {
      public InputParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new InputParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<InputParameter> getParserForType() {
      return PARSER;
    }

    // repeated .caffe.BlobShape shape = 1;
    public static final int SHAPE_FIELD_NUMBER = 1;
    private java.util.List<caffe.Caffe.BlobShape> shape_;
    /**
     * <code>repeated .caffe.BlobShape shape = 1;</code>
     *
     * <pre>
     * This layer produces N &gt;= 1 top blob(s) to be assigned manually.
     * Define N shapes to set a shape for each top.
     * Define 1 shape to set the same shape for every top.
     * Define no shape to defer to reshaping manually.
     * </pre>
     */
    public java.util.List<caffe.Caffe.BlobShape> getShapeList() {
      return shape_;
    }
    /**
     * <code>repeated .caffe.BlobShape shape = 1;</code>
     *
     * <pre>
     * This layer produces N &gt;= 1 top blob(s) to be assigned manually.
     * Define N shapes to set a shape for each top.
     * Define 1 shape to set the same shape for every top.
     * Define no shape to defer to reshaping manually.
     * </pre>
     */
    public java.util.List<? extends caffe.Caffe.BlobShapeOrBuilder> 
        getShapeOrBuilderList() {
      return shape_;
    }
    /**
     * <code>repeated .caffe.BlobShape shape = 1;</code>
     *
     * <pre>
     * This layer produces N &gt;= 1 top blob(s) to be assigned manually.
     * Define N shapes to set a shape for each top.
     * Define 1 shape to set the same shape for every top.
     * Define no shape to defer to reshaping manually.
     * </pre>
     */
    public int getShapeCount() {
      return shape_.size();
    }
    /**
     * <code>repeated .caffe.BlobShape shape = 1;</code>
     *
     * <pre>
     * This layer produces N &gt;= 1 top blob(s) to be assigned manually.
     * Define N shapes to set a shape for each top.
     * Define 1 shape to set the same shape for every top.
     * Define no shape to defer to reshaping manually.
     * </pre>
     */
    public caffe.Caffe.BlobShape getShape(int index) {
      return shape_.get(index);
    }
    /**
     * <code>repeated .caffe.BlobShape shape = 1;</code>
     *
     * <pre>
     * This layer produces N &gt;= 1 top blob(s) to be assigned manually.
     * Define N shapes to set a shape for each top.
     * Define 1 shape to set the same shape for every top.
     * Define no shape to defer to reshaping manually.
     * </pre>
     */
    public caffe.Caffe.BlobShapeOrBuilder getShapeOrBuilder(
        int index) {
      return shape_.get(index);
    }

    private void initFields() {
      shape_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < shape_.size(); i++) {
        output.writeMessage(1, shape_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < shape_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, shape_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.InputParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.InputParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.InputParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.InputParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.InputParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.InputParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.InputParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.InputParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.InputParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.InputParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.InputParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.InputParameter}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements caffe.Caffe.InputParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_InputParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_InputParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.InputParameter.class, caffe.Caffe.InputParameter.Builder.class);
      }

      // Construct using caffe.Caffe.InputParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getShapeFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (shapeBuilder_ == null) {
          shape_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          shapeBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_InputParameter_descriptor;
      }

      public caffe.Caffe.InputParameter getDefaultInstanceForType() {
        return caffe.Caffe.InputParameter.getDefaultInstance();
      }

      public caffe.Caffe.InputParameter build() {
        caffe.Caffe.InputParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.InputParameter buildPartial() {
        caffe.Caffe.InputParameter result = new caffe.Caffe.InputParameter(this);
        int from_bitField0_ = bitField0_;
        if (shapeBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            shape_ = java.util.Collections.unmodifiableList(shape_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.shape_ = shape_;
        } else {
          result.shape_ = shapeBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.InputParameter) {
          return mergeFrom((caffe.Caffe.InputParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.InputParameter other) {
        if (other == caffe.Caffe.InputParameter.getDefaultInstance()) return this;
        if (shapeBuilder_ == null) {
          if (!other.shape_.isEmpty()) {
            if (shape_.isEmpty()) {
              shape_ = other.shape_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureShapeIsMutable();
              shape_.addAll(other.shape_);
            }
            onChanged();
          }
        } else {
          if (!other.shape_.isEmpty()) {
            if (shapeBuilder_.isEmpty()) {
              shapeBuilder_.dispose();
              shapeBuilder_ = null;
              shape_ = other.shape_;
              bitField0_ = (bitField0_ & ~0x00000001);
              shapeBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getShapeFieldBuilder() : null;
            } else {
              shapeBuilder_.addAllMessages(other.shape_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.InputParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.InputParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated .caffe.BlobShape shape = 1;
      private java.util.List<caffe.Caffe.BlobShape> shape_ =
        java.util.Collections.emptyList();
      private void ensureShapeIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          shape_ = new java.util.ArrayList<caffe.Caffe.BlobShape>(shape_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          caffe.Caffe.BlobShape, caffe.Caffe.BlobShape.Builder, caffe.Caffe.BlobShapeOrBuilder> shapeBuilder_;

      /**
       * <code>repeated .caffe.BlobShape shape = 1;</code>
       *
       * <pre>
       * This layer produces N &gt;= 1 top blob(s) to be assigned manually.
       * Define N shapes to set a shape for each top.
       * Define 1 shape to set the same shape for every top.
       * Define no shape to defer to reshaping manually.
       * </pre>
       */
      public java.util.List<caffe.Caffe.BlobShape> getShapeList() {
        if (shapeBuilder_ == null) {
          return java.util.Collections.unmodifiableList(shape_);
        } else {
          return shapeBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .caffe.BlobShape shape = 1;</code>
       *
       * <pre>
       * This layer produces N &gt;= 1 top blob(s) to be assigned manually.
       * Define N shapes to set a shape for each top.
       * Define 1 shape to set the same shape for every top.
       * Define no shape to defer to reshaping manually.
       * </pre>
       */
      public int getShapeCount() {
        if (shapeBuilder_ == null) {
          return shape_.size();
        } else {
          return shapeBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .caffe.BlobShape shape = 1;</code>
       *
       * <pre>
       * This layer produces N &gt;= 1 top blob(s) to be assigned manually.
       * Define N shapes to set a shape for each top.
       * Define 1 shape to set the same shape for every top.
       * Define no shape to defer to reshaping manually.
       * </pre>
       */
      public caffe.Caffe.BlobShape getShape(int index) {
        if (shapeBuilder_ == null) {
          return shape_.get(index);
        } else {
          return shapeBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .caffe.BlobShape shape = 1;</code>
       *
       * <pre>
       * This layer produces N &gt;= 1 top blob(s) to be assigned manually.
       * Define N shapes to set a shape for each top.
       * Define 1 shape to set the same shape for every top.
       * Define no shape to defer to reshaping manually.
       * </pre>
       */
      public Builder setShape(
          int index, caffe.Caffe.BlobShape value) {
        if (shapeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureShapeIsMutable();
          shape_.set(index, value);
          onChanged();
        } else {
          shapeBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobShape shape = 1;</code>
       *
       * <pre>
       * This layer produces N &gt;= 1 top blob(s) to be assigned manually.
       * Define N shapes to set a shape for each top.
       * Define 1 shape to set the same shape for every top.
       * Define no shape to defer to reshaping manually.
       * </pre>
       */
      public Builder setShape(
          int index, caffe.Caffe.BlobShape.Builder builderForValue) {
        if (shapeBuilder_ == null) {
          ensureShapeIsMutable();
          shape_.set(index, builderForValue.build());
          onChanged();
        } else {
          shapeBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobShape shape = 1;</code>
       *
       * <pre>
       * This layer produces N &gt;= 1 top blob(s) to be assigned manually.
       * Define N shapes to set a shape for each top.
       * Define 1 shape to set the same shape for every top.
       * Define no shape to defer to reshaping manually.
       * </pre>
       */
      public Builder addShape(caffe.Caffe.BlobShape value) {
        if (shapeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureShapeIsMutable();
          shape_.add(value);
          onChanged();
        } else {
          shapeBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobShape shape = 1;</code>
       *
       * <pre>
       * This layer produces N &gt;= 1 top blob(s) to be assigned manually.
       * Define N shapes to set a shape for each top.
       * Define 1 shape to set the same shape for every top.
       * Define no shape to defer to reshaping manually.
       * </pre>
       */
      public Builder addShape(
          int index, caffe.Caffe.BlobShape value) {
        if (shapeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureShapeIsMutable();
          shape_.add(index, value);
          onChanged();
        } else {
          shapeBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobShape shape = 1;</code>
       *
       * <pre>
       * This layer produces N &gt;= 1 top blob(s) to be assigned manually.
       * Define N shapes to set a shape for each top.
       * Define 1 shape to set the same shape for every top.
       * Define no shape to defer to reshaping manually.
       * </pre>
       */
      public Builder addShape(
          caffe.Caffe.BlobShape.Builder builderForValue) {
        if (shapeBuilder_ == null) {
          ensureShapeIsMutable();
          shape_.add(builderForValue.build());
          onChanged();
        } else {
          shapeBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobShape shape = 1;</code>
       *
       * <pre>
       * This layer produces N &gt;= 1 top blob(s) to be assigned manually.
       * Define N shapes to set a shape for each top.
       * Define 1 shape to set the same shape for every top.
       * Define no shape to defer to reshaping manually.
       * </pre>
       */
      public Builder addShape(
          int index, caffe.Caffe.BlobShape.Builder builderForValue) {
        if (shapeBuilder_ == null) {
          ensureShapeIsMutable();
          shape_.add(index, builderForValue.build());
          onChanged();
        } else {
          shapeBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobShape shape = 1;</code>
       *
       * <pre>
       * This layer produces N &gt;= 1 top blob(s) to be assigned manually.
       * Define N shapes to set a shape for each top.
       * Define 1 shape to set the same shape for every top.
       * Define no shape to defer to reshaping manually.
       * </pre>
       */
      public Builder addAllShape(
          java.lang.Iterable<? extends caffe.Caffe.BlobShape> values) {
        if (shapeBuilder_ == null) {
          ensureShapeIsMutable();
          super.addAll(values, shape_);
          onChanged();
        } else {
          shapeBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobShape shape = 1;</code>
       *
       * <pre>
       * This layer produces N &gt;= 1 top blob(s) to be assigned manually.
       * Define N shapes to set a shape for each top.
       * Define 1 shape to set the same shape for every top.
       * Define no shape to defer to reshaping manually.
       * </pre>
       */
      public Builder clearShape() {
        if (shapeBuilder_ == null) {
          shape_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          shapeBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobShape shape = 1;</code>
       *
       * <pre>
       * This layer produces N &gt;= 1 top blob(s) to be assigned manually.
       * Define N shapes to set a shape for each top.
       * Define 1 shape to set the same shape for every top.
       * Define no shape to defer to reshaping manually.
       * </pre>
       */
      public Builder removeShape(int index) {
        if (shapeBuilder_ == null) {
          ensureShapeIsMutable();
          shape_.remove(index);
          onChanged();
        } else {
          shapeBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobShape shape = 1;</code>
       *
       * <pre>
       * This layer produces N &gt;= 1 top blob(s) to be assigned manually.
       * Define N shapes to set a shape for each top.
       * Define 1 shape to set the same shape for every top.
       * Define no shape to defer to reshaping manually.
       * </pre>
       */
      public caffe.Caffe.BlobShape.Builder getShapeBuilder(
          int index) {
        return getShapeFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .caffe.BlobShape shape = 1;</code>
       *
       * <pre>
       * This layer produces N &gt;= 1 top blob(s) to be assigned manually.
       * Define N shapes to set a shape for each top.
       * Define 1 shape to set the same shape for every top.
       * Define no shape to defer to reshaping manually.
       * </pre>
       */
      public caffe.Caffe.BlobShapeOrBuilder getShapeOrBuilder(
          int index) {
        if (shapeBuilder_ == null) {
          return shape_.get(index);  } else {
          return shapeBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .caffe.BlobShape shape = 1;</code>
       *
       * <pre>
       * This layer produces N &gt;= 1 top blob(s) to be assigned manually.
       * Define N shapes to set a shape for each top.
       * Define 1 shape to set the same shape for every top.
       * Define no shape to defer to reshaping manually.
       * </pre>
       */
      public java.util.List<? extends caffe.Caffe.BlobShapeOrBuilder> 
           getShapeOrBuilderList() {
        if (shapeBuilder_ != null) {
          return shapeBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(shape_);
        }
      }
      /**
       * <code>repeated .caffe.BlobShape shape = 1;</code>
       *
       * <pre>
       * This layer produces N &gt;= 1 top blob(s) to be assigned manually.
       * Define N shapes to set a shape for each top.
       * Define 1 shape to set the same shape for every top.
       * Define no shape to defer to reshaping manually.
       * </pre>
       */
      public caffe.Caffe.BlobShape.Builder addShapeBuilder() {
        return getShapeFieldBuilder().addBuilder(
            caffe.Caffe.BlobShape.getDefaultInstance());
      }
      /**
       * <code>repeated .caffe.BlobShape shape = 1;</code>
       *
       * <pre>
       * This layer produces N &gt;= 1 top blob(s) to be assigned manually.
       * Define N shapes to set a shape for each top.
       * Define 1 shape to set the same shape for every top.
       * Define no shape to defer to reshaping manually.
       * </pre>
       */
      public caffe.Caffe.BlobShape.Builder addShapeBuilder(
          int index) {
        return getShapeFieldBuilder().addBuilder(
            index, caffe.Caffe.BlobShape.getDefaultInstance());
      }
      /**
       * <code>repeated .caffe.BlobShape shape = 1;</code>
       *
       * <pre>
       * This layer produces N &gt;= 1 top blob(s) to be assigned manually.
       * Define N shapes to set a shape for each top.
       * Define 1 shape to set the same shape for every top.
       * Define no shape to defer to reshaping manually.
       * </pre>
       */
      public java.util.List<caffe.Caffe.BlobShape.Builder> 
           getShapeBuilderList() {
        return getShapeFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          caffe.Caffe.BlobShape, caffe.Caffe.BlobShape.Builder, caffe.Caffe.BlobShapeOrBuilder> 
          getShapeFieldBuilder() {
        if (shapeBuilder_ == null) {
          shapeBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              caffe.Caffe.BlobShape, caffe.Caffe.BlobShape.Builder, caffe.Caffe.BlobShapeOrBuilder>(
                  shape_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          shape_ = null;
        }
        return shapeBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:caffe.InputParameter)
    }

    static {
      defaultInstance = new InputParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.InputParameter)
  }

  public interface LogParameterOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional float base = 1 [default = -1];
    /**
     * <code>optional float base = 1 [default = -1];</code>
     *
     * <pre>
     * LogLayer computes outputs y = log_base(shift + scale * x), for base &gt; 0.
     * Or if base is set to the default (-1), base is set to e,
     * so y = ln(shift + scale * x) = log_e(shift + scale * x)
     * </pre>
     */
    boolean hasBase();
    /**
     * <code>optional float base = 1 [default = -1];</code>
     *
     * <pre>
     * LogLayer computes outputs y = log_base(shift + scale * x), for base &gt; 0.
     * Or if base is set to the default (-1), base is set to e,
     * so y = ln(shift + scale * x) = log_e(shift + scale * x)
     * </pre>
     */
    float getBase();

    // optional float scale = 2 [default = 1];
    /**
     * <code>optional float scale = 2 [default = 1];</code>
     */
    boolean hasScale();
    /**
     * <code>optional float scale = 2 [default = 1];</code>
     */
    float getScale();

    // optional float shift = 3 [default = 0];
    /**
     * <code>optional float shift = 3 [default = 0];</code>
     */
    boolean hasShift();
    /**
     * <code>optional float shift = 3 [default = 0];</code>
     */
    float getShift();
  }
  /**
   * Protobuf type {@code caffe.LogParameter}
   *
   * <pre>
   * Message that stores parameters used by LogLayer
   * </pre>
   */
  public static final class LogParameter extends
      com.google.protobuf.GeneratedMessage
      implements LogParameterOrBuilder {
    // Use LogParameter.newBuilder() to construct.
    private LogParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private LogParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final LogParameter defaultInstance;
    public static LogParameter getDefaultInstance() {
      return defaultInstance;
    }

    public LogParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private LogParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 13: {
              bitField0_ |= 0x00000001;
              base_ = input.readFloat();
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              scale_ = input.readFloat();
              break;
            }
            case 29: {
              bitField0_ |= 0x00000004;
              shift_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_LogParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_LogParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.LogParameter.class, caffe.Caffe.LogParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<LogParameter> PARSER =
        new com.google.protobuf.AbstractParser<LogParameter>() {
      public LogParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new LogParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<LogParameter> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional float base = 1 [default = -1];
    public static final int BASE_FIELD_NUMBER = 1;
    private float base_;
    /**
     * <code>optional float base = 1 [default = -1];</code>
     *
     * <pre>
     * LogLayer computes outputs y = log_base(shift + scale * x), for base &gt; 0.
     * Or if base is set to the default (-1), base is set to e,
     * so y = ln(shift + scale * x) = log_e(shift + scale * x)
     * </pre>
     */
    public boolean hasBase() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional float base = 1 [default = -1];</code>
     *
     * <pre>
     * LogLayer computes outputs y = log_base(shift + scale * x), for base &gt; 0.
     * Or if base is set to the default (-1), base is set to e,
     * so y = ln(shift + scale * x) = log_e(shift + scale * x)
     * </pre>
     */
    public float getBase() {
      return base_;
    }

    // optional float scale = 2 [default = 1];
    public static final int SCALE_FIELD_NUMBER = 2;
    private float scale_;
    /**
     * <code>optional float scale = 2 [default = 1];</code>
     */
    public boolean hasScale() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional float scale = 2 [default = 1];</code>
     */
    public float getScale() {
      return scale_;
    }

    // optional float shift = 3 [default = 0];
    public static final int SHIFT_FIELD_NUMBER = 3;
    private float shift_;
    /**
     * <code>optional float shift = 3 [default = 0];</code>
     */
    public boolean hasShift() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional float shift = 3 [default = 0];</code>
     */
    public float getShift() {
      return shift_;
    }

    private void initFields() {
      base_ = -1F;
      scale_ = 1F;
      shift_ = 0F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeFloat(1, base_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, scale_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFloat(3, shift_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(1, base_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, scale_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(3, shift_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.LogParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.LogParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.LogParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.LogParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.LogParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.LogParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.LogParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.LogParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.LogParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.LogParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.LogParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.LogParameter}
     *
     * <pre>
     * Message that stores parameters used by LogLayer
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements caffe.Caffe.LogParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_LogParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_LogParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.LogParameter.class, caffe.Caffe.LogParameter.Builder.class);
      }

      // Construct using caffe.Caffe.LogParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        base_ = -1F;
        bitField0_ = (bitField0_ & ~0x00000001);
        scale_ = 1F;
        bitField0_ = (bitField0_ & ~0x00000002);
        shift_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_LogParameter_descriptor;
      }

      public caffe.Caffe.LogParameter getDefaultInstanceForType() {
        return caffe.Caffe.LogParameter.getDefaultInstance();
      }

      public caffe.Caffe.LogParameter build() {
        caffe.Caffe.LogParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.LogParameter buildPartial() {
        caffe.Caffe.LogParameter result = new caffe.Caffe.LogParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.base_ = base_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.scale_ = scale_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.shift_ = shift_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.LogParameter) {
          return mergeFrom((caffe.Caffe.LogParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.LogParameter other) {
        if (other == caffe.Caffe.LogParameter.getDefaultInstance()) return this;
        if (other.hasBase()) {
          setBase(other.getBase());
        }
        if (other.hasScale()) {
          setScale(other.getScale());
        }
        if (other.hasShift()) {
          setShift(other.getShift());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.LogParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.LogParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional float base = 1 [default = -1];
      private float base_ = -1F;
      /**
       * <code>optional float base = 1 [default = -1];</code>
       *
       * <pre>
       * LogLayer computes outputs y = log_base(shift + scale * x), for base &gt; 0.
       * Or if base is set to the default (-1), base is set to e,
       * so y = ln(shift + scale * x) = log_e(shift + scale * x)
       * </pre>
       */
      public boolean hasBase() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional float base = 1 [default = -1];</code>
       *
       * <pre>
       * LogLayer computes outputs y = log_base(shift + scale * x), for base &gt; 0.
       * Or if base is set to the default (-1), base is set to e,
       * so y = ln(shift + scale * x) = log_e(shift + scale * x)
       * </pre>
       */
      public float getBase() {
        return base_;
      }
      /**
       * <code>optional float base = 1 [default = -1];</code>
       *
       * <pre>
       * LogLayer computes outputs y = log_base(shift + scale * x), for base &gt; 0.
       * Or if base is set to the default (-1), base is set to e,
       * so y = ln(shift + scale * x) = log_e(shift + scale * x)
       * </pre>
       */
      public Builder setBase(float value) {
        bitField0_ |= 0x00000001;
        base_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float base = 1 [default = -1];</code>
       *
       * <pre>
       * LogLayer computes outputs y = log_base(shift + scale * x), for base &gt; 0.
       * Or if base is set to the default (-1), base is set to e,
       * so y = ln(shift + scale * x) = log_e(shift + scale * x)
       * </pre>
       */
      public Builder clearBase() {
        bitField0_ = (bitField0_ & ~0x00000001);
        base_ = -1F;
        onChanged();
        return this;
      }

      // optional float scale = 2 [default = 1];
      private float scale_ = 1F;
      /**
       * <code>optional float scale = 2 [default = 1];</code>
       */
      public boolean hasScale() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional float scale = 2 [default = 1];</code>
       */
      public float getScale() {
        return scale_;
      }
      /**
       * <code>optional float scale = 2 [default = 1];</code>
       */
      public Builder setScale(float value) {
        bitField0_ |= 0x00000002;
        scale_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float scale = 2 [default = 1];</code>
       */
      public Builder clearScale() {
        bitField0_ = (bitField0_ & ~0x00000002);
        scale_ = 1F;
        onChanged();
        return this;
      }

      // optional float shift = 3 [default = 0];
      private float shift_ ;
      /**
       * <code>optional float shift = 3 [default = 0];</code>
       */
      public boolean hasShift() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional float shift = 3 [default = 0];</code>
       */
      public float getShift() {
        return shift_;
      }
      /**
       * <code>optional float shift = 3 [default = 0];</code>
       */
      public Builder setShift(float value) {
        bitField0_ |= 0x00000004;
        shift_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float shift = 3 [default = 0];</code>
       */
      public Builder clearShift() {
        bitField0_ = (bitField0_ & ~0x00000004);
        shift_ = 0F;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.LogParameter)
    }

    static {
      defaultInstance = new LogParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.LogParameter)
  }

  public interface LRNParameterOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional uint32 local_size = 1 [default = 5];
    /**
     * <code>optional uint32 local_size = 1 [default = 5];</code>
     */
    boolean hasLocalSize();
    /**
     * <code>optional uint32 local_size = 1 [default = 5];</code>
     */
    int getLocalSize();

    // optional float alpha = 2 [default = 1];
    /**
     * <code>optional float alpha = 2 [default = 1];</code>
     */
    boolean hasAlpha();
    /**
     * <code>optional float alpha = 2 [default = 1];</code>
     */
    float getAlpha();

    // optional float beta = 3 [default = 0.75];
    /**
     * <code>optional float beta = 3 [default = 0.75];</code>
     */
    boolean hasBeta();
    /**
     * <code>optional float beta = 3 [default = 0.75];</code>
     */
    float getBeta();

    // optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
    /**
     * <code>optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];</code>
     */
    boolean hasNormRegion();
    /**
     * <code>optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];</code>
     */
    caffe.Caffe.LRNParameter.NormRegion getNormRegion();

    // optional float k = 5 [default = 1];
    /**
     * <code>optional float k = 5 [default = 1];</code>
     */
    boolean hasK();
    /**
     * <code>optional float k = 5 [default = 1];</code>
     */
    float getK();

    // optional .caffe.LRNParameter.Engine engine = 6 [default = DEFAULT];
    /**
     * <code>optional .caffe.LRNParameter.Engine engine = 6 [default = DEFAULT];</code>
     */
    boolean hasEngine();
    /**
     * <code>optional .caffe.LRNParameter.Engine engine = 6 [default = DEFAULT];</code>
     */
    caffe.Caffe.LRNParameter.Engine getEngine();
  }
  /**
   * Protobuf type {@code caffe.LRNParameter}
   *
   * <pre>
   * Message that stores parameters used by LRNLayer
   * </pre>
   */
  public static final class LRNParameter extends
      com.google.protobuf.GeneratedMessage
      implements LRNParameterOrBuilder {
    // Use LRNParameter.newBuilder() to construct.
    private LRNParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private LRNParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final LRNParameter defaultInstance;
    public static LRNParameter getDefaultInstance() {
      return defaultInstance;
    }

    public LRNParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private LRNParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              localSize_ = input.readUInt32();
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              alpha_ = input.readFloat();
              break;
            }
            case 29: {
              bitField0_ |= 0x00000004;
              beta_ = input.readFloat();
              break;
            }
            case 32: {
              int rawValue = input.readEnum();
              caffe.Caffe.LRNParameter.NormRegion value = caffe.Caffe.LRNParameter.NormRegion.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(4, rawValue);
              } else {
                bitField0_ |= 0x00000008;
                normRegion_ = value;
              }
              break;
            }
            case 45: {
              bitField0_ |= 0x00000010;
              k_ = input.readFloat();
              break;
            }
            case 48: {
              int rawValue = input.readEnum();
              caffe.Caffe.LRNParameter.Engine value = caffe.Caffe.LRNParameter.Engine.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(6, rawValue);
              } else {
                bitField0_ |= 0x00000020;
                engine_ = value;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_LRNParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_LRNParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.LRNParameter.class, caffe.Caffe.LRNParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<LRNParameter> PARSER =
        new com.google.protobuf.AbstractParser<LRNParameter>() {
      public LRNParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new LRNParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<LRNParameter> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code caffe.LRNParameter.NormRegion}
     */
    public enum NormRegion
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>ACROSS_CHANNELS = 0;</code>
       */
      ACROSS_CHANNELS(0, 0),
      /**
       * <code>WITHIN_CHANNEL = 1;</code>
       */
      WITHIN_CHANNEL(1, 1),
      ;

      /**
       * <code>ACROSS_CHANNELS = 0;</code>
       */
      public static final int ACROSS_CHANNELS_VALUE = 0;
      /**
       * <code>WITHIN_CHANNEL = 1;</code>
       */
      public static final int WITHIN_CHANNEL_VALUE = 1;


      public final int getNumber() { return value; }

      public static NormRegion valueOf(int value) {
        switch (value) {
          case 0: return ACROSS_CHANNELS;
          case 1: return WITHIN_CHANNEL;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<NormRegion>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<NormRegion>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<NormRegion>() {
              public NormRegion findValueByNumber(int number) {
                return NormRegion.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return caffe.Caffe.LRNParameter.getDescriptor().getEnumTypes().get(0);
      }

      private static final NormRegion[] VALUES = values();

      public static NormRegion valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private NormRegion(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:caffe.LRNParameter.NormRegion)
    }

    /**
     * Protobuf enum {@code caffe.LRNParameter.Engine}
     */
    public enum Engine
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>DEFAULT = 0;</code>
       */
      DEFAULT(0, 0),
      /**
       * <code>CAFFE = 1;</code>
       */
      CAFFE(1, 1),
      /**
       * <code>CUDNN = 2;</code>
       */
      CUDNN(2, 2),
      ;

      /**
       * <code>DEFAULT = 0;</code>
       */
      public static final int DEFAULT_VALUE = 0;
      /**
       * <code>CAFFE = 1;</code>
       */
      public static final int CAFFE_VALUE = 1;
      /**
       * <code>CUDNN = 2;</code>
       */
      public static final int CUDNN_VALUE = 2;


      public final int getNumber() { return value; }

      public static Engine valueOf(int value) {
        switch (value) {
          case 0: return DEFAULT;
          case 1: return CAFFE;
          case 2: return CUDNN;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Engine>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<Engine>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Engine>() {
              public Engine findValueByNumber(int number) {
                return Engine.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return caffe.Caffe.LRNParameter.getDescriptor().getEnumTypes().get(1);
      }

      private static final Engine[] VALUES = values();

      public static Engine valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private Engine(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:caffe.LRNParameter.Engine)
    }

    private int bitField0_;
    // optional uint32 local_size = 1 [default = 5];
    public static final int LOCAL_SIZE_FIELD_NUMBER = 1;
    private int localSize_;
    /**
     * <code>optional uint32 local_size = 1 [default = 5];</code>
     */
    public boolean hasLocalSize() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 local_size = 1 [default = 5];</code>
     */
    public int getLocalSize() {
      return localSize_;
    }

    // optional float alpha = 2 [default = 1];
    public static final int ALPHA_FIELD_NUMBER = 2;
    private float alpha_;
    /**
     * <code>optional float alpha = 2 [default = 1];</code>
     */
    public boolean hasAlpha() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional float alpha = 2 [default = 1];</code>
     */
    public float getAlpha() {
      return alpha_;
    }

    // optional float beta = 3 [default = 0.75];
    public static final int BETA_FIELD_NUMBER = 3;
    private float beta_;
    /**
     * <code>optional float beta = 3 [default = 0.75];</code>
     */
    public boolean hasBeta() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional float beta = 3 [default = 0.75];</code>
     */
    public float getBeta() {
      return beta_;
    }

    // optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
    public static final int NORM_REGION_FIELD_NUMBER = 4;
    private caffe.Caffe.LRNParameter.NormRegion normRegion_;
    /**
     * <code>optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];</code>
     */
    public boolean hasNormRegion() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];</code>
     */
    public caffe.Caffe.LRNParameter.NormRegion getNormRegion() {
      return normRegion_;
    }

    // optional float k = 5 [default = 1];
    public static final int K_FIELD_NUMBER = 5;
    private float k_;
    /**
     * <code>optional float k = 5 [default = 1];</code>
     */
    public boolean hasK() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional float k = 5 [default = 1];</code>
     */
    public float getK() {
      return k_;
    }

    // optional .caffe.LRNParameter.Engine engine = 6 [default = DEFAULT];
    public static final int ENGINE_FIELD_NUMBER = 6;
    private caffe.Caffe.LRNParameter.Engine engine_;
    /**
     * <code>optional .caffe.LRNParameter.Engine engine = 6 [default = DEFAULT];</code>
     */
    public boolean hasEngine() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .caffe.LRNParameter.Engine engine = 6 [default = DEFAULT];</code>
     */
    public caffe.Caffe.LRNParameter.Engine getEngine() {
      return engine_;
    }

    private void initFields() {
      localSize_ = 5;
      alpha_ = 1F;
      beta_ = 0.75F;
      normRegion_ = caffe.Caffe.LRNParameter.NormRegion.ACROSS_CHANNELS;
      k_ = 1F;
      engine_ = caffe.Caffe.LRNParameter.Engine.DEFAULT;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, localSize_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, alpha_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFloat(3, beta_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeEnum(4, normRegion_.getNumber());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeFloat(5, k_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeEnum(6, engine_.getNumber());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, localSize_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, alpha_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(3, beta_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(4, normRegion_.getNumber());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(5, k_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(6, engine_.getNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.LRNParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.LRNParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.LRNParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.LRNParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.LRNParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.LRNParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.LRNParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.LRNParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.LRNParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.LRNParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.LRNParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.LRNParameter}
     *
     * <pre>
     * Message that stores parameters used by LRNLayer
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements caffe.Caffe.LRNParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_LRNParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_LRNParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.LRNParameter.class, caffe.Caffe.LRNParameter.Builder.class);
      }

      // Construct using caffe.Caffe.LRNParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        localSize_ = 5;
        bitField0_ = (bitField0_ & ~0x00000001);
        alpha_ = 1F;
        bitField0_ = (bitField0_ & ~0x00000002);
        beta_ = 0.75F;
        bitField0_ = (bitField0_ & ~0x00000004);
        normRegion_ = caffe.Caffe.LRNParameter.NormRegion.ACROSS_CHANNELS;
        bitField0_ = (bitField0_ & ~0x00000008);
        k_ = 1F;
        bitField0_ = (bitField0_ & ~0x00000010);
        engine_ = caffe.Caffe.LRNParameter.Engine.DEFAULT;
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_LRNParameter_descriptor;
      }

      public caffe.Caffe.LRNParameter getDefaultInstanceForType() {
        return caffe.Caffe.LRNParameter.getDefaultInstance();
      }

      public caffe.Caffe.LRNParameter build() {
        caffe.Caffe.LRNParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.LRNParameter buildPartial() {
        caffe.Caffe.LRNParameter result = new caffe.Caffe.LRNParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.localSize_ = localSize_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.alpha_ = alpha_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.beta_ = beta_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.normRegion_ = normRegion_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.k_ = k_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.engine_ = engine_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.LRNParameter) {
          return mergeFrom((caffe.Caffe.LRNParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.LRNParameter other) {
        if (other == caffe.Caffe.LRNParameter.getDefaultInstance()) return this;
        if (other.hasLocalSize()) {
          setLocalSize(other.getLocalSize());
        }
        if (other.hasAlpha()) {
          setAlpha(other.getAlpha());
        }
        if (other.hasBeta()) {
          setBeta(other.getBeta());
        }
        if (other.hasNormRegion()) {
          setNormRegion(other.getNormRegion());
        }
        if (other.hasK()) {
          setK(other.getK());
        }
        if (other.hasEngine()) {
          setEngine(other.getEngine());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.LRNParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.LRNParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional uint32 local_size = 1 [default = 5];
      private int localSize_ = 5;
      /**
       * <code>optional uint32 local_size = 1 [default = 5];</code>
       */
      public boolean hasLocalSize() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 local_size = 1 [default = 5];</code>
       */
      public int getLocalSize() {
        return localSize_;
      }
      /**
       * <code>optional uint32 local_size = 1 [default = 5];</code>
       */
      public Builder setLocalSize(int value) {
        bitField0_ |= 0x00000001;
        localSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 local_size = 1 [default = 5];</code>
       */
      public Builder clearLocalSize() {
        bitField0_ = (bitField0_ & ~0x00000001);
        localSize_ = 5;
        onChanged();
        return this;
      }

      // optional float alpha = 2 [default = 1];
      private float alpha_ = 1F;
      /**
       * <code>optional float alpha = 2 [default = 1];</code>
       */
      public boolean hasAlpha() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional float alpha = 2 [default = 1];</code>
       */
      public float getAlpha() {
        return alpha_;
      }
      /**
       * <code>optional float alpha = 2 [default = 1];</code>
       */
      public Builder setAlpha(float value) {
        bitField0_ |= 0x00000002;
        alpha_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float alpha = 2 [default = 1];</code>
       */
      public Builder clearAlpha() {
        bitField0_ = (bitField0_ & ~0x00000002);
        alpha_ = 1F;
        onChanged();
        return this;
      }

      // optional float beta = 3 [default = 0.75];
      private float beta_ = 0.75F;
      /**
       * <code>optional float beta = 3 [default = 0.75];</code>
       */
      public boolean hasBeta() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional float beta = 3 [default = 0.75];</code>
       */
      public float getBeta() {
        return beta_;
      }
      /**
       * <code>optional float beta = 3 [default = 0.75];</code>
       */
      public Builder setBeta(float value) {
        bitField0_ |= 0x00000004;
        beta_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float beta = 3 [default = 0.75];</code>
       */
      public Builder clearBeta() {
        bitField0_ = (bitField0_ & ~0x00000004);
        beta_ = 0.75F;
        onChanged();
        return this;
      }

      // optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
      private caffe.Caffe.LRNParameter.NormRegion normRegion_ = caffe.Caffe.LRNParameter.NormRegion.ACROSS_CHANNELS;
      /**
       * <code>optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];</code>
       */
      public boolean hasNormRegion() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];</code>
       */
      public caffe.Caffe.LRNParameter.NormRegion getNormRegion() {
        return normRegion_;
      }
      /**
       * <code>optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];</code>
       */
      public Builder setNormRegion(caffe.Caffe.LRNParameter.NormRegion value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000008;
        normRegion_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];</code>
       */
      public Builder clearNormRegion() {
        bitField0_ = (bitField0_ & ~0x00000008);
        normRegion_ = caffe.Caffe.LRNParameter.NormRegion.ACROSS_CHANNELS;
        onChanged();
        return this;
      }

      // optional float k = 5 [default = 1];
      private float k_ = 1F;
      /**
       * <code>optional float k = 5 [default = 1];</code>
       */
      public boolean hasK() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional float k = 5 [default = 1];</code>
       */
      public float getK() {
        return k_;
      }
      /**
       * <code>optional float k = 5 [default = 1];</code>
       */
      public Builder setK(float value) {
        bitField0_ |= 0x00000010;
        k_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float k = 5 [default = 1];</code>
       */
      public Builder clearK() {
        bitField0_ = (bitField0_ & ~0x00000010);
        k_ = 1F;
        onChanged();
        return this;
      }

      // optional .caffe.LRNParameter.Engine engine = 6 [default = DEFAULT];
      private caffe.Caffe.LRNParameter.Engine engine_ = caffe.Caffe.LRNParameter.Engine.DEFAULT;
      /**
       * <code>optional .caffe.LRNParameter.Engine engine = 6 [default = DEFAULT];</code>
       */
      public boolean hasEngine() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .caffe.LRNParameter.Engine engine = 6 [default = DEFAULT];</code>
       */
      public caffe.Caffe.LRNParameter.Engine getEngine() {
        return engine_;
      }
      /**
       * <code>optional .caffe.LRNParameter.Engine engine = 6 [default = DEFAULT];</code>
       */
      public Builder setEngine(caffe.Caffe.LRNParameter.Engine value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000020;
        engine_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .caffe.LRNParameter.Engine engine = 6 [default = DEFAULT];</code>
       */
      public Builder clearEngine() {
        bitField0_ = (bitField0_ & ~0x00000020);
        engine_ = caffe.Caffe.LRNParameter.Engine.DEFAULT;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.LRNParameter)
    }

    static {
      defaultInstance = new LRNParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.LRNParameter)
  }

  public interface MemoryDataParameterOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional uint32 batch_size = 1;
    /**
     * <code>optional uint32 batch_size = 1;</code>
     */
    boolean hasBatchSize();
    /**
     * <code>optional uint32 batch_size = 1;</code>
     */
    int getBatchSize();

    // optional uint32 channels = 2;
    /**
     * <code>optional uint32 channels = 2;</code>
     */
    boolean hasChannels();
    /**
     * <code>optional uint32 channels = 2;</code>
     */
    int getChannels();

    // optional uint32 height = 3;
    /**
     * <code>optional uint32 height = 3;</code>
     */
    boolean hasHeight();
    /**
     * <code>optional uint32 height = 3;</code>
     */
    int getHeight();

    // optional uint32 width = 4;
    /**
     * <code>optional uint32 width = 4;</code>
     */
    boolean hasWidth();
    /**
     * <code>optional uint32 width = 4;</code>
     */
    int getWidth();
  }
  /**
   * Protobuf type {@code caffe.MemoryDataParameter}
   */
  public static final class MemoryDataParameter extends
      com.google.protobuf.GeneratedMessage
      implements MemoryDataParameterOrBuilder {
    // Use MemoryDataParameter.newBuilder() to construct.
    private MemoryDataParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private MemoryDataParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final MemoryDataParameter defaultInstance;
    public static MemoryDataParameter getDefaultInstance() {
      return defaultInstance;
    }

    public MemoryDataParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private MemoryDataParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              batchSize_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              channels_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              height_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              width_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_MemoryDataParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_MemoryDataParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.MemoryDataParameter.class, caffe.Caffe.MemoryDataParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<MemoryDataParameter> PARSER =
        new com.google.protobuf.AbstractParser<MemoryDataParameter>() {
      public MemoryDataParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new MemoryDataParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<MemoryDataParameter> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional uint32 batch_size = 1;
    public static final int BATCH_SIZE_FIELD_NUMBER = 1;
    private int batchSize_;
    /**
     * <code>optional uint32 batch_size = 1;</code>
     */
    public boolean hasBatchSize() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 batch_size = 1;</code>
     */
    public int getBatchSize() {
      return batchSize_;
    }

    // optional uint32 channels = 2;
    public static final int CHANNELS_FIELD_NUMBER = 2;
    private int channels_;
    /**
     * <code>optional uint32 channels = 2;</code>
     */
    public boolean hasChannels() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 channels = 2;</code>
     */
    public int getChannels() {
      return channels_;
    }

    // optional uint32 height = 3;
    public static final int HEIGHT_FIELD_NUMBER = 3;
    private int height_;
    /**
     * <code>optional uint32 height = 3;</code>
     */
    public boolean hasHeight() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 height = 3;</code>
     */
    public int getHeight() {
      return height_;
    }

    // optional uint32 width = 4;
    public static final int WIDTH_FIELD_NUMBER = 4;
    private int width_;
    /**
     * <code>optional uint32 width = 4;</code>
     */
    public boolean hasWidth() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 width = 4;</code>
     */
    public int getWidth() {
      return width_;
    }

    private void initFields() {
      batchSize_ = 0;
      channels_ = 0;
      height_ = 0;
      width_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, batchSize_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, channels_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, height_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, width_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, batchSize_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, channels_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, height_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, width_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.MemoryDataParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.MemoryDataParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.MemoryDataParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.MemoryDataParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.MemoryDataParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.MemoryDataParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.MemoryDataParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.MemoryDataParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.MemoryDataParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.MemoryDataParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.MemoryDataParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.MemoryDataParameter}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements caffe.Caffe.MemoryDataParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_MemoryDataParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_MemoryDataParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.MemoryDataParameter.class, caffe.Caffe.MemoryDataParameter.Builder.class);
      }

      // Construct using caffe.Caffe.MemoryDataParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        batchSize_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        channels_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        height_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        width_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_MemoryDataParameter_descriptor;
      }

      public caffe.Caffe.MemoryDataParameter getDefaultInstanceForType() {
        return caffe.Caffe.MemoryDataParameter.getDefaultInstance();
      }

      public caffe.Caffe.MemoryDataParameter build() {
        caffe.Caffe.MemoryDataParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.MemoryDataParameter buildPartial() {
        caffe.Caffe.MemoryDataParameter result = new caffe.Caffe.MemoryDataParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.batchSize_ = batchSize_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.channels_ = channels_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.height_ = height_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.width_ = width_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.MemoryDataParameter) {
          return mergeFrom((caffe.Caffe.MemoryDataParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.MemoryDataParameter other) {
        if (other == caffe.Caffe.MemoryDataParameter.getDefaultInstance()) return this;
        if (other.hasBatchSize()) {
          setBatchSize(other.getBatchSize());
        }
        if (other.hasChannels()) {
          setChannels(other.getChannels());
        }
        if (other.hasHeight()) {
          setHeight(other.getHeight());
        }
        if (other.hasWidth()) {
          setWidth(other.getWidth());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.MemoryDataParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.MemoryDataParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional uint32 batch_size = 1;
      private int batchSize_ ;
      /**
       * <code>optional uint32 batch_size = 1;</code>
       */
      public boolean hasBatchSize() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 batch_size = 1;</code>
       */
      public int getBatchSize() {
        return batchSize_;
      }
      /**
       * <code>optional uint32 batch_size = 1;</code>
       */
      public Builder setBatchSize(int value) {
        bitField0_ |= 0x00000001;
        batchSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 batch_size = 1;</code>
       */
      public Builder clearBatchSize() {
        bitField0_ = (bitField0_ & ~0x00000001);
        batchSize_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 channels = 2;
      private int channels_ ;
      /**
       * <code>optional uint32 channels = 2;</code>
       */
      public boolean hasChannels() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 channels = 2;</code>
       */
      public int getChannels() {
        return channels_;
      }
      /**
       * <code>optional uint32 channels = 2;</code>
       */
      public Builder setChannels(int value) {
        bitField0_ |= 0x00000002;
        channels_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 channels = 2;</code>
       */
      public Builder clearChannels() {
        bitField0_ = (bitField0_ & ~0x00000002);
        channels_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 height = 3;
      private int height_ ;
      /**
       * <code>optional uint32 height = 3;</code>
       */
      public boolean hasHeight() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 height = 3;</code>
       */
      public int getHeight() {
        return height_;
      }
      /**
       * <code>optional uint32 height = 3;</code>
       */
      public Builder setHeight(int value) {
        bitField0_ |= 0x00000004;
        height_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 height = 3;</code>
       */
      public Builder clearHeight() {
        bitField0_ = (bitField0_ & ~0x00000004);
        height_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 width = 4;
      private int width_ ;
      /**
       * <code>optional uint32 width = 4;</code>
       */
      public boolean hasWidth() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 width = 4;</code>
       */
      public int getWidth() {
        return width_;
      }
      /**
       * <code>optional uint32 width = 4;</code>
       */
      public Builder setWidth(int value) {
        bitField0_ |= 0x00000008;
        width_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 width = 4;</code>
       */
      public Builder clearWidth() {
        bitField0_ = (bitField0_ & ~0x00000008);
        width_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.MemoryDataParameter)
    }

    static {
      defaultInstance = new MemoryDataParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.MemoryDataParameter)
  }

  public interface MVNParameterOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional bool normalize_variance = 1 [default = true];
    /**
     * <code>optional bool normalize_variance = 1 [default = true];</code>
     *
     * <pre>
     * This parameter can be set to false to normalize mean only
     * </pre>
     */
    boolean hasNormalizeVariance();
    /**
     * <code>optional bool normalize_variance = 1 [default = true];</code>
     *
     * <pre>
     * This parameter can be set to false to normalize mean only
     * </pre>
     */
    boolean getNormalizeVariance();

    // optional bool across_channels = 2 [default = false];
    /**
     * <code>optional bool across_channels = 2 [default = false];</code>
     *
     * <pre>
     * This parameter can be set to true to perform DNN-like MVN
     * </pre>
     */
    boolean hasAcrossChannels();
    /**
     * <code>optional bool across_channels = 2 [default = false];</code>
     *
     * <pre>
     * This parameter can be set to true to perform DNN-like MVN
     * </pre>
     */
    boolean getAcrossChannels();

    // optional float eps = 3 [default = 1e-09];
    /**
     * <code>optional float eps = 3 [default = 1e-09];</code>
     *
     * <pre>
     * Epsilon for not dividing by zero while normalizing variance
     * </pre>
     */
    boolean hasEps();
    /**
     * <code>optional float eps = 3 [default = 1e-09];</code>
     *
     * <pre>
     * Epsilon for not dividing by zero while normalizing variance
     * </pre>
     */
    float getEps();
  }
  /**
   * Protobuf type {@code caffe.MVNParameter}
   */
  public static final class MVNParameter extends
      com.google.protobuf.GeneratedMessage
      implements MVNParameterOrBuilder {
    // Use MVNParameter.newBuilder() to construct.
    private MVNParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private MVNParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final MVNParameter defaultInstance;
    public static MVNParameter getDefaultInstance() {
      return defaultInstance;
    }

    public MVNParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private MVNParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              normalizeVariance_ = input.readBool();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              acrossChannels_ = input.readBool();
              break;
            }
            case 29: {
              bitField0_ |= 0x00000004;
              eps_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_MVNParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_MVNParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.MVNParameter.class, caffe.Caffe.MVNParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<MVNParameter> PARSER =
        new com.google.protobuf.AbstractParser<MVNParameter>() {
      public MVNParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new MVNParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<MVNParameter> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional bool normalize_variance = 1 [default = true];
    public static final int NORMALIZE_VARIANCE_FIELD_NUMBER = 1;
    private boolean normalizeVariance_;
    /**
     * <code>optional bool normalize_variance = 1 [default = true];</code>
     *
     * <pre>
     * This parameter can be set to false to normalize mean only
     * </pre>
     */
    public boolean hasNormalizeVariance() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional bool normalize_variance = 1 [default = true];</code>
     *
     * <pre>
     * This parameter can be set to false to normalize mean only
     * </pre>
     */
    public boolean getNormalizeVariance() {
      return normalizeVariance_;
    }

    // optional bool across_channels = 2 [default = false];
    public static final int ACROSS_CHANNELS_FIELD_NUMBER = 2;
    private boolean acrossChannels_;
    /**
     * <code>optional bool across_channels = 2 [default = false];</code>
     *
     * <pre>
     * This parameter can be set to true to perform DNN-like MVN
     * </pre>
     */
    public boolean hasAcrossChannels() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional bool across_channels = 2 [default = false];</code>
     *
     * <pre>
     * This parameter can be set to true to perform DNN-like MVN
     * </pre>
     */
    public boolean getAcrossChannels() {
      return acrossChannels_;
    }

    // optional float eps = 3 [default = 1e-09];
    public static final int EPS_FIELD_NUMBER = 3;
    private float eps_;
    /**
     * <code>optional float eps = 3 [default = 1e-09];</code>
     *
     * <pre>
     * Epsilon for not dividing by zero while normalizing variance
     * </pre>
     */
    public boolean hasEps() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional float eps = 3 [default = 1e-09];</code>
     *
     * <pre>
     * Epsilon for not dividing by zero while normalizing variance
     * </pre>
     */
    public float getEps() {
      return eps_;
    }

    private void initFields() {
      normalizeVariance_ = true;
      acrossChannels_ = false;
      eps_ = 1e-09F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBool(1, normalizeVariance_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBool(2, acrossChannels_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFloat(3, eps_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, normalizeVariance_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, acrossChannels_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(3, eps_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.MVNParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.MVNParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.MVNParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.MVNParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.MVNParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.MVNParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.MVNParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.MVNParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.MVNParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.MVNParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.MVNParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.MVNParameter}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements caffe.Caffe.MVNParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_MVNParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_MVNParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.MVNParameter.class, caffe.Caffe.MVNParameter.Builder.class);
      }

      // Construct using caffe.Caffe.MVNParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        normalizeVariance_ = true;
        bitField0_ = (bitField0_ & ~0x00000001);
        acrossChannels_ = false;
        bitField0_ = (bitField0_ & ~0x00000002);
        eps_ = 1e-09F;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_MVNParameter_descriptor;
      }

      public caffe.Caffe.MVNParameter getDefaultInstanceForType() {
        return caffe.Caffe.MVNParameter.getDefaultInstance();
      }

      public caffe.Caffe.MVNParameter build() {
        caffe.Caffe.MVNParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.MVNParameter buildPartial() {
        caffe.Caffe.MVNParameter result = new caffe.Caffe.MVNParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.normalizeVariance_ = normalizeVariance_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.acrossChannels_ = acrossChannels_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.eps_ = eps_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.MVNParameter) {
          return mergeFrom((caffe.Caffe.MVNParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.MVNParameter other) {
        if (other == caffe.Caffe.MVNParameter.getDefaultInstance()) return this;
        if (other.hasNormalizeVariance()) {
          setNormalizeVariance(other.getNormalizeVariance());
        }
        if (other.hasAcrossChannels()) {
          setAcrossChannels(other.getAcrossChannels());
        }
        if (other.hasEps()) {
          setEps(other.getEps());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.MVNParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.MVNParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional bool normalize_variance = 1 [default = true];
      private boolean normalizeVariance_ = true;
      /**
       * <code>optional bool normalize_variance = 1 [default = true];</code>
       *
       * <pre>
       * This parameter can be set to false to normalize mean only
       * </pre>
       */
      public boolean hasNormalizeVariance() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional bool normalize_variance = 1 [default = true];</code>
       *
       * <pre>
       * This parameter can be set to false to normalize mean only
       * </pre>
       */
      public boolean getNormalizeVariance() {
        return normalizeVariance_;
      }
      /**
       * <code>optional bool normalize_variance = 1 [default = true];</code>
       *
       * <pre>
       * This parameter can be set to false to normalize mean only
       * </pre>
       */
      public Builder setNormalizeVariance(boolean value) {
        bitField0_ |= 0x00000001;
        normalizeVariance_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool normalize_variance = 1 [default = true];</code>
       *
       * <pre>
       * This parameter can be set to false to normalize mean only
       * </pre>
       */
      public Builder clearNormalizeVariance() {
        bitField0_ = (bitField0_ & ~0x00000001);
        normalizeVariance_ = true;
        onChanged();
        return this;
      }

      // optional bool across_channels = 2 [default = false];
      private boolean acrossChannels_ ;
      /**
       * <code>optional bool across_channels = 2 [default = false];</code>
       *
       * <pre>
       * This parameter can be set to true to perform DNN-like MVN
       * </pre>
       */
      public boolean hasAcrossChannels() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional bool across_channels = 2 [default = false];</code>
       *
       * <pre>
       * This parameter can be set to true to perform DNN-like MVN
       * </pre>
       */
      public boolean getAcrossChannels() {
        return acrossChannels_;
      }
      /**
       * <code>optional bool across_channels = 2 [default = false];</code>
       *
       * <pre>
       * This parameter can be set to true to perform DNN-like MVN
       * </pre>
       */
      public Builder setAcrossChannels(boolean value) {
        bitField0_ |= 0x00000002;
        acrossChannels_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool across_channels = 2 [default = false];</code>
       *
       * <pre>
       * This parameter can be set to true to perform DNN-like MVN
       * </pre>
       */
      public Builder clearAcrossChannels() {
        bitField0_ = (bitField0_ & ~0x00000002);
        acrossChannels_ = false;
        onChanged();
        return this;
      }

      // optional float eps = 3 [default = 1e-09];
      private float eps_ = 1e-09F;
      /**
       * <code>optional float eps = 3 [default = 1e-09];</code>
       *
       * <pre>
       * Epsilon for not dividing by zero while normalizing variance
       * </pre>
       */
      public boolean hasEps() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional float eps = 3 [default = 1e-09];</code>
       *
       * <pre>
       * Epsilon for not dividing by zero while normalizing variance
       * </pre>
       */
      public float getEps() {
        return eps_;
      }
      /**
       * <code>optional float eps = 3 [default = 1e-09];</code>
       *
       * <pre>
       * Epsilon for not dividing by zero while normalizing variance
       * </pre>
       */
      public Builder setEps(float value) {
        bitField0_ |= 0x00000004;
        eps_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float eps = 3 [default = 1e-09];</code>
       *
       * <pre>
       * Epsilon for not dividing by zero while normalizing variance
       * </pre>
       */
      public Builder clearEps() {
        bitField0_ = (bitField0_ & ~0x00000004);
        eps_ = 1e-09F;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.MVNParameter)
    }

    static {
      defaultInstance = new MVNParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.MVNParameter)
  }

  public interface ParameterParameterOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional .caffe.BlobShape shape = 1;
    /**
     * <code>optional .caffe.BlobShape shape = 1;</code>
     */
    boolean hasShape();
    /**
     * <code>optional .caffe.BlobShape shape = 1;</code>
     */
    caffe.Caffe.BlobShape getShape();
    /**
     * <code>optional .caffe.BlobShape shape = 1;</code>
     */
    caffe.Caffe.BlobShapeOrBuilder getShapeOrBuilder();
  }
  /**
   * Protobuf type {@code caffe.ParameterParameter}
   */
  public static final class ParameterParameter extends
      com.google.protobuf.GeneratedMessage
      implements ParameterParameterOrBuilder {
    // Use ParameterParameter.newBuilder() to construct.
    private ParameterParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ParameterParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ParameterParameter defaultInstance;
    public static ParameterParameter getDefaultInstance() {
      return defaultInstance;
    }

    public ParameterParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ParameterParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              caffe.Caffe.BlobShape.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = shape_.toBuilder();
              }
              shape_ = input.readMessage(caffe.Caffe.BlobShape.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(shape_);
                shape_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_ParameterParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_ParameterParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.ParameterParameter.class, caffe.Caffe.ParameterParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<ParameterParameter> PARSER =
        new com.google.protobuf.AbstractParser<ParameterParameter>() {
      public ParameterParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ParameterParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ParameterParameter> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional .caffe.BlobShape shape = 1;
    public static final int SHAPE_FIELD_NUMBER = 1;
    private caffe.Caffe.BlobShape shape_;
    /**
     * <code>optional .caffe.BlobShape shape = 1;</code>
     */
    public boolean hasShape() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .caffe.BlobShape shape = 1;</code>
     */
    public caffe.Caffe.BlobShape getShape() {
      return shape_;
    }
    /**
     * <code>optional .caffe.BlobShape shape = 1;</code>
     */
    public caffe.Caffe.BlobShapeOrBuilder getShapeOrBuilder() {
      return shape_;
    }

    private void initFields() {
      shape_ = caffe.Caffe.BlobShape.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, shape_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, shape_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.ParameterParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.ParameterParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.ParameterParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.ParameterParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.ParameterParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.ParameterParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.ParameterParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.ParameterParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.ParameterParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.ParameterParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.ParameterParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.ParameterParameter}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements caffe.Caffe.ParameterParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_ParameterParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_ParameterParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.ParameterParameter.class, caffe.Caffe.ParameterParameter.Builder.class);
      }

      // Construct using caffe.Caffe.ParameterParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getShapeFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (shapeBuilder_ == null) {
          shape_ = caffe.Caffe.BlobShape.getDefaultInstance();
        } else {
          shapeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_ParameterParameter_descriptor;
      }

      public caffe.Caffe.ParameterParameter getDefaultInstanceForType() {
        return caffe.Caffe.ParameterParameter.getDefaultInstance();
      }

      public caffe.Caffe.ParameterParameter build() {
        caffe.Caffe.ParameterParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.ParameterParameter buildPartial() {
        caffe.Caffe.ParameterParameter result = new caffe.Caffe.ParameterParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (shapeBuilder_ == null) {
          result.shape_ = shape_;
        } else {
          result.shape_ = shapeBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.ParameterParameter) {
          return mergeFrom((caffe.Caffe.ParameterParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.ParameterParameter other) {
        if (other == caffe.Caffe.ParameterParameter.getDefaultInstance()) return this;
        if (other.hasShape()) {
          mergeShape(other.getShape());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.ParameterParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.ParameterParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .caffe.BlobShape shape = 1;
      private caffe.Caffe.BlobShape shape_ = caffe.Caffe.BlobShape.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.BlobShape, caffe.Caffe.BlobShape.Builder, caffe.Caffe.BlobShapeOrBuilder> shapeBuilder_;
      /**
       * <code>optional .caffe.BlobShape shape = 1;</code>
       */
      public boolean hasShape() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .caffe.BlobShape shape = 1;</code>
       */
      public caffe.Caffe.BlobShape getShape() {
        if (shapeBuilder_ == null) {
          return shape_;
        } else {
          return shapeBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.BlobShape shape = 1;</code>
       */
      public Builder setShape(caffe.Caffe.BlobShape value) {
        if (shapeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          shape_ = value;
          onChanged();
        } else {
          shapeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .caffe.BlobShape shape = 1;</code>
       */
      public Builder setShape(
          caffe.Caffe.BlobShape.Builder builderForValue) {
        if (shapeBuilder_ == null) {
          shape_ = builderForValue.build();
          onChanged();
        } else {
          shapeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .caffe.BlobShape shape = 1;</code>
       */
      public Builder mergeShape(caffe.Caffe.BlobShape value) {
        if (shapeBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              shape_ != caffe.Caffe.BlobShape.getDefaultInstance()) {
            shape_ =
              caffe.Caffe.BlobShape.newBuilder(shape_).mergeFrom(value).buildPartial();
          } else {
            shape_ = value;
          }
          onChanged();
        } else {
          shapeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .caffe.BlobShape shape = 1;</code>
       */
      public Builder clearShape() {
        if (shapeBuilder_ == null) {
          shape_ = caffe.Caffe.BlobShape.getDefaultInstance();
          onChanged();
        } else {
          shapeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .caffe.BlobShape shape = 1;</code>
       */
      public caffe.Caffe.BlobShape.Builder getShapeBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getShapeFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.BlobShape shape = 1;</code>
       */
      public caffe.Caffe.BlobShapeOrBuilder getShapeOrBuilder() {
        if (shapeBuilder_ != null) {
          return shapeBuilder_.getMessageOrBuilder();
        } else {
          return shape_;
        }
      }
      /**
       * <code>optional .caffe.BlobShape shape = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.BlobShape, caffe.Caffe.BlobShape.Builder, caffe.Caffe.BlobShapeOrBuilder> 
          getShapeFieldBuilder() {
        if (shapeBuilder_ == null) {
          shapeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.BlobShape, caffe.Caffe.BlobShape.Builder, caffe.Caffe.BlobShapeOrBuilder>(
                  shape_,
                  getParentForChildren(),
                  isClean());
          shape_ = null;
        }
        return shapeBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:caffe.ParameterParameter)
    }

    static {
      defaultInstance = new ParameterParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.ParameterParameter)
  }

  public interface PoolingParameterOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];
    /**
     * <code>optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];</code>
     *
     * <pre>
     * The pooling method
     * </pre>
     */
    boolean hasPool();
    /**
     * <code>optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];</code>
     *
     * <pre>
     * The pooling method
     * </pre>
     */
    caffe.Caffe.PoolingParameter.PoolMethod getPool();

    // optional uint32 pad = 4 [default = 0];
    /**
     * <code>optional uint32 pad = 4 [default = 0];</code>
     *
     * <pre>
     * Pad, kernel size, and stride are all given as a single value for equal
     * dimensions in height and width or as Y, X pairs.
     * </pre>
     */
    boolean hasPad();
    /**
     * <code>optional uint32 pad = 4 [default = 0];</code>
     *
     * <pre>
     * Pad, kernel size, and stride are all given as a single value for equal
     * dimensions in height and width or as Y, X pairs.
     * </pre>
     */
    int getPad();

    // optional uint32 pad_h = 9 [default = 0];
    /**
     * <code>optional uint32 pad_h = 9 [default = 0];</code>
     *
     * <pre>
     * The padding height
     * </pre>
     */
    boolean hasPadH();
    /**
     * <code>optional uint32 pad_h = 9 [default = 0];</code>
     *
     * <pre>
     * The padding height
     * </pre>
     */
    int getPadH();

    // optional uint32 pad_w = 10 [default = 0];
    /**
     * <code>optional uint32 pad_w = 10 [default = 0];</code>
     *
     * <pre>
     * The padding width
     * </pre>
     */
    boolean hasPadW();
    /**
     * <code>optional uint32 pad_w = 10 [default = 0];</code>
     *
     * <pre>
     * The padding width
     * </pre>
     */
    int getPadW();

    // optional uint32 kernel_size = 2;
    /**
     * <code>optional uint32 kernel_size = 2;</code>
     *
     * <pre>
     * The kernel size (square)
     * </pre>
     */
    boolean hasKernelSize();
    /**
     * <code>optional uint32 kernel_size = 2;</code>
     *
     * <pre>
     * The kernel size (square)
     * </pre>
     */
    int getKernelSize();

    // optional uint32 kernel_h = 5;
    /**
     * <code>optional uint32 kernel_h = 5;</code>
     *
     * <pre>
     * The kernel height
     * </pre>
     */
    boolean hasKernelH();
    /**
     * <code>optional uint32 kernel_h = 5;</code>
     *
     * <pre>
     * The kernel height
     * </pre>
     */
    int getKernelH();

    // optional uint32 kernel_w = 6;
    /**
     * <code>optional uint32 kernel_w = 6;</code>
     *
     * <pre>
     * The kernel width
     * </pre>
     */
    boolean hasKernelW();
    /**
     * <code>optional uint32 kernel_w = 6;</code>
     *
     * <pre>
     * The kernel width
     * </pre>
     */
    int getKernelW();

    // optional uint32 stride = 3 [default = 1];
    /**
     * <code>optional uint32 stride = 3 [default = 1];</code>
     *
     * <pre>
     * The stride (equal in Y, X)
     * </pre>
     */
    boolean hasStride();
    /**
     * <code>optional uint32 stride = 3 [default = 1];</code>
     *
     * <pre>
     * The stride (equal in Y, X)
     * </pre>
     */
    int getStride();

    // optional uint32 stride_h = 7;
    /**
     * <code>optional uint32 stride_h = 7;</code>
     *
     * <pre>
     * The stride height
     * </pre>
     */
    boolean hasStrideH();
    /**
     * <code>optional uint32 stride_h = 7;</code>
     *
     * <pre>
     * The stride height
     * </pre>
     */
    int getStrideH();

    // optional uint32 stride_w = 8;
    /**
     * <code>optional uint32 stride_w = 8;</code>
     *
     * <pre>
     * The stride width
     * </pre>
     */
    boolean hasStrideW();
    /**
     * <code>optional uint32 stride_w = 8;</code>
     *
     * <pre>
     * The stride width
     * </pre>
     */
    int getStrideW();

    // optional .caffe.PoolingParameter.Engine engine = 11 [default = DEFAULT];
    /**
     * <code>optional .caffe.PoolingParameter.Engine engine = 11 [default = DEFAULT];</code>
     */
    boolean hasEngine();
    /**
     * <code>optional .caffe.PoolingParameter.Engine engine = 11 [default = DEFAULT];</code>
     */
    caffe.Caffe.PoolingParameter.Engine getEngine();

    // optional bool global_pooling = 12 [default = false];
    /**
     * <code>optional bool global_pooling = 12 [default = false];</code>
     *
     * <pre>
     * If global_pooling then it will pool over the size of the bottom by doing
     * kernel_h = bottom-&gt;height and kernel_w = bottom-&gt;width
     * </pre>
     */
    boolean hasGlobalPooling();
    /**
     * <code>optional bool global_pooling = 12 [default = false];</code>
     *
     * <pre>
     * If global_pooling then it will pool over the size of the bottom by doing
     * kernel_h = bottom-&gt;height and kernel_w = bottom-&gt;width
     * </pre>
     */
    boolean getGlobalPooling();
  }
  /**
   * Protobuf type {@code caffe.PoolingParameter}
   */
  public static final class PoolingParameter extends
      com.google.protobuf.GeneratedMessage
      implements PoolingParameterOrBuilder {
    // Use PoolingParameter.newBuilder() to construct.
    private PoolingParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private PoolingParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final PoolingParameter defaultInstance;
    public static PoolingParameter getDefaultInstance() {
      return defaultInstance;
    }

    public PoolingParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private PoolingParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              caffe.Caffe.PoolingParameter.PoolMethod value = caffe.Caffe.PoolingParameter.PoolMethod.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                pool_ = value;
              }
              break;
            }
            case 16: {
              bitField0_ |= 0x00000010;
              kernelSize_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000080;
              stride_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000002;
              pad_ = input.readUInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000020;
              kernelH_ = input.readUInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000040;
              kernelW_ = input.readUInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000100;
              strideH_ = input.readUInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000200;
              strideW_ = input.readUInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000004;
              padH_ = input.readUInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000008;
              padW_ = input.readUInt32();
              break;
            }
            case 88: {
              int rawValue = input.readEnum();
              caffe.Caffe.PoolingParameter.Engine value = caffe.Caffe.PoolingParameter.Engine.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(11, rawValue);
              } else {
                bitField0_ |= 0x00000400;
                engine_ = value;
              }
              break;
            }
            case 96: {
              bitField0_ |= 0x00000800;
              globalPooling_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_PoolingParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_PoolingParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.PoolingParameter.class, caffe.Caffe.PoolingParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<PoolingParameter> PARSER =
        new com.google.protobuf.AbstractParser<PoolingParameter>() {
      public PoolingParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PoolingParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<PoolingParameter> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code caffe.PoolingParameter.PoolMethod}
     */
    public enum PoolMethod
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>MAX = 0;</code>
       */
      MAX(0, 0),
      /**
       * <code>AVE = 1;</code>
       */
      AVE(1, 1),
      /**
       * <code>STOCHASTIC = 2;</code>
       */
      STOCHASTIC(2, 2),
      ;

      /**
       * <code>MAX = 0;</code>
       */
      public static final int MAX_VALUE = 0;
      /**
       * <code>AVE = 1;</code>
       */
      public static final int AVE_VALUE = 1;
      /**
       * <code>STOCHASTIC = 2;</code>
       */
      public static final int STOCHASTIC_VALUE = 2;


      public final int getNumber() { return value; }

      public static PoolMethod valueOf(int value) {
        switch (value) {
          case 0: return MAX;
          case 1: return AVE;
          case 2: return STOCHASTIC;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<PoolMethod>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<PoolMethod>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<PoolMethod>() {
              public PoolMethod findValueByNumber(int number) {
                return PoolMethod.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return caffe.Caffe.PoolingParameter.getDescriptor().getEnumTypes().get(0);
      }

      private static final PoolMethod[] VALUES = values();

      public static PoolMethod valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private PoolMethod(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:caffe.PoolingParameter.PoolMethod)
    }

    /**
     * Protobuf enum {@code caffe.PoolingParameter.Engine}
     */
    public enum Engine
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>DEFAULT = 0;</code>
       */
      DEFAULT(0, 0),
      /**
       * <code>CAFFE = 1;</code>
       */
      CAFFE(1, 1),
      /**
       * <code>CUDNN = 2;</code>
       */
      CUDNN(2, 2),
      ;

      /**
       * <code>DEFAULT = 0;</code>
       */
      public static final int DEFAULT_VALUE = 0;
      /**
       * <code>CAFFE = 1;</code>
       */
      public static final int CAFFE_VALUE = 1;
      /**
       * <code>CUDNN = 2;</code>
       */
      public static final int CUDNN_VALUE = 2;


      public final int getNumber() { return value; }

      public static Engine valueOf(int value) {
        switch (value) {
          case 0: return DEFAULT;
          case 1: return CAFFE;
          case 2: return CUDNN;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Engine>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<Engine>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Engine>() {
              public Engine findValueByNumber(int number) {
                return Engine.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return caffe.Caffe.PoolingParameter.getDescriptor().getEnumTypes().get(1);
      }

      private static final Engine[] VALUES = values();

      public static Engine valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private Engine(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:caffe.PoolingParameter.Engine)
    }

    private int bitField0_;
    // optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];
    public static final int POOL_FIELD_NUMBER = 1;
    private caffe.Caffe.PoolingParameter.PoolMethod pool_;
    /**
     * <code>optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];</code>
     *
     * <pre>
     * The pooling method
     * </pre>
     */
    public boolean hasPool() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];</code>
     *
     * <pre>
     * The pooling method
     * </pre>
     */
    public caffe.Caffe.PoolingParameter.PoolMethod getPool() {
      return pool_;
    }

    // optional uint32 pad = 4 [default = 0];
    public static final int PAD_FIELD_NUMBER = 4;
    private int pad_;
    /**
     * <code>optional uint32 pad = 4 [default = 0];</code>
     *
     * <pre>
     * Pad, kernel size, and stride are all given as a single value for equal
     * dimensions in height and width or as Y, X pairs.
     * </pre>
     */
    public boolean hasPad() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 pad = 4 [default = 0];</code>
     *
     * <pre>
     * Pad, kernel size, and stride are all given as a single value for equal
     * dimensions in height and width or as Y, X pairs.
     * </pre>
     */
    public int getPad() {
      return pad_;
    }

    // optional uint32 pad_h = 9 [default = 0];
    public static final int PAD_H_FIELD_NUMBER = 9;
    private int padH_;
    /**
     * <code>optional uint32 pad_h = 9 [default = 0];</code>
     *
     * <pre>
     * The padding height
     * </pre>
     */
    public boolean hasPadH() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 pad_h = 9 [default = 0];</code>
     *
     * <pre>
     * The padding height
     * </pre>
     */
    public int getPadH() {
      return padH_;
    }

    // optional uint32 pad_w = 10 [default = 0];
    public static final int PAD_W_FIELD_NUMBER = 10;
    private int padW_;
    /**
     * <code>optional uint32 pad_w = 10 [default = 0];</code>
     *
     * <pre>
     * The padding width
     * </pre>
     */
    public boolean hasPadW() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 pad_w = 10 [default = 0];</code>
     *
     * <pre>
     * The padding width
     * </pre>
     */
    public int getPadW() {
      return padW_;
    }

    // optional uint32 kernel_size = 2;
    public static final int KERNEL_SIZE_FIELD_NUMBER = 2;
    private int kernelSize_;
    /**
     * <code>optional uint32 kernel_size = 2;</code>
     *
     * <pre>
     * The kernel size (square)
     * </pre>
     */
    public boolean hasKernelSize() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional uint32 kernel_size = 2;</code>
     *
     * <pre>
     * The kernel size (square)
     * </pre>
     */
    public int getKernelSize() {
      return kernelSize_;
    }

    // optional uint32 kernel_h = 5;
    public static final int KERNEL_H_FIELD_NUMBER = 5;
    private int kernelH_;
    /**
     * <code>optional uint32 kernel_h = 5;</code>
     *
     * <pre>
     * The kernel height
     * </pre>
     */
    public boolean hasKernelH() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional uint32 kernel_h = 5;</code>
     *
     * <pre>
     * The kernel height
     * </pre>
     */
    public int getKernelH() {
      return kernelH_;
    }

    // optional uint32 kernel_w = 6;
    public static final int KERNEL_W_FIELD_NUMBER = 6;
    private int kernelW_;
    /**
     * <code>optional uint32 kernel_w = 6;</code>
     *
     * <pre>
     * The kernel width
     * </pre>
     */
    public boolean hasKernelW() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional uint32 kernel_w = 6;</code>
     *
     * <pre>
     * The kernel width
     * </pre>
     */
    public int getKernelW() {
      return kernelW_;
    }

    // optional uint32 stride = 3 [default = 1];
    public static final int STRIDE_FIELD_NUMBER = 3;
    private int stride_;
    /**
     * <code>optional uint32 stride = 3 [default = 1];</code>
     *
     * <pre>
     * The stride (equal in Y, X)
     * </pre>
     */
    public boolean hasStride() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional uint32 stride = 3 [default = 1];</code>
     *
     * <pre>
     * The stride (equal in Y, X)
     * </pre>
     */
    public int getStride() {
      return stride_;
    }

    // optional uint32 stride_h = 7;
    public static final int STRIDE_H_FIELD_NUMBER = 7;
    private int strideH_;
    /**
     * <code>optional uint32 stride_h = 7;</code>
     *
     * <pre>
     * The stride height
     * </pre>
     */
    public boolean hasStrideH() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional uint32 stride_h = 7;</code>
     *
     * <pre>
     * The stride height
     * </pre>
     */
    public int getStrideH() {
      return strideH_;
    }

    // optional uint32 stride_w = 8;
    public static final int STRIDE_W_FIELD_NUMBER = 8;
    private int strideW_;
    /**
     * <code>optional uint32 stride_w = 8;</code>
     *
     * <pre>
     * The stride width
     * </pre>
     */
    public boolean hasStrideW() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional uint32 stride_w = 8;</code>
     *
     * <pre>
     * The stride width
     * </pre>
     */
    public int getStrideW() {
      return strideW_;
    }

    // optional .caffe.PoolingParameter.Engine engine = 11 [default = DEFAULT];
    public static final int ENGINE_FIELD_NUMBER = 11;
    private caffe.Caffe.PoolingParameter.Engine engine_;
    /**
     * <code>optional .caffe.PoolingParameter.Engine engine = 11 [default = DEFAULT];</code>
     */
    public boolean hasEngine() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional .caffe.PoolingParameter.Engine engine = 11 [default = DEFAULT];</code>
     */
    public caffe.Caffe.PoolingParameter.Engine getEngine() {
      return engine_;
    }

    // optional bool global_pooling = 12 [default = false];
    public static final int GLOBAL_POOLING_FIELD_NUMBER = 12;
    private boolean globalPooling_;
    /**
     * <code>optional bool global_pooling = 12 [default = false];</code>
     *
     * <pre>
     * If global_pooling then it will pool over the size of the bottom by doing
     * kernel_h = bottom-&gt;height and kernel_w = bottom-&gt;width
     * </pre>
     */
    public boolean hasGlobalPooling() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional bool global_pooling = 12 [default = false];</code>
     *
     * <pre>
     * If global_pooling then it will pool over the size of the bottom by doing
     * kernel_h = bottom-&gt;height and kernel_w = bottom-&gt;width
     * </pre>
     */
    public boolean getGlobalPooling() {
      return globalPooling_;
    }

    private void initFields() {
      pool_ = caffe.Caffe.PoolingParameter.PoolMethod.MAX;
      pad_ = 0;
      padH_ = 0;
      padW_ = 0;
      kernelSize_ = 0;
      kernelH_ = 0;
      kernelW_ = 0;
      stride_ = 1;
      strideH_ = 0;
      strideW_ = 0;
      engine_ = caffe.Caffe.PoolingParameter.Engine.DEFAULT;
      globalPooling_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, pool_.getNumber());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(2, kernelSize_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeUInt32(3, stride_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(4, pad_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeUInt32(5, kernelH_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeUInt32(6, kernelW_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeUInt32(7, strideH_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeUInt32(8, strideW_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(9, padH_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(10, padW_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeEnum(11, engine_.getNumber());
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeBool(12, globalPooling_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, pool_.getNumber());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, kernelSize_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, stride_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, pad_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, kernelH_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, kernelW_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, strideH_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(8, strideW_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(9, padH_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(10, padW_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(11, engine_.getNumber());
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(12, globalPooling_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.PoolingParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.PoolingParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.PoolingParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.PoolingParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.PoolingParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.PoolingParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.PoolingParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.PoolingParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.PoolingParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.PoolingParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.PoolingParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.PoolingParameter}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements caffe.Caffe.PoolingParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_PoolingParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_PoolingParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.PoolingParameter.class, caffe.Caffe.PoolingParameter.Builder.class);
      }

      // Construct using caffe.Caffe.PoolingParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        pool_ = caffe.Caffe.PoolingParameter.PoolMethod.MAX;
        bitField0_ = (bitField0_ & ~0x00000001);
        pad_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        padH_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        padW_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        kernelSize_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        kernelH_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        kernelW_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        stride_ = 1;
        bitField0_ = (bitField0_ & ~0x00000080);
        strideH_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        strideW_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        engine_ = caffe.Caffe.PoolingParameter.Engine.DEFAULT;
        bitField0_ = (bitField0_ & ~0x00000400);
        globalPooling_ = false;
        bitField0_ = (bitField0_ & ~0x00000800);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_PoolingParameter_descriptor;
      }

      public caffe.Caffe.PoolingParameter getDefaultInstanceForType() {
        return caffe.Caffe.PoolingParameter.getDefaultInstance();
      }

      public caffe.Caffe.PoolingParameter build() {
        caffe.Caffe.PoolingParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.PoolingParameter buildPartial() {
        caffe.Caffe.PoolingParameter result = new caffe.Caffe.PoolingParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.pool_ = pool_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.pad_ = pad_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.padH_ = padH_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.padW_ = padW_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.kernelSize_ = kernelSize_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.kernelH_ = kernelH_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.kernelW_ = kernelW_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.stride_ = stride_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.strideH_ = strideH_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.strideW_ = strideW_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.engine_ = engine_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.globalPooling_ = globalPooling_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.PoolingParameter) {
          return mergeFrom((caffe.Caffe.PoolingParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.PoolingParameter other) {
        if (other == caffe.Caffe.PoolingParameter.getDefaultInstance()) return this;
        if (other.hasPool()) {
          setPool(other.getPool());
        }
        if (other.hasPad()) {
          setPad(other.getPad());
        }
        if (other.hasPadH()) {
          setPadH(other.getPadH());
        }
        if (other.hasPadW()) {
          setPadW(other.getPadW());
        }
        if (other.hasKernelSize()) {
          setKernelSize(other.getKernelSize());
        }
        if (other.hasKernelH()) {
          setKernelH(other.getKernelH());
        }
        if (other.hasKernelW()) {
          setKernelW(other.getKernelW());
        }
        if (other.hasStride()) {
          setStride(other.getStride());
        }
        if (other.hasStrideH()) {
          setStrideH(other.getStrideH());
        }
        if (other.hasStrideW()) {
          setStrideW(other.getStrideW());
        }
        if (other.hasEngine()) {
          setEngine(other.getEngine());
        }
        if (other.hasGlobalPooling()) {
          setGlobalPooling(other.getGlobalPooling());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.PoolingParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.PoolingParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];
      private caffe.Caffe.PoolingParameter.PoolMethod pool_ = caffe.Caffe.PoolingParameter.PoolMethod.MAX;
      /**
       * <code>optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];</code>
       *
       * <pre>
       * The pooling method
       * </pre>
       */
      public boolean hasPool() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];</code>
       *
       * <pre>
       * The pooling method
       * </pre>
       */
      public caffe.Caffe.PoolingParameter.PoolMethod getPool() {
        return pool_;
      }
      /**
       * <code>optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];</code>
       *
       * <pre>
       * The pooling method
       * </pre>
       */
      public Builder setPool(caffe.Caffe.PoolingParameter.PoolMethod value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        pool_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];</code>
       *
       * <pre>
       * The pooling method
       * </pre>
       */
      public Builder clearPool() {
        bitField0_ = (bitField0_ & ~0x00000001);
        pool_ = caffe.Caffe.PoolingParameter.PoolMethod.MAX;
        onChanged();
        return this;
      }

      // optional uint32 pad = 4 [default = 0];
      private int pad_ ;
      /**
       * <code>optional uint32 pad = 4 [default = 0];</code>
       *
       * <pre>
       * Pad, kernel size, and stride are all given as a single value for equal
       * dimensions in height and width or as Y, X pairs.
       * </pre>
       */
      public boolean hasPad() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 pad = 4 [default = 0];</code>
       *
       * <pre>
       * Pad, kernel size, and stride are all given as a single value for equal
       * dimensions in height and width or as Y, X pairs.
       * </pre>
       */
      public int getPad() {
        return pad_;
      }
      /**
       * <code>optional uint32 pad = 4 [default = 0];</code>
       *
       * <pre>
       * Pad, kernel size, and stride are all given as a single value for equal
       * dimensions in height and width or as Y, X pairs.
       * </pre>
       */
      public Builder setPad(int value) {
        bitField0_ |= 0x00000002;
        pad_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 pad = 4 [default = 0];</code>
       *
       * <pre>
       * Pad, kernel size, and stride are all given as a single value for equal
       * dimensions in height and width or as Y, X pairs.
       * </pre>
       */
      public Builder clearPad() {
        bitField0_ = (bitField0_ & ~0x00000002);
        pad_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 pad_h = 9 [default = 0];
      private int padH_ ;
      /**
       * <code>optional uint32 pad_h = 9 [default = 0];</code>
       *
       * <pre>
       * The padding height
       * </pre>
       */
      public boolean hasPadH() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 pad_h = 9 [default = 0];</code>
       *
       * <pre>
       * The padding height
       * </pre>
       */
      public int getPadH() {
        return padH_;
      }
      /**
       * <code>optional uint32 pad_h = 9 [default = 0];</code>
       *
       * <pre>
       * The padding height
       * </pre>
       */
      public Builder setPadH(int value) {
        bitField0_ |= 0x00000004;
        padH_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 pad_h = 9 [default = 0];</code>
       *
       * <pre>
       * The padding height
       * </pre>
       */
      public Builder clearPadH() {
        bitField0_ = (bitField0_ & ~0x00000004);
        padH_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 pad_w = 10 [default = 0];
      private int padW_ ;
      /**
       * <code>optional uint32 pad_w = 10 [default = 0];</code>
       *
       * <pre>
       * The padding width
       * </pre>
       */
      public boolean hasPadW() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 pad_w = 10 [default = 0];</code>
       *
       * <pre>
       * The padding width
       * </pre>
       */
      public int getPadW() {
        return padW_;
      }
      /**
       * <code>optional uint32 pad_w = 10 [default = 0];</code>
       *
       * <pre>
       * The padding width
       * </pre>
       */
      public Builder setPadW(int value) {
        bitField0_ |= 0x00000008;
        padW_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 pad_w = 10 [default = 0];</code>
       *
       * <pre>
       * The padding width
       * </pre>
       */
      public Builder clearPadW() {
        bitField0_ = (bitField0_ & ~0x00000008);
        padW_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 kernel_size = 2;
      private int kernelSize_ ;
      /**
       * <code>optional uint32 kernel_size = 2;</code>
       *
       * <pre>
       * The kernel size (square)
       * </pre>
       */
      public boolean hasKernelSize() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional uint32 kernel_size = 2;</code>
       *
       * <pre>
       * The kernel size (square)
       * </pre>
       */
      public int getKernelSize() {
        return kernelSize_;
      }
      /**
       * <code>optional uint32 kernel_size = 2;</code>
       *
       * <pre>
       * The kernel size (square)
       * </pre>
       */
      public Builder setKernelSize(int value) {
        bitField0_ |= 0x00000010;
        kernelSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 kernel_size = 2;</code>
       *
       * <pre>
       * The kernel size (square)
       * </pre>
       */
      public Builder clearKernelSize() {
        bitField0_ = (bitField0_ & ~0x00000010);
        kernelSize_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 kernel_h = 5;
      private int kernelH_ ;
      /**
       * <code>optional uint32 kernel_h = 5;</code>
       *
       * <pre>
       * The kernel height
       * </pre>
       */
      public boolean hasKernelH() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional uint32 kernel_h = 5;</code>
       *
       * <pre>
       * The kernel height
       * </pre>
       */
      public int getKernelH() {
        return kernelH_;
      }
      /**
       * <code>optional uint32 kernel_h = 5;</code>
       *
       * <pre>
       * The kernel height
       * </pre>
       */
      public Builder setKernelH(int value) {
        bitField0_ |= 0x00000020;
        kernelH_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 kernel_h = 5;</code>
       *
       * <pre>
       * The kernel height
       * </pre>
       */
      public Builder clearKernelH() {
        bitField0_ = (bitField0_ & ~0x00000020);
        kernelH_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 kernel_w = 6;
      private int kernelW_ ;
      /**
       * <code>optional uint32 kernel_w = 6;</code>
       *
       * <pre>
       * The kernel width
       * </pre>
       */
      public boolean hasKernelW() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional uint32 kernel_w = 6;</code>
       *
       * <pre>
       * The kernel width
       * </pre>
       */
      public int getKernelW() {
        return kernelW_;
      }
      /**
       * <code>optional uint32 kernel_w = 6;</code>
       *
       * <pre>
       * The kernel width
       * </pre>
       */
      public Builder setKernelW(int value) {
        bitField0_ |= 0x00000040;
        kernelW_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 kernel_w = 6;</code>
       *
       * <pre>
       * The kernel width
       * </pre>
       */
      public Builder clearKernelW() {
        bitField0_ = (bitField0_ & ~0x00000040);
        kernelW_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 stride = 3 [default = 1];
      private int stride_ = 1;
      /**
       * <code>optional uint32 stride = 3 [default = 1];</code>
       *
       * <pre>
       * The stride (equal in Y, X)
       * </pre>
       */
      public boolean hasStride() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional uint32 stride = 3 [default = 1];</code>
       *
       * <pre>
       * The stride (equal in Y, X)
       * </pre>
       */
      public int getStride() {
        return stride_;
      }
      /**
       * <code>optional uint32 stride = 3 [default = 1];</code>
       *
       * <pre>
       * The stride (equal in Y, X)
       * </pre>
       */
      public Builder setStride(int value) {
        bitField0_ |= 0x00000080;
        stride_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 stride = 3 [default = 1];</code>
       *
       * <pre>
       * The stride (equal in Y, X)
       * </pre>
       */
      public Builder clearStride() {
        bitField0_ = (bitField0_ & ~0x00000080);
        stride_ = 1;
        onChanged();
        return this;
      }

      // optional uint32 stride_h = 7;
      private int strideH_ ;
      /**
       * <code>optional uint32 stride_h = 7;</code>
       *
       * <pre>
       * The stride height
       * </pre>
       */
      public boolean hasStrideH() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional uint32 stride_h = 7;</code>
       *
       * <pre>
       * The stride height
       * </pre>
       */
      public int getStrideH() {
        return strideH_;
      }
      /**
       * <code>optional uint32 stride_h = 7;</code>
       *
       * <pre>
       * The stride height
       * </pre>
       */
      public Builder setStrideH(int value) {
        bitField0_ |= 0x00000100;
        strideH_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 stride_h = 7;</code>
       *
       * <pre>
       * The stride height
       * </pre>
       */
      public Builder clearStrideH() {
        bitField0_ = (bitField0_ & ~0x00000100);
        strideH_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 stride_w = 8;
      private int strideW_ ;
      /**
       * <code>optional uint32 stride_w = 8;</code>
       *
       * <pre>
       * The stride width
       * </pre>
       */
      public boolean hasStrideW() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional uint32 stride_w = 8;</code>
       *
       * <pre>
       * The stride width
       * </pre>
       */
      public int getStrideW() {
        return strideW_;
      }
      /**
       * <code>optional uint32 stride_w = 8;</code>
       *
       * <pre>
       * The stride width
       * </pre>
       */
      public Builder setStrideW(int value) {
        bitField0_ |= 0x00000200;
        strideW_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 stride_w = 8;</code>
       *
       * <pre>
       * The stride width
       * </pre>
       */
      public Builder clearStrideW() {
        bitField0_ = (bitField0_ & ~0x00000200);
        strideW_ = 0;
        onChanged();
        return this;
      }

      // optional .caffe.PoolingParameter.Engine engine = 11 [default = DEFAULT];
      private caffe.Caffe.PoolingParameter.Engine engine_ = caffe.Caffe.PoolingParameter.Engine.DEFAULT;
      /**
       * <code>optional .caffe.PoolingParameter.Engine engine = 11 [default = DEFAULT];</code>
       */
      public boolean hasEngine() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional .caffe.PoolingParameter.Engine engine = 11 [default = DEFAULT];</code>
       */
      public caffe.Caffe.PoolingParameter.Engine getEngine() {
        return engine_;
      }
      /**
       * <code>optional .caffe.PoolingParameter.Engine engine = 11 [default = DEFAULT];</code>
       */
      public Builder setEngine(caffe.Caffe.PoolingParameter.Engine value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000400;
        engine_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .caffe.PoolingParameter.Engine engine = 11 [default = DEFAULT];</code>
       */
      public Builder clearEngine() {
        bitField0_ = (bitField0_ & ~0x00000400);
        engine_ = caffe.Caffe.PoolingParameter.Engine.DEFAULT;
        onChanged();
        return this;
      }

      // optional bool global_pooling = 12 [default = false];
      private boolean globalPooling_ ;
      /**
       * <code>optional bool global_pooling = 12 [default = false];</code>
       *
       * <pre>
       * If global_pooling then it will pool over the size of the bottom by doing
       * kernel_h = bottom-&gt;height and kernel_w = bottom-&gt;width
       * </pre>
       */
      public boolean hasGlobalPooling() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional bool global_pooling = 12 [default = false];</code>
       *
       * <pre>
       * If global_pooling then it will pool over the size of the bottom by doing
       * kernel_h = bottom-&gt;height and kernel_w = bottom-&gt;width
       * </pre>
       */
      public boolean getGlobalPooling() {
        return globalPooling_;
      }
      /**
       * <code>optional bool global_pooling = 12 [default = false];</code>
       *
       * <pre>
       * If global_pooling then it will pool over the size of the bottom by doing
       * kernel_h = bottom-&gt;height and kernel_w = bottom-&gt;width
       * </pre>
       */
      public Builder setGlobalPooling(boolean value) {
        bitField0_ |= 0x00000800;
        globalPooling_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool global_pooling = 12 [default = false];</code>
       *
       * <pre>
       * If global_pooling then it will pool over the size of the bottom by doing
       * kernel_h = bottom-&gt;height and kernel_w = bottom-&gt;width
       * </pre>
       */
      public Builder clearGlobalPooling() {
        bitField0_ = (bitField0_ & ~0x00000800);
        globalPooling_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.PoolingParameter)
    }

    static {
      defaultInstance = new PoolingParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.PoolingParameter)
  }

  public interface PowerParameterOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional float power = 1 [default = 1];
    /**
     * <code>optional float power = 1 [default = 1];</code>
     *
     * <pre>
     * PowerLayer computes outputs y = (shift + scale * x) ^ power.
     * </pre>
     */
    boolean hasPower();
    /**
     * <code>optional float power = 1 [default = 1];</code>
     *
     * <pre>
     * PowerLayer computes outputs y = (shift + scale * x) ^ power.
     * </pre>
     */
    float getPower();

    // optional float scale = 2 [default = 1];
    /**
     * <code>optional float scale = 2 [default = 1];</code>
     */
    boolean hasScale();
    /**
     * <code>optional float scale = 2 [default = 1];</code>
     */
    float getScale();

    // optional float shift = 3 [default = 0];
    /**
     * <code>optional float shift = 3 [default = 0];</code>
     */
    boolean hasShift();
    /**
     * <code>optional float shift = 3 [default = 0];</code>
     */
    float getShift();
  }
  /**
   * Protobuf type {@code caffe.PowerParameter}
   */
  public static final class PowerParameter extends
      com.google.protobuf.GeneratedMessage
      implements PowerParameterOrBuilder {
    // Use PowerParameter.newBuilder() to construct.
    private PowerParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private PowerParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final PowerParameter defaultInstance;
    public static PowerParameter getDefaultInstance() {
      return defaultInstance;
    }

    public PowerParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private PowerParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 13: {
              bitField0_ |= 0x00000001;
              power_ = input.readFloat();
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              scale_ = input.readFloat();
              break;
            }
            case 29: {
              bitField0_ |= 0x00000004;
              shift_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_PowerParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_PowerParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.PowerParameter.class, caffe.Caffe.PowerParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<PowerParameter> PARSER =
        new com.google.protobuf.AbstractParser<PowerParameter>() {
      public PowerParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PowerParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<PowerParameter> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional float power = 1 [default = 1];
    public static final int POWER_FIELD_NUMBER = 1;
    private float power_;
    /**
     * <code>optional float power = 1 [default = 1];</code>
     *
     * <pre>
     * PowerLayer computes outputs y = (shift + scale * x) ^ power.
     * </pre>
     */
    public boolean hasPower() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional float power = 1 [default = 1];</code>
     *
     * <pre>
     * PowerLayer computes outputs y = (shift + scale * x) ^ power.
     * </pre>
     */
    public float getPower() {
      return power_;
    }

    // optional float scale = 2 [default = 1];
    public static final int SCALE_FIELD_NUMBER = 2;
    private float scale_;
    /**
     * <code>optional float scale = 2 [default = 1];</code>
     */
    public boolean hasScale() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional float scale = 2 [default = 1];</code>
     */
    public float getScale() {
      return scale_;
    }

    // optional float shift = 3 [default = 0];
    public static final int SHIFT_FIELD_NUMBER = 3;
    private float shift_;
    /**
     * <code>optional float shift = 3 [default = 0];</code>
     */
    public boolean hasShift() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional float shift = 3 [default = 0];</code>
     */
    public float getShift() {
      return shift_;
    }

    private void initFields() {
      power_ = 1F;
      scale_ = 1F;
      shift_ = 0F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeFloat(1, power_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, scale_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFloat(3, shift_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(1, power_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, scale_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(3, shift_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.PowerParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.PowerParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.PowerParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.PowerParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.PowerParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.PowerParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.PowerParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.PowerParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.PowerParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.PowerParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.PowerParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.PowerParameter}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements caffe.Caffe.PowerParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_PowerParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_PowerParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.PowerParameter.class, caffe.Caffe.PowerParameter.Builder.class);
      }

      // Construct using caffe.Caffe.PowerParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        power_ = 1F;
        bitField0_ = (bitField0_ & ~0x00000001);
        scale_ = 1F;
        bitField0_ = (bitField0_ & ~0x00000002);
        shift_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_PowerParameter_descriptor;
      }

      public caffe.Caffe.PowerParameter getDefaultInstanceForType() {
        return caffe.Caffe.PowerParameter.getDefaultInstance();
      }

      public caffe.Caffe.PowerParameter build() {
        caffe.Caffe.PowerParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.PowerParameter buildPartial() {
        caffe.Caffe.PowerParameter result = new caffe.Caffe.PowerParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.power_ = power_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.scale_ = scale_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.shift_ = shift_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.PowerParameter) {
          return mergeFrom((caffe.Caffe.PowerParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.PowerParameter other) {
        if (other == caffe.Caffe.PowerParameter.getDefaultInstance()) return this;
        if (other.hasPower()) {
          setPower(other.getPower());
        }
        if (other.hasScale()) {
          setScale(other.getScale());
        }
        if (other.hasShift()) {
          setShift(other.getShift());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.PowerParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.PowerParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional float power = 1 [default = 1];
      private float power_ = 1F;
      /**
       * <code>optional float power = 1 [default = 1];</code>
       *
       * <pre>
       * PowerLayer computes outputs y = (shift + scale * x) ^ power.
       * </pre>
       */
      public boolean hasPower() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional float power = 1 [default = 1];</code>
       *
       * <pre>
       * PowerLayer computes outputs y = (shift + scale * x) ^ power.
       * </pre>
       */
      public float getPower() {
        return power_;
      }
      /**
       * <code>optional float power = 1 [default = 1];</code>
       *
       * <pre>
       * PowerLayer computes outputs y = (shift + scale * x) ^ power.
       * </pre>
       */
      public Builder setPower(float value) {
        bitField0_ |= 0x00000001;
        power_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float power = 1 [default = 1];</code>
       *
       * <pre>
       * PowerLayer computes outputs y = (shift + scale * x) ^ power.
       * </pre>
       */
      public Builder clearPower() {
        bitField0_ = (bitField0_ & ~0x00000001);
        power_ = 1F;
        onChanged();
        return this;
      }

      // optional float scale = 2 [default = 1];
      private float scale_ = 1F;
      /**
       * <code>optional float scale = 2 [default = 1];</code>
       */
      public boolean hasScale() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional float scale = 2 [default = 1];</code>
       */
      public float getScale() {
        return scale_;
      }
      /**
       * <code>optional float scale = 2 [default = 1];</code>
       */
      public Builder setScale(float value) {
        bitField0_ |= 0x00000002;
        scale_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float scale = 2 [default = 1];</code>
       */
      public Builder clearScale() {
        bitField0_ = (bitField0_ & ~0x00000002);
        scale_ = 1F;
        onChanged();
        return this;
      }

      // optional float shift = 3 [default = 0];
      private float shift_ ;
      /**
       * <code>optional float shift = 3 [default = 0];</code>
       */
      public boolean hasShift() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional float shift = 3 [default = 0];</code>
       */
      public float getShift() {
        return shift_;
      }
      /**
       * <code>optional float shift = 3 [default = 0];</code>
       */
      public Builder setShift(float value) {
        bitField0_ |= 0x00000004;
        shift_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float shift = 3 [default = 0];</code>
       */
      public Builder clearShift() {
        bitField0_ = (bitField0_ & ~0x00000004);
        shift_ = 0F;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.PowerParameter)
    }

    static {
      defaultInstance = new PowerParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.PowerParameter)
  }

  public interface PythonParameterOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional string module = 1;
    /**
     * <code>optional string module = 1;</code>
     */
    boolean hasModule();
    /**
     * <code>optional string module = 1;</code>
     */
    java.lang.String getModule();
    /**
     * <code>optional string module = 1;</code>
     */
    com.google.protobuf.ByteString
        getModuleBytes();

    // optional string layer = 2;
    /**
     * <code>optional string layer = 2;</code>
     */
    boolean hasLayer();
    /**
     * <code>optional string layer = 2;</code>
     */
    java.lang.String getLayer();
    /**
     * <code>optional string layer = 2;</code>
     */
    com.google.protobuf.ByteString
        getLayerBytes();

    // optional string param_str = 3 [default = ""];
    /**
     * <code>optional string param_str = 3 [default = ""];</code>
     *
     * <pre>
     * This value is set to the attribute `param_str` of the `PythonLayer` object
     * in Python before calling the `setup()` method. This could be a number,
     * string, dictionary in Python dict format, JSON, etc. You may parse this
     * string in `setup` method and use it in `forward` and `backward`.
     * </pre>
     */
    boolean hasParamStr();
    /**
     * <code>optional string param_str = 3 [default = ""];</code>
     *
     * <pre>
     * This value is set to the attribute `param_str` of the `PythonLayer` object
     * in Python before calling the `setup()` method. This could be a number,
     * string, dictionary in Python dict format, JSON, etc. You may parse this
     * string in `setup` method and use it in `forward` and `backward`.
     * </pre>
     */
    java.lang.String getParamStr();
    /**
     * <code>optional string param_str = 3 [default = ""];</code>
     *
     * <pre>
     * This value is set to the attribute `param_str` of the `PythonLayer` object
     * in Python before calling the `setup()` method. This could be a number,
     * string, dictionary in Python dict format, JSON, etc. You may parse this
     * string in `setup` method and use it in `forward` and `backward`.
     * </pre>
     */
    com.google.protobuf.ByteString
        getParamStrBytes();

    // optional bool share_in_parallel = 4 [default = false];
    /**
     * <code>optional bool share_in_parallel = 4 [default = false];</code>
     *
     * <pre>
     * Whether this PythonLayer is shared among worker solvers during data parallelism.
     * If true, each worker solver sequentially run forward from this layer.
     * This value should be set true if you are using it as a data layer.
     * </pre>
     */
    boolean hasShareInParallel();
    /**
     * <code>optional bool share_in_parallel = 4 [default = false];</code>
     *
     * <pre>
     * Whether this PythonLayer is shared among worker solvers during data parallelism.
     * If true, each worker solver sequentially run forward from this layer.
     * This value should be set true if you are using it as a data layer.
     * </pre>
     */
    boolean getShareInParallel();
  }
  /**
   * Protobuf type {@code caffe.PythonParameter}
   */
  public static final class PythonParameter extends
      com.google.protobuf.GeneratedMessage
      implements PythonParameterOrBuilder {
    // Use PythonParameter.newBuilder() to construct.
    private PythonParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private PythonParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final PythonParameter defaultInstance;
    public static PythonParameter getDefaultInstance() {
      return defaultInstance;
    }

    public PythonParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private PythonParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              module_ = input.readBytes();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              layer_ = input.readBytes();
              break;
            }
            case 26: {
              bitField0_ |= 0x00000004;
              paramStr_ = input.readBytes();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              shareInParallel_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_PythonParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_PythonParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.PythonParameter.class, caffe.Caffe.PythonParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<PythonParameter> PARSER =
        new com.google.protobuf.AbstractParser<PythonParameter>() {
      public PythonParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PythonParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<PythonParameter> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional string module = 1;
    public static final int MODULE_FIELD_NUMBER = 1;
    private java.lang.Object module_;
    /**
     * <code>optional string module = 1;</code>
     */
    public boolean hasModule() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string module = 1;</code>
     */
    public java.lang.String getModule() {
      java.lang.Object ref = module_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          module_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string module = 1;</code>
     */
    public com.google.protobuf.ByteString
        getModuleBytes() {
      java.lang.Object ref = module_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        module_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional string layer = 2;
    public static final int LAYER_FIELD_NUMBER = 2;
    private java.lang.Object layer_;
    /**
     * <code>optional string layer = 2;</code>
     */
    public boolean hasLayer() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string layer = 2;</code>
     */
    public java.lang.String getLayer() {
      java.lang.Object ref = layer_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          layer_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string layer = 2;</code>
     */
    public com.google.protobuf.ByteString
        getLayerBytes() {
      java.lang.Object ref = layer_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        layer_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional string param_str = 3 [default = ""];
    public static final int PARAM_STR_FIELD_NUMBER = 3;
    private java.lang.Object paramStr_;
    /**
     * <code>optional string param_str = 3 [default = ""];</code>
     *
     * <pre>
     * This value is set to the attribute `param_str` of the `PythonLayer` object
     * in Python before calling the `setup()` method. This could be a number,
     * string, dictionary in Python dict format, JSON, etc. You may parse this
     * string in `setup` method and use it in `forward` and `backward`.
     * </pre>
     */
    public boolean hasParamStr() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional string param_str = 3 [default = ""];</code>
     *
     * <pre>
     * This value is set to the attribute `param_str` of the `PythonLayer` object
     * in Python before calling the `setup()` method. This could be a number,
     * string, dictionary in Python dict format, JSON, etc. You may parse this
     * string in `setup` method and use it in `forward` and `backward`.
     * </pre>
     */
    public java.lang.String getParamStr() {
      java.lang.Object ref = paramStr_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          paramStr_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string param_str = 3 [default = ""];</code>
     *
     * <pre>
     * This value is set to the attribute `param_str` of the `PythonLayer` object
     * in Python before calling the `setup()` method. This could be a number,
     * string, dictionary in Python dict format, JSON, etc. You may parse this
     * string in `setup` method and use it in `forward` and `backward`.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getParamStrBytes() {
      java.lang.Object ref = paramStr_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        paramStr_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional bool share_in_parallel = 4 [default = false];
    public static final int SHARE_IN_PARALLEL_FIELD_NUMBER = 4;
    private boolean shareInParallel_;
    /**
     * <code>optional bool share_in_parallel = 4 [default = false];</code>
     *
     * <pre>
     * Whether this PythonLayer is shared among worker solvers during data parallelism.
     * If true, each worker solver sequentially run forward from this layer.
     * This value should be set true if you are using it as a data layer.
     * </pre>
     */
    public boolean hasShareInParallel() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional bool share_in_parallel = 4 [default = false];</code>
     *
     * <pre>
     * Whether this PythonLayer is shared among worker solvers during data parallelism.
     * If true, each worker solver sequentially run forward from this layer.
     * This value should be set true if you are using it as a data layer.
     * </pre>
     */
    public boolean getShareInParallel() {
      return shareInParallel_;
    }

    private void initFields() {
      module_ = "";
      layer_ = "";
      paramStr_ = "";
      shareInParallel_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getModuleBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getLayerBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, getParamStrBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBool(4, shareInParallel_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getModuleBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getLayerBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getParamStrBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, shareInParallel_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.PythonParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.PythonParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.PythonParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.PythonParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.PythonParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.PythonParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.PythonParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.PythonParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.PythonParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.PythonParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.PythonParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.PythonParameter}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements caffe.Caffe.PythonParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_PythonParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_PythonParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.PythonParameter.class, caffe.Caffe.PythonParameter.Builder.class);
      }

      // Construct using caffe.Caffe.PythonParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        module_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        layer_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        paramStr_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        shareInParallel_ = false;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_PythonParameter_descriptor;
      }

      public caffe.Caffe.PythonParameter getDefaultInstanceForType() {
        return caffe.Caffe.PythonParameter.getDefaultInstance();
      }

      public caffe.Caffe.PythonParameter build() {
        caffe.Caffe.PythonParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.PythonParameter buildPartial() {
        caffe.Caffe.PythonParameter result = new caffe.Caffe.PythonParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.module_ = module_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.layer_ = layer_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.paramStr_ = paramStr_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.shareInParallel_ = shareInParallel_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.PythonParameter) {
          return mergeFrom((caffe.Caffe.PythonParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.PythonParameter other) {
        if (other == caffe.Caffe.PythonParameter.getDefaultInstance()) return this;
        if (other.hasModule()) {
          bitField0_ |= 0x00000001;
          module_ = other.module_;
          onChanged();
        }
        if (other.hasLayer()) {
          bitField0_ |= 0x00000002;
          layer_ = other.layer_;
          onChanged();
        }
        if (other.hasParamStr()) {
          bitField0_ |= 0x00000004;
          paramStr_ = other.paramStr_;
          onChanged();
        }
        if (other.hasShareInParallel()) {
          setShareInParallel(other.getShareInParallel());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.PythonParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.PythonParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional string module = 1;
      private java.lang.Object module_ = "";
      /**
       * <code>optional string module = 1;</code>
       */
      public boolean hasModule() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string module = 1;</code>
       */
      public java.lang.String getModule() {
        java.lang.Object ref = module_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          module_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string module = 1;</code>
       */
      public com.google.protobuf.ByteString
          getModuleBytes() {
        java.lang.Object ref = module_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          module_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string module = 1;</code>
       */
      public Builder setModule(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        module_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string module = 1;</code>
       */
      public Builder clearModule() {
        bitField0_ = (bitField0_ & ~0x00000001);
        module_ = getDefaultInstance().getModule();
        onChanged();
        return this;
      }
      /**
       * <code>optional string module = 1;</code>
       */
      public Builder setModuleBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        module_ = value;
        onChanged();
        return this;
      }

      // optional string layer = 2;
      private java.lang.Object layer_ = "";
      /**
       * <code>optional string layer = 2;</code>
       */
      public boolean hasLayer() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string layer = 2;</code>
       */
      public java.lang.String getLayer() {
        java.lang.Object ref = layer_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          layer_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string layer = 2;</code>
       */
      public com.google.protobuf.ByteString
          getLayerBytes() {
        java.lang.Object ref = layer_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          layer_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string layer = 2;</code>
       */
      public Builder setLayer(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        layer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string layer = 2;</code>
       */
      public Builder clearLayer() {
        bitField0_ = (bitField0_ & ~0x00000002);
        layer_ = getDefaultInstance().getLayer();
        onChanged();
        return this;
      }
      /**
       * <code>optional string layer = 2;</code>
       */
      public Builder setLayerBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        layer_ = value;
        onChanged();
        return this;
      }

      // optional string param_str = 3 [default = ""];
      private java.lang.Object paramStr_ = "";
      /**
       * <code>optional string param_str = 3 [default = ""];</code>
       *
       * <pre>
       * This value is set to the attribute `param_str` of the `PythonLayer` object
       * in Python before calling the `setup()` method. This could be a number,
       * string, dictionary in Python dict format, JSON, etc. You may parse this
       * string in `setup` method and use it in `forward` and `backward`.
       * </pre>
       */
      public boolean hasParamStr() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional string param_str = 3 [default = ""];</code>
       *
       * <pre>
       * This value is set to the attribute `param_str` of the `PythonLayer` object
       * in Python before calling the `setup()` method. This could be a number,
       * string, dictionary in Python dict format, JSON, etc. You may parse this
       * string in `setup` method and use it in `forward` and `backward`.
       * </pre>
       */
      public java.lang.String getParamStr() {
        java.lang.Object ref = paramStr_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          paramStr_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string param_str = 3 [default = ""];</code>
       *
       * <pre>
       * This value is set to the attribute `param_str` of the `PythonLayer` object
       * in Python before calling the `setup()` method. This could be a number,
       * string, dictionary in Python dict format, JSON, etc. You may parse this
       * string in `setup` method and use it in `forward` and `backward`.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getParamStrBytes() {
        java.lang.Object ref = paramStr_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          paramStr_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string param_str = 3 [default = ""];</code>
       *
       * <pre>
       * This value is set to the attribute `param_str` of the `PythonLayer` object
       * in Python before calling the `setup()` method. This could be a number,
       * string, dictionary in Python dict format, JSON, etc. You may parse this
       * string in `setup` method and use it in `forward` and `backward`.
       * </pre>
       */
      public Builder setParamStr(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        paramStr_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string param_str = 3 [default = ""];</code>
       *
       * <pre>
       * This value is set to the attribute `param_str` of the `PythonLayer` object
       * in Python before calling the `setup()` method. This could be a number,
       * string, dictionary in Python dict format, JSON, etc. You may parse this
       * string in `setup` method and use it in `forward` and `backward`.
       * </pre>
       */
      public Builder clearParamStr() {
        bitField0_ = (bitField0_ & ~0x00000004);
        paramStr_ = getDefaultInstance().getParamStr();
        onChanged();
        return this;
      }
      /**
       * <code>optional string param_str = 3 [default = ""];</code>
       *
       * <pre>
       * This value is set to the attribute `param_str` of the `PythonLayer` object
       * in Python before calling the `setup()` method. This could be a number,
       * string, dictionary in Python dict format, JSON, etc. You may parse this
       * string in `setup` method and use it in `forward` and `backward`.
       * </pre>
       */
      public Builder setParamStrBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        paramStr_ = value;
        onChanged();
        return this;
      }

      // optional bool share_in_parallel = 4 [default = false];
      private boolean shareInParallel_ ;
      /**
       * <code>optional bool share_in_parallel = 4 [default = false];</code>
       *
       * <pre>
       * Whether this PythonLayer is shared among worker solvers during data parallelism.
       * If true, each worker solver sequentially run forward from this layer.
       * This value should be set true if you are using it as a data layer.
       * </pre>
       */
      public boolean hasShareInParallel() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional bool share_in_parallel = 4 [default = false];</code>
       *
       * <pre>
       * Whether this PythonLayer is shared among worker solvers during data parallelism.
       * If true, each worker solver sequentially run forward from this layer.
       * This value should be set true if you are using it as a data layer.
       * </pre>
       */
      public boolean getShareInParallel() {
        return shareInParallel_;
      }
      /**
       * <code>optional bool share_in_parallel = 4 [default = false];</code>
       *
       * <pre>
       * Whether this PythonLayer is shared among worker solvers during data parallelism.
       * If true, each worker solver sequentially run forward from this layer.
       * This value should be set true if you are using it as a data layer.
       * </pre>
       */
      public Builder setShareInParallel(boolean value) {
        bitField0_ |= 0x00000008;
        shareInParallel_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool share_in_parallel = 4 [default = false];</code>
       *
       * <pre>
       * Whether this PythonLayer is shared among worker solvers during data parallelism.
       * If true, each worker solver sequentially run forward from this layer.
       * This value should be set true if you are using it as a data layer.
       * </pre>
       */
      public Builder clearShareInParallel() {
        bitField0_ = (bitField0_ & ~0x00000008);
        shareInParallel_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.PythonParameter)
    }

    static {
      defaultInstance = new PythonParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.PythonParameter)
  }

  public interface RecurrentParameterOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional uint32 num_output = 1 [default = 0];
    /**
     * <code>optional uint32 num_output = 1 [default = 0];</code>
     *
     * <pre>
     * The dimension of the output (and usually hidden state) representation --
     * must be explicitly set to non-zero.
     * </pre>
     */
    boolean hasNumOutput();
    /**
     * <code>optional uint32 num_output = 1 [default = 0];</code>
     *
     * <pre>
     * The dimension of the output (and usually hidden state) representation --
     * must be explicitly set to non-zero.
     * </pre>
     */
    int getNumOutput();

    // optional .caffe.FillerParameter weight_filler = 2;
    /**
     * <code>optional .caffe.FillerParameter weight_filler = 2;</code>
     *
     * <pre>
     * The filler for the weight
     * </pre>
     */
    boolean hasWeightFiller();
    /**
     * <code>optional .caffe.FillerParameter weight_filler = 2;</code>
     *
     * <pre>
     * The filler for the weight
     * </pre>
     */
    caffe.Caffe.FillerParameter getWeightFiller();
    /**
     * <code>optional .caffe.FillerParameter weight_filler = 2;</code>
     *
     * <pre>
     * The filler for the weight
     * </pre>
     */
    caffe.Caffe.FillerParameterOrBuilder getWeightFillerOrBuilder();

    // optional .caffe.FillerParameter bias_filler = 3;
    /**
     * <code>optional .caffe.FillerParameter bias_filler = 3;</code>
     *
     * <pre>
     * The filler for the bias
     * </pre>
     */
    boolean hasBiasFiller();
    /**
     * <code>optional .caffe.FillerParameter bias_filler = 3;</code>
     *
     * <pre>
     * The filler for the bias
     * </pre>
     */
    caffe.Caffe.FillerParameter getBiasFiller();
    /**
     * <code>optional .caffe.FillerParameter bias_filler = 3;</code>
     *
     * <pre>
     * The filler for the bias
     * </pre>
     */
    caffe.Caffe.FillerParameterOrBuilder getBiasFillerOrBuilder();

    // optional bool debug_info = 4 [default = false];
    /**
     * <code>optional bool debug_info = 4 [default = false];</code>
     *
     * <pre>
     * Whether to enable displaying debug_info in the unrolled recurrent net.
     * </pre>
     */
    boolean hasDebugInfo();
    /**
     * <code>optional bool debug_info = 4 [default = false];</code>
     *
     * <pre>
     * Whether to enable displaying debug_info in the unrolled recurrent net.
     * </pre>
     */
    boolean getDebugInfo();

    // optional bool expose_hidden = 5 [default = false];
    /**
     * <code>optional bool expose_hidden = 5 [default = false];</code>
     *
     * <pre>
     * Whether to add as additional inputs (bottoms) the initial hidden state
     * blobs, and add as additional outputs (tops) the final timestep hidden state
     * blobs.  The number of additional bottom/top blobs required depends on the
     * recurrent architecture -- e.g., 1 for RNNs, 2 for LSTMs.
     * </pre>
     */
    boolean hasExposeHidden();
    /**
     * <code>optional bool expose_hidden = 5 [default = false];</code>
     *
     * <pre>
     * Whether to add as additional inputs (bottoms) the initial hidden state
     * blobs, and add as additional outputs (tops) the final timestep hidden state
     * blobs.  The number of additional bottom/top blobs required depends on the
     * recurrent architecture -- e.g., 1 for RNNs, 2 for LSTMs.
     * </pre>
     */
    boolean getExposeHidden();
  }
  /**
   * Protobuf type {@code caffe.RecurrentParameter}
   *
   * <pre>
   * Message that stores parameters used by RecurrentLayer
   * </pre>
   */
  public static final class RecurrentParameter extends
      com.google.protobuf.GeneratedMessage
      implements RecurrentParameterOrBuilder {
    // Use RecurrentParameter.newBuilder() to construct.
    private RecurrentParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private RecurrentParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final RecurrentParameter defaultInstance;
    public static RecurrentParameter getDefaultInstance() {
      return defaultInstance;
    }

    public RecurrentParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private RecurrentParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              numOutput_ = input.readUInt32();
              break;
            }
            case 18: {
              caffe.Caffe.FillerParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = weightFiller_.toBuilder();
              }
              weightFiller_ = input.readMessage(caffe.Caffe.FillerParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(weightFiller_);
                weightFiller_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 26: {
              caffe.Caffe.FillerParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = biasFiller_.toBuilder();
              }
              biasFiller_ = input.readMessage(caffe.Caffe.FillerParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(biasFiller_);
                biasFiller_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              debugInfo_ = input.readBool();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              exposeHidden_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_RecurrentParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_RecurrentParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.RecurrentParameter.class, caffe.Caffe.RecurrentParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<RecurrentParameter> PARSER =
        new com.google.protobuf.AbstractParser<RecurrentParameter>() {
      public RecurrentParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RecurrentParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RecurrentParameter> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional uint32 num_output = 1 [default = 0];
    public static final int NUM_OUTPUT_FIELD_NUMBER = 1;
    private int numOutput_;
    /**
     * <code>optional uint32 num_output = 1 [default = 0];</code>
     *
     * <pre>
     * The dimension of the output (and usually hidden state) representation --
     * must be explicitly set to non-zero.
     * </pre>
     */
    public boolean hasNumOutput() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 num_output = 1 [default = 0];</code>
     *
     * <pre>
     * The dimension of the output (and usually hidden state) representation --
     * must be explicitly set to non-zero.
     * </pre>
     */
    public int getNumOutput() {
      return numOutput_;
    }

    // optional .caffe.FillerParameter weight_filler = 2;
    public static final int WEIGHT_FILLER_FIELD_NUMBER = 2;
    private caffe.Caffe.FillerParameter weightFiller_;
    /**
     * <code>optional .caffe.FillerParameter weight_filler = 2;</code>
     *
     * <pre>
     * The filler for the weight
     * </pre>
     */
    public boolean hasWeightFiller() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .caffe.FillerParameter weight_filler = 2;</code>
     *
     * <pre>
     * The filler for the weight
     * </pre>
     */
    public caffe.Caffe.FillerParameter getWeightFiller() {
      return weightFiller_;
    }
    /**
     * <code>optional .caffe.FillerParameter weight_filler = 2;</code>
     *
     * <pre>
     * The filler for the weight
     * </pre>
     */
    public caffe.Caffe.FillerParameterOrBuilder getWeightFillerOrBuilder() {
      return weightFiller_;
    }

    // optional .caffe.FillerParameter bias_filler = 3;
    public static final int BIAS_FILLER_FIELD_NUMBER = 3;
    private caffe.Caffe.FillerParameter biasFiller_;
    /**
     * <code>optional .caffe.FillerParameter bias_filler = 3;</code>
     *
     * <pre>
     * The filler for the bias
     * </pre>
     */
    public boolean hasBiasFiller() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .caffe.FillerParameter bias_filler = 3;</code>
     *
     * <pre>
     * The filler for the bias
     * </pre>
     */
    public caffe.Caffe.FillerParameter getBiasFiller() {
      return biasFiller_;
    }
    /**
     * <code>optional .caffe.FillerParameter bias_filler = 3;</code>
     *
     * <pre>
     * The filler for the bias
     * </pre>
     */
    public caffe.Caffe.FillerParameterOrBuilder getBiasFillerOrBuilder() {
      return biasFiller_;
    }

    // optional bool debug_info = 4 [default = false];
    public static final int DEBUG_INFO_FIELD_NUMBER = 4;
    private boolean debugInfo_;
    /**
     * <code>optional bool debug_info = 4 [default = false];</code>
     *
     * <pre>
     * Whether to enable displaying debug_info in the unrolled recurrent net.
     * </pre>
     */
    public boolean hasDebugInfo() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional bool debug_info = 4 [default = false];</code>
     *
     * <pre>
     * Whether to enable displaying debug_info in the unrolled recurrent net.
     * </pre>
     */
    public boolean getDebugInfo() {
      return debugInfo_;
    }

    // optional bool expose_hidden = 5 [default = false];
    public static final int EXPOSE_HIDDEN_FIELD_NUMBER = 5;
    private boolean exposeHidden_;
    /**
     * <code>optional bool expose_hidden = 5 [default = false];</code>
     *
     * <pre>
     * Whether to add as additional inputs (bottoms) the initial hidden state
     * blobs, and add as additional outputs (tops) the final timestep hidden state
     * blobs.  The number of additional bottom/top blobs required depends on the
     * recurrent architecture -- e.g., 1 for RNNs, 2 for LSTMs.
     * </pre>
     */
    public boolean hasExposeHidden() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional bool expose_hidden = 5 [default = false];</code>
     *
     * <pre>
     * Whether to add as additional inputs (bottoms) the initial hidden state
     * blobs, and add as additional outputs (tops) the final timestep hidden state
     * blobs.  The number of additional bottom/top blobs required depends on the
     * recurrent architecture -- e.g., 1 for RNNs, 2 for LSTMs.
     * </pre>
     */
    public boolean getExposeHidden() {
      return exposeHidden_;
    }

    private void initFields() {
      numOutput_ = 0;
      weightFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
      biasFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
      debugInfo_ = false;
      exposeHidden_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, numOutput_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, weightFiller_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, biasFiller_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBool(4, debugInfo_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBool(5, exposeHidden_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, numOutput_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, weightFiller_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, biasFiller_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, debugInfo_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, exposeHidden_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.RecurrentParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.RecurrentParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.RecurrentParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.RecurrentParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.RecurrentParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.RecurrentParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.RecurrentParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.RecurrentParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.RecurrentParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.RecurrentParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.RecurrentParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.RecurrentParameter}
     *
     * <pre>
     * Message that stores parameters used by RecurrentLayer
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements caffe.Caffe.RecurrentParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_RecurrentParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_RecurrentParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.RecurrentParameter.class, caffe.Caffe.RecurrentParameter.Builder.class);
      }

      // Construct using caffe.Caffe.RecurrentParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getWeightFillerFieldBuilder();
          getBiasFillerFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        numOutput_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (weightFillerBuilder_ == null) {
          weightFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
        } else {
          weightFillerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        if (biasFillerBuilder_ == null) {
          biasFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
        } else {
          biasFillerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        debugInfo_ = false;
        bitField0_ = (bitField0_ & ~0x00000008);
        exposeHidden_ = false;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_RecurrentParameter_descriptor;
      }

      public caffe.Caffe.RecurrentParameter getDefaultInstanceForType() {
        return caffe.Caffe.RecurrentParameter.getDefaultInstance();
      }

      public caffe.Caffe.RecurrentParameter build() {
        caffe.Caffe.RecurrentParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.RecurrentParameter buildPartial() {
        caffe.Caffe.RecurrentParameter result = new caffe.Caffe.RecurrentParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.numOutput_ = numOutput_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (weightFillerBuilder_ == null) {
          result.weightFiller_ = weightFiller_;
        } else {
          result.weightFiller_ = weightFillerBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (biasFillerBuilder_ == null) {
          result.biasFiller_ = biasFiller_;
        } else {
          result.biasFiller_ = biasFillerBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.debugInfo_ = debugInfo_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.exposeHidden_ = exposeHidden_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.RecurrentParameter) {
          return mergeFrom((caffe.Caffe.RecurrentParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.RecurrentParameter other) {
        if (other == caffe.Caffe.RecurrentParameter.getDefaultInstance()) return this;
        if (other.hasNumOutput()) {
          setNumOutput(other.getNumOutput());
        }
        if (other.hasWeightFiller()) {
          mergeWeightFiller(other.getWeightFiller());
        }
        if (other.hasBiasFiller()) {
          mergeBiasFiller(other.getBiasFiller());
        }
        if (other.hasDebugInfo()) {
          setDebugInfo(other.getDebugInfo());
        }
        if (other.hasExposeHidden()) {
          setExposeHidden(other.getExposeHidden());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.RecurrentParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.RecurrentParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional uint32 num_output = 1 [default = 0];
      private int numOutput_ ;
      /**
       * <code>optional uint32 num_output = 1 [default = 0];</code>
       *
       * <pre>
       * The dimension of the output (and usually hidden state) representation --
       * must be explicitly set to non-zero.
       * </pre>
       */
      public boolean hasNumOutput() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 num_output = 1 [default = 0];</code>
       *
       * <pre>
       * The dimension of the output (and usually hidden state) representation --
       * must be explicitly set to non-zero.
       * </pre>
       */
      public int getNumOutput() {
        return numOutput_;
      }
      /**
       * <code>optional uint32 num_output = 1 [default = 0];</code>
       *
       * <pre>
       * The dimension of the output (and usually hidden state) representation --
       * must be explicitly set to non-zero.
       * </pre>
       */
      public Builder setNumOutput(int value) {
        bitField0_ |= 0x00000001;
        numOutput_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 num_output = 1 [default = 0];</code>
       *
       * <pre>
       * The dimension of the output (and usually hidden state) representation --
       * must be explicitly set to non-zero.
       * </pre>
       */
      public Builder clearNumOutput() {
        bitField0_ = (bitField0_ & ~0x00000001);
        numOutput_ = 0;
        onChanged();
        return this;
      }

      // optional .caffe.FillerParameter weight_filler = 2;
      private caffe.Caffe.FillerParameter weightFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.FillerParameter, caffe.Caffe.FillerParameter.Builder, caffe.Caffe.FillerParameterOrBuilder> weightFillerBuilder_;
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 2;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public boolean hasWeightFiller() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 2;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public caffe.Caffe.FillerParameter getWeightFiller() {
        if (weightFillerBuilder_ == null) {
          return weightFiller_;
        } else {
          return weightFillerBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 2;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public Builder setWeightFiller(caffe.Caffe.FillerParameter value) {
        if (weightFillerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          weightFiller_ = value;
          onChanged();
        } else {
          weightFillerBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 2;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public Builder setWeightFiller(
          caffe.Caffe.FillerParameter.Builder builderForValue) {
        if (weightFillerBuilder_ == null) {
          weightFiller_ = builderForValue.build();
          onChanged();
        } else {
          weightFillerBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 2;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public Builder mergeWeightFiller(caffe.Caffe.FillerParameter value) {
        if (weightFillerBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              weightFiller_ != caffe.Caffe.FillerParameter.getDefaultInstance()) {
            weightFiller_ =
              caffe.Caffe.FillerParameter.newBuilder(weightFiller_).mergeFrom(value).buildPartial();
          } else {
            weightFiller_ = value;
          }
          onChanged();
        } else {
          weightFillerBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 2;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public Builder clearWeightFiller() {
        if (weightFillerBuilder_ == null) {
          weightFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
          onChanged();
        } else {
          weightFillerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 2;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public caffe.Caffe.FillerParameter.Builder getWeightFillerBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getWeightFillerFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 2;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public caffe.Caffe.FillerParameterOrBuilder getWeightFillerOrBuilder() {
        if (weightFillerBuilder_ != null) {
          return weightFillerBuilder_.getMessageOrBuilder();
        } else {
          return weightFiller_;
        }
      }
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 2;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.FillerParameter, caffe.Caffe.FillerParameter.Builder, caffe.Caffe.FillerParameterOrBuilder> 
          getWeightFillerFieldBuilder() {
        if (weightFillerBuilder_ == null) {
          weightFillerBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.FillerParameter, caffe.Caffe.FillerParameter.Builder, caffe.Caffe.FillerParameterOrBuilder>(
                  weightFiller_,
                  getParentForChildren(),
                  isClean());
          weightFiller_ = null;
        }
        return weightFillerBuilder_;
      }

      // optional .caffe.FillerParameter bias_filler = 3;
      private caffe.Caffe.FillerParameter biasFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.FillerParameter, caffe.Caffe.FillerParameter.Builder, caffe.Caffe.FillerParameterOrBuilder> biasFillerBuilder_;
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 3;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public boolean hasBiasFiller() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 3;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public caffe.Caffe.FillerParameter getBiasFiller() {
        if (biasFillerBuilder_ == null) {
          return biasFiller_;
        } else {
          return biasFillerBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 3;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public Builder setBiasFiller(caffe.Caffe.FillerParameter value) {
        if (biasFillerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          biasFiller_ = value;
          onChanged();
        } else {
          biasFillerBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 3;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public Builder setBiasFiller(
          caffe.Caffe.FillerParameter.Builder builderForValue) {
        if (biasFillerBuilder_ == null) {
          biasFiller_ = builderForValue.build();
          onChanged();
        } else {
          biasFillerBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 3;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public Builder mergeBiasFiller(caffe.Caffe.FillerParameter value) {
        if (biasFillerBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              biasFiller_ != caffe.Caffe.FillerParameter.getDefaultInstance()) {
            biasFiller_ =
              caffe.Caffe.FillerParameter.newBuilder(biasFiller_).mergeFrom(value).buildPartial();
          } else {
            biasFiller_ = value;
          }
          onChanged();
        } else {
          biasFillerBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 3;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public Builder clearBiasFiller() {
        if (biasFillerBuilder_ == null) {
          biasFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
          onChanged();
        } else {
          biasFillerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 3;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public caffe.Caffe.FillerParameter.Builder getBiasFillerBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getBiasFillerFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 3;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public caffe.Caffe.FillerParameterOrBuilder getBiasFillerOrBuilder() {
        if (biasFillerBuilder_ != null) {
          return biasFillerBuilder_.getMessageOrBuilder();
        } else {
          return biasFiller_;
        }
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 3;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.FillerParameter, caffe.Caffe.FillerParameter.Builder, caffe.Caffe.FillerParameterOrBuilder> 
          getBiasFillerFieldBuilder() {
        if (biasFillerBuilder_ == null) {
          biasFillerBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.FillerParameter, caffe.Caffe.FillerParameter.Builder, caffe.Caffe.FillerParameterOrBuilder>(
                  biasFiller_,
                  getParentForChildren(),
                  isClean());
          biasFiller_ = null;
        }
        return biasFillerBuilder_;
      }

      // optional bool debug_info = 4 [default = false];
      private boolean debugInfo_ ;
      /**
       * <code>optional bool debug_info = 4 [default = false];</code>
       *
       * <pre>
       * Whether to enable displaying debug_info in the unrolled recurrent net.
       * </pre>
       */
      public boolean hasDebugInfo() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional bool debug_info = 4 [default = false];</code>
       *
       * <pre>
       * Whether to enable displaying debug_info in the unrolled recurrent net.
       * </pre>
       */
      public boolean getDebugInfo() {
        return debugInfo_;
      }
      /**
       * <code>optional bool debug_info = 4 [default = false];</code>
       *
       * <pre>
       * Whether to enable displaying debug_info in the unrolled recurrent net.
       * </pre>
       */
      public Builder setDebugInfo(boolean value) {
        bitField0_ |= 0x00000008;
        debugInfo_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool debug_info = 4 [default = false];</code>
       *
       * <pre>
       * Whether to enable displaying debug_info in the unrolled recurrent net.
       * </pre>
       */
      public Builder clearDebugInfo() {
        bitField0_ = (bitField0_ & ~0x00000008);
        debugInfo_ = false;
        onChanged();
        return this;
      }

      // optional bool expose_hidden = 5 [default = false];
      private boolean exposeHidden_ ;
      /**
       * <code>optional bool expose_hidden = 5 [default = false];</code>
       *
       * <pre>
       * Whether to add as additional inputs (bottoms) the initial hidden state
       * blobs, and add as additional outputs (tops) the final timestep hidden state
       * blobs.  The number of additional bottom/top blobs required depends on the
       * recurrent architecture -- e.g., 1 for RNNs, 2 for LSTMs.
       * </pre>
       */
      public boolean hasExposeHidden() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional bool expose_hidden = 5 [default = false];</code>
       *
       * <pre>
       * Whether to add as additional inputs (bottoms) the initial hidden state
       * blobs, and add as additional outputs (tops) the final timestep hidden state
       * blobs.  The number of additional bottom/top blobs required depends on the
       * recurrent architecture -- e.g., 1 for RNNs, 2 for LSTMs.
       * </pre>
       */
      public boolean getExposeHidden() {
        return exposeHidden_;
      }
      /**
       * <code>optional bool expose_hidden = 5 [default = false];</code>
       *
       * <pre>
       * Whether to add as additional inputs (bottoms) the initial hidden state
       * blobs, and add as additional outputs (tops) the final timestep hidden state
       * blobs.  The number of additional bottom/top blobs required depends on the
       * recurrent architecture -- e.g., 1 for RNNs, 2 for LSTMs.
       * </pre>
       */
      public Builder setExposeHidden(boolean value) {
        bitField0_ |= 0x00000010;
        exposeHidden_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool expose_hidden = 5 [default = false];</code>
       *
       * <pre>
       * Whether to add as additional inputs (bottoms) the initial hidden state
       * blobs, and add as additional outputs (tops) the final timestep hidden state
       * blobs.  The number of additional bottom/top blobs required depends on the
       * recurrent architecture -- e.g., 1 for RNNs, 2 for LSTMs.
       * </pre>
       */
      public Builder clearExposeHidden() {
        bitField0_ = (bitField0_ & ~0x00000010);
        exposeHidden_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.RecurrentParameter)
    }

    static {
      defaultInstance = new RecurrentParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.RecurrentParameter)
  }

  public interface ReductionParameterOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional .caffe.ReductionParameter.ReductionOp operation = 1 [default = SUM];
    /**
     * <code>optional .caffe.ReductionParameter.ReductionOp operation = 1 [default = SUM];</code>
     *
     * <pre>
     * reduction operation
     * </pre>
     */
    boolean hasOperation();
    /**
     * <code>optional .caffe.ReductionParameter.ReductionOp operation = 1 [default = SUM];</code>
     *
     * <pre>
     * reduction operation
     * </pre>
     */
    caffe.Caffe.ReductionParameter.ReductionOp getOperation();

    // optional int32 axis = 2 [default = 0];
    /**
     * <code>optional int32 axis = 2 [default = 0];</code>
     *
     * <pre>
     * The first axis to reduce to a scalar -- may be negative to index from the
     * end (e.g., -1 for the last axis).
     * (Currently, only reduction along ALL "tail" axes is supported; reduction
     * of axis M through N, where N &lt; num_axes - 1, is unsupported.)
     * Suppose we have an n-axis bottom Blob with shape:
     *     (d0, d1, d2, ..., d(m-1), dm, d(m+1), ..., d(n-1)).
     * If axis == m, the output Blob will have shape
     *     (d0, d1, d2, ..., d(m-1)),
     * and the ReductionOp operation is performed (d0 * d1 * d2 * ... * d(m-1))
     * times, each including (dm * d(m+1) * ... * d(n-1)) individual data.
     * If axis == 0 (the default), the output Blob always has the empty shape
     * (count 1), performing reduction across the entire input --
     * often useful for creating new loss functions.
     * </pre>
     */
    boolean hasAxis();
    /**
     * <code>optional int32 axis = 2 [default = 0];</code>
     *
     * <pre>
     * The first axis to reduce to a scalar -- may be negative to index from the
     * end (e.g., -1 for the last axis).
     * (Currently, only reduction along ALL "tail" axes is supported; reduction
     * of axis M through N, where N &lt; num_axes - 1, is unsupported.)
     * Suppose we have an n-axis bottom Blob with shape:
     *     (d0, d1, d2, ..., d(m-1), dm, d(m+1), ..., d(n-1)).
     * If axis == m, the output Blob will have shape
     *     (d0, d1, d2, ..., d(m-1)),
     * and the ReductionOp operation is performed (d0 * d1 * d2 * ... * d(m-1))
     * times, each including (dm * d(m+1) * ... * d(n-1)) individual data.
     * If axis == 0 (the default), the output Blob always has the empty shape
     * (count 1), performing reduction across the entire input --
     * often useful for creating new loss functions.
     * </pre>
     */
    int getAxis();

    // optional float coeff = 3 [default = 1];
    /**
     * <code>optional float coeff = 3 [default = 1];</code>
     *
     * <pre>
     * coefficient for output
     * </pre>
     */
    boolean hasCoeff();
    /**
     * <code>optional float coeff = 3 [default = 1];</code>
     *
     * <pre>
     * coefficient for output
     * </pre>
     */
    float getCoeff();
  }
  /**
   * Protobuf type {@code caffe.ReductionParameter}
   *
   * <pre>
   * Message that stores parameters used by ReductionLayer
   * </pre>
   */
  public static final class ReductionParameter extends
      com.google.protobuf.GeneratedMessage
      implements ReductionParameterOrBuilder {
    // Use ReductionParameter.newBuilder() to construct.
    private ReductionParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ReductionParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ReductionParameter defaultInstance;
    public static ReductionParameter getDefaultInstance() {
      return defaultInstance;
    }

    public ReductionParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ReductionParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              caffe.Caffe.ReductionParameter.ReductionOp value = caffe.Caffe.ReductionParameter.ReductionOp.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                operation_ = value;
              }
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              axis_ = input.readInt32();
              break;
            }
            case 29: {
              bitField0_ |= 0x00000004;
              coeff_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_ReductionParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_ReductionParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.ReductionParameter.class, caffe.Caffe.ReductionParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<ReductionParameter> PARSER =
        new com.google.protobuf.AbstractParser<ReductionParameter>() {
      public ReductionParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ReductionParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ReductionParameter> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code caffe.ReductionParameter.ReductionOp}
     */
    public enum ReductionOp
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>SUM = 1;</code>
       */
      SUM(0, 1),
      /**
       * <code>ASUM = 2;</code>
       */
      ASUM(1, 2),
      /**
       * <code>SUMSQ = 3;</code>
       */
      SUMSQ(2, 3),
      /**
       * <code>MEAN = 4;</code>
       */
      MEAN(3, 4),
      ;

      /**
       * <code>SUM = 1;</code>
       */
      public static final int SUM_VALUE = 1;
      /**
       * <code>ASUM = 2;</code>
       */
      public static final int ASUM_VALUE = 2;
      /**
       * <code>SUMSQ = 3;</code>
       */
      public static final int SUMSQ_VALUE = 3;
      /**
       * <code>MEAN = 4;</code>
       */
      public static final int MEAN_VALUE = 4;


      public final int getNumber() { return value; }

      public static ReductionOp valueOf(int value) {
        switch (value) {
          case 1: return SUM;
          case 2: return ASUM;
          case 3: return SUMSQ;
          case 4: return MEAN;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<ReductionOp>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<ReductionOp>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<ReductionOp>() {
              public ReductionOp findValueByNumber(int number) {
                return ReductionOp.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return caffe.Caffe.ReductionParameter.getDescriptor().getEnumTypes().get(0);
      }

      private static final ReductionOp[] VALUES = values();

      public static ReductionOp valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private ReductionOp(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:caffe.ReductionParameter.ReductionOp)
    }

    private int bitField0_;
    // optional .caffe.ReductionParameter.ReductionOp operation = 1 [default = SUM];
    public static final int OPERATION_FIELD_NUMBER = 1;
    private caffe.Caffe.ReductionParameter.ReductionOp operation_;
    /**
     * <code>optional .caffe.ReductionParameter.ReductionOp operation = 1 [default = SUM];</code>
     *
     * <pre>
     * reduction operation
     * </pre>
     */
    public boolean hasOperation() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .caffe.ReductionParameter.ReductionOp operation = 1 [default = SUM];</code>
     *
     * <pre>
     * reduction operation
     * </pre>
     */
    public caffe.Caffe.ReductionParameter.ReductionOp getOperation() {
      return operation_;
    }

    // optional int32 axis = 2 [default = 0];
    public static final int AXIS_FIELD_NUMBER = 2;
    private int axis_;
    /**
     * <code>optional int32 axis = 2 [default = 0];</code>
     *
     * <pre>
     * The first axis to reduce to a scalar -- may be negative to index from the
     * end (e.g., -1 for the last axis).
     * (Currently, only reduction along ALL "tail" axes is supported; reduction
     * of axis M through N, where N &lt; num_axes - 1, is unsupported.)
     * Suppose we have an n-axis bottom Blob with shape:
     *     (d0, d1, d2, ..., d(m-1), dm, d(m+1), ..., d(n-1)).
     * If axis == m, the output Blob will have shape
     *     (d0, d1, d2, ..., d(m-1)),
     * and the ReductionOp operation is performed (d0 * d1 * d2 * ... * d(m-1))
     * times, each including (dm * d(m+1) * ... * d(n-1)) individual data.
     * If axis == 0 (the default), the output Blob always has the empty shape
     * (count 1), performing reduction across the entire input --
     * often useful for creating new loss functions.
     * </pre>
     */
    public boolean hasAxis() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 axis = 2 [default = 0];</code>
     *
     * <pre>
     * The first axis to reduce to a scalar -- may be negative to index from the
     * end (e.g., -1 for the last axis).
     * (Currently, only reduction along ALL "tail" axes is supported; reduction
     * of axis M through N, where N &lt; num_axes - 1, is unsupported.)
     * Suppose we have an n-axis bottom Blob with shape:
     *     (d0, d1, d2, ..., d(m-1), dm, d(m+1), ..., d(n-1)).
     * If axis == m, the output Blob will have shape
     *     (d0, d1, d2, ..., d(m-1)),
     * and the ReductionOp operation is performed (d0 * d1 * d2 * ... * d(m-1))
     * times, each including (dm * d(m+1) * ... * d(n-1)) individual data.
     * If axis == 0 (the default), the output Blob always has the empty shape
     * (count 1), performing reduction across the entire input --
     * often useful for creating new loss functions.
     * </pre>
     */
    public int getAxis() {
      return axis_;
    }

    // optional float coeff = 3 [default = 1];
    public static final int COEFF_FIELD_NUMBER = 3;
    private float coeff_;
    /**
     * <code>optional float coeff = 3 [default = 1];</code>
     *
     * <pre>
     * coefficient for output
     * </pre>
     */
    public boolean hasCoeff() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional float coeff = 3 [default = 1];</code>
     *
     * <pre>
     * coefficient for output
     * </pre>
     */
    public float getCoeff() {
      return coeff_;
    }

    private void initFields() {
      operation_ = caffe.Caffe.ReductionParameter.ReductionOp.SUM;
      axis_ = 0;
      coeff_ = 1F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, operation_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, axis_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFloat(3, coeff_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, operation_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, axis_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(3, coeff_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.ReductionParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.ReductionParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.ReductionParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.ReductionParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.ReductionParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.ReductionParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.ReductionParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.ReductionParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.ReductionParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.ReductionParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.ReductionParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.ReductionParameter}
     *
     * <pre>
     * Message that stores parameters used by ReductionLayer
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements caffe.Caffe.ReductionParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_ReductionParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_ReductionParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.ReductionParameter.class, caffe.Caffe.ReductionParameter.Builder.class);
      }

      // Construct using caffe.Caffe.ReductionParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        operation_ = caffe.Caffe.ReductionParameter.ReductionOp.SUM;
        bitField0_ = (bitField0_ & ~0x00000001);
        axis_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        coeff_ = 1F;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_ReductionParameter_descriptor;
      }

      public caffe.Caffe.ReductionParameter getDefaultInstanceForType() {
        return caffe.Caffe.ReductionParameter.getDefaultInstance();
      }

      public caffe.Caffe.ReductionParameter build() {
        caffe.Caffe.ReductionParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.ReductionParameter buildPartial() {
        caffe.Caffe.ReductionParameter result = new caffe.Caffe.ReductionParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.operation_ = operation_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.axis_ = axis_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.coeff_ = coeff_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.ReductionParameter) {
          return mergeFrom((caffe.Caffe.ReductionParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.ReductionParameter other) {
        if (other == caffe.Caffe.ReductionParameter.getDefaultInstance()) return this;
        if (other.hasOperation()) {
          setOperation(other.getOperation());
        }
        if (other.hasAxis()) {
          setAxis(other.getAxis());
        }
        if (other.hasCoeff()) {
          setCoeff(other.getCoeff());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.ReductionParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.ReductionParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .caffe.ReductionParameter.ReductionOp operation = 1 [default = SUM];
      private caffe.Caffe.ReductionParameter.ReductionOp operation_ = caffe.Caffe.ReductionParameter.ReductionOp.SUM;
      /**
       * <code>optional .caffe.ReductionParameter.ReductionOp operation = 1 [default = SUM];</code>
       *
       * <pre>
       * reduction operation
       * </pre>
       */
      public boolean hasOperation() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .caffe.ReductionParameter.ReductionOp operation = 1 [default = SUM];</code>
       *
       * <pre>
       * reduction operation
       * </pre>
       */
      public caffe.Caffe.ReductionParameter.ReductionOp getOperation() {
        return operation_;
      }
      /**
       * <code>optional .caffe.ReductionParameter.ReductionOp operation = 1 [default = SUM];</code>
       *
       * <pre>
       * reduction operation
       * </pre>
       */
      public Builder setOperation(caffe.Caffe.ReductionParameter.ReductionOp value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        operation_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .caffe.ReductionParameter.ReductionOp operation = 1 [default = SUM];</code>
       *
       * <pre>
       * reduction operation
       * </pre>
       */
      public Builder clearOperation() {
        bitField0_ = (bitField0_ & ~0x00000001);
        operation_ = caffe.Caffe.ReductionParameter.ReductionOp.SUM;
        onChanged();
        return this;
      }

      // optional int32 axis = 2 [default = 0];
      private int axis_ ;
      /**
       * <code>optional int32 axis = 2 [default = 0];</code>
       *
       * <pre>
       * The first axis to reduce to a scalar -- may be negative to index from the
       * end (e.g., -1 for the last axis).
       * (Currently, only reduction along ALL "tail" axes is supported; reduction
       * of axis M through N, where N &lt; num_axes - 1, is unsupported.)
       * Suppose we have an n-axis bottom Blob with shape:
       *     (d0, d1, d2, ..., d(m-1), dm, d(m+1), ..., d(n-1)).
       * If axis == m, the output Blob will have shape
       *     (d0, d1, d2, ..., d(m-1)),
       * and the ReductionOp operation is performed (d0 * d1 * d2 * ... * d(m-1))
       * times, each including (dm * d(m+1) * ... * d(n-1)) individual data.
       * If axis == 0 (the default), the output Blob always has the empty shape
       * (count 1), performing reduction across the entire input --
       * often useful for creating new loss functions.
       * </pre>
       */
      public boolean hasAxis() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 axis = 2 [default = 0];</code>
       *
       * <pre>
       * The first axis to reduce to a scalar -- may be negative to index from the
       * end (e.g., -1 for the last axis).
       * (Currently, only reduction along ALL "tail" axes is supported; reduction
       * of axis M through N, where N &lt; num_axes - 1, is unsupported.)
       * Suppose we have an n-axis bottom Blob with shape:
       *     (d0, d1, d2, ..., d(m-1), dm, d(m+1), ..., d(n-1)).
       * If axis == m, the output Blob will have shape
       *     (d0, d1, d2, ..., d(m-1)),
       * and the ReductionOp operation is performed (d0 * d1 * d2 * ... * d(m-1))
       * times, each including (dm * d(m+1) * ... * d(n-1)) individual data.
       * If axis == 0 (the default), the output Blob always has the empty shape
       * (count 1), performing reduction across the entire input --
       * often useful for creating new loss functions.
       * </pre>
       */
      public int getAxis() {
        return axis_;
      }
      /**
       * <code>optional int32 axis = 2 [default = 0];</code>
       *
       * <pre>
       * The first axis to reduce to a scalar -- may be negative to index from the
       * end (e.g., -1 for the last axis).
       * (Currently, only reduction along ALL "tail" axes is supported; reduction
       * of axis M through N, where N &lt; num_axes - 1, is unsupported.)
       * Suppose we have an n-axis bottom Blob with shape:
       *     (d0, d1, d2, ..., d(m-1), dm, d(m+1), ..., d(n-1)).
       * If axis == m, the output Blob will have shape
       *     (d0, d1, d2, ..., d(m-1)),
       * and the ReductionOp operation is performed (d0 * d1 * d2 * ... * d(m-1))
       * times, each including (dm * d(m+1) * ... * d(n-1)) individual data.
       * If axis == 0 (the default), the output Blob always has the empty shape
       * (count 1), performing reduction across the entire input --
       * often useful for creating new loss functions.
       * </pre>
       */
      public Builder setAxis(int value) {
        bitField0_ |= 0x00000002;
        axis_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 axis = 2 [default = 0];</code>
       *
       * <pre>
       * The first axis to reduce to a scalar -- may be negative to index from the
       * end (e.g., -1 for the last axis).
       * (Currently, only reduction along ALL "tail" axes is supported; reduction
       * of axis M through N, where N &lt; num_axes - 1, is unsupported.)
       * Suppose we have an n-axis bottom Blob with shape:
       *     (d0, d1, d2, ..., d(m-1), dm, d(m+1), ..., d(n-1)).
       * If axis == m, the output Blob will have shape
       *     (d0, d1, d2, ..., d(m-1)),
       * and the ReductionOp operation is performed (d0 * d1 * d2 * ... * d(m-1))
       * times, each including (dm * d(m+1) * ... * d(n-1)) individual data.
       * If axis == 0 (the default), the output Blob always has the empty shape
       * (count 1), performing reduction across the entire input --
       * often useful for creating new loss functions.
       * </pre>
       */
      public Builder clearAxis() {
        bitField0_ = (bitField0_ & ~0x00000002);
        axis_ = 0;
        onChanged();
        return this;
      }

      // optional float coeff = 3 [default = 1];
      private float coeff_ = 1F;
      /**
       * <code>optional float coeff = 3 [default = 1];</code>
       *
       * <pre>
       * coefficient for output
       * </pre>
       */
      public boolean hasCoeff() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional float coeff = 3 [default = 1];</code>
       *
       * <pre>
       * coefficient for output
       * </pre>
       */
      public float getCoeff() {
        return coeff_;
      }
      /**
       * <code>optional float coeff = 3 [default = 1];</code>
       *
       * <pre>
       * coefficient for output
       * </pre>
       */
      public Builder setCoeff(float value) {
        bitField0_ |= 0x00000004;
        coeff_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float coeff = 3 [default = 1];</code>
       *
       * <pre>
       * coefficient for output
       * </pre>
       */
      public Builder clearCoeff() {
        bitField0_ = (bitField0_ & ~0x00000004);
        coeff_ = 1F;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.ReductionParameter)
    }

    static {
      defaultInstance = new ReductionParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.ReductionParameter)
  }

  public interface ReLUParameterOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional float negative_slope = 1 [default = 0];
    /**
     * <code>optional float negative_slope = 1 [default = 0];</code>
     *
     * <pre>
     * Allow non-zero slope for negative inputs to speed up optimization
     * Described in:
     * Maas, A. L., Hannun, A. Y., &amp; Ng, A. Y. (2013). Rectifier nonlinearities
     * improve neural network acoustic models. In ICML Workshop on Deep Learning
     * for Audio, Speech, and Language Processing.
     * </pre>
     */
    boolean hasNegativeSlope();
    /**
     * <code>optional float negative_slope = 1 [default = 0];</code>
     *
     * <pre>
     * Allow non-zero slope for negative inputs to speed up optimization
     * Described in:
     * Maas, A. L., Hannun, A. Y., &amp; Ng, A. Y. (2013). Rectifier nonlinearities
     * improve neural network acoustic models. In ICML Workshop on Deep Learning
     * for Audio, Speech, and Language Processing.
     * </pre>
     */
    float getNegativeSlope();

    // optional .caffe.ReLUParameter.Engine engine = 2 [default = DEFAULT];
    /**
     * <code>optional .caffe.ReLUParameter.Engine engine = 2 [default = DEFAULT];</code>
     */
    boolean hasEngine();
    /**
     * <code>optional .caffe.ReLUParameter.Engine engine = 2 [default = DEFAULT];</code>
     */
    caffe.Caffe.ReLUParameter.Engine getEngine();
  }
  /**
   * Protobuf type {@code caffe.ReLUParameter}
   *
   * <pre>
   * Message that stores parameters used by ReLULayer
   * </pre>
   */
  public static final class ReLUParameter extends
      com.google.protobuf.GeneratedMessage
      implements ReLUParameterOrBuilder {
    // Use ReLUParameter.newBuilder() to construct.
    private ReLUParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ReLUParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ReLUParameter defaultInstance;
    public static ReLUParameter getDefaultInstance() {
      return defaultInstance;
    }

    public ReLUParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ReLUParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 13: {
              bitField0_ |= 0x00000001;
              negativeSlope_ = input.readFloat();
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
              caffe.Caffe.ReLUParameter.Engine value = caffe.Caffe.ReLUParameter.Engine.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(2, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                engine_ = value;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_ReLUParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_ReLUParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.ReLUParameter.class, caffe.Caffe.ReLUParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<ReLUParameter> PARSER =
        new com.google.protobuf.AbstractParser<ReLUParameter>() {
      public ReLUParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ReLUParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ReLUParameter> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code caffe.ReLUParameter.Engine}
     */
    public enum Engine
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>DEFAULT = 0;</code>
       */
      DEFAULT(0, 0),
      /**
       * <code>CAFFE = 1;</code>
       */
      CAFFE(1, 1),
      /**
       * <code>CUDNN = 2;</code>
       */
      CUDNN(2, 2),
      ;

      /**
       * <code>DEFAULT = 0;</code>
       */
      public static final int DEFAULT_VALUE = 0;
      /**
       * <code>CAFFE = 1;</code>
       */
      public static final int CAFFE_VALUE = 1;
      /**
       * <code>CUDNN = 2;</code>
       */
      public static final int CUDNN_VALUE = 2;


      public final int getNumber() { return value; }

      public static Engine valueOf(int value) {
        switch (value) {
          case 0: return DEFAULT;
          case 1: return CAFFE;
          case 2: return CUDNN;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Engine>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<Engine>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Engine>() {
              public Engine findValueByNumber(int number) {
                return Engine.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return caffe.Caffe.ReLUParameter.getDescriptor().getEnumTypes().get(0);
      }

      private static final Engine[] VALUES = values();

      public static Engine valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private Engine(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:caffe.ReLUParameter.Engine)
    }

    private int bitField0_;
    // optional float negative_slope = 1 [default = 0];
    public static final int NEGATIVE_SLOPE_FIELD_NUMBER = 1;
    private float negativeSlope_;
    /**
     * <code>optional float negative_slope = 1 [default = 0];</code>
     *
     * <pre>
     * Allow non-zero slope for negative inputs to speed up optimization
     * Described in:
     * Maas, A. L., Hannun, A. Y., &amp; Ng, A. Y. (2013). Rectifier nonlinearities
     * improve neural network acoustic models. In ICML Workshop on Deep Learning
     * for Audio, Speech, and Language Processing.
     * </pre>
     */
    public boolean hasNegativeSlope() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional float negative_slope = 1 [default = 0];</code>
     *
     * <pre>
     * Allow non-zero slope for negative inputs to speed up optimization
     * Described in:
     * Maas, A. L., Hannun, A. Y., &amp; Ng, A. Y. (2013). Rectifier nonlinearities
     * improve neural network acoustic models. In ICML Workshop on Deep Learning
     * for Audio, Speech, and Language Processing.
     * </pre>
     */
    public float getNegativeSlope() {
      return negativeSlope_;
    }

    // optional .caffe.ReLUParameter.Engine engine = 2 [default = DEFAULT];
    public static final int ENGINE_FIELD_NUMBER = 2;
    private caffe.Caffe.ReLUParameter.Engine engine_;
    /**
     * <code>optional .caffe.ReLUParameter.Engine engine = 2 [default = DEFAULT];</code>
     */
    public boolean hasEngine() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .caffe.ReLUParameter.Engine engine = 2 [default = DEFAULT];</code>
     */
    public caffe.Caffe.ReLUParameter.Engine getEngine() {
      return engine_;
    }

    private void initFields() {
      negativeSlope_ = 0F;
      engine_ = caffe.Caffe.ReLUParameter.Engine.DEFAULT;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeFloat(1, negativeSlope_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(2, engine_.getNumber());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(1, negativeSlope_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, engine_.getNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.ReLUParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.ReLUParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.ReLUParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.ReLUParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.ReLUParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.ReLUParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.ReLUParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.ReLUParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.ReLUParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.ReLUParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.ReLUParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.ReLUParameter}
     *
     * <pre>
     * Message that stores parameters used by ReLULayer
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements caffe.Caffe.ReLUParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_ReLUParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_ReLUParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.ReLUParameter.class, caffe.Caffe.ReLUParameter.Builder.class);
      }

      // Construct using caffe.Caffe.ReLUParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        negativeSlope_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000001);
        engine_ = caffe.Caffe.ReLUParameter.Engine.DEFAULT;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_ReLUParameter_descriptor;
      }

      public caffe.Caffe.ReLUParameter getDefaultInstanceForType() {
        return caffe.Caffe.ReLUParameter.getDefaultInstance();
      }

      public caffe.Caffe.ReLUParameter build() {
        caffe.Caffe.ReLUParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.ReLUParameter buildPartial() {
        caffe.Caffe.ReLUParameter result = new caffe.Caffe.ReLUParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.negativeSlope_ = negativeSlope_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.engine_ = engine_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.ReLUParameter) {
          return mergeFrom((caffe.Caffe.ReLUParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.ReLUParameter other) {
        if (other == caffe.Caffe.ReLUParameter.getDefaultInstance()) return this;
        if (other.hasNegativeSlope()) {
          setNegativeSlope(other.getNegativeSlope());
        }
        if (other.hasEngine()) {
          setEngine(other.getEngine());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.ReLUParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.ReLUParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional float negative_slope = 1 [default = 0];
      private float negativeSlope_ ;
      /**
       * <code>optional float negative_slope = 1 [default = 0];</code>
       *
       * <pre>
       * Allow non-zero slope for negative inputs to speed up optimization
       * Described in:
       * Maas, A. L., Hannun, A. Y., &amp; Ng, A. Y. (2013). Rectifier nonlinearities
       * improve neural network acoustic models. In ICML Workshop on Deep Learning
       * for Audio, Speech, and Language Processing.
       * </pre>
       */
      public boolean hasNegativeSlope() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional float negative_slope = 1 [default = 0];</code>
       *
       * <pre>
       * Allow non-zero slope for negative inputs to speed up optimization
       * Described in:
       * Maas, A. L., Hannun, A. Y., &amp; Ng, A. Y. (2013). Rectifier nonlinearities
       * improve neural network acoustic models. In ICML Workshop on Deep Learning
       * for Audio, Speech, and Language Processing.
       * </pre>
       */
      public float getNegativeSlope() {
        return negativeSlope_;
      }
      /**
       * <code>optional float negative_slope = 1 [default = 0];</code>
       *
       * <pre>
       * Allow non-zero slope for negative inputs to speed up optimization
       * Described in:
       * Maas, A. L., Hannun, A. Y., &amp; Ng, A. Y. (2013). Rectifier nonlinearities
       * improve neural network acoustic models. In ICML Workshop on Deep Learning
       * for Audio, Speech, and Language Processing.
       * </pre>
       */
      public Builder setNegativeSlope(float value) {
        bitField0_ |= 0x00000001;
        negativeSlope_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float negative_slope = 1 [default = 0];</code>
       *
       * <pre>
       * Allow non-zero slope for negative inputs to speed up optimization
       * Described in:
       * Maas, A. L., Hannun, A. Y., &amp; Ng, A. Y. (2013). Rectifier nonlinearities
       * improve neural network acoustic models. In ICML Workshop on Deep Learning
       * for Audio, Speech, and Language Processing.
       * </pre>
       */
      public Builder clearNegativeSlope() {
        bitField0_ = (bitField0_ & ~0x00000001);
        negativeSlope_ = 0F;
        onChanged();
        return this;
      }

      // optional .caffe.ReLUParameter.Engine engine = 2 [default = DEFAULT];
      private caffe.Caffe.ReLUParameter.Engine engine_ = caffe.Caffe.ReLUParameter.Engine.DEFAULT;
      /**
       * <code>optional .caffe.ReLUParameter.Engine engine = 2 [default = DEFAULT];</code>
       */
      public boolean hasEngine() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .caffe.ReLUParameter.Engine engine = 2 [default = DEFAULT];</code>
       */
      public caffe.Caffe.ReLUParameter.Engine getEngine() {
        return engine_;
      }
      /**
       * <code>optional .caffe.ReLUParameter.Engine engine = 2 [default = DEFAULT];</code>
       */
      public Builder setEngine(caffe.Caffe.ReLUParameter.Engine value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        engine_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .caffe.ReLUParameter.Engine engine = 2 [default = DEFAULT];</code>
       */
      public Builder clearEngine() {
        bitField0_ = (bitField0_ & ~0x00000002);
        engine_ = caffe.Caffe.ReLUParameter.Engine.DEFAULT;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.ReLUParameter)
    }

    static {
      defaultInstance = new ReLUParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.ReLUParameter)
  }

  public interface ReshapeParameterOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional .caffe.BlobShape shape = 1;
    /**
     * <code>optional .caffe.BlobShape shape = 1;</code>
     *
     * <pre>
     * Specify the output dimensions. If some of the dimensions are set to 0,
     * the corresponding dimension from the bottom layer is used (unchanged).
     * Exactly one dimension may be set to -1, in which case its value is
     * inferred from the count of the bottom blob and the remaining dimensions.
     * For example, suppose we want to reshape a 2D blob "input" with shape 2 x 8:
     *
     *   layer {
     *     type: "Reshape" bottom: "input" top: "output"
     *     reshape_param { ... }
     *   }
     *
     * If "input" is 2D with shape 2 x 8, then the following reshape_param
     * specifications are all equivalent, producing a 3D blob "output" with shape
     * 2 x 2 x 4:
     *
     *   reshape_param { shape { dim:  2  dim: 2  dim:  4 } }
     *   reshape_param { shape { dim:  0  dim: 2  dim:  4 } }
     *   reshape_param { shape { dim:  0  dim: 2  dim: -1 } }
     *   reshape_param { shape { dim:  0  dim:-1  dim:  4 } }
     * </pre>
     */
    boolean hasShape();
    /**
     * <code>optional .caffe.BlobShape shape = 1;</code>
     *
     * <pre>
     * Specify the output dimensions. If some of the dimensions are set to 0,
     * the corresponding dimension from the bottom layer is used (unchanged).
     * Exactly one dimension may be set to -1, in which case its value is
     * inferred from the count of the bottom blob and the remaining dimensions.
     * For example, suppose we want to reshape a 2D blob "input" with shape 2 x 8:
     *
     *   layer {
     *     type: "Reshape" bottom: "input" top: "output"
     *     reshape_param { ... }
     *   }
     *
     * If "input" is 2D with shape 2 x 8, then the following reshape_param
     * specifications are all equivalent, producing a 3D blob "output" with shape
     * 2 x 2 x 4:
     *
     *   reshape_param { shape { dim:  2  dim: 2  dim:  4 } }
     *   reshape_param { shape { dim:  0  dim: 2  dim:  4 } }
     *   reshape_param { shape { dim:  0  dim: 2  dim: -1 } }
     *   reshape_param { shape { dim:  0  dim:-1  dim:  4 } }
     * </pre>
     */
    caffe.Caffe.BlobShape getShape();
    /**
     * <code>optional .caffe.BlobShape shape = 1;</code>
     *
     * <pre>
     * Specify the output dimensions. If some of the dimensions are set to 0,
     * the corresponding dimension from the bottom layer is used (unchanged).
     * Exactly one dimension may be set to -1, in which case its value is
     * inferred from the count of the bottom blob and the remaining dimensions.
     * For example, suppose we want to reshape a 2D blob "input" with shape 2 x 8:
     *
     *   layer {
     *     type: "Reshape" bottom: "input" top: "output"
     *     reshape_param { ... }
     *   }
     *
     * If "input" is 2D with shape 2 x 8, then the following reshape_param
     * specifications are all equivalent, producing a 3D blob "output" with shape
     * 2 x 2 x 4:
     *
     *   reshape_param { shape { dim:  2  dim: 2  dim:  4 } }
     *   reshape_param { shape { dim:  0  dim: 2  dim:  4 } }
     *   reshape_param { shape { dim:  0  dim: 2  dim: -1 } }
     *   reshape_param { shape { dim:  0  dim:-1  dim:  4 } }
     * </pre>
     */
    caffe.Caffe.BlobShapeOrBuilder getShapeOrBuilder();

    // optional int32 axis = 2 [default = 0];
    /**
     * <code>optional int32 axis = 2 [default = 0];</code>
     *
     * <pre>
     * axis and num_axes control the portion of the bottom blob's shape that are
     * replaced by (included in) the reshape. By default (axis == 0 and
     * num_axes == -1), the entire bottom blob shape is included in the reshape,
     * and hence the shape field must specify the entire output shape.
     *
     * axis may be non-zero to retain some portion of the beginning of the input
     * shape (and may be negative to index from the end; e.g., -1 to begin the
     * reshape after the last axis, including nothing in the reshape,
     * -2 to include only the last axis, etc.).
     *
     * For example, suppose "input" is a 2D blob with shape 2 x 8.
     * Then the following ReshapeLayer specifications are all equivalent,
     * producing a blob "output" with shape 2 x 2 x 4:
     *
     *   reshape_param { shape { dim: 2  dim: 2  dim: 4 } }
     *   reshape_param { shape { dim: 2  dim: 4 } axis:  1 }
     *   reshape_param { shape { dim: 2  dim: 4 } axis: -3 }
     *
     * num_axes specifies the extent of the reshape.
     * If num_axes &gt;= 0 (and axis &gt;= 0), the reshape will be performed only on
     * input axes in the range [axis, axis+num_axes].
     * num_axes may also be -1, the default, to include all remaining axes
     * (starting from axis).
     *
     * For example, suppose "input" is a 2D blob with shape 2 x 8.
     * Then the following ReshapeLayer specifications are equivalent,
     * producing a blob "output" with shape 1 x 2 x 8.
     *
     *   reshape_param { shape { dim:  1  dim: 2  dim:  8 } }
     *   reshape_param { shape { dim:  1  dim: 2  }  num_axes: 1 }
     *   reshape_param { shape { dim:  1  }  num_axes: 0 }
     *
     * On the other hand, these would produce output blob shape 2 x 1 x 8:
     *
     *   reshape_param { shape { dim: 2  dim: 1  dim: 8  }  }
     *   reshape_param { shape { dim: 1 }  axis: 1  num_axes: 0 }
     * </pre>
     */
    boolean hasAxis();
    /**
     * <code>optional int32 axis = 2 [default = 0];</code>
     *
     * <pre>
     * axis and num_axes control the portion of the bottom blob's shape that are
     * replaced by (included in) the reshape. By default (axis == 0 and
     * num_axes == -1), the entire bottom blob shape is included in the reshape,
     * and hence the shape field must specify the entire output shape.
     *
     * axis may be non-zero to retain some portion of the beginning of the input
     * shape (and may be negative to index from the end; e.g., -1 to begin the
     * reshape after the last axis, including nothing in the reshape,
     * -2 to include only the last axis, etc.).
     *
     * For example, suppose "input" is a 2D blob with shape 2 x 8.
     * Then the following ReshapeLayer specifications are all equivalent,
     * producing a blob "output" with shape 2 x 2 x 4:
     *
     *   reshape_param { shape { dim: 2  dim: 2  dim: 4 } }
     *   reshape_param { shape { dim: 2  dim: 4 } axis:  1 }
     *   reshape_param { shape { dim: 2  dim: 4 } axis: -3 }
     *
     * num_axes specifies the extent of the reshape.
     * If num_axes &gt;= 0 (and axis &gt;= 0), the reshape will be performed only on
     * input axes in the range [axis, axis+num_axes].
     * num_axes may also be -1, the default, to include all remaining axes
     * (starting from axis).
     *
     * For example, suppose "input" is a 2D blob with shape 2 x 8.
     * Then the following ReshapeLayer specifications are equivalent,
     * producing a blob "output" with shape 1 x 2 x 8.
     *
     *   reshape_param { shape { dim:  1  dim: 2  dim:  8 } }
     *   reshape_param { shape { dim:  1  dim: 2  }  num_axes: 1 }
     *   reshape_param { shape { dim:  1  }  num_axes: 0 }
     *
     * On the other hand, these would produce output blob shape 2 x 1 x 8:
     *
     *   reshape_param { shape { dim: 2  dim: 1  dim: 8  }  }
     *   reshape_param { shape { dim: 1 }  axis: 1  num_axes: 0 }
     * </pre>
     */
    int getAxis();

    // optional int32 num_axes = 3 [default = -1];
    /**
     * <code>optional int32 num_axes = 3 [default = -1];</code>
     */
    boolean hasNumAxes();
    /**
     * <code>optional int32 num_axes = 3 [default = -1];</code>
     */
    int getNumAxes();
  }
  /**
   * Protobuf type {@code caffe.ReshapeParameter}
   */
  public static final class ReshapeParameter extends
      com.google.protobuf.GeneratedMessage
      implements ReshapeParameterOrBuilder {
    // Use ReshapeParameter.newBuilder() to construct.
    private ReshapeParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ReshapeParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ReshapeParameter defaultInstance;
    public static ReshapeParameter getDefaultInstance() {
      return defaultInstance;
    }

    public ReshapeParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ReshapeParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              caffe.Caffe.BlobShape.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = shape_.toBuilder();
              }
              shape_ = input.readMessage(caffe.Caffe.BlobShape.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(shape_);
                shape_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              axis_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              numAxes_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_ReshapeParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_ReshapeParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.ReshapeParameter.class, caffe.Caffe.ReshapeParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<ReshapeParameter> PARSER =
        new com.google.protobuf.AbstractParser<ReshapeParameter>() {
      public ReshapeParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ReshapeParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ReshapeParameter> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional .caffe.BlobShape shape = 1;
    public static final int SHAPE_FIELD_NUMBER = 1;
    private caffe.Caffe.BlobShape shape_;
    /**
     * <code>optional .caffe.BlobShape shape = 1;</code>
     *
     * <pre>
     * Specify the output dimensions. If some of the dimensions are set to 0,
     * the corresponding dimension from the bottom layer is used (unchanged).
     * Exactly one dimension may be set to -1, in which case its value is
     * inferred from the count of the bottom blob and the remaining dimensions.
     * For example, suppose we want to reshape a 2D blob "input" with shape 2 x 8:
     *
     *   layer {
     *     type: "Reshape" bottom: "input" top: "output"
     *     reshape_param { ... }
     *   }
     *
     * If "input" is 2D with shape 2 x 8, then the following reshape_param
     * specifications are all equivalent, producing a 3D blob "output" with shape
     * 2 x 2 x 4:
     *
     *   reshape_param { shape { dim:  2  dim: 2  dim:  4 } }
     *   reshape_param { shape { dim:  0  dim: 2  dim:  4 } }
     *   reshape_param { shape { dim:  0  dim: 2  dim: -1 } }
     *   reshape_param { shape { dim:  0  dim:-1  dim:  4 } }
     * </pre>
     */
    public boolean hasShape() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .caffe.BlobShape shape = 1;</code>
     *
     * <pre>
     * Specify the output dimensions. If some of the dimensions are set to 0,
     * the corresponding dimension from the bottom layer is used (unchanged).
     * Exactly one dimension may be set to -1, in which case its value is
     * inferred from the count of the bottom blob and the remaining dimensions.
     * For example, suppose we want to reshape a 2D blob "input" with shape 2 x 8:
     *
     *   layer {
     *     type: "Reshape" bottom: "input" top: "output"
     *     reshape_param { ... }
     *   }
     *
     * If "input" is 2D with shape 2 x 8, then the following reshape_param
     * specifications are all equivalent, producing a 3D blob "output" with shape
     * 2 x 2 x 4:
     *
     *   reshape_param { shape { dim:  2  dim: 2  dim:  4 } }
     *   reshape_param { shape { dim:  0  dim: 2  dim:  4 } }
     *   reshape_param { shape { dim:  0  dim: 2  dim: -1 } }
     *   reshape_param { shape { dim:  0  dim:-1  dim:  4 } }
     * </pre>
     */
    public caffe.Caffe.BlobShape getShape() {
      return shape_;
    }
    /**
     * <code>optional .caffe.BlobShape shape = 1;</code>
     *
     * <pre>
     * Specify the output dimensions. If some of the dimensions are set to 0,
     * the corresponding dimension from the bottom layer is used (unchanged).
     * Exactly one dimension may be set to -1, in which case its value is
     * inferred from the count of the bottom blob and the remaining dimensions.
     * For example, suppose we want to reshape a 2D blob "input" with shape 2 x 8:
     *
     *   layer {
     *     type: "Reshape" bottom: "input" top: "output"
     *     reshape_param { ... }
     *   }
     *
     * If "input" is 2D with shape 2 x 8, then the following reshape_param
     * specifications are all equivalent, producing a 3D blob "output" with shape
     * 2 x 2 x 4:
     *
     *   reshape_param { shape { dim:  2  dim: 2  dim:  4 } }
     *   reshape_param { shape { dim:  0  dim: 2  dim:  4 } }
     *   reshape_param { shape { dim:  0  dim: 2  dim: -1 } }
     *   reshape_param { shape { dim:  0  dim:-1  dim:  4 } }
     * </pre>
     */
    public caffe.Caffe.BlobShapeOrBuilder getShapeOrBuilder() {
      return shape_;
    }

    // optional int32 axis = 2 [default = 0];
    public static final int AXIS_FIELD_NUMBER = 2;
    private int axis_;
    /**
     * <code>optional int32 axis = 2 [default = 0];</code>
     *
     * <pre>
     * axis and num_axes control the portion of the bottom blob's shape that are
     * replaced by (included in) the reshape. By default (axis == 0 and
     * num_axes == -1), the entire bottom blob shape is included in the reshape,
     * and hence the shape field must specify the entire output shape.
     *
     * axis may be non-zero to retain some portion of the beginning of the input
     * shape (and may be negative to index from the end; e.g., -1 to begin the
     * reshape after the last axis, including nothing in the reshape,
     * -2 to include only the last axis, etc.).
     *
     * For example, suppose "input" is a 2D blob with shape 2 x 8.
     * Then the following ReshapeLayer specifications are all equivalent,
     * producing a blob "output" with shape 2 x 2 x 4:
     *
     *   reshape_param { shape { dim: 2  dim: 2  dim: 4 } }
     *   reshape_param { shape { dim: 2  dim: 4 } axis:  1 }
     *   reshape_param { shape { dim: 2  dim: 4 } axis: -3 }
     *
     * num_axes specifies the extent of the reshape.
     * If num_axes &gt;= 0 (and axis &gt;= 0), the reshape will be performed only on
     * input axes in the range [axis, axis+num_axes].
     * num_axes may also be -1, the default, to include all remaining axes
     * (starting from axis).
     *
     * For example, suppose "input" is a 2D blob with shape 2 x 8.
     * Then the following ReshapeLayer specifications are equivalent,
     * producing a blob "output" with shape 1 x 2 x 8.
     *
     *   reshape_param { shape { dim:  1  dim: 2  dim:  8 } }
     *   reshape_param { shape { dim:  1  dim: 2  }  num_axes: 1 }
     *   reshape_param { shape { dim:  1  }  num_axes: 0 }
     *
     * On the other hand, these would produce output blob shape 2 x 1 x 8:
     *
     *   reshape_param { shape { dim: 2  dim: 1  dim: 8  }  }
     *   reshape_param { shape { dim: 1 }  axis: 1  num_axes: 0 }
     * </pre>
     */
    public boolean hasAxis() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 axis = 2 [default = 0];</code>
     *
     * <pre>
     * axis and num_axes control the portion of the bottom blob's shape that are
     * replaced by (included in) the reshape. By default (axis == 0 and
     * num_axes == -1), the entire bottom blob shape is included in the reshape,
     * and hence the shape field must specify the entire output shape.
     *
     * axis may be non-zero to retain some portion of the beginning of the input
     * shape (and may be negative to index from the end; e.g., -1 to begin the
     * reshape after the last axis, including nothing in the reshape,
     * -2 to include only the last axis, etc.).
     *
     * For example, suppose "input" is a 2D blob with shape 2 x 8.
     * Then the following ReshapeLayer specifications are all equivalent,
     * producing a blob "output" with shape 2 x 2 x 4:
     *
     *   reshape_param { shape { dim: 2  dim: 2  dim: 4 } }
     *   reshape_param { shape { dim: 2  dim: 4 } axis:  1 }
     *   reshape_param { shape { dim: 2  dim: 4 } axis: -3 }
     *
     * num_axes specifies the extent of the reshape.
     * If num_axes &gt;= 0 (and axis &gt;= 0), the reshape will be performed only on
     * input axes in the range [axis, axis+num_axes].
     * num_axes may also be -1, the default, to include all remaining axes
     * (starting from axis).
     *
     * For example, suppose "input" is a 2D blob with shape 2 x 8.
     * Then the following ReshapeLayer specifications are equivalent,
     * producing a blob "output" with shape 1 x 2 x 8.
     *
     *   reshape_param { shape { dim:  1  dim: 2  dim:  8 } }
     *   reshape_param { shape { dim:  1  dim: 2  }  num_axes: 1 }
     *   reshape_param { shape { dim:  1  }  num_axes: 0 }
     *
     * On the other hand, these would produce output blob shape 2 x 1 x 8:
     *
     *   reshape_param { shape { dim: 2  dim: 1  dim: 8  }  }
     *   reshape_param { shape { dim: 1 }  axis: 1  num_axes: 0 }
     * </pre>
     */
    public int getAxis() {
      return axis_;
    }

    // optional int32 num_axes = 3 [default = -1];
    public static final int NUM_AXES_FIELD_NUMBER = 3;
    private int numAxes_;
    /**
     * <code>optional int32 num_axes = 3 [default = -1];</code>
     */
    public boolean hasNumAxes() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 num_axes = 3 [default = -1];</code>
     */
    public int getNumAxes() {
      return numAxes_;
    }

    private void initFields() {
      shape_ = caffe.Caffe.BlobShape.getDefaultInstance();
      axis_ = 0;
      numAxes_ = -1;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, shape_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, axis_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, numAxes_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, shape_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, axis_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, numAxes_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.ReshapeParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.ReshapeParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.ReshapeParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.ReshapeParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.ReshapeParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.ReshapeParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.ReshapeParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.ReshapeParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.ReshapeParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.ReshapeParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.ReshapeParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.ReshapeParameter}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements caffe.Caffe.ReshapeParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_ReshapeParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_ReshapeParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.ReshapeParameter.class, caffe.Caffe.ReshapeParameter.Builder.class);
      }

      // Construct using caffe.Caffe.ReshapeParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getShapeFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (shapeBuilder_ == null) {
          shape_ = caffe.Caffe.BlobShape.getDefaultInstance();
        } else {
          shapeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        axis_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        numAxes_ = -1;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_ReshapeParameter_descriptor;
      }

      public caffe.Caffe.ReshapeParameter getDefaultInstanceForType() {
        return caffe.Caffe.ReshapeParameter.getDefaultInstance();
      }

      public caffe.Caffe.ReshapeParameter build() {
        caffe.Caffe.ReshapeParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.ReshapeParameter buildPartial() {
        caffe.Caffe.ReshapeParameter result = new caffe.Caffe.ReshapeParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (shapeBuilder_ == null) {
          result.shape_ = shape_;
        } else {
          result.shape_ = shapeBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.axis_ = axis_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.numAxes_ = numAxes_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.ReshapeParameter) {
          return mergeFrom((caffe.Caffe.ReshapeParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.ReshapeParameter other) {
        if (other == caffe.Caffe.ReshapeParameter.getDefaultInstance()) return this;
        if (other.hasShape()) {
          mergeShape(other.getShape());
        }
        if (other.hasAxis()) {
          setAxis(other.getAxis());
        }
        if (other.hasNumAxes()) {
          setNumAxes(other.getNumAxes());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.ReshapeParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.ReshapeParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .caffe.BlobShape shape = 1;
      private caffe.Caffe.BlobShape shape_ = caffe.Caffe.BlobShape.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.BlobShape, caffe.Caffe.BlobShape.Builder, caffe.Caffe.BlobShapeOrBuilder> shapeBuilder_;
      /**
       * <code>optional .caffe.BlobShape shape = 1;</code>
       *
       * <pre>
       * Specify the output dimensions. If some of the dimensions are set to 0,
       * the corresponding dimension from the bottom layer is used (unchanged).
       * Exactly one dimension may be set to -1, in which case its value is
       * inferred from the count of the bottom blob and the remaining dimensions.
       * For example, suppose we want to reshape a 2D blob "input" with shape 2 x 8:
       *
       *   layer {
       *     type: "Reshape" bottom: "input" top: "output"
       *     reshape_param { ... }
       *   }
       *
       * If "input" is 2D with shape 2 x 8, then the following reshape_param
       * specifications are all equivalent, producing a 3D blob "output" with shape
       * 2 x 2 x 4:
       *
       *   reshape_param { shape { dim:  2  dim: 2  dim:  4 } }
       *   reshape_param { shape { dim:  0  dim: 2  dim:  4 } }
       *   reshape_param { shape { dim:  0  dim: 2  dim: -1 } }
       *   reshape_param { shape { dim:  0  dim:-1  dim:  4 } }
       * </pre>
       */
      public boolean hasShape() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .caffe.BlobShape shape = 1;</code>
       *
       * <pre>
       * Specify the output dimensions. If some of the dimensions are set to 0,
       * the corresponding dimension from the bottom layer is used (unchanged).
       * Exactly one dimension may be set to -1, in which case its value is
       * inferred from the count of the bottom blob and the remaining dimensions.
       * For example, suppose we want to reshape a 2D blob "input" with shape 2 x 8:
       *
       *   layer {
       *     type: "Reshape" bottom: "input" top: "output"
       *     reshape_param { ... }
       *   }
       *
       * If "input" is 2D with shape 2 x 8, then the following reshape_param
       * specifications are all equivalent, producing a 3D blob "output" with shape
       * 2 x 2 x 4:
       *
       *   reshape_param { shape { dim:  2  dim: 2  dim:  4 } }
       *   reshape_param { shape { dim:  0  dim: 2  dim:  4 } }
       *   reshape_param { shape { dim:  0  dim: 2  dim: -1 } }
       *   reshape_param { shape { dim:  0  dim:-1  dim:  4 } }
       * </pre>
       */
      public caffe.Caffe.BlobShape getShape() {
        if (shapeBuilder_ == null) {
          return shape_;
        } else {
          return shapeBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.BlobShape shape = 1;</code>
       *
       * <pre>
       * Specify the output dimensions. If some of the dimensions are set to 0,
       * the corresponding dimension from the bottom layer is used (unchanged).
       * Exactly one dimension may be set to -1, in which case its value is
       * inferred from the count of the bottom blob and the remaining dimensions.
       * For example, suppose we want to reshape a 2D blob "input" with shape 2 x 8:
       *
       *   layer {
       *     type: "Reshape" bottom: "input" top: "output"
       *     reshape_param { ... }
       *   }
       *
       * If "input" is 2D with shape 2 x 8, then the following reshape_param
       * specifications are all equivalent, producing a 3D blob "output" with shape
       * 2 x 2 x 4:
       *
       *   reshape_param { shape { dim:  2  dim: 2  dim:  4 } }
       *   reshape_param { shape { dim:  0  dim: 2  dim:  4 } }
       *   reshape_param { shape { dim:  0  dim: 2  dim: -1 } }
       *   reshape_param { shape { dim:  0  dim:-1  dim:  4 } }
       * </pre>
       */
      public Builder setShape(caffe.Caffe.BlobShape value) {
        if (shapeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          shape_ = value;
          onChanged();
        } else {
          shapeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .caffe.BlobShape shape = 1;</code>
       *
       * <pre>
       * Specify the output dimensions. If some of the dimensions are set to 0,
       * the corresponding dimension from the bottom layer is used (unchanged).
       * Exactly one dimension may be set to -1, in which case its value is
       * inferred from the count of the bottom blob and the remaining dimensions.
       * For example, suppose we want to reshape a 2D blob "input" with shape 2 x 8:
       *
       *   layer {
       *     type: "Reshape" bottom: "input" top: "output"
       *     reshape_param { ... }
       *   }
       *
       * If "input" is 2D with shape 2 x 8, then the following reshape_param
       * specifications are all equivalent, producing a 3D blob "output" with shape
       * 2 x 2 x 4:
       *
       *   reshape_param { shape { dim:  2  dim: 2  dim:  4 } }
       *   reshape_param { shape { dim:  0  dim: 2  dim:  4 } }
       *   reshape_param { shape { dim:  0  dim: 2  dim: -1 } }
       *   reshape_param { shape { dim:  0  dim:-1  dim:  4 } }
       * </pre>
       */
      public Builder setShape(
          caffe.Caffe.BlobShape.Builder builderForValue) {
        if (shapeBuilder_ == null) {
          shape_ = builderForValue.build();
          onChanged();
        } else {
          shapeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .caffe.BlobShape shape = 1;</code>
       *
       * <pre>
       * Specify the output dimensions. If some of the dimensions are set to 0,
       * the corresponding dimension from the bottom layer is used (unchanged).
       * Exactly one dimension may be set to -1, in which case its value is
       * inferred from the count of the bottom blob and the remaining dimensions.
       * For example, suppose we want to reshape a 2D blob "input" with shape 2 x 8:
       *
       *   layer {
       *     type: "Reshape" bottom: "input" top: "output"
       *     reshape_param { ... }
       *   }
       *
       * If "input" is 2D with shape 2 x 8, then the following reshape_param
       * specifications are all equivalent, producing a 3D blob "output" with shape
       * 2 x 2 x 4:
       *
       *   reshape_param { shape { dim:  2  dim: 2  dim:  4 } }
       *   reshape_param { shape { dim:  0  dim: 2  dim:  4 } }
       *   reshape_param { shape { dim:  0  dim: 2  dim: -1 } }
       *   reshape_param { shape { dim:  0  dim:-1  dim:  4 } }
       * </pre>
       */
      public Builder mergeShape(caffe.Caffe.BlobShape value) {
        if (shapeBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              shape_ != caffe.Caffe.BlobShape.getDefaultInstance()) {
            shape_ =
              caffe.Caffe.BlobShape.newBuilder(shape_).mergeFrom(value).buildPartial();
          } else {
            shape_ = value;
          }
          onChanged();
        } else {
          shapeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .caffe.BlobShape shape = 1;</code>
       *
       * <pre>
       * Specify the output dimensions. If some of the dimensions are set to 0,
       * the corresponding dimension from the bottom layer is used (unchanged).
       * Exactly one dimension may be set to -1, in which case its value is
       * inferred from the count of the bottom blob and the remaining dimensions.
       * For example, suppose we want to reshape a 2D blob "input" with shape 2 x 8:
       *
       *   layer {
       *     type: "Reshape" bottom: "input" top: "output"
       *     reshape_param { ... }
       *   }
       *
       * If "input" is 2D with shape 2 x 8, then the following reshape_param
       * specifications are all equivalent, producing a 3D blob "output" with shape
       * 2 x 2 x 4:
       *
       *   reshape_param { shape { dim:  2  dim: 2  dim:  4 } }
       *   reshape_param { shape { dim:  0  dim: 2  dim:  4 } }
       *   reshape_param { shape { dim:  0  dim: 2  dim: -1 } }
       *   reshape_param { shape { dim:  0  dim:-1  dim:  4 } }
       * </pre>
       */
      public Builder clearShape() {
        if (shapeBuilder_ == null) {
          shape_ = caffe.Caffe.BlobShape.getDefaultInstance();
          onChanged();
        } else {
          shapeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .caffe.BlobShape shape = 1;</code>
       *
       * <pre>
       * Specify the output dimensions. If some of the dimensions are set to 0,
       * the corresponding dimension from the bottom layer is used (unchanged).
       * Exactly one dimension may be set to -1, in which case its value is
       * inferred from the count of the bottom blob and the remaining dimensions.
       * For example, suppose we want to reshape a 2D blob "input" with shape 2 x 8:
       *
       *   layer {
       *     type: "Reshape" bottom: "input" top: "output"
       *     reshape_param { ... }
       *   }
       *
       * If "input" is 2D with shape 2 x 8, then the following reshape_param
       * specifications are all equivalent, producing a 3D blob "output" with shape
       * 2 x 2 x 4:
       *
       *   reshape_param { shape { dim:  2  dim: 2  dim:  4 } }
       *   reshape_param { shape { dim:  0  dim: 2  dim:  4 } }
       *   reshape_param { shape { dim:  0  dim: 2  dim: -1 } }
       *   reshape_param { shape { dim:  0  dim:-1  dim:  4 } }
       * </pre>
       */
      public caffe.Caffe.BlobShape.Builder getShapeBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getShapeFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.BlobShape shape = 1;</code>
       *
       * <pre>
       * Specify the output dimensions. If some of the dimensions are set to 0,
       * the corresponding dimension from the bottom layer is used (unchanged).
       * Exactly one dimension may be set to -1, in which case its value is
       * inferred from the count of the bottom blob and the remaining dimensions.
       * For example, suppose we want to reshape a 2D blob "input" with shape 2 x 8:
       *
       *   layer {
       *     type: "Reshape" bottom: "input" top: "output"
       *     reshape_param { ... }
       *   }
       *
       * If "input" is 2D with shape 2 x 8, then the following reshape_param
       * specifications are all equivalent, producing a 3D blob "output" with shape
       * 2 x 2 x 4:
       *
       *   reshape_param { shape { dim:  2  dim: 2  dim:  4 } }
       *   reshape_param { shape { dim:  0  dim: 2  dim:  4 } }
       *   reshape_param { shape { dim:  0  dim: 2  dim: -1 } }
       *   reshape_param { shape { dim:  0  dim:-1  dim:  4 } }
       * </pre>
       */
      public caffe.Caffe.BlobShapeOrBuilder getShapeOrBuilder() {
        if (shapeBuilder_ != null) {
          return shapeBuilder_.getMessageOrBuilder();
        } else {
          return shape_;
        }
      }
      /**
       * <code>optional .caffe.BlobShape shape = 1;</code>
       *
       * <pre>
       * Specify the output dimensions. If some of the dimensions are set to 0,
       * the corresponding dimension from the bottom layer is used (unchanged).
       * Exactly one dimension may be set to -1, in which case its value is
       * inferred from the count of the bottom blob and the remaining dimensions.
       * For example, suppose we want to reshape a 2D blob "input" with shape 2 x 8:
       *
       *   layer {
       *     type: "Reshape" bottom: "input" top: "output"
       *     reshape_param { ... }
       *   }
       *
       * If "input" is 2D with shape 2 x 8, then the following reshape_param
       * specifications are all equivalent, producing a 3D blob "output" with shape
       * 2 x 2 x 4:
       *
       *   reshape_param { shape { dim:  2  dim: 2  dim:  4 } }
       *   reshape_param { shape { dim:  0  dim: 2  dim:  4 } }
       *   reshape_param { shape { dim:  0  dim: 2  dim: -1 } }
       *   reshape_param { shape { dim:  0  dim:-1  dim:  4 } }
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.BlobShape, caffe.Caffe.BlobShape.Builder, caffe.Caffe.BlobShapeOrBuilder> 
          getShapeFieldBuilder() {
        if (shapeBuilder_ == null) {
          shapeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.BlobShape, caffe.Caffe.BlobShape.Builder, caffe.Caffe.BlobShapeOrBuilder>(
                  shape_,
                  getParentForChildren(),
                  isClean());
          shape_ = null;
        }
        return shapeBuilder_;
      }

      // optional int32 axis = 2 [default = 0];
      private int axis_ ;
      /**
       * <code>optional int32 axis = 2 [default = 0];</code>
       *
       * <pre>
       * axis and num_axes control the portion of the bottom blob's shape that are
       * replaced by (included in) the reshape. By default (axis == 0 and
       * num_axes == -1), the entire bottom blob shape is included in the reshape,
       * and hence the shape field must specify the entire output shape.
       *
       * axis may be non-zero to retain some portion of the beginning of the input
       * shape (and may be negative to index from the end; e.g., -1 to begin the
       * reshape after the last axis, including nothing in the reshape,
       * -2 to include only the last axis, etc.).
       *
       * For example, suppose "input" is a 2D blob with shape 2 x 8.
       * Then the following ReshapeLayer specifications are all equivalent,
       * producing a blob "output" with shape 2 x 2 x 4:
       *
       *   reshape_param { shape { dim: 2  dim: 2  dim: 4 } }
       *   reshape_param { shape { dim: 2  dim: 4 } axis:  1 }
       *   reshape_param { shape { dim: 2  dim: 4 } axis: -3 }
       *
       * num_axes specifies the extent of the reshape.
       * If num_axes &gt;= 0 (and axis &gt;= 0), the reshape will be performed only on
       * input axes in the range [axis, axis+num_axes].
       * num_axes may also be -1, the default, to include all remaining axes
       * (starting from axis).
       *
       * For example, suppose "input" is a 2D blob with shape 2 x 8.
       * Then the following ReshapeLayer specifications are equivalent,
       * producing a blob "output" with shape 1 x 2 x 8.
       *
       *   reshape_param { shape { dim:  1  dim: 2  dim:  8 } }
       *   reshape_param { shape { dim:  1  dim: 2  }  num_axes: 1 }
       *   reshape_param { shape { dim:  1  }  num_axes: 0 }
       *
       * On the other hand, these would produce output blob shape 2 x 1 x 8:
       *
       *   reshape_param { shape { dim: 2  dim: 1  dim: 8  }  }
       *   reshape_param { shape { dim: 1 }  axis: 1  num_axes: 0 }
       * </pre>
       */
      public boolean hasAxis() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 axis = 2 [default = 0];</code>
       *
       * <pre>
       * axis and num_axes control the portion of the bottom blob's shape that are
       * replaced by (included in) the reshape. By default (axis == 0 and
       * num_axes == -1), the entire bottom blob shape is included in the reshape,
       * and hence the shape field must specify the entire output shape.
       *
       * axis may be non-zero to retain some portion of the beginning of the input
       * shape (and may be negative to index from the end; e.g., -1 to begin the
       * reshape after the last axis, including nothing in the reshape,
       * -2 to include only the last axis, etc.).
       *
       * For example, suppose "input" is a 2D blob with shape 2 x 8.
       * Then the following ReshapeLayer specifications are all equivalent,
       * producing a blob "output" with shape 2 x 2 x 4:
       *
       *   reshape_param { shape { dim: 2  dim: 2  dim: 4 } }
       *   reshape_param { shape { dim: 2  dim: 4 } axis:  1 }
       *   reshape_param { shape { dim: 2  dim: 4 } axis: -3 }
       *
       * num_axes specifies the extent of the reshape.
       * If num_axes &gt;= 0 (and axis &gt;= 0), the reshape will be performed only on
       * input axes in the range [axis, axis+num_axes].
       * num_axes may also be -1, the default, to include all remaining axes
       * (starting from axis).
       *
       * For example, suppose "input" is a 2D blob with shape 2 x 8.
       * Then the following ReshapeLayer specifications are equivalent,
       * producing a blob "output" with shape 1 x 2 x 8.
       *
       *   reshape_param { shape { dim:  1  dim: 2  dim:  8 } }
       *   reshape_param { shape { dim:  1  dim: 2  }  num_axes: 1 }
       *   reshape_param { shape { dim:  1  }  num_axes: 0 }
       *
       * On the other hand, these would produce output blob shape 2 x 1 x 8:
       *
       *   reshape_param { shape { dim: 2  dim: 1  dim: 8  }  }
       *   reshape_param { shape { dim: 1 }  axis: 1  num_axes: 0 }
       * </pre>
       */
      public int getAxis() {
        return axis_;
      }
      /**
       * <code>optional int32 axis = 2 [default = 0];</code>
       *
       * <pre>
       * axis and num_axes control the portion of the bottom blob's shape that are
       * replaced by (included in) the reshape. By default (axis == 0 and
       * num_axes == -1), the entire bottom blob shape is included in the reshape,
       * and hence the shape field must specify the entire output shape.
       *
       * axis may be non-zero to retain some portion of the beginning of the input
       * shape (and may be negative to index from the end; e.g., -1 to begin the
       * reshape after the last axis, including nothing in the reshape,
       * -2 to include only the last axis, etc.).
       *
       * For example, suppose "input" is a 2D blob with shape 2 x 8.
       * Then the following ReshapeLayer specifications are all equivalent,
       * producing a blob "output" with shape 2 x 2 x 4:
       *
       *   reshape_param { shape { dim: 2  dim: 2  dim: 4 } }
       *   reshape_param { shape { dim: 2  dim: 4 } axis:  1 }
       *   reshape_param { shape { dim: 2  dim: 4 } axis: -3 }
       *
       * num_axes specifies the extent of the reshape.
       * If num_axes &gt;= 0 (and axis &gt;= 0), the reshape will be performed only on
       * input axes in the range [axis, axis+num_axes].
       * num_axes may also be -1, the default, to include all remaining axes
       * (starting from axis).
       *
       * For example, suppose "input" is a 2D blob with shape 2 x 8.
       * Then the following ReshapeLayer specifications are equivalent,
       * producing a blob "output" with shape 1 x 2 x 8.
       *
       *   reshape_param { shape { dim:  1  dim: 2  dim:  8 } }
       *   reshape_param { shape { dim:  1  dim: 2  }  num_axes: 1 }
       *   reshape_param { shape { dim:  1  }  num_axes: 0 }
       *
       * On the other hand, these would produce output blob shape 2 x 1 x 8:
       *
       *   reshape_param { shape { dim: 2  dim: 1  dim: 8  }  }
       *   reshape_param { shape { dim: 1 }  axis: 1  num_axes: 0 }
       * </pre>
       */
      public Builder setAxis(int value) {
        bitField0_ |= 0x00000002;
        axis_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 axis = 2 [default = 0];</code>
       *
       * <pre>
       * axis and num_axes control the portion of the bottom blob's shape that are
       * replaced by (included in) the reshape. By default (axis == 0 and
       * num_axes == -1), the entire bottom blob shape is included in the reshape,
       * and hence the shape field must specify the entire output shape.
       *
       * axis may be non-zero to retain some portion of the beginning of the input
       * shape (and may be negative to index from the end; e.g., -1 to begin the
       * reshape after the last axis, including nothing in the reshape,
       * -2 to include only the last axis, etc.).
       *
       * For example, suppose "input" is a 2D blob with shape 2 x 8.
       * Then the following ReshapeLayer specifications are all equivalent,
       * producing a blob "output" with shape 2 x 2 x 4:
       *
       *   reshape_param { shape { dim: 2  dim: 2  dim: 4 } }
       *   reshape_param { shape { dim: 2  dim: 4 } axis:  1 }
       *   reshape_param { shape { dim: 2  dim: 4 } axis: -3 }
       *
       * num_axes specifies the extent of the reshape.
       * If num_axes &gt;= 0 (and axis &gt;= 0), the reshape will be performed only on
       * input axes in the range [axis, axis+num_axes].
       * num_axes may also be -1, the default, to include all remaining axes
       * (starting from axis).
       *
       * For example, suppose "input" is a 2D blob with shape 2 x 8.
       * Then the following ReshapeLayer specifications are equivalent,
       * producing a blob "output" with shape 1 x 2 x 8.
       *
       *   reshape_param { shape { dim:  1  dim: 2  dim:  8 } }
       *   reshape_param { shape { dim:  1  dim: 2  }  num_axes: 1 }
       *   reshape_param { shape { dim:  1  }  num_axes: 0 }
       *
       * On the other hand, these would produce output blob shape 2 x 1 x 8:
       *
       *   reshape_param { shape { dim: 2  dim: 1  dim: 8  }  }
       *   reshape_param { shape { dim: 1 }  axis: 1  num_axes: 0 }
       * </pre>
       */
      public Builder clearAxis() {
        bitField0_ = (bitField0_ & ~0x00000002);
        axis_ = 0;
        onChanged();
        return this;
      }

      // optional int32 num_axes = 3 [default = -1];
      private int numAxes_ = -1;
      /**
       * <code>optional int32 num_axes = 3 [default = -1];</code>
       */
      public boolean hasNumAxes() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 num_axes = 3 [default = -1];</code>
       */
      public int getNumAxes() {
        return numAxes_;
      }
      /**
       * <code>optional int32 num_axes = 3 [default = -1];</code>
       */
      public Builder setNumAxes(int value) {
        bitField0_ |= 0x00000004;
        numAxes_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 num_axes = 3 [default = -1];</code>
       */
      public Builder clearNumAxes() {
        bitField0_ = (bitField0_ & ~0x00000004);
        numAxes_ = -1;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.ReshapeParameter)
    }

    static {
      defaultInstance = new ReshapeParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.ReshapeParameter)
  }

  public interface ScaleParameterOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 axis = 1 [default = 1];
    /**
     * <code>optional int32 axis = 1 [default = 1];</code>
     *
     * <pre>
     * The first axis of bottom[0] (the first input Blob) along which to apply
     * bottom[1] (the second input Blob).  May be negative to index from the end
     * (e.g., -1 for the last axis).
     *
     * For example, if bottom[0] is 4D with shape 100x3x40x60, the output
     * top[0] will have the same shape, and bottom[1] may have any of the
     * following shapes (for the given value of axis):
     *    (axis == 0 == -4) 100; 100x3; 100x3x40; 100x3x40x60
     *    (axis == 1 == -3)          3;     3x40;     3x40x60
     *    (axis == 2 == -2)                   40;       40x60
     *    (axis == 3 == -1)                                60
     * Furthermore, bottom[1] may have the empty shape (regardless of the value of
     * "axis") -- a scalar multiplier.
     * </pre>
     */
    boolean hasAxis();
    /**
     * <code>optional int32 axis = 1 [default = 1];</code>
     *
     * <pre>
     * The first axis of bottom[0] (the first input Blob) along which to apply
     * bottom[1] (the second input Blob).  May be negative to index from the end
     * (e.g., -1 for the last axis).
     *
     * For example, if bottom[0] is 4D with shape 100x3x40x60, the output
     * top[0] will have the same shape, and bottom[1] may have any of the
     * following shapes (for the given value of axis):
     *    (axis == 0 == -4) 100; 100x3; 100x3x40; 100x3x40x60
     *    (axis == 1 == -3)          3;     3x40;     3x40x60
     *    (axis == 2 == -2)                   40;       40x60
     *    (axis == 3 == -1)                                60
     * Furthermore, bottom[1] may have the empty shape (regardless of the value of
     * "axis") -- a scalar multiplier.
     * </pre>
     */
    int getAxis();

    // optional int32 num_axes = 2 [default = 1];
    /**
     * <code>optional int32 num_axes = 2 [default = 1];</code>
     *
     * <pre>
     * (num_axes is ignored unless just one bottom is given and the scale is
     * a learned parameter of the layer.  Otherwise, num_axes is determined by the
     * number of axes by the second bottom.)
     * The number of axes of the input (bottom[0]) covered by the scale
     * parameter, or -1 to cover all axes of bottom[0] starting from `axis`.
     * Set num_axes := 0, to multiply with a zero-axis Blob: a scalar.
     * </pre>
     */
    boolean hasNumAxes();
    /**
     * <code>optional int32 num_axes = 2 [default = 1];</code>
     *
     * <pre>
     * (num_axes is ignored unless just one bottom is given and the scale is
     * a learned parameter of the layer.  Otherwise, num_axes is determined by the
     * number of axes by the second bottom.)
     * The number of axes of the input (bottom[0]) covered by the scale
     * parameter, or -1 to cover all axes of bottom[0] starting from `axis`.
     * Set num_axes := 0, to multiply with a zero-axis Blob: a scalar.
     * </pre>
     */
    int getNumAxes();

    // optional .caffe.FillerParameter filler = 3;
    /**
     * <code>optional .caffe.FillerParameter filler = 3;</code>
     *
     * <pre>
     * (filler is ignored unless just one bottom is given and the scale is
     * a learned parameter of the layer.)
     * The initialization for the learned scale parameter.
     * Default is the unit (1) initialization, resulting in the ScaleLayer
     * initially performing the identity operation.
     * </pre>
     */
    boolean hasFiller();
    /**
     * <code>optional .caffe.FillerParameter filler = 3;</code>
     *
     * <pre>
     * (filler is ignored unless just one bottom is given and the scale is
     * a learned parameter of the layer.)
     * The initialization for the learned scale parameter.
     * Default is the unit (1) initialization, resulting in the ScaleLayer
     * initially performing the identity operation.
     * </pre>
     */
    caffe.Caffe.FillerParameter getFiller();
    /**
     * <code>optional .caffe.FillerParameter filler = 3;</code>
     *
     * <pre>
     * (filler is ignored unless just one bottom is given and the scale is
     * a learned parameter of the layer.)
     * The initialization for the learned scale parameter.
     * Default is the unit (1) initialization, resulting in the ScaleLayer
     * initially performing the identity operation.
     * </pre>
     */
    caffe.Caffe.FillerParameterOrBuilder getFillerOrBuilder();

    // optional bool bias_term = 4 [default = false];
    /**
     * <code>optional bool bias_term = 4 [default = false];</code>
     *
     * <pre>
     * Whether to also learn a bias (equivalent to a ScaleLayer+BiasLayer, but
     * may be more efficient).  Initialized with bias_filler (defaults to 0).
     * </pre>
     */
    boolean hasBiasTerm();
    /**
     * <code>optional bool bias_term = 4 [default = false];</code>
     *
     * <pre>
     * Whether to also learn a bias (equivalent to a ScaleLayer+BiasLayer, but
     * may be more efficient).  Initialized with bias_filler (defaults to 0).
     * </pre>
     */
    boolean getBiasTerm();

    // optional .caffe.FillerParameter bias_filler = 5;
    /**
     * <code>optional .caffe.FillerParameter bias_filler = 5;</code>
     */
    boolean hasBiasFiller();
    /**
     * <code>optional .caffe.FillerParameter bias_filler = 5;</code>
     */
    caffe.Caffe.FillerParameter getBiasFiller();
    /**
     * <code>optional .caffe.FillerParameter bias_filler = 5;</code>
     */
    caffe.Caffe.FillerParameterOrBuilder getBiasFillerOrBuilder();
  }
  /**
   * Protobuf type {@code caffe.ScaleParameter}
   */
  public static final class ScaleParameter extends
      com.google.protobuf.GeneratedMessage
      implements ScaleParameterOrBuilder {
    // Use ScaleParameter.newBuilder() to construct.
    private ScaleParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ScaleParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ScaleParameter defaultInstance;
    public static ScaleParameter getDefaultInstance() {
      return defaultInstance;
    }

    public ScaleParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ScaleParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              axis_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              numAxes_ = input.readInt32();
              break;
            }
            case 26: {
              caffe.Caffe.FillerParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = filler_.toBuilder();
              }
              filler_ = input.readMessage(caffe.Caffe.FillerParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(filler_);
                filler_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              biasTerm_ = input.readBool();
              break;
            }
            case 42: {
              caffe.Caffe.FillerParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = biasFiller_.toBuilder();
              }
              biasFiller_ = input.readMessage(caffe.Caffe.FillerParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(biasFiller_);
                biasFiller_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_ScaleParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_ScaleParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.ScaleParameter.class, caffe.Caffe.ScaleParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<ScaleParameter> PARSER =
        new com.google.protobuf.AbstractParser<ScaleParameter>() {
      public ScaleParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ScaleParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ScaleParameter> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 axis = 1 [default = 1];
    public static final int AXIS_FIELD_NUMBER = 1;
    private int axis_;
    /**
     * <code>optional int32 axis = 1 [default = 1];</code>
     *
     * <pre>
     * The first axis of bottom[0] (the first input Blob) along which to apply
     * bottom[1] (the second input Blob).  May be negative to index from the end
     * (e.g., -1 for the last axis).
     *
     * For example, if bottom[0] is 4D with shape 100x3x40x60, the output
     * top[0] will have the same shape, and bottom[1] may have any of the
     * following shapes (for the given value of axis):
     *    (axis == 0 == -4) 100; 100x3; 100x3x40; 100x3x40x60
     *    (axis == 1 == -3)          3;     3x40;     3x40x60
     *    (axis == 2 == -2)                   40;       40x60
     *    (axis == 3 == -1)                                60
     * Furthermore, bottom[1] may have the empty shape (regardless of the value of
     * "axis") -- a scalar multiplier.
     * </pre>
     */
    public boolean hasAxis() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 axis = 1 [default = 1];</code>
     *
     * <pre>
     * The first axis of bottom[0] (the first input Blob) along which to apply
     * bottom[1] (the second input Blob).  May be negative to index from the end
     * (e.g., -1 for the last axis).
     *
     * For example, if bottom[0] is 4D with shape 100x3x40x60, the output
     * top[0] will have the same shape, and bottom[1] may have any of the
     * following shapes (for the given value of axis):
     *    (axis == 0 == -4) 100; 100x3; 100x3x40; 100x3x40x60
     *    (axis == 1 == -3)          3;     3x40;     3x40x60
     *    (axis == 2 == -2)                   40;       40x60
     *    (axis == 3 == -1)                                60
     * Furthermore, bottom[1] may have the empty shape (regardless of the value of
     * "axis") -- a scalar multiplier.
     * </pre>
     */
    public int getAxis() {
      return axis_;
    }

    // optional int32 num_axes = 2 [default = 1];
    public static final int NUM_AXES_FIELD_NUMBER = 2;
    private int numAxes_;
    /**
     * <code>optional int32 num_axes = 2 [default = 1];</code>
     *
     * <pre>
     * (num_axes is ignored unless just one bottom is given and the scale is
     * a learned parameter of the layer.  Otherwise, num_axes is determined by the
     * number of axes by the second bottom.)
     * The number of axes of the input (bottom[0]) covered by the scale
     * parameter, or -1 to cover all axes of bottom[0] starting from `axis`.
     * Set num_axes := 0, to multiply with a zero-axis Blob: a scalar.
     * </pre>
     */
    public boolean hasNumAxes() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 num_axes = 2 [default = 1];</code>
     *
     * <pre>
     * (num_axes is ignored unless just one bottom is given and the scale is
     * a learned parameter of the layer.  Otherwise, num_axes is determined by the
     * number of axes by the second bottom.)
     * The number of axes of the input (bottom[0]) covered by the scale
     * parameter, or -1 to cover all axes of bottom[0] starting from `axis`.
     * Set num_axes := 0, to multiply with a zero-axis Blob: a scalar.
     * </pre>
     */
    public int getNumAxes() {
      return numAxes_;
    }

    // optional .caffe.FillerParameter filler = 3;
    public static final int FILLER_FIELD_NUMBER = 3;
    private caffe.Caffe.FillerParameter filler_;
    /**
     * <code>optional .caffe.FillerParameter filler = 3;</code>
     *
     * <pre>
     * (filler is ignored unless just one bottom is given and the scale is
     * a learned parameter of the layer.)
     * The initialization for the learned scale parameter.
     * Default is the unit (1) initialization, resulting in the ScaleLayer
     * initially performing the identity operation.
     * </pre>
     */
    public boolean hasFiller() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .caffe.FillerParameter filler = 3;</code>
     *
     * <pre>
     * (filler is ignored unless just one bottom is given and the scale is
     * a learned parameter of the layer.)
     * The initialization for the learned scale parameter.
     * Default is the unit (1) initialization, resulting in the ScaleLayer
     * initially performing the identity operation.
     * </pre>
     */
    public caffe.Caffe.FillerParameter getFiller() {
      return filler_;
    }
    /**
     * <code>optional .caffe.FillerParameter filler = 3;</code>
     *
     * <pre>
     * (filler is ignored unless just one bottom is given and the scale is
     * a learned parameter of the layer.)
     * The initialization for the learned scale parameter.
     * Default is the unit (1) initialization, resulting in the ScaleLayer
     * initially performing the identity operation.
     * </pre>
     */
    public caffe.Caffe.FillerParameterOrBuilder getFillerOrBuilder() {
      return filler_;
    }

    // optional bool bias_term = 4 [default = false];
    public static final int BIAS_TERM_FIELD_NUMBER = 4;
    private boolean biasTerm_;
    /**
     * <code>optional bool bias_term = 4 [default = false];</code>
     *
     * <pre>
     * Whether to also learn a bias (equivalent to a ScaleLayer+BiasLayer, but
     * may be more efficient).  Initialized with bias_filler (defaults to 0).
     * </pre>
     */
    public boolean hasBiasTerm() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional bool bias_term = 4 [default = false];</code>
     *
     * <pre>
     * Whether to also learn a bias (equivalent to a ScaleLayer+BiasLayer, but
     * may be more efficient).  Initialized with bias_filler (defaults to 0).
     * </pre>
     */
    public boolean getBiasTerm() {
      return biasTerm_;
    }

    // optional .caffe.FillerParameter bias_filler = 5;
    public static final int BIAS_FILLER_FIELD_NUMBER = 5;
    private caffe.Caffe.FillerParameter biasFiller_;
    /**
     * <code>optional .caffe.FillerParameter bias_filler = 5;</code>
     */
    public boolean hasBiasFiller() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .caffe.FillerParameter bias_filler = 5;</code>
     */
    public caffe.Caffe.FillerParameter getBiasFiller() {
      return biasFiller_;
    }
    /**
     * <code>optional .caffe.FillerParameter bias_filler = 5;</code>
     */
    public caffe.Caffe.FillerParameterOrBuilder getBiasFillerOrBuilder() {
      return biasFiller_;
    }

    private void initFields() {
      axis_ = 1;
      numAxes_ = 1;
      filler_ = caffe.Caffe.FillerParameter.getDefaultInstance();
      biasTerm_ = false;
      biasFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, axis_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, numAxes_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, filler_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBool(4, biasTerm_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(5, biasFiller_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, axis_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, numAxes_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, filler_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, biasTerm_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, biasFiller_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.ScaleParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.ScaleParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.ScaleParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.ScaleParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.ScaleParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.ScaleParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.ScaleParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.ScaleParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.ScaleParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.ScaleParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.ScaleParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.ScaleParameter}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements caffe.Caffe.ScaleParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_ScaleParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_ScaleParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.ScaleParameter.class, caffe.Caffe.ScaleParameter.Builder.class);
      }

      // Construct using caffe.Caffe.ScaleParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getFillerFieldBuilder();
          getBiasFillerFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        axis_ = 1;
        bitField0_ = (bitField0_ & ~0x00000001);
        numAxes_ = 1;
        bitField0_ = (bitField0_ & ~0x00000002);
        if (fillerBuilder_ == null) {
          filler_ = caffe.Caffe.FillerParameter.getDefaultInstance();
        } else {
          fillerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        biasTerm_ = false;
        bitField0_ = (bitField0_ & ~0x00000008);
        if (biasFillerBuilder_ == null) {
          biasFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
        } else {
          biasFillerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_ScaleParameter_descriptor;
      }

      public caffe.Caffe.ScaleParameter getDefaultInstanceForType() {
        return caffe.Caffe.ScaleParameter.getDefaultInstance();
      }

      public caffe.Caffe.ScaleParameter build() {
        caffe.Caffe.ScaleParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.ScaleParameter buildPartial() {
        caffe.Caffe.ScaleParameter result = new caffe.Caffe.ScaleParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.axis_ = axis_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.numAxes_ = numAxes_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (fillerBuilder_ == null) {
          result.filler_ = filler_;
        } else {
          result.filler_ = fillerBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.biasTerm_ = biasTerm_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        if (biasFillerBuilder_ == null) {
          result.biasFiller_ = biasFiller_;
        } else {
          result.biasFiller_ = biasFillerBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.ScaleParameter) {
          return mergeFrom((caffe.Caffe.ScaleParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.ScaleParameter other) {
        if (other == caffe.Caffe.ScaleParameter.getDefaultInstance()) return this;
        if (other.hasAxis()) {
          setAxis(other.getAxis());
        }
        if (other.hasNumAxes()) {
          setNumAxes(other.getNumAxes());
        }
        if (other.hasFiller()) {
          mergeFiller(other.getFiller());
        }
        if (other.hasBiasTerm()) {
          setBiasTerm(other.getBiasTerm());
        }
        if (other.hasBiasFiller()) {
          mergeBiasFiller(other.getBiasFiller());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.ScaleParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.ScaleParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 axis = 1 [default = 1];
      private int axis_ = 1;
      /**
       * <code>optional int32 axis = 1 [default = 1];</code>
       *
       * <pre>
       * The first axis of bottom[0] (the first input Blob) along which to apply
       * bottom[1] (the second input Blob).  May be negative to index from the end
       * (e.g., -1 for the last axis).
       *
       * For example, if bottom[0] is 4D with shape 100x3x40x60, the output
       * top[0] will have the same shape, and bottom[1] may have any of the
       * following shapes (for the given value of axis):
       *    (axis == 0 == -4) 100; 100x3; 100x3x40; 100x3x40x60
       *    (axis == 1 == -3)          3;     3x40;     3x40x60
       *    (axis == 2 == -2)                   40;       40x60
       *    (axis == 3 == -1)                                60
       * Furthermore, bottom[1] may have the empty shape (regardless of the value of
       * "axis") -- a scalar multiplier.
       * </pre>
       */
      public boolean hasAxis() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 axis = 1 [default = 1];</code>
       *
       * <pre>
       * The first axis of bottom[0] (the first input Blob) along which to apply
       * bottom[1] (the second input Blob).  May be negative to index from the end
       * (e.g., -1 for the last axis).
       *
       * For example, if bottom[0] is 4D with shape 100x3x40x60, the output
       * top[0] will have the same shape, and bottom[1] may have any of the
       * following shapes (for the given value of axis):
       *    (axis == 0 == -4) 100; 100x3; 100x3x40; 100x3x40x60
       *    (axis == 1 == -3)          3;     3x40;     3x40x60
       *    (axis == 2 == -2)                   40;       40x60
       *    (axis == 3 == -1)                                60
       * Furthermore, bottom[1] may have the empty shape (regardless of the value of
       * "axis") -- a scalar multiplier.
       * </pre>
       */
      public int getAxis() {
        return axis_;
      }
      /**
       * <code>optional int32 axis = 1 [default = 1];</code>
       *
       * <pre>
       * The first axis of bottom[0] (the first input Blob) along which to apply
       * bottom[1] (the second input Blob).  May be negative to index from the end
       * (e.g., -1 for the last axis).
       *
       * For example, if bottom[0] is 4D with shape 100x3x40x60, the output
       * top[0] will have the same shape, and bottom[1] may have any of the
       * following shapes (for the given value of axis):
       *    (axis == 0 == -4) 100; 100x3; 100x3x40; 100x3x40x60
       *    (axis == 1 == -3)          3;     3x40;     3x40x60
       *    (axis == 2 == -2)                   40;       40x60
       *    (axis == 3 == -1)                                60
       * Furthermore, bottom[1] may have the empty shape (regardless of the value of
       * "axis") -- a scalar multiplier.
       * </pre>
       */
      public Builder setAxis(int value) {
        bitField0_ |= 0x00000001;
        axis_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 axis = 1 [default = 1];</code>
       *
       * <pre>
       * The first axis of bottom[0] (the first input Blob) along which to apply
       * bottom[1] (the second input Blob).  May be negative to index from the end
       * (e.g., -1 for the last axis).
       *
       * For example, if bottom[0] is 4D with shape 100x3x40x60, the output
       * top[0] will have the same shape, and bottom[1] may have any of the
       * following shapes (for the given value of axis):
       *    (axis == 0 == -4) 100; 100x3; 100x3x40; 100x3x40x60
       *    (axis == 1 == -3)          3;     3x40;     3x40x60
       *    (axis == 2 == -2)                   40;       40x60
       *    (axis == 3 == -1)                                60
       * Furthermore, bottom[1] may have the empty shape (regardless of the value of
       * "axis") -- a scalar multiplier.
       * </pre>
       */
      public Builder clearAxis() {
        bitField0_ = (bitField0_ & ~0x00000001);
        axis_ = 1;
        onChanged();
        return this;
      }

      // optional int32 num_axes = 2 [default = 1];
      private int numAxes_ = 1;
      /**
       * <code>optional int32 num_axes = 2 [default = 1];</code>
       *
       * <pre>
       * (num_axes is ignored unless just one bottom is given and the scale is
       * a learned parameter of the layer.  Otherwise, num_axes is determined by the
       * number of axes by the second bottom.)
       * The number of axes of the input (bottom[0]) covered by the scale
       * parameter, or -1 to cover all axes of bottom[0] starting from `axis`.
       * Set num_axes := 0, to multiply with a zero-axis Blob: a scalar.
       * </pre>
       */
      public boolean hasNumAxes() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 num_axes = 2 [default = 1];</code>
       *
       * <pre>
       * (num_axes is ignored unless just one bottom is given and the scale is
       * a learned parameter of the layer.  Otherwise, num_axes is determined by the
       * number of axes by the second bottom.)
       * The number of axes of the input (bottom[0]) covered by the scale
       * parameter, or -1 to cover all axes of bottom[0] starting from `axis`.
       * Set num_axes := 0, to multiply with a zero-axis Blob: a scalar.
       * </pre>
       */
      public int getNumAxes() {
        return numAxes_;
      }
      /**
       * <code>optional int32 num_axes = 2 [default = 1];</code>
       *
       * <pre>
       * (num_axes is ignored unless just one bottom is given and the scale is
       * a learned parameter of the layer.  Otherwise, num_axes is determined by the
       * number of axes by the second bottom.)
       * The number of axes of the input (bottom[0]) covered by the scale
       * parameter, or -1 to cover all axes of bottom[0] starting from `axis`.
       * Set num_axes := 0, to multiply with a zero-axis Blob: a scalar.
       * </pre>
       */
      public Builder setNumAxes(int value) {
        bitField0_ |= 0x00000002;
        numAxes_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 num_axes = 2 [default = 1];</code>
       *
       * <pre>
       * (num_axes is ignored unless just one bottom is given and the scale is
       * a learned parameter of the layer.  Otherwise, num_axes is determined by the
       * number of axes by the second bottom.)
       * The number of axes of the input (bottom[0]) covered by the scale
       * parameter, or -1 to cover all axes of bottom[0] starting from `axis`.
       * Set num_axes := 0, to multiply with a zero-axis Blob: a scalar.
       * </pre>
       */
      public Builder clearNumAxes() {
        bitField0_ = (bitField0_ & ~0x00000002);
        numAxes_ = 1;
        onChanged();
        return this;
      }

      // optional .caffe.FillerParameter filler = 3;
      private caffe.Caffe.FillerParameter filler_ = caffe.Caffe.FillerParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.FillerParameter, caffe.Caffe.FillerParameter.Builder, caffe.Caffe.FillerParameterOrBuilder> fillerBuilder_;
      /**
       * <code>optional .caffe.FillerParameter filler = 3;</code>
       *
       * <pre>
       * (filler is ignored unless just one bottom is given and the scale is
       * a learned parameter of the layer.)
       * The initialization for the learned scale parameter.
       * Default is the unit (1) initialization, resulting in the ScaleLayer
       * initially performing the identity operation.
       * </pre>
       */
      public boolean hasFiller() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .caffe.FillerParameter filler = 3;</code>
       *
       * <pre>
       * (filler is ignored unless just one bottom is given and the scale is
       * a learned parameter of the layer.)
       * The initialization for the learned scale parameter.
       * Default is the unit (1) initialization, resulting in the ScaleLayer
       * initially performing the identity operation.
       * </pre>
       */
      public caffe.Caffe.FillerParameter getFiller() {
        if (fillerBuilder_ == null) {
          return filler_;
        } else {
          return fillerBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.FillerParameter filler = 3;</code>
       *
       * <pre>
       * (filler is ignored unless just one bottom is given and the scale is
       * a learned parameter of the layer.)
       * The initialization for the learned scale parameter.
       * Default is the unit (1) initialization, resulting in the ScaleLayer
       * initially performing the identity operation.
       * </pre>
       */
      public Builder setFiller(caffe.Caffe.FillerParameter value) {
        if (fillerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          filler_ = value;
          onChanged();
        } else {
          fillerBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter filler = 3;</code>
       *
       * <pre>
       * (filler is ignored unless just one bottom is given and the scale is
       * a learned parameter of the layer.)
       * The initialization for the learned scale parameter.
       * Default is the unit (1) initialization, resulting in the ScaleLayer
       * initially performing the identity operation.
       * </pre>
       */
      public Builder setFiller(
          caffe.Caffe.FillerParameter.Builder builderForValue) {
        if (fillerBuilder_ == null) {
          filler_ = builderForValue.build();
          onChanged();
        } else {
          fillerBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter filler = 3;</code>
       *
       * <pre>
       * (filler is ignored unless just one bottom is given and the scale is
       * a learned parameter of the layer.)
       * The initialization for the learned scale parameter.
       * Default is the unit (1) initialization, resulting in the ScaleLayer
       * initially performing the identity operation.
       * </pre>
       */
      public Builder mergeFiller(caffe.Caffe.FillerParameter value) {
        if (fillerBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              filler_ != caffe.Caffe.FillerParameter.getDefaultInstance()) {
            filler_ =
              caffe.Caffe.FillerParameter.newBuilder(filler_).mergeFrom(value).buildPartial();
          } else {
            filler_ = value;
          }
          onChanged();
        } else {
          fillerBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter filler = 3;</code>
       *
       * <pre>
       * (filler is ignored unless just one bottom is given and the scale is
       * a learned parameter of the layer.)
       * The initialization for the learned scale parameter.
       * Default is the unit (1) initialization, resulting in the ScaleLayer
       * initially performing the identity operation.
       * </pre>
       */
      public Builder clearFiller() {
        if (fillerBuilder_ == null) {
          filler_ = caffe.Caffe.FillerParameter.getDefaultInstance();
          onChanged();
        } else {
          fillerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter filler = 3;</code>
       *
       * <pre>
       * (filler is ignored unless just one bottom is given and the scale is
       * a learned parameter of the layer.)
       * The initialization for the learned scale parameter.
       * Default is the unit (1) initialization, resulting in the ScaleLayer
       * initially performing the identity operation.
       * </pre>
       */
      public caffe.Caffe.FillerParameter.Builder getFillerBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getFillerFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.FillerParameter filler = 3;</code>
       *
       * <pre>
       * (filler is ignored unless just one bottom is given and the scale is
       * a learned parameter of the layer.)
       * The initialization for the learned scale parameter.
       * Default is the unit (1) initialization, resulting in the ScaleLayer
       * initially performing the identity operation.
       * </pre>
       */
      public caffe.Caffe.FillerParameterOrBuilder getFillerOrBuilder() {
        if (fillerBuilder_ != null) {
          return fillerBuilder_.getMessageOrBuilder();
        } else {
          return filler_;
        }
      }
      /**
       * <code>optional .caffe.FillerParameter filler = 3;</code>
       *
       * <pre>
       * (filler is ignored unless just one bottom is given and the scale is
       * a learned parameter of the layer.)
       * The initialization for the learned scale parameter.
       * Default is the unit (1) initialization, resulting in the ScaleLayer
       * initially performing the identity operation.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.FillerParameter, caffe.Caffe.FillerParameter.Builder, caffe.Caffe.FillerParameterOrBuilder> 
          getFillerFieldBuilder() {
        if (fillerBuilder_ == null) {
          fillerBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.FillerParameter, caffe.Caffe.FillerParameter.Builder, caffe.Caffe.FillerParameterOrBuilder>(
                  filler_,
                  getParentForChildren(),
                  isClean());
          filler_ = null;
        }
        return fillerBuilder_;
      }

      // optional bool bias_term = 4 [default = false];
      private boolean biasTerm_ ;
      /**
       * <code>optional bool bias_term = 4 [default = false];</code>
       *
       * <pre>
       * Whether to also learn a bias (equivalent to a ScaleLayer+BiasLayer, but
       * may be more efficient).  Initialized with bias_filler (defaults to 0).
       * </pre>
       */
      public boolean hasBiasTerm() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional bool bias_term = 4 [default = false];</code>
       *
       * <pre>
       * Whether to also learn a bias (equivalent to a ScaleLayer+BiasLayer, but
       * may be more efficient).  Initialized with bias_filler (defaults to 0).
       * </pre>
       */
      public boolean getBiasTerm() {
        return biasTerm_;
      }
      /**
       * <code>optional bool bias_term = 4 [default = false];</code>
       *
       * <pre>
       * Whether to also learn a bias (equivalent to a ScaleLayer+BiasLayer, but
       * may be more efficient).  Initialized with bias_filler (defaults to 0).
       * </pre>
       */
      public Builder setBiasTerm(boolean value) {
        bitField0_ |= 0x00000008;
        biasTerm_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool bias_term = 4 [default = false];</code>
       *
       * <pre>
       * Whether to also learn a bias (equivalent to a ScaleLayer+BiasLayer, but
       * may be more efficient).  Initialized with bias_filler (defaults to 0).
       * </pre>
       */
      public Builder clearBiasTerm() {
        bitField0_ = (bitField0_ & ~0x00000008);
        biasTerm_ = false;
        onChanged();
        return this;
      }

      // optional .caffe.FillerParameter bias_filler = 5;
      private caffe.Caffe.FillerParameter biasFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.FillerParameter, caffe.Caffe.FillerParameter.Builder, caffe.Caffe.FillerParameterOrBuilder> biasFillerBuilder_;
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 5;</code>
       */
      public boolean hasBiasFiller() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 5;</code>
       */
      public caffe.Caffe.FillerParameter getBiasFiller() {
        if (biasFillerBuilder_ == null) {
          return biasFiller_;
        } else {
          return biasFillerBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 5;</code>
       */
      public Builder setBiasFiller(caffe.Caffe.FillerParameter value) {
        if (biasFillerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          biasFiller_ = value;
          onChanged();
        } else {
          biasFillerBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 5;</code>
       */
      public Builder setBiasFiller(
          caffe.Caffe.FillerParameter.Builder builderForValue) {
        if (biasFillerBuilder_ == null) {
          biasFiller_ = builderForValue.build();
          onChanged();
        } else {
          biasFillerBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 5;</code>
       */
      public Builder mergeBiasFiller(caffe.Caffe.FillerParameter value) {
        if (biasFillerBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              biasFiller_ != caffe.Caffe.FillerParameter.getDefaultInstance()) {
            biasFiller_ =
              caffe.Caffe.FillerParameter.newBuilder(biasFiller_).mergeFrom(value).buildPartial();
          } else {
            biasFiller_ = value;
          }
          onChanged();
        } else {
          biasFillerBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 5;</code>
       */
      public Builder clearBiasFiller() {
        if (biasFillerBuilder_ == null) {
          biasFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
          onChanged();
        } else {
          biasFillerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 5;</code>
       */
      public caffe.Caffe.FillerParameter.Builder getBiasFillerBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getBiasFillerFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 5;</code>
       */
      public caffe.Caffe.FillerParameterOrBuilder getBiasFillerOrBuilder() {
        if (biasFillerBuilder_ != null) {
          return biasFillerBuilder_.getMessageOrBuilder();
        } else {
          return biasFiller_;
        }
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.FillerParameter, caffe.Caffe.FillerParameter.Builder, caffe.Caffe.FillerParameterOrBuilder> 
          getBiasFillerFieldBuilder() {
        if (biasFillerBuilder_ == null) {
          biasFillerBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.FillerParameter, caffe.Caffe.FillerParameter.Builder, caffe.Caffe.FillerParameterOrBuilder>(
                  biasFiller_,
                  getParentForChildren(),
                  isClean());
          biasFiller_ = null;
        }
        return biasFillerBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:caffe.ScaleParameter)
    }

    static {
      defaultInstance = new ScaleParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.ScaleParameter)
  }

  public interface SigmoidParameterOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional .caffe.SigmoidParameter.Engine engine = 1 [default = DEFAULT];
    /**
     * <code>optional .caffe.SigmoidParameter.Engine engine = 1 [default = DEFAULT];</code>
     */
    boolean hasEngine();
    /**
     * <code>optional .caffe.SigmoidParameter.Engine engine = 1 [default = DEFAULT];</code>
     */
    caffe.Caffe.SigmoidParameter.Engine getEngine();
  }
  /**
   * Protobuf type {@code caffe.SigmoidParameter}
   */
  public static final class SigmoidParameter extends
      com.google.protobuf.GeneratedMessage
      implements SigmoidParameterOrBuilder {
    // Use SigmoidParameter.newBuilder() to construct.
    private SigmoidParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private SigmoidParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final SigmoidParameter defaultInstance;
    public static SigmoidParameter getDefaultInstance() {
      return defaultInstance;
    }

    public SigmoidParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private SigmoidParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              caffe.Caffe.SigmoidParameter.Engine value = caffe.Caffe.SigmoidParameter.Engine.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                engine_ = value;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_SigmoidParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_SigmoidParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.SigmoidParameter.class, caffe.Caffe.SigmoidParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<SigmoidParameter> PARSER =
        new com.google.protobuf.AbstractParser<SigmoidParameter>() {
      public SigmoidParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SigmoidParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<SigmoidParameter> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code caffe.SigmoidParameter.Engine}
     */
    public enum Engine
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>DEFAULT = 0;</code>
       */
      DEFAULT(0, 0),
      /**
       * <code>CAFFE = 1;</code>
       */
      CAFFE(1, 1),
      /**
       * <code>CUDNN = 2;</code>
       */
      CUDNN(2, 2),
      ;

      /**
       * <code>DEFAULT = 0;</code>
       */
      public static final int DEFAULT_VALUE = 0;
      /**
       * <code>CAFFE = 1;</code>
       */
      public static final int CAFFE_VALUE = 1;
      /**
       * <code>CUDNN = 2;</code>
       */
      public static final int CUDNN_VALUE = 2;


      public final int getNumber() { return value; }

      public static Engine valueOf(int value) {
        switch (value) {
          case 0: return DEFAULT;
          case 1: return CAFFE;
          case 2: return CUDNN;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Engine>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<Engine>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Engine>() {
              public Engine findValueByNumber(int number) {
                return Engine.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return caffe.Caffe.SigmoidParameter.getDescriptor().getEnumTypes().get(0);
      }

      private static final Engine[] VALUES = values();

      public static Engine valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private Engine(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:caffe.SigmoidParameter.Engine)
    }

    private int bitField0_;
    // optional .caffe.SigmoidParameter.Engine engine = 1 [default = DEFAULT];
    public static final int ENGINE_FIELD_NUMBER = 1;
    private caffe.Caffe.SigmoidParameter.Engine engine_;
    /**
     * <code>optional .caffe.SigmoidParameter.Engine engine = 1 [default = DEFAULT];</code>
     */
    public boolean hasEngine() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .caffe.SigmoidParameter.Engine engine = 1 [default = DEFAULT];</code>
     */
    public caffe.Caffe.SigmoidParameter.Engine getEngine() {
      return engine_;
    }

    private void initFields() {
      engine_ = caffe.Caffe.SigmoidParameter.Engine.DEFAULT;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, engine_.getNumber());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, engine_.getNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.SigmoidParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.SigmoidParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.SigmoidParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.SigmoidParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.SigmoidParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.SigmoidParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.SigmoidParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.SigmoidParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.SigmoidParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.SigmoidParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.SigmoidParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.SigmoidParameter}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements caffe.Caffe.SigmoidParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_SigmoidParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_SigmoidParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.SigmoidParameter.class, caffe.Caffe.SigmoidParameter.Builder.class);
      }

      // Construct using caffe.Caffe.SigmoidParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        engine_ = caffe.Caffe.SigmoidParameter.Engine.DEFAULT;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_SigmoidParameter_descriptor;
      }

      public caffe.Caffe.SigmoidParameter getDefaultInstanceForType() {
        return caffe.Caffe.SigmoidParameter.getDefaultInstance();
      }

      public caffe.Caffe.SigmoidParameter build() {
        caffe.Caffe.SigmoidParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.SigmoidParameter buildPartial() {
        caffe.Caffe.SigmoidParameter result = new caffe.Caffe.SigmoidParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.engine_ = engine_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.SigmoidParameter) {
          return mergeFrom((caffe.Caffe.SigmoidParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.SigmoidParameter other) {
        if (other == caffe.Caffe.SigmoidParameter.getDefaultInstance()) return this;
        if (other.hasEngine()) {
          setEngine(other.getEngine());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.SigmoidParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.SigmoidParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .caffe.SigmoidParameter.Engine engine = 1 [default = DEFAULT];
      private caffe.Caffe.SigmoidParameter.Engine engine_ = caffe.Caffe.SigmoidParameter.Engine.DEFAULT;
      /**
       * <code>optional .caffe.SigmoidParameter.Engine engine = 1 [default = DEFAULT];</code>
       */
      public boolean hasEngine() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .caffe.SigmoidParameter.Engine engine = 1 [default = DEFAULT];</code>
       */
      public caffe.Caffe.SigmoidParameter.Engine getEngine() {
        return engine_;
      }
      /**
       * <code>optional .caffe.SigmoidParameter.Engine engine = 1 [default = DEFAULT];</code>
       */
      public Builder setEngine(caffe.Caffe.SigmoidParameter.Engine value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        engine_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .caffe.SigmoidParameter.Engine engine = 1 [default = DEFAULT];</code>
       */
      public Builder clearEngine() {
        bitField0_ = (bitField0_ & ~0x00000001);
        engine_ = caffe.Caffe.SigmoidParameter.Engine.DEFAULT;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.SigmoidParameter)
    }

    static {
      defaultInstance = new SigmoidParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.SigmoidParameter)
  }

  public interface SliceParameterOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 axis = 3 [default = 1];
    /**
     * <code>optional int32 axis = 3 [default = 1];</code>
     *
     * <pre>
     * The axis along which to slice -- may be negative to index from the end
     * (e.g., -1 for the last axis).
     * By default, SliceLayer concatenates blobs along the "channels" axis (1).
     * </pre>
     */
    boolean hasAxis();
    /**
     * <code>optional int32 axis = 3 [default = 1];</code>
     *
     * <pre>
     * The axis along which to slice -- may be negative to index from the end
     * (e.g., -1 for the last axis).
     * By default, SliceLayer concatenates blobs along the "channels" axis (1).
     * </pre>
     */
    int getAxis();

    // repeated uint32 slice_point = 2;
    /**
     * <code>repeated uint32 slice_point = 2;</code>
     */
    java.util.List<java.lang.Integer> getSlicePointList();
    /**
     * <code>repeated uint32 slice_point = 2;</code>
     */
    int getSlicePointCount();
    /**
     * <code>repeated uint32 slice_point = 2;</code>
     */
    int getSlicePoint(int index);

    // optional uint32 slice_dim = 1 [default = 1];
    /**
     * <code>optional uint32 slice_dim = 1 [default = 1];</code>
     *
     * <pre>
     * DEPRECATED: alias for "axis" -- does not support negative indexing.
     * </pre>
     */
    boolean hasSliceDim();
    /**
     * <code>optional uint32 slice_dim = 1 [default = 1];</code>
     *
     * <pre>
     * DEPRECATED: alias for "axis" -- does not support negative indexing.
     * </pre>
     */
    int getSliceDim();
  }
  /**
   * Protobuf type {@code caffe.SliceParameter}
   */
  public static final class SliceParameter extends
      com.google.protobuf.GeneratedMessage
      implements SliceParameterOrBuilder {
    // Use SliceParameter.newBuilder() to construct.
    private SliceParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private SliceParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final SliceParameter defaultInstance;
    public static SliceParameter getDefaultInstance() {
      return defaultInstance;
    }

    public SliceParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private SliceParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000002;
              sliceDim_ = input.readUInt32();
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                slicePoint_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              slicePoint_.add(input.readUInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                slicePoint_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                slicePoint_.add(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              bitField0_ |= 0x00000001;
              axis_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          slicePoint_ = java.util.Collections.unmodifiableList(slicePoint_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_SliceParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_SliceParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.SliceParameter.class, caffe.Caffe.SliceParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<SliceParameter> PARSER =
        new com.google.protobuf.AbstractParser<SliceParameter>() {
      public SliceParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SliceParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<SliceParameter> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 axis = 3 [default = 1];
    public static final int AXIS_FIELD_NUMBER = 3;
    private int axis_;
    /**
     * <code>optional int32 axis = 3 [default = 1];</code>
     *
     * <pre>
     * The axis along which to slice -- may be negative to index from the end
     * (e.g., -1 for the last axis).
     * By default, SliceLayer concatenates blobs along the "channels" axis (1).
     * </pre>
     */
    public boolean hasAxis() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 axis = 3 [default = 1];</code>
     *
     * <pre>
     * The axis along which to slice -- may be negative to index from the end
     * (e.g., -1 for the last axis).
     * By default, SliceLayer concatenates blobs along the "channels" axis (1).
     * </pre>
     */
    public int getAxis() {
      return axis_;
    }

    // repeated uint32 slice_point = 2;
    public static final int SLICE_POINT_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> slicePoint_;
    /**
     * <code>repeated uint32 slice_point = 2;</code>
     */
    public java.util.List<java.lang.Integer>
        getSlicePointList() {
      return slicePoint_;
    }
    /**
     * <code>repeated uint32 slice_point = 2;</code>
     */
    public int getSlicePointCount() {
      return slicePoint_.size();
    }
    /**
     * <code>repeated uint32 slice_point = 2;</code>
     */
    public int getSlicePoint(int index) {
      return slicePoint_.get(index);
    }

    // optional uint32 slice_dim = 1 [default = 1];
    public static final int SLICE_DIM_FIELD_NUMBER = 1;
    private int sliceDim_;
    /**
     * <code>optional uint32 slice_dim = 1 [default = 1];</code>
     *
     * <pre>
     * DEPRECATED: alias for "axis" -- does not support negative indexing.
     * </pre>
     */
    public boolean hasSliceDim() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 slice_dim = 1 [default = 1];</code>
     *
     * <pre>
     * DEPRECATED: alias for "axis" -- does not support negative indexing.
     * </pre>
     */
    public int getSliceDim() {
      return sliceDim_;
    }

    private void initFields() {
      axis_ = 1;
      slicePoint_ = java.util.Collections.emptyList();
      sliceDim_ = 1;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(1, sliceDim_);
      }
      for (int i = 0; i < slicePoint_.size(); i++) {
        output.writeUInt32(2, slicePoint_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(3, axis_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, sliceDim_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < slicePoint_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(slicePoint_.get(i));
        }
        size += dataSize;
        size += 1 * getSlicePointList().size();
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, axis_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.SliceParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.SliceParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.SliceParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.SliceParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.SliceParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.SliceParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.SliceParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.SliceParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.SliceParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.SliceParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.SliceParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.SliceParameter}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements caffe.Caffe.SliceParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_SliceParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_SliceParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.SliceParameter.class, caffe.Caffe.SliceParameter.Builder.class);
      }

      // Construct using caffe.Caffe.SliceParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        axis_ = 1;
        bitField0_ = (bitField0_ & ~0x00000001);
        slicePoint_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        sliceDim_ = 1;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_SliceParameter_descriptor;
      }

      public caffe.Caffe.SliceParameter getDefaultInstanceForType() {
        return caffe.Caffe.SliceParameter.getDefaultInstance();
      }

      public caffe.Caffe.SliceParameter build() {
        caffe.Caffe.SliceParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.SliceParameter buildPartial() {
        caffe.Caffe.SliceParameter result = new caffe.Caffe.SliceParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.axis_ = axis_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          slicePoint_ = java.util.Collections.unmodifiableList(slicePoint_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.slicePoint_ = slicePoint_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.sliceDim_ = sliceDim_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.SliceParameter) {
          return mergeFrom((caffe.Caffe.SliceParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.SliceParameter other) {
        if (other == caffe.Caffe.SliceParameter.getDefaultInstance()) return this;
        if (other.hasAxis()) {
          setAxis(other.getAxis());
        }
        if (!other.slicePoint_.isEmpty()) {
          if (slicePoint_.isEmpty()) {
            slicePoint_ = other.slicePoint_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureSlicePointIsMutable();
            slicePoint_.addAll(other.slicePoint_);
          }
          onChanged();
        }
        if (other.hasSliceDim()) {
          setSliceDim(other.getSliceDim());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.SliceParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.SliceParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 axis = 3 [default = 1];
      private int axis_ = 1;
      /**
       * <code>optional int32 axis = 3 [default = 1];</code>
       *
       * <pre>
       * The axis along which to slice -- may be negative to index from the end
       * (e.g., -1 for the last axis).
       * By default, SliceLayer concatenates blobs along the "channels" axis (1).
       * </pre>
       */
      public boolean hasAxis() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 axis = 3 [default = 1];</code>
       *
       * <pre>
       * The axis along which to slice -- may be negative to index from the end
       * (e.g., -1 for the last axis).
       * By default, SliceLayer concatenates blobs along the "channels" axis (1).
       * </pre>
       */
      public int getAxis() {
        return axis_;
      }
      /**
       * <code>optional int32 axis = 3 [default = 1];</code>
       *
       * <pre>
       * The axis along which to slice -- may be negative to index from the end
       * (e.g., -1 for the last axis).
       * By default, SliceLayer concatenates blobs along the "channels" axis (1).
       * </pre>
       */
      public Builder setAxis(int value) {
        bitField0_ |= 0x00000001;
        axis_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 axis = 3 [default = 1];</code>
       *
       * <pre>
       * The axis along which to slice -- may be negative to index from the end
       * (e.g., -1 for the last axis).
       * By default, SliceLayer concatenates blobs along the "channels" axis (1).
       * </pre>
       */
      public Builder clearAxis() {
        bitField0_ = (bitField0_ & ~0x00000001);
        axis_ = 1;
        onChanged();
        return this;
      }

      // repeated uint32 slice_point = 2;
      private java.util.List<java.lang.Integer> slicePoint_ = java.util.Collections.emptyList();
      private void ensureSlicePointIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          slicePoint_ = new java.util.ArrayList<java.lang.Integer>(slicePoint_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated uint32 slice_point = 2;</code>
       */
      public java.util.List<java.lang.Integer>
          getSlicePointList() {
        return java.util.Collections.unmodifiableList(slicePoint_);
      }
      /**
       * <code>repeated uint32 slice_point = 2;</code>
       */
      public int getSlicePointCount() {
        return slicePoint_.size();
      }
      /**
       * <code>repeated uint32 slice_point = 2;</code>
       */
      public int getSlicePoint(int index) {
        return slicePoint_.get(index);
      }
      /**
       * <code>repeated uint32 slice_point = 2;</code>
       */
      public Builder setSlicePoint(
          int index, int value) {
        ensureSlicePointIsMutable();
        slicePoint_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 slice_point = 2;</code>
       */
      public Builder addSlicePoint(int value) {
        ensureSlicePointIsMutable();
        slicePoint_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 slice_point = 2;</code>
       */
      public Builder addAllSlicePoint(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureSlicePointIsMutable();
        super.addAll(values, slicePoint_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 slice_point = 2;</code>
       */
      public Builder clearSlicePoint() {
        slicePoint_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // optional uint32 slice_dim = 1 [default = 1];
      private int sliceDim_ = 1;
      /**
       * <code>optional uint32 slice_dim = 1 [default = 1];</code>
       *
       * <pre>
       * DEPRECATED: alias for "axis" -- does not support negative indexing.
       * </pre>
       */
      public boolean hasSliceDim() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 slice_dim = 1 [default = 1];</code>
       *
       * <pre>
       * DEPRECATED: alias for "axis" -- does not support negative indexing.
       * </pre>
       */
      public int getSliceDim() {
        return sliceDim_;
      }
      /**
       * <code>optional uint32 slice_dim = 1 [default = 1];</code>
       *
       * <pre>
       * DEPRECATED: alias for "axis" -- does not support negative indexing.
       * </pre>
       */
      public Builder setSliceDim(int value) {
        bitField0_ |= 0x00000004;
        sliceDim_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 slice_dim = 1 [default = 1];</code>
       *
       * <pre>
       * DEPRECATED: alias for "axis" -- does not support negative indexing.
       * </pre>
       */
      public Builder clearSliceDim() {
        bitField0_ = (bitField0_ & ~0x00000004);
        sliceDim_ = 1;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.SliceParameter)
    }

    static {
      defaultInstance = new SliceParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.SliceParameter)
  }

  public interface SoftmaxParameterOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional .caffe.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
    /**
     * <code>optional .caffe.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];</code>
     */
    boolean hasEngine();
    /**
     * <code>optional .caffe.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];</code>
     */
    caffe.Caffe.SoftmaxParameter.Engine getEngine();

    // optional int32 axis = 2 [default = 1];
    /**
     * <code>optional int32 axis = 2 [default = 1];</code>
     *
     * <pre>
     * The axis along which to perform the softmax -- may be negative to index
     * from the end (e.g., -1 for the last axis).
     * Any other axes will be evaluated as independent softmaxes.
     * </pre>
     */
    boolean hasAxis();
    /**
     * <code>optional int32 axis = 2 [default = 1];</code>
     *
     * <pre>
     * The axis along which to perform the softmax -- may be negative to index
     * from the end (e.g., -1 for the last axis).
     * Any other axes will be evaluated as independent softmaxes.
     * </pre>
     */
    int getAxis();
  }
  /**
   * Protobuf type {@code caffe.SoftmaxParameter}
   *
   * <pre>
   * Message that stores parameters used by SoftmaxLayer, SoftmaxWithLossLayer
   * </pre>
   */
  public static final class SoftmaxParameter extends
      com.google.protobuf.GeneratedMessage
      implements SoftmaxParameterOrBuilder {
    // Use SoftmaxParameter.newBuilder() to construct.
    private SoftmaxParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private SoftmaxParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final SoftmaxParameter defaultInstance;
    public static SoftmaxParameter getDefaultInstance() {
      return defaultInstance;
    }

    public SoftmaxParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private SoftmaxParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              caffe.Caffe.SoftmaxParameter.Engine value = caffe.Caffe.SoftmaxParameter.Engine.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                engine_ = value;
              }
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              axis_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_SoftmaxParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_SoftmaxParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.SoftmaxParameter.class, caffe.Caffe.SoftmaxParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<SoftmaxParameter> PARSER =
        new com.google.protobuf.AbstractParser<SoftmaxParameter>() {
      public SoftmaxParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SoftmaxParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<SoftmaxParameter> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code caffe.SoftmaxParameter.Engine}
     */
    public enum Engine
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>DEFAULT = 0;</code>
       */
      DEFAULT(0, 0),
      /**
       * <code>CAFFE = 1;</code>
       */
      CAFFE(1, 1),
      /**
       * <code>CUDNN = 2;</code>
       */
      CUDNN(2, 2),
      ;

      /**
       * <code>DEFAULT = 0;</code>
       */
      public static final int DEFAULT_VALUE = 0;
      /**
       * <code>CAFFE = 1;</code>
       */
      public static final int CAFFE_VALUE = 1;
      /**
       * <code>CUDNN = 2;</code>
       */
      public static final int CUDNN_VALUE = 2;


      public final int getNumber() { return value; }

      public static Engine valueOf(int value) {
        switch (value) {
          case 0: return DEFAULT;
          case 1: return CAFFE;
          case 2: return CUDNN;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Engine>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<Engine>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Engine>() {
              public Engine findValueByNumber(int number) {
                return Engine.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return caffe.Caffe.SoftmaxParameter.getDescriptor().getEnumTypes().get(0);
      }

      private static final Engine[] VALUES = values();

      public static Engine valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private Engine(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:caffe.SoftmaxParameter.Engine)
    }

    private int bitField0_;
    // optional .caffe.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
    public static final int ENGINE_FIELD_NUMBER = 1;
    private caffe.Caffe.SoftmaxParameter.Engine engine_;
    /**
     * <code>optional .caffe.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];</code>
     */
    public boolean hasEngine() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .caffe.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];</code>
     */
    public caffe.Caffe.SoftmaxParameter.Engine getEngine() {
      return engine_;
    }

    // optional int32 axis = 2 [default = 1];
    public static final int AXIS_FIELD_NUMBER = 2;
    private int axis_;
    /**
     * <code>optional int32 axis = 2 [default = 1];</code>
     *
     * <pre>
     * The axis along which to perform the softmax -- may be negative to index
     * from the end (e.g., -1 for the last axis).
     * Any other axes will be evaluated as independent softmaxes.
     * </pre>
     */
    public boolean hasAxis() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 axis = 2 [default = 1];</code>
     *
     * <pre>
     * The axis along which to perform the softmax -- may be negative to index
     * from the end (e.g., -1 for the last axis).
     * Any other axes will be evaluated as independent softmaxes.
     * </pre>
     */
    public int getAxis() {
      return axis_;
    }

    private void initFields() {
      engine_ = caffe.Caffe.SoftmaxParameter.Engine.DEFAULT;
      axis_ = 1;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, engine_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, axis_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, engine_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, axis_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.SoftmaxParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.SoftmaxParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.SoftmaxParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.SoftmaxParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.SoftmaxParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.SoftmaxParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.SoftmaxParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.SoftmaxParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.SoftmaxParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.SoftmaxParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.SoftmaxParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.SoftmaxParameter}
     *
     * <pre>
     * Message that stores parameters used by SoftmaxLayer, SoftmaxWithLossLayer
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements caffe.Caffe.SoftmaxParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_SoftmaxParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_SoftmaxParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.SoftmaxParameter.class, caffe.Caffe.SoftmaxParameter.Builder.class);
      }

      // Construct using caffe.Caffe.SoftmaxParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        engine_ = caffe.Caffe.SoftmaxParameter.Engine.DEFAULT;
        bitField0_ = (bitField0_ & ~0x00000001);
        axis_ = 1;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_SoftmaxParameter_descriptor;
      }

      public caffe.Caffe.SoftmaxParameter getDefaultInstanceForType() {
        return caffe.Caffe.SoftmaxParameter.getDefaultInstance();
      }

      public caffe.Caffe.SoftmaxParameter build() {
        caffe.Caffe.SoftmaxParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.SoftmaxParameter buildPartial() {
        caffe.Caffe.SoftmaxParameter result = new caffe.Caffe.SoftmaxParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.engine_ = engine_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.axis_ = axis_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.SoftmaxParameter) {
          return mergeFrom((caffe.Caffe.SoftmaxParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.SoftmaxParameter other) {
        if (other == caffe.Caffe.SoftmaxParameter.getDefaultInstance()) return this;
        if (other.hasEngine()) {
          setEngine(other.getEngine());
        }
        if (other.hasAxis()) {
          setAxis(other.getAxis());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.SoftmaxParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.SoftmaxParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .caffe.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
      private caffe.Caffe.SoftmaxParameter.Engine engine_ = caffe.Caffe.SoftmaxParameter.Engine.DEFAULT;
      /**
       * <code>optional .caffe.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];</code>
       */
      public boolean hasEngine() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .caffe.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];</code>
       */
      public caffe.Caffe.SoftmaxParameter.Engine getEngine() {
        return engine_;
      }
      /**
       * <code>optional .caffe.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];</code>
       */
      public Builder setEngine(caffe.Caffe.SoftmaxParameter.Engine value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        engine_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .caffe.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];</code>
       */
      public Builder clearEngine() {
        bitField0_ = (bitField0_ & ~0x00000001);
        engine_ = caffe.Caffe.SoftmaxParameter.Engine.DEFAULT;
        onChanged();
        return this;
      }

      // optional int32 axis = 2 [default = 1];
      private int axis_ = 1;
      /**
       * <code>optional int32 axis = 2 [default = 1];</code>
       *
       * <pre>
       * The axis along which to perform the softmax -- may be negative to index
       * from the end (e.g., -1 for the last axis).
       * Any other axes will be evaluated as independent softmaxes.
       * </pre>
       */
      public boolean hasAxis() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 axis = 2 [default = 1];</code>
       *
       * <pre>
       * The axis along which to perform the softmax -- may be negative to index
       * from the end (e.g., -1 for the last axis).
       * Any other axes will be evaluated as independent softmaxes.
       * </pre>
       */
      public int getAxis() {
        return axis_;
      }
      /**
       * <code>optional int32 axis = 2 [default = 1];</code>
       *
       * <pre>
       * The axis along which to perform the softmax -- may be negative to index
       * from the end (e.g., -1 for the last axis).
       * Any other axes will be evaluated as independent softmaxes.
       * </pre>
       */
      public Builder setAxis(int value) {
        bitField0_ |= 0x00000002;
        axis_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 axis = 2 [default = 1];</code>
       *
       * <pre>
       * The axis along which to perform the softmax -- may be negative to index
       * from the end (e.g., -1 for the last axis).
       * Any other axes will be evaluated as independent softmaxes.
       * </pre>
       */
      public Builder clearAxis() {
        bitField0_ = (bitField0_ & ~0x00000002);
        axis_ = 1;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.SoftmaxParameter)
    }

    static {
      defaultInstance = new SoftmaxParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.SoftmaxParameter)
  }

  public interface TanHParameterOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional .caffe.TanHParameter.Engine engine = 1 [default = DEFAULT];
    /**
     * <code>optional .caffe.TanHParameter.Engine engine = 1 [default = DEFAULT];</code>
     */
    boolean hasEngine();
    /**
     * <code>optional .caffe.TanHParameter.Engine engine = 1 [default = DEFAULT];</code>
     */
    caffe.Caffe.TanHParameter.Engine getEngine();
  }
  /**
   * Protobuf type {@code caffe.TanHParameter}
   */
  public static final class TanHParameter extends
      com.google.protobuf.GeneratedMessage
      implements TanHParameterOrBuilder {
    // Use TanHParameter.newBuilder() to construct.
    private TanHParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TanHParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final TanHParameter defaultInstance;
    public static TanHParameter getDefaultInstance() {
      return defaultInstance;
    }

    public TanHParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private TanHParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              caffe.Caffe.TanHParameter.Engine value = caffe.Caffe.TanHParameter.Engine.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                engine_ = value;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_TanHParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_TanHParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.TanHParameter.class, caffe.Caffe.TanHParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<TanHParameter> PARSER =
        new com.google.protobuf.AbstractParser<TanHParameter>() {
      public TanHParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TanHParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TanHParameter> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code caffe.TanHParameter.Engine}
     */
    public enum Engine
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>DEFAULT = 0;</code>
       */
      DEFAULT(0, 0),
      /**
       * <code>CAFFE = 1;</code>
       */
      CAFFE(1, 1),
      /**
       * <code>CUDNN = 2;</code>
       */
      CUDNN(2, 2),
      ;

      /**
       * <code>DEFAULT = 0;</code>
       */
      public static final int DEFAULT_VALUE = 0;
      /**
       * <code>CAFFE = 1;</code>
       */
      public static final int CAFFE_VALUE = 1;
      /**
       * <code>CUDNN = 2;</code>
       */
      public static final int CUDNN_VALUE = 2;


      public final int getNumber() { return value; }

      public static Engine valueOf(int value) {
        switch (value) {
          case 0: return DEFAULT;
          case 1: return CAFFE;
          case 2: return CUDNN;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Engine>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<Engine>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Engine>() {
              public Engine findValueByNumber(int number) {
                return Engine.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return caffe.Caffe.TanHParameter.getDescriptor().getEnumTypes().get(0);
      }

      private static final Engine[] VALUES = values();

      public static Engine valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private Engine(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:caffe.TanHParameter.Engine)
    }

    private int bitField0_;
    // optional .caffe.TanHParameter.Engine engine = 1 [default = DEFAULT];
    public static final int ENGINE_FIELD_NUMBER = 1;
    private caffe.Caffe.TanHParameter.Engine engine_;
    /**
     * <code>optional .caffe.TanHParameter.Engine engine = 1 [default = DEFAULT];</code>
     */
    public boolean hasEngine() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .caffe.TanHParameter.Engine engine = 1 [default = DEFAULT];</code>
     */
    public caffe.Caffe.TanHParameter.Engine getEngine() {
      return engine_;
    }

    private void initFields() {
      engine_ = caffe.Caffe.TanHParameter.Engine.DEFAULT;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, engine_.getNumber());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, engine_.getNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.TanHParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.TanHParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.TanHParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.TanHParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.TanHParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.TanHParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.TanHParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.TanHParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.TanHParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.TanHParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.TanHParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.TanHParameter}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements caffe.Caffe.TanHParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_TanHParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_TanHParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.TanHParameter.class, caffe.Caffe.TanHParameter.Builder.class);
      }

      // Construct using caffe.Caffe.TanHParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        engine_ = caffe.Caffe.TanHParameter.Engine.DEFAULT;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_TanHParameter_descriptor;
      }

      public caffe.Caffe.TanHParameter getDefaultInstanceForType() {
        return caffe.Caffe.TanHParameter.getDefaultInstance();
      }

      public caffe.Caffe.TanHParameter build() {
        caffe.Caffe.TanHParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.TanHParameter buildPartial() {
        caffe.Caffe.TanHParameter result = new caffe.Caffe.TanHParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.engine_ = engine_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.TanHParameter) {
          return mergeFrom((caffe.Caffe.TanHParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.TanHParameter other) {
        if (other == caffe.Caffe.TanHParameter.getDefaultInstance()) return this;
        if (other.hasEngine()) {
          setEngine(other.getEngine());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.TanHParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.TanHParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .caffe.TanHParameter.Engine engine = 1 [default = DEFAULT];
      private caffe.Caffe.TanHParameter.Engine engine_ = caffe.Caffe.TanHParameter.Engine.DEFAULT;
      /**
       * <code>optional .caffe.TanHParameter.Engine engine = 1 [default = DEFAULT];</code>
       */
      public boolean hasEngine() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .caffe.TanHParameter.Engine engine = 1 [default = DEFAULT];</code>
       */
      public caffe.Caffe.TanHParameter.Engine getEngine() {
        return engine_;
      }
      /**
       * <code>optional .caffe.TanHParameter.Engine engine = 1 [default = DEFAULT];</code>
       */
      public Builder setEngine(caffe.Caffe.TanHParameter.Engine value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        engine_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .caffe.TanHParameter.Engine engine = 1 [default = DEFAULT];</code>
       */
      public Builder clearEngine() {
        bitField0_ = (bitField0_ & ~0x00000001);
        engine_ = caffe.Caffe.TanHParameter.Engine.DEFAULT;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.TanHParameter)
    }

    static {
      defaultInstance = new TanHParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.TanHParameter)
  }

  public interface TileParameterOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 axis = 1 [default = 1];
    /**
     * <code>optional int32 axis = 1 [default = 1];</code>
     *
     * <pre>
     * The index of the axis to tile.
     * </pre>
     */
    boolean hasAxis();
    /**
     * <code>optional int32 axis = 1 [default = 1];</code>
     *
     * <pre>
     * The index of the axis to tile.
     * </pre>
     */
    int getAxis();

    // optional int32 tiles = 2;
    /**
     * <code>optional int32 tiles = 2;</code>
     *
     * <pre>
     * The number of copies (tiles) of the blob to output.
     * </pre>
     */
    boolean hasTiles();
    /**
     * <code>optional int32 tiles = 2;</code>
     *
     * <pre>
     * The number of copies (tiles) of the blob to output.
     * </pre>
     */
    int getTiles();
  }
  /**
   * Protobuf type {@code caffe.TileParameter}
   *
   * <pre>
   * Message that stores parameters used by TileLayer
   * </pre>
   */
  public static final class TileParameter extends
      com.google.protobuf.GeneratedMessage
      implements TileParameterOrBuilder {
    // Use TileParameter.newBuilder() to construct.
    private TileParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TileParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final TileParameter defaultInstance;
    public static TileParameter getDefaultInstance() {
      return defaultInstance;
    }

    public TileParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private TileParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              axis_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              tiles_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_TileParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_TileParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.TileParameter.class, caffe.Caffe.TileParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<TileParameter> PARSER =
        new com.google.protobuf.AbstractParser<TileParameter>() {
      public TileParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TileParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TileParameter> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 axis = 1 [default = 1];
    public static final int AXIS_FIELD_NUMBER = 1;
    private int axis_;
    /**
     * <code>optional int32 axis = 1 [default = 1];</code>
     *
     * <pre>
     * The index of the axis to tile.
     * </pre>
     */
    public boolean hasAxis() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 axis = 1 [default = 1];</code>
     *
     * <pre>
     * The index of the axis to tile.
     * </pre>
     */
    public int getAxis() {
      return axis_;
    }

    // optional int32 tiles = 2;
    public static final int TILES_FIELD_NUMBER = 2;
    private int tiles_;
    /**
     * <code>optional int32 tiles = 2;</code>
     *
     * <pre>
     * The number of copies (tiles) of the blob to output.
     * </pre>
     */
    public boolean hasTiles() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 tiles = 2;</code>
     *
     * <pre>
     * The number of copies (tiles) of the blob to output.
     * </pre>
     */
    public int getTiles() {
      return tiles_;
    }

    private void initFields() {
      axis_ = 1;
      tiles_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, axis_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, tiles_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, axis_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, tiles_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.TileParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.TileParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.TileParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.TileParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.TileParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.TileParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.TileParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.TileParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.TileParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.TileParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.TileParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.TileParameter}
     *
     * <pre>
     * Message that stores parameters used by TileLayer
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements caffe.Caffe.TileParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_TileParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_TileParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.TileParameter.class, caffe.Caffe.TileParameter.Builder.class);
      }

      // Construct using caffe.Caffe.TileParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        axis_ = 1;
        bitField0_ = (bitField0_ & ~0x00000001);
        tiles_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_TileParameter_descriptor;
      }

      public caffe.Caffe.TileParameter getDefaultInstanceForType() {
        return caffe.Caffe.TileParameter.getDefaultInstance();
      }

      public caffe.Caffe.TileParameter build() {
        caffe.Caffe.TileParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.TileParameter buildPartial() {
        caffe.Caffe.TileParameter result = new caffe.Caffe.TileParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.axis_ = axis_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.tiles_ = tiles_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.TileParameter) {
          return mergeFrom((caffe.Caffe.TileParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.TileParameter other) {
        if (other == caffe.Caffe.TileParameter.getDefaultInstance()) return this;
        if (other.hasAxis()) {
          setAxis(other.getAxis());
        }
        if (other.hasTiles()) {
          setTiles(other.getTiles());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.TileParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.TileParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 axis = 1 [default = 1];
      private int axis_ = 1;
      /**
       * <code>optional int32 axis = 1 [default = 1];</code>
       *
       * <pre>
       * The index of the axis to tile.
       * </pre>
       */
      public boolean hasAxis() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 axis = 1 [default = 1];</code>
       *
       * <pre>
       * The index of the axis to tile.
       * </pre>
       */
      public int getAxis() {
        return axis_;
      }
      /**
       * <code>optional int32 axis = 1 [default = 1];</code>
       *
       * <pre>
       * The index of the axis to tile.
       * </pre>
       */
      public Builder setAxis(int value) {
        bitField0_ |= 0x00000001;
        axis_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 axis = 1 [default = 1];</code>
       *
       * <pre>
       * The index of the axis to tile.
       * </pre>
       */
      public Builder clearAxis() {
        bitField0_ = (bitField0_ & ~0x00000001);
        axis_ = 1;
        onChanged();
        return this;
      }

      // optional int32 tiles = 2;
      private int tiles_ ;
      /**
       * <code>optional int32 tiles = 2;</code>
       *
       * <pre>
       * The number of copies (tiles) of the blob to output.
       * </pre>
       */
      public boolean hasTiles() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 tiles = 2;</code>
       *
       * <pre>
       * The number of copies (tiles) of the blob to output.
       * </pre>
       */
      public int getTiles() {
        return tiles_;
      }
      /**
       * <code>optional int32 tiles = 2;</code>
       *
       * <pre>
       * The number of copies (tiles) of the blob to output.
       * </pre>
       */
      public Builder setTiles(int value) {
        bitField0_ |= 0x00000002;
        tiles_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 tiles = 2;</code>
       *
       * <pre>
       * The number of copies (tiles) of the blob to output.
       * </pre>
       */
      public Builder clearTiles() {
        bitField0_ = (bitField0_ & ~0x00000002);
        tiles_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.TileParameter)
    }

    static {
      defaultInstance = new TileParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.TileParameter)
  }

  public interface ThresholdParameterOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional float threshold = 1 [default = 0];
    /**
     * <code>optional float threshold = 1 [default = 0];</code>
     *
     * <pre>
     * Strictly positive values
     * </pre>
     */
    boolean hasThreshold();
    /**
     * <code>optional float threshold = 1 [default = 0];</code>
     *
     * <pre>
     * Strictly positive values
     * </pre>
     */
    float getThreshold();
  }
  /**
   * Protobuf type {@code caffe.ThresholdParameter}
   *
   * <pre>
   * Message that stores parameters used by ThresholdLayer
   * </pre>
   */
  public static final class ThresholdParameter extends
      com.google.protobuf.GeneratedMessage
      implements ThresholdParameterOrBuilder {
    // Use ThresholdParameter.newBuilder() to construct.
    private ThresholdParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ThresholdParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ThresholdParameter defaultInstance;
    public static ThresholdParameter getDefaultInstance() {
      return defaultInstance;
    }

    public ThresholdParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ThresholdParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 13: {
              bitField0_ |= 0x00000001;
              threshold_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_ThresholdParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_ThresholdParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.ThresholdParameter.class, caffe.Caffe.ThresholdParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<ThresholdParameter> PARSER =
        new com.google.protobuf.AbstractParser<ThresholdParameter>() {
      public ThresholdParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ThresholdParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ThresholdParameter> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional float threshold = 1 [default = 0];
    public static final int THRESHOLD_FIELD_NUMBER = 1;
    private float threshold_;
    /**
     * <code>optional float threshold = 1 [default = 0];</code>
     *
     * <pre>
     * Strictly positive values
     * </pre>
     */
    public boolean hasThreshold() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional float threshold = 1 [default = 0];</code>
     *
     * <pre>
     * Strictly positive values
     * </pre>
     */
    public float getThreshold() {
      return threshold_;
    }

    private void initFields() {
      threshold_ = 0F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeFloat(1, threshold_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(1, threshold_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.ThresholdParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.ThresholdParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.ThresholdParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.ThresholdParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.ThresholdParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.ThresholdParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.ThresholdParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.ThresholdParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.ThresholdParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.ThresholdParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.ThresholdParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.ThresholdParameter}
     *
     * <pre>
     * Message that stores parameters used by ThresholdLayer
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements caffe.Caffe.ThresholdParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_ThresholdParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_ThresholdParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.ThresholdParameter.class, caffe.Caffe.ThresholdParameter.Builder.class);
      }

      // Construct using caffe.Caffe.ThresholdParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        threshold_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_ThresholdParameter_descriptor;
      }

      public caffe.Caffe.ThresholdParameter getDefaultInstanceForType() {
        return caffe.Caffe.ThresholdParameter.getDefaultInstance();
      }

      public caffe.Caffe.ThresholdParameter build() {
        caffe.Caffe.ThresholdParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.ThresholdParameter buildPartial() {
        caffe.Caffe.ThresholdParameter result = new caffe.Caffe.ThresholdParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.threshold_ = threshold_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.ThresholdParameter) {
          return mergeFrom((caffe.Caffe.ThresholdParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.ThresholdParameter other) {
        if (other == caffe.Caffe.ThresholdParameter.getDefaultInstance()) return this;
        if (other.hasThreshold()) {
          setThreshold(other.getThreshold());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.ThresholdParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.ThresholdParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional float threshold = 1 [default = 0];
      private float threshold_ ;
      /**
       * <code>optional float threshold = 1 [default = 0];</code>
       *
       * <pre>
       * Strictly positive values
       * </pre>
       */
      public boolean hasThreshold() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional float threshold = 1 [default = 0];</code>
       *
       * <pre>
       * Strictly positive values
       * </pre>
       */
      public float getThreshold() {
        return threshold_;
      }
      /**
       * <code>optional float threshold = 1 [default = 0];</code>
       *
       * <pre>
       * Strictly positive values
       * </pre>
       */
      public Builder setThreshold(float value) {
        bitField0_ |= 0x00000001;
        threshold_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float threshold = 1 [default = 0];</code>
       *
       * <pre>
       * Strictly positive values
       * </pre>
       */
      public Builder clearThreshold() {
        bitField0_ = (bitField0_ & ~0x00000001);
        threshold_ = 0F;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.ThresholdParameter)
    }

    static {
      defaultInstance = new ThresholdParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.ThresholdParameter)
  }

  public interface WindowDataParameterOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional string source = 1;
    /**
     * <code>optional string source = 1;</code>
     *
     * <pre>
     * Specify the data source.
     * </pre>
     */
    boolean hasSource();
    /**
     * <code>optional string source = 1;</code>
     *
     * <pre>
     * Specify the data source.
     * </pre>
     */
    java.lang.String getSource();
    /**
     * <code>optional string source = 1;</code>
     *
     * <pre>
     * Specify the data source.
     * </pre>
     */
    com.google.protobuf.ByteString
        getSourceBytes();

    // optional float scale = 2 [default = 1];
    /**
     * <code>optional float scale = 2 [default = 1];</code>
     *
     * <pre>
     * For data pre-processing, we can do simple scaling and subtracting the
     * data mean, if provided. Note that the mean subtraction is always carried
     * out before scaling.
     * </pre>
     */
    boolean hasScale();
    /**
     * <code>optional float scale = 2 [default = 1];</code>
     *
     * <pre>
     * For data pre-processing, we can do simple scaling and subtracting the
     * data mean, if provided. Note that the mean subtraction is always carried
     * out before scaling.
     * </pre>
     */
    float getScale();

    // optional string mean_file = 3;
    /**
     * <code>optional string mean_file = 3;</code>
     */
    boolean hasMeanFile();
    /**
     * <code>optional string mean_file = 3;</code>
     */
    java.lang.String getMeanFile();
    /**
     * <code>optional string mean_file = 3;</code>
     */
    com.google.protobuf.ByteString
        getMeanFileBytes();

    // optional uint32 batch_size = 4;
    /**
     * <code>optional uint32 batch_size = 4;</code>
     *
     * <pre>
     * Specify the batch size.
     * </pre>
     */
    boolean hasBatchSize();
    /**
     * <code>optional uint32 batch_size = 4;</code>
     *
     * <pre>
     * Specify the batch size.
     * </pre>
     */
    int getBatchSize();

    // optional uint32 crop_size = 5 [default = 0];
    /**
     * <code>optional uint32 crop_size = 5 [default = 0];</code>
     *
     * <pre>
     * Specify if we would like to randomly crop an image.
     * </pre>
     */
    boolean hasCropSize();
    /**
     * <code>optional uint32 crop_size = 5 [default = 0];</code>
     *
     * <pre>
     * Specify if we would like to randomly crop an image.
     * </pre>
     */
    int getCropSize();

    // optional bool mirror = 6 [default = false];
    /**
     * <code>optional bool mirror = 6 [default = false];</code>
     *
     * <pre>
     * Specify if we want to randomly mirror data.
     * </pre>
     */
    boolean hasMirror();
    /**
     * <code>optional bool mirror = 6 [default = false];</code>
     *
     * <pre>
     * Specify if we want to randomly mirror data.
     * </pre>
     */
    boolean getMirror();

    // optional float fg_threshold = 7 [default = 0.5];
    /**
     * <code>optional float fg_threshold = 7 [default = 0.5];</code>
     *
     * <pre>
     * Foreground (object) overlap threshold
     * </pre>
     */
    boolean hasFgThreshold();
    /**
     * <code>optional float fg_threshold = 7 [default = 0.5];</code>
     *
     * <pre>
     * Foreground (object) overlap threshold
     * </pre>
     */
    float getFgThreshold();

    // optional float bg_threshold = 8 [default = 0.5];
    /**
     * <code>optional float bg_threshold = 8 [default = 0.5];</code>
     *
     * <pre>
     * Background (non-object) overlap threshold
     * </pre>
     */
    boolean hasBgThreshold();
    /**
     * <code>optional float bg_threshold = 8 [default = 0.5];</code>
     *
     * <pre>
     * Background (non-object) overlap threshold
     * </pre>
     */
    float getBgThreshold();

    // optional float fg_fraction = 9 [default = 0.25];
    /**
     * <code>optional float fg_fraction = 9 [default = 0.25];</code>
     *
     * <pre>
     * Fraction of batch that should be foreground objects
     * </pre>
     */
    boolean hasFgFraction();
    /**
     * <code>optional float fg_fraction = 9 [default = 0.25];</code>
     *
     * <pre>
     * Fraction of batch that should be foreground objects
     * </pre>
     */
    float getFgFraction();

    // optional uint32 context_pad = 10 [default = 0];
    /**
     * <code>optional uint32 context_pad = 10 [default = 0];</code>
     *
     * <pre>
     * Amount of contextual padding to add around a window
     * (used only by the window_data_layer)
     * </pre>
     */
    boolean hasContextPad();
    /**
     * <code>optional uint32 context_pad = 10 [default = 0];</code>
     *
     * <pre>
     * Amount of contextual padding to add around a window
     * (used only by the window_data_layer)
     * </pre>
     */
    int getContextPad();

    // optional string crop_mode = 11 [default = "warp"];
    /**
     * <code>optional string crop_mode = 11 [default = "warp"];</code>
     *
     * <pre>
     * Mode for cropping out a detection window
     * warp: cropped window is warped to a fixed size and aspect ratio
     * square: the tightest square around the window is cropped
     * </pre>
     */
    boolean hasCropMode();
    /**
     * <code>optional string crop_mode = 11 [default = "warp"];</code>
     *
     * <pre>
     * Mode for cropping out a detection window
     * warp: cropped window is warped to a fixed size and aspect ratio
     * square: the tightest square around the window is cropped
     * </pre>
     */
    java.lang.String getCropMode();
    /**
     * <code>optional string crop_mode = 11 [default = "warp"];</code>
     *
     * <pre>
     * Mode for cropping out a detection window
     * warp: cropped window is warped to a fixed size and aspect ratio
     * square: the tightest square around the window is cropped
     * </pre>
     */
    com.google.protobuf.ByteString
        getCropModeBytes();

    // optional bool cache_images = 12 [default = false];
    /**
     * <code>optional bool cache_images = 12 [default = false];</code>
     *
     * <pre>
     * cache_images: will load all images in memory for faster access
     * </pre>
     */
    boolean hasCacheImages();
    /**
     * <code>optional bool cache_images = 12 [default = false];</code>
     *
     * <pre>
     * cache_images: will load all images in memory for faster access
     * </pre>
     */
    boolean getCacheImages();

    // optional string root_folder = 13 [default = ""];
    /**
     * <code>optional string root_folder = 13 [default = ""];</code>
     *
     * <pre>
     * append root_folder to locate images
     * </pre>
     */
    boolean hasRootFolder();
    /**
     * <code>optional string root_folder = 13 [default = ""];</code>
     *
     * <pre>
     * append root_folder to locate images
     * </pre>
     */
    java.lang.String getRootFolder();
    /**
     * <code>optional string root_folder = 13 [default = ""];</code>
     *
     * <pre>
     * append root_folder to locate images
     * </pre>
     */
    com.google.protobuf.ByteString
        getRootFolderBytes();
  }
  /**
   * Protobuf type {@code caffe.WindowDataParameter}
   */
  public static final class WindowDataParameter extends
      com.google.protobuf.GeneratedMessage
      implements WindowDataParameterOrBuilder {
    // Use WindowDataParameter.newBuilder() to construct.
    private WindowDataParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private WindowDataParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final WindowDataParameter defaultInstance;
    public static WindowDataParameter getDefaultInstance() {
      return defaultInstance;
    }

    public WindowDataParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private WindowDataParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              source_ = input.readBytes();
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              scale_ = input.readFloat();
              break;
            }
            case 26: {
              bitField0_ |= 0x00000004;
              meanFile_ = input.readBytes();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              batchSize_ = input.readUInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              cropSize_ = input.readUInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              mirror_ = input.readBool();
              break;
            }
            case 61: {
              bitField0_ |= 0x00000040;
              fgThreshold_ = input.readFloat();
              break;
            }
            case 69: {
              bitField0_ |= 0x00000080;
              bgThreshold_ = input.readFloat();
              break;
            }
            case 77: {
              bitField0_ |= 0x00000100;
              fgFraction_ = input.readFloat();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              contextPad_ = input.readUInt32();
              break;
            }
            case 90: {
              bitField0_ |= 0x00000400;
              cropMode_ = input.readBytes();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000800;
              cacheImages_ = input.readBool();
              break;
            }
            case 106: {
              bitField0_ |= 0x00001000;
              rootFolder_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_WindowDataParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_WindowDataParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.WindowDataParameter.class, caffe.Caffe.WindowDataParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<WindowDataParameter> PARSER =
        new com.google.protobuf.AbstractParser<WindowDataParameter>() {
      public WindowDataParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new WindowDataParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<WindowDataParameter> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional string source = 1;
    public static final int SOURCE_FIELD_NUMBER = 1;
    private java.lang.Object source_;
    /**
     * <code>optional string source = 1;</code>
     *
     * <pre>
     * Specify the data source.
     * </pre>
     */
    public boolean hasSource() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string source = 1;</code>
     *
     * <pre>
     * Specify the data source.
     * </pre>
     */
    public java.lang.String getSource() {
      java.lang.Object ref = source_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          source_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string source = 1;</code>
     *
     * <pre>
     * Specify the data source.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getSourceBytes() {
      java.lang.Object ref = source_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        source_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional float scale = 2 [default = 1];
    public static final int SCALE_FIELD_NUMBER = 2;
    private float scale_;
    /**
     * <code>optional float scale = 2 [default = 1];</code>
     *
     * <pre>
     * For data pre-processing, we can do simple scaling and subtracting the
     * data mean, if provided. Note that the mean subtraction is always carried
     * out before scaling.
     * </pre>
     */
    public boolean hasScale() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional float scale = 2 [default = 1];</code>
     *
     * <pre>
     * For data pre-processing, we can do simple scaling and subtracting the
     * data mean, if provided. Note that the mean subtraction is always carried
     * out before scaling.
     * </pre>
     */
    public float getScale() {
      return scale_;
    }

    // optional string mean_file = 3;
    public static final int MEAN_FILE_FIELD_NUMBER = 3;
    private java.lang.Object meanFile_;
    /**
     * <code>optional string mean_file = 3;</code>
     */
    public boolean hasMeanFile() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional string mean_file = 3;</code>
     */
    public java.lang.String getMeanFile() {
      java.lang.Object ref = meanFile_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          meanFile_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string mean_file = 3;</code>
     */
    public com.google.protobuf.ByteString
        getMeanFileBytes() {
      java.lang.Object ref = meanFile_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        meanFile_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional uint32 batch_size = 4;
    public static final int BATCH_SIZE_FIELD_NUMBER = 4;
    private int batchSize_;
    /**
     * <code>optional uint32 batch_size = 4;</code>
     *
     * <pre>
     * Specify the batch size.
     * </pre>
     */
    public boolean hasBatchSize() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 batch_size = 4;</code>
     *
     * <pre>
     * Specify the batch size.
     * </pre>
     */
    public int getBatchSize() {
      return batchSize_;
    }

    // optional uint32 crop_size = 5 [default = 0];
    public static final int CROP_SIZE_FIELD_NUMBER = 5;
    private int cropSize_;
    /**
     * <code>optional uint32 crop_size = 5 [default = 0];</code>
     *
     * <pre>
     * Specify if we would like to randomly crop an image.
     * </pre>
     */
    public boolean hasCropSize() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional uint32 crop_size = 5 [default = 0];</code>
     *
     * <pre>
     * Specify if we would like to randomly crop an image.
     * </pre>
     */
    public int getCropSize() {
      return cropSize_;
    }

    // optional bool mirror = 6 [default = false];
    public static final int MIRROR_FIELD_NUMBER = 6;
    private boolean mirror_;
    /**
     * <code>optional bool mirror = 6 [default = false];</code>
     *
     * <pre>
     * Specify if we want to randomly mirror data.
     * </pre>
     */
    public boolean hasMirror() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional bool mirror = 6 [default = false];</code>
     *
     * <pre>
     * Specify if we want to randomly mirror data.
     * </pre>
     */
    public boolean getMirror() {
      return mirror_;
    }

    // optional float fg_threshold = 7 [default = 0.5];
    public static final int FG_THRESHOLD_FIELD_NUMBER = 7;
    private float fgThreshold_;
    /**
     * <code>optional float fg_threshold = 7 [default = 0.5];</code>
     *
     * <pre>
     * Foreground (object) overlap threshold
     * </pre>
     */
    public boolean hasFgThreshold() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional float fg_threshold = 7 [default = 0.5];</code>
     *
     * <pre>
     * Foreground (object) overlap threshold
     * </pre>
     */
    public float getFgThreshold() {
      return fgThreshold_;
    }

    // optional float bg_threshold = 8 [default = 0.5];
    public static final int BG_THRESHOLD_FIELD_NUMBER = 8;
    private float bgThreshold_;
    /**
     * <code>optional float bg_threshold = 8 [default = 0.5];</code>
     *
     * <pre>
     * Background (non-object) overlap threshold
     * </pre>
     */
    public boolean hasBgThreshold() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional float bg_threshold = 8 [default = 0.5];</code>
     *
     * <pre>
     * Background (non-object) overlap threshold
     * </pre>
     */
    public float getBgThreshold() {
      return bgThreshold_;
    }

    // optional float fg_fraction = 9 [default = 0.25];
    public static final int FG_FRACTION_FIELD_NUMBER = 9;
    private float fgFraction_;
    /**
     * <code>optional float fg_fraction = 9 [default = 0.25];</code>
     *
     * <pre>
     * Fraction of batch that should be foreground objects
     * </pre>
     */
    public boolean hasFgFraction() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional float fg_fraction = 9 [default = 0.25];</code>
     *
     * <pre>
     * Fraction of batch that should be foreground objects
     * </pre>
     */
    public float getFgFraction() {
      return fgFraction_;
    }

    // optional uint32 context_pad = 10 [default = 0];
    public static final int CONTEXT_PAD_FIELD_NUMBER = 10;
    private int contextPad_;
    /**
     * <code>optional uint32 context_pad = 10 [default = 0];</code>
     *
     * <pre>
     * Amount of contextual padding to add around a window
     * (used only by the window_data_layer)
     * </pre>
     */
    public boolean hasContextPad() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional uint32 context_pad = 10 [default = 0];</code>
     *
     * <pre>
     * Amount of contextual padding to add around a window
     * (used only by the window_data_layer)
     * </pre>
     */
    public int getContextPad() {
      return contextPad_;
    }

    // optional string crop_mode = 11 [default = "warp"];
    public static final int CROP_MODE_FIELD_NUMBER = 11;
    private java.lang.Object cropMode_;
    /**
     * <code>optional string crop_mode = 11 [default = "warp"];</code>
     *
     * <pre>
     * Mode for cropping out a detection window
     * warp: cropped window is warped to a fixed size and aspect ratio
     * square: the tightest square around the window is cropped
     * </pre>
     */
    public boolean hasCropMode() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional string crop_mode = 11 [default = "warp"];</code>
     *
     * <pre>
     * Mode for cropping out a detection window
     * warp: cropped window is warped to a fixed size and aspect ratio
     * square: the tightest square around the window is cropped
     * </pre>
     */
    public java.lang.String getCropMode() {
      java.lang.Object ref = cropMode_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          cropMode_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string crop_mode = 11 [default = "warp"];</code>
     *
     * <pre>
     * Mode for cropping out a detection window
     * warp: cropped window is warped to a fixed size and aspect ratio
     * square: the tightest square around the window is cropped
     * </pre>
     */
    public com.google.protobuf.ByteString
        getCropModeBytes() {
      java.lang.Object ref = cropMode_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        cropMode_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional bool cache_images = 12 [default = false];
    public static final int CACHE_IMAGES_FIELD_NUMBER = 12;
    private boolean cacheImages_;
    /**
     * <code>optional bool cache_images = 12 [default = false];</code>
     *
     * <pre>
     * cache_images: will load all images in memory for faster access
     * </pre>
     */
    public boolean hasCacheImages() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional bool cache_images = 12 [default = false];</code>
     *
     * <pre>
     * cache_images: will load all images in memory for faster access
     * </pre>
     */
    public boolean getCacheImages() {
      return cacheImages_;
    }

    // optional string root_folder = 13 [default = ""];
    public static final int ROOT_FOLDER_FIELD_NUMBER = 13;
    private java.lang.Object rootFolder_;
    /**
     * <code>optional string root_folder = 13 [default = ""];</code>
     *
     * <pre>
     * append root_folder to locate images
     * </pre>
     */
    public boolean hasRootFolder() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional string root_folder = 13 [default = ""];</code>
     *
     * <pre>
     * append root_folder to locate images
     * </pre>
     */
    public java.lang.String getRootFolder() {
      java.lang.Object ref = rootFolder_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          rootFolder_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string root_folder = 13 [default = ""];</code>
     *
     * <pre>
     * append root_folder to locate images
     * </pre>
     */
    public com.google.protobuf.ByteString
        getRootFolderBytes() {
      java.lang.Object ref = rootFolder_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        rootFolder_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      source_ = "";
      scale_ = 1F;
      meanFile_ = "";
      batchSize_ = 0;
      cropSize_ = 0;
      mirror_ = false;
      fgThreshold_ = 0.5F;
      bgThreshold_ = 0.5F;
      fgFraction_ = 0.25F;
      contextPad_ = 0;
      cropMode_ = "warp";
      cacheImages_ = false;
      rootFolder_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getSourceBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, scale_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, getMeanFileBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, batchSize_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(5, cropSize_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeBool(6, mirror_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeFloat(7, fgThreshold_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeFloat(8, bgThreshold_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeFloat(9, fgFraction_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeUInt32(10, contextPad_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeBytes(11, getCropModeBytes());
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeBool(12, cacheImages_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeBytes(13, getRootFolderBytes());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getSourceBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, scale_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getMeanFileBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, batchSize_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, cropSize_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, mirror_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(7, fgThreshold_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(8, bgThreshold_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(9, fgFraction_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(10, contextPad_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(11, getCropModeBytes());
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(12, cacheImages_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(13, getRootFolderBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.WindowDataParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.WindowDataParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.WindowDataParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.WindowDataParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.WindowDataParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.WindowDataParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.WindowDataParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.WindowDataParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.WindowDataParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.WindowDataParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.WindowDataParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.WindowDataParameter}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements caffe.Caffe.WindowDataParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_WindowDataParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_WindowDataParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.WindowDataParameter.class, caffe.Caffe.WindowDataParameter.Builder.class);
      }

      // Construct using caffe.Caffe.WindowDataParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        source_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        scale_ = 1F;
        bitField0_ = (bitField0_ & ~0x00000002);
        meanFile_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        batchSize_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        cropSize_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        mirror_ = false;
        bitField0_ = (bitField0_ & ~0x00000020);
        fgThreshold_ = 0.5F;
        bitField0_ = (bitField0_ & ~0x00000040);
        bgThreshold_ = 0.5F;
        bitField0_ = (bitField0_ & ~0x00000080);
        fgFraction_ = 0.25F;
        bitField0_ = (bitField0_ & ~0x00000100);
        contextPad_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        cropMode_ = "warp";
        bitField0_ = (bitField0_ & ~0x00000400);
        cacheImages_ = false;
        bitField0_ = (bitField0_ & ~0x00000800);
        rootFolder_ = "";
        bitField0_ = (bitField0_ & ~0x00001000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_WindowDataParameter_descriptor;
      }

      public caffe.Caffe.WindowDataParameter getDefaultInstanceForType() {
        return caffe.Caffe.WindowDataParameter.getDefaultInstance();
      }

      public caffe.Caffe.WindowDataParameter build() {
        caffe.Caffe.WindowDataParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.WindowDataParameter buildPartial() {
        caffe.Caffe.WindowDataParameter result = new caffe.Caffe.WindowDataParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.source_ = source_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.scale_ = scale_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.meanFile_ = meanFile_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.batchSize_ = batchSize_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.cropSize_ = cropSize_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.mirror_ = mirror_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.fgThreshold_ = fgThreshold_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.bgThreshold_ = bgThreshold_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.fgFraction_ = fgFraction_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.contextPad_ = contextPad_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.cropMode_ = cropMode_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.cacheImages_ = cacheImages_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.rootFolder_ = rootFolder_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.WindowDataParameter) {
          return mergeFrom((caffe.Caffe.WindowDataParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.WindowDataParameter other) {
        if (other == caffe.Caffe.WindowDataParameter.getDefaultInstance()) return this;
        if (other.hasSource()) {
          bitField0_ |= 0x00000001;
          source_ = other.source_;
          onChanged();
        }
        if (other.hasScale()) {
          setScale(other.getScale());
        }
        if (other.hasMeanFile()) {
          bitField0_ |= 0x00000004;
          meanFile_ = other.meanFile_;
          onChanged();
        }
        if (other.hasBatchSize()) {
          setBatchSize(other.getBatchSize());
        }
        if (other.hasCropSize()) {
          setCropSize(other.getCropSize());
        }
        if (other.hasMirror()) {
          setMirror(other.getMirror());
        }
        if (other.hasFgThreshold()) {
          setFgThreshold(other.getFgThreshold());
        }
        if (other.hasBgThreshold()) {
          setBgThreshold(other.getBgThreshold());
        }
        if (other.hasFgFraction()) {
          setFgFraction(other.getFgFraction());
        }
        if (other.hasContextPad()) {
          setContextPad(other.getContextPad());
        }
        if (other.hasCropMode()) {
          bitField0_ |= 0x00000400;
          cropMode_ = other.cropMode_;
          onChanged();
        }
        if (other.hasCacheImages()) {
          setCacheImages(other.getCacheImages());
        }
        if (other.hasRootFolder()) {
          bitField0_ |= 0x00001000;
          rootFolder_ = other.rootFolder_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.WindowDataParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.WindowDataParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional string source = 1;
      private java.lang.Object source_ = "";
      /**
       * <code>optional string source = 1;</code>
       *
       * <pre>
       * Specify the data source.
       * </pre>
       */
      public boolean hasSource() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string source = 1;</code>
       *
       * <pre>
       * Specify the data source.
       * </pre>
       */
      public java.lang.String getSource() {
        java.lang.Object ref = source_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          source_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string source = 1;</code>
       *
       * <pre>
       * Specify the data source.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getSourceBytes() {
        java.lang.Object ref = source_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          source_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string source = 1;</code>
       *
       * <pre>
       * Specify the data source.
       * </pre>
       */
      public Builder setSource(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        source_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string source = 1;</code>
       *
       * <pre>
       * Specify the data source.
       * </pre>
       */
      public Builder clearSource() {
        bitField0_ = (bitField0_ & ~0x00000001);
        source_ = getDefaultInstance().getSource();
        onChanged();
        return this;
      }
      /**
       * <code>optional string source = 1;</code>
       *
       * <pre>
       * Specify the data source.
       * </pre>
       */
      public Builder setSourceBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        source_ = value;
        onChanged();
        return this;
      }

      // optional float scale = 2 [default = 1];
      private float scale_ = 1F;
      /**
       * <code>optional float scale = 2 [default = 1];</code>
       *
       * <pre>
       * For data pre-processing, we can do simple scaling and subtracting the
       * data mean, if provided. Note that the mean subtraction is always carried
       * out before scaling.
       * </pre>
       */
      public boolean hasScale() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional float scale = 2 [default = 1];</code>
       *
       * <pre>
       * For data pre-processing, we can do simple scaling and subtracting the
       * data mean, if provided. Note that the mean subtraction is always carried
       * out before scaling.
       * </pre>
       */
      public float getScale() {
        return scale_;
      }
      /**
       * <code>optional float scale = 2 [default = 1];</code>
       *
       * <pre>
       * For data pre-processing, we can do simple scaling and subtracting the
       * data mean, if provided. Note that the mean subtraction is always carried
       * out before scaling.
       * </pre>
       */
      public Builder setScale(float value) {
        bitField0_ |= 0x00000002;
        scale_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float scale = 2 [default = 1];</code>
       *
       * <pre>
       * For data pre-processing, we can do simple scaling and subtracting the
       * data mean, if provided. Note that the mean subtraction is always carried
       * out before scaling.
       * </pre>
       */
      public Builder clearScale() {
        bitField0_ = (bitField0_ & ~0x00000002);
        scale_ = 1F;
        onChanged();
        return this;
      }

      // optional string mean_file = 3;
      private java.lang.Object meanFile_ = "";
      /**
       * <code>optional string mean_file = 3;</code>
       */
      public boolean hasMeanFile() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional string mean_file = 3;</code>
       */
      public java.lang.String getMeanFile() {
        java.lang.Object ref = meanFile_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          meanFile_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string mean_file = 3;</code>
       */
      public com.google.protobuf.ByteString
          getMeanFileBytes() {
        java.lang.Object ref = meanFile_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          meanFile_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string mean_file = 3;</code>
       */
      public Builder setMeanFile(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        meanFile_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string mean_file = 3;</code>
       */
      public Builder clearMeanFile() {
        bitField0_ = (bitField0_ & ~0x00000004);
        meanFile_ = getDefaultInstance().getMeanFile();
        onChanged();
        return this;
      }
      /**
       * <code>optional string mean_file = 3;</code>
       */
      public Builder setMeanFileBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        meanFile_ = value;
        onChanged();
        return this;
      }

      // optional uint32 batch_size = 4;
      private int batchSize_ ;
      /**
       * <code>optional uint32 batch_size = 4;</code>
       *
       * <pre>
       * Specify the batch size.
       * </pre>
       */
      public boolean hasBatchSize() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 batch_size = 4;</code>
       *
       * <pre>
       * Specify the batch size.
       * </pre>
       */
      public int getBatchSize() {
        return batchSize_;
      }
      /**
       * <code>optional uint32 batch_size = 4;</code>
       *
       * <pre>
       * Specify the batch size.
       * </pre>
       */
      public Builder setBatchSize(int value) {
        bitField0_ |= 0x00000008;
        batchSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 batch_size = 4;</code>
       *
       * <pre>
       * Specify the batch size.
       * </pre>
       */
      public Builder clearBatchSize() {
        bitField0_ = (bitField0_ & ~0x00000008);
        batchSize_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 crop_size = 5 [default = 0];
      private int cropSize_ ;
      /**
       * <code>optional uint32 crop_size = 5 [default = 0];</code>
       *
       * <pre>
       * Specify if we would like to randomly crop an image.
       * </pre>
       */
      public boolean hasCropSize() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional uint32 crop_size = 5 [default = 0];</code>
       *
       * <pre>
       * Specify if we would like to randomly crop an image.
       * </pre>
       */
      public int getCropSize() {
        return cropSize_;
      }
      /**
       * <code>optional uint32 crop_size = 5 [default = 0];</code>
       *
       * <pre>
       * Specify if we would like to randomly crop an image.
       * </pre>
       */
      public Builder setCropSize(int value) {
        bitField0_ |= 0x00000010;
        cropSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 crop_size = 5 [default = 0];</code>
       *
       * <pre>
       * Specify if we would like to randomly crop an image.
       * </pre>
       */
      public Builder clearCropSize() {
        bitField0_ = (bitField0_ & ~0x00000010);
        cropSize_ = 0;
        onChanged();
        return this;
      }

      // optional bool mirror = 6 [default = false];
      private boolean mirror_ ;
      /**
       * <code>optional bool mirror = 6 [default = false];</code>
       *
       * <pre>
       * Specify if we want to randomly mirror data.
       * </pre>
       */
      public boolean hasMirror() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional bool mirror = 6 [default = false];</code>
       *
       * <pre>
       * Specify if we want to randomly mirror data.
       * </pre>
       */
      public boolean getMirror() {
        return mirror_;
      }
      /**
       * <code>optional bool mirror = 6 [default = false];</code>
       *
       * <pre>
       * Specify if we want to randomly mirror data.
       * </pre>
       */
      public Builder setMirror(boolean value) {
        bitField0_ |= 0x00000020;
        mirror_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool mirror = 6 [default = false];</code>
       *
       * <pre>
       * Specify if we want to randomly mirror data.
       * </pre>
       */
      public Builder clearMirror() {
        bitField0_ = (bitField0_ & ~0x00000020);
        mirror_ = false;
        onChanged();
        return this;
      }

      // optional float fg_threshold = 7 [default = 0.5];
      private float fgThreshold_ = 0.5F;
      /**
       * <code>optional float fg_threshold = 7 [default = 0.5];</code>
       *
       * <pre>
       * Foreground (object) overlap threshold
       * </pre>
       */
      public boolean hasFgThreshold() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional float fg_threshold = 7 [default = 0.5];</code>
       *
       * <pre>
       * Foreground (object) overlap threshold
       * </pre>
       */
      public float getFgThreshold() {
        return fgThreshold_;
      }
      /**
       * <code>optional float fg_threshold = 7 [default = 0.5];</code>
       *
       * <pre>
       * Foreground (object) overlap threshold
       * </pre>
       */
      public Builder setFgThreshold(float value) {
        bitField0_ |= 0x00000040;
        fgThreshold_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float fg_threshold = 7 [default = 0.5];</code>
       *
       * <pre>
       * Foreground (object) overlap threshold
       * </pre>
       */
      public Builder clearFgThreshold() {
        bitField0_ = (bitField0_ & ~0x00000040);
        fgThreshold_ = 0.5F;
        onChanged();
        return this;
      }

      // optional float bg_threshold = 8 [default = 0.5];
      private float bgThreshold_ = 0.5F;
      /**
       * <code>optional float bg_threshold = 8 [default = 0.5];</code>
       *
       * <pre>
       * Background (non-object) overlap threshold
       * </pre>
       */
      public boolean hasBgThreshold() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional float bg_threshold = 8 [default = 0.5];</code>
       *
       * <pre>
       * Background (non-object) overlap threshold
       * </pre>
       */
      public float getBgThreshold() {
        return bgThreshold_;
      }
      /**
       * <code>optional float bg_threshold = 8 [default = 0.5];</code>
       *
       * <pre>
       * Background (non-object) overlap threshold
       * </pre>
       */
      public Builder setBgThreshold(float value) {
        bitField0_ |= 0x00000080;
        bgThreshold_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float bg_threshold = 8 [default = 0.5];</code>
       *
       * <pre>
       * Background (non-object) overlap threshold
       * </pre>
       */
      public Builder clearBgThreshold() {
        bitField0_ = (bitField0_ & ~0x00000080);
        bgThreshold_ = 0.5F;
        onChanged();
        return this;
      }

      // optional float fg_fraction = 9 [default = 0.25];
      private float fgFraction_ = 0.25F;
      /**
       * <code>optional float fg_fraction = 9 [default = 0.25];</code>
       *
       * <pre>
       * Fraction of batch that should be foreground objects
       * </pre>
       */
      public boolean hasFgFraction() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional float fg_fraction = 9 [default = 0.25];</code>
       *
       * <pre>
       * Fraction of batch that should be foreground objects
       * </pre>
       */
      public float getFgFraction() {
        return fgFraction_;
      }
      /**
       * <code>optional float fg_fraction = 9 [default = 0.25];</code>
       *
       * <pre>
       * Fraction of batch that should be foreground objects
       * </pre>
       */
      public Builder setFgFraction(float value) {
        bitField0_ |= 0x00000100;
        fgFraction_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float fg_fraction = 9 [default = 0.25];</code>
       *
       * <pre>
       * Fraction of batch that should be foreground objects
       * </pre>
       */
      public Builder clearFgFraction() {
        bitField0_ = (bitField0_ & ~0x00000100);
        fgFraction_ = 0.25F;
        onChanged();
        return this;
      }

      // optional uint32 context_pad = 10 [default = 0];
      private int contextPad_ ;
      /**
       * <code>optional uint32 context_pad = 10 [default = 0];</code>
       *
       * <pre>
       * Amount of contextual padding to add around a window
       * (used only by the window_data_layer)
       * </pre>
       */
      public boolean hasContextPad() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional uint32 context_pad = 10 [default = 0];</code>
       *
       * <pre>
       * Amount of contextual padding to add around a window
       * (used only by the window_data_layer)
       * </pre>
       */
      public int getContextPad() {
        return contextPad_;
      }
      /**
       * <code>optional uint32 context_pad = 10 [default = 0];</code>
       *
       * <pre>
       * Amount of contextual padding to add around a window
       * (used only by the window_data_layer)
       * </pre>
       */
      public Builder setContextPad(int value) {
        bitField0_ |= 0x00000200;
        contextPad_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 context_pad = 10 [default = 0];</code>
       *
       * <pre>
       * Amount of contextual padding to add around a window
       * (used only by the window_data_layer)
       * </pre>
       */
      public Builder clearContextPad() {
        bitField0_ = (bitField0_ & ~0x00000200);
        contextPad_ = 0;
        onChanged();
        return this;
      }

      // optional string crop_mode = 11 [default = "warp"];
      private java.lang.Object cropMode_ = "warp";
      /**
       * <code>optional string crop_mode = 11 [default = "warp"];</code>
       *
       * <pre>
       * Mode for cropping out a detection window
       * warp: cropped window is warped to a fixed size and aspect ratio
       * square: the tightest square around the window is cropped
       * </pre>
       */
      public boolean hasCropMode() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional string crop_mode = 11 [default = "warp"];</code>
       *
       * <pre>
       * Mode for cropping out a detection window
       * warp: cropped window is warped to a fixed size and aspect ratio
       * square: the tightest square around the window is cropped
       * </pre>
       */
      public java.lang.String getCropMode() {
        java.lang.Object ref = cropMode_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          cropMode_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string crop_mode = 11 [default = "warp"];</code>
       *
       * <pre>
       * Mode for cropping out a detection window
       * warp: cropped window is warped to a fixed size and aspect ratio
       * square: the tightest square around the window is cropped
       * </pre>
       */
      public com.google.protobuf.ByteString
          getCropModeBytes() {
        java.lang.Object ref = cropMode_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          cropMode_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string crop_mode = 11 [default = "warp"];</code>
       *
       * <pre>
       * Mode for cropping out a detection window
       * warp: cropped window is warped to a fixed size and aspect ratio
       * square: the tightest square around the window is cropped
       * </pre>
       */
      public Builder setCropMode(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000400;
        cropMode_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string crop_mode = 11 [default = "warp"];</code>
       *
       * <pre>
       * Mode for cropping out a detection window
       * warp: cropped window is warped to a fixed size and aspect ratio
       * square: the tightest square around the window is cropped
       * </pre>
       */
      public Builder clearCropMode() {
        bitField0_ = (bitField0_ & ~0x00000400);
        cropMode_ = getDefaultInstance().getCropMode();
        onChanged();
        return this;
      }
      /**
       * <code>optional string crop_mode = 11 [default = "warp"];</code>
       *
       * <pre>
       * Mode for cropping out a detection window
       * warp: cropped window is warped to a fixed size and aspect ratio
       * square: the tightest square around the window is cropped
       * </pre>
       */
      public Builder setCropModeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000400;
        cropMode_ = value;
        onChanged();
        return this;
      }

      // optional bool cache_images = 12 [default = false];
      private boolean cacheImages_ ;
      /**
       * <code>optional bool cache_images = 12 [default = false];</code>
       *
       * <pre>
       * cache_images: will load all images in memory for faster access
       * </pre>
       */
      public boolean hasCacheImages() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional bool cache_images = 12 [default = false];</code>
       *
       * <pre>
       * cache_images: will load all images in memory for faster access
       * </pre>
       */
      public boolean getCacheImages() {
        return cacheImages_;
      }
      /**
       * <code>optional bool cache_images = 12 [default = false];</code>
       *
       * <pre>
       * cache_images: will load all images in memory for faster access
       * </pre>
       */
      public Builder setCacheImages(boolean value) {
        bitField0_ |= 0x00000800;
        cacheImages_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool cache_images = 12 [default = false];</code>
       *
       * <pre>
       * cache_images: will load all images in memory for faster access
       * </pre>
       */
      public Builder clearCacheImages() {
        bitField0_ = (bitField0_ & ~0x00000800);
        cacheImages_ = false;
        onChanged();
        return this;
      }

      // optional string root_folder = 13 [default = ""];
      private java.lang.Object rootFolder_ = "";
      /**
       * <code>optional string root_folder = 13 [default = ""];</code>
       *
       * <pre>
       * append root_folder to locate images
       * </pre>
       */
      public boolean hasRootFolder() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional string root_folder = 13 [default = ""];</code>
       *
       * <pre>
       * append root_folder to locate images
       * </pre>
       */
      public java.lang.String getRootFolder() {
        java.lang.Object ref = rootFolder_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          rootFolder_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string root_folder = 13 [default = ""];</code>
       *
       * <pre>
       * append root_folder to locate images
       * </pre>
       */
      public com.google.protobuf.ByteString
          getRootFolderBytes() {
        java.lang.Object ref = rootFolder_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          rootFolder_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string root_folder = 13 [default = ""];</code>
       *
       * <pre>
       * append root_folder to locate images
       * </pre>
       */
      public Builder setRootFolder(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00001000;
        rootFolder_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string root_folder = 13 [default = ""];</code>
       *
       * <pre>
       * append root_folder to locate images
       * </pre>
       */
      public Builder clearRootFolder() {
        bitField0_ = (bitField0_ & ~0x00001000);
        rootFolder_ = getDefaultInstance().getRootFolder();
        onChanged();
        return this;
      }
      /**
       * <code>optional string root_folder = 13 [default = ""];</code>
       *
       * <pre>
       * append root_folder to locate images
       * </pre>
       */
      public Builder setRootFolderBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00001000;
        rootFolder_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.WindowDataParameter)
    }

    static {
      defaultInstance = new WindowDataParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.WindowDataParameter)
  }

  public interface SPPParameterOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional uint32 pyramid_height = 1;
    /**
     * <code>optional uint32 pyramid_height = 1;</code>
     */
    boolean hasPyramidHeight();
    /**
     * <code>optional uint32 pyramid_height = 1;</code>
     */
    int getPyramidHeight();

    // optional .caffe.SPPParameter.PoolMethod pool = 2 [default = MAX];
    /**
     * <code>optional .caffe.SPPParameter.PoolMethod pool = 2 [default = MAX];</code>
     *
     * <pre>
     * The pooling method
     * </pre>
     */
    boolean hasPool();
    /**
     * <code>optional .caffe.SPPParameter.PoolMethod pool = 2 [default = MAX];</code>
     *
     * <pre>
     * The pooling method
     * </pre>
     */
    caffe.Caffe.SPPParameter.PoolMethod getPool();

    // optional .caffe.SPPParameter.Engine engine = 6 [default = DEFAULT];
    /**
     * <code>optional .caffe.SPPParameter.Engine engine = 6 [default = DEFAULT];</code>
     */
    boolean hasEngine();
    /**
     * <code>optional .caffe.SPPParameter.Engine engine = 6 [default = DEFAULT];</code>
     */
    caffe.Caffe.SPPParameter.Engine getEngine();
  }
  /**
   * Protobuf type {@code caffe.SPPParameter}
   */
  public static final class SPPParameter extends
      com.google.protobuf.GeneratedMessage
      implements SPPParameterOrBuilder {
    // Use SPPParameter.newBuilder() to construct.
    private SPPParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private SPPParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final SPPParameter defaultInstance;
    public static SPPParameter getDefaultInstance() {
      return defaultInstance;
    }

    public SPPParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private SPPParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              pyramidHeight_ = input.readUInt32();
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
              caffe.Caffe.SPPParameter.PoolMethod value = caffe.Caffe.SPPParameter.PoolMethod.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(2, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                pool_ = value;
              }
              break;
            }
            case 48: {
              int rawValue = input.readEnum();
              caffe.Caffe.SPPParameter.Engine value = caffe.Caffe.SPPParameter.Engine.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(6, rawValue);
              } else {
                bitField0_ |= 0x00000004;
                engine_ = value;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_SPPParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_SPPParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.SPPParameter.class, caffe.Caffe.SPPParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<SPPParameter> PARSER =
        new com.google.protobuf.AbstractParser<SPPParameter>() {
      public SPPParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SPPParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<SPPParameter> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code caffe.SPPParameter.PoolMethod}
     */
    public enum PoolMethod
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>MAX = 0;</code>
       */
      MAX(0, 0),
      /**
       * <code>AVE = 1;</code>
       */
      AVE(1, 1),
      /**
       * <code>STOCHASTIC = 2;</code>
       */
      STOCHASTIC(2, 2),
      ;

      /**
       * <code>MAX = 0;</code>
       */
      public static final int MAX_VALUE = 0;
      /**
       * <code>AVE = 1;</code>
       */
      public static final int AVE_VALUE = 1;
      /**
       * <code>STOCHASTIC = 2;</code>
       */
      public static final int STOCHASTIC_VALUE = 2;


      public final int getNumber() { return value; }

      public static PoolMethod valueOf(int value) {
        switch (value) {
          case 0: return MAX;
          case 1: return AVE;
          case 2: return STOCHASTIC;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<PoolMethod>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<PoolMethod>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<PoolMethod>() {
              public PoolMethod findValueByNumber(int number) {
                return PoolMethod.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return caffe.Caffe.SPPParameter.getDescriptor().getEnumTypes().get(0);
      }

      private static final PoolMethod[] VALUES = values();

      public static PoolMethod valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private PoolMethod(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:caffe.SPPParameter.PoolMethod)
    }

    /**
     * Protobuf enum {@code caffe.SPPParameter.Engine}
     */
    public enum Engine
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>DEFAULT = 0;</code>
       */
      DEFAULT(0, 0),
      /**
       * <code>CAFFE = 1;</code>
       */
      CAFFE(1, 1),
      /**
       * <code>CUDNN = 2;</code>
       */
      CUDNN(2, 2),
      ;

      /**
       * <code>DEFAULT = 0;</code>
       */
      public static final int DEFAULT_VALUE = 0;
      /**
       * <code>CAFFE = 1;</code>
       */
      public static final int CAFFE_VALUE = 1;
      /**
       * <code>CUDNN = 2;</code>
       */
      public static final int CUDNN_VALUE = 2;


      public final int getNumber() { return value; }

      public static Engine valueOf(int value) {
        switch (value) {
          case 0: return DEFAULT;
          case 1: return CAFFE;
          case 2: return CUDNN;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Engine>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<Engine>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Engine>() {
              public Engine findValueByNumber(int number) {
                return Engine.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return caffe.Caffe.SPPParameter.getDescriptor().getEnumTypes().get(1);
      }

      private static final Engine[] VALUES = values();

      public static Engine valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private Engine(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:caffe.SPPParameter.Engine)
    }

    private int bitField0_;
    // optional uint32 pyramid_height = 1;
    public static final int PYRAMID_HEIGHT_FIELD_NUMBER = 1;
    private int pyramidHeight_;
    /**
     * <code>optional uint32 pyramid_height = 1;</code>
     */
    public boolean hasPyramidHeight() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 pyramid_height = 1;</code>
     */
    public int getPyramidHeight() {
      return pyramidHeight_;
    }

    // optional .caffe.SPPParameter.PoolMethod pool = 2 [default = MAX];
    public static final int POOL_FIELD_NUMBER = 2;
    private caffe.Caffe.SPPParameter.PoolMethod pool_;
    /**
     * <code>optional .caffe.SPPParameter.PoolMethod pool = 2 [default = MAX];</code>
     *
     * <pre>
     * The pooling method
     * </pre>
     */
    public boolean hasPool() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .caffe.SPPParameter.PoolMethod pool = 2 [default = MAX];</code>
     *
     * <pre>
     * The pooling method
     * </pre>
     */
    public caffe.Caffe.SPPParameter.PoolMethod getPool() {
      return pool_;
    }

    // optional .caffe.SPPParameter.Engine engine = 6 [default = DEFAULT];
    public static final int ENGINE_FIELD_NUMBER = 6;
    private caffe.Caffe.SPPParameter.Engine engine_;
    /**
     * <code>optional .caffe.SPPParameter.Engine engine = 6 [default = DEFAULT];</code>
     */
    public boolean hasEngine() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .caffe.SPPParameter.Engine engine = 6 [default = DEFAULT];</code>
     */
    public caffe.Caffe.SPPParameter.Engine getEngine() {
      return engine_;
    }

    private void initFields() {
      pyramidHeight_ = 0;
      pool_ = caffe.Caffe.SPPParameter.PoolMethod.MAX;
      engine_ = caffe.Caffe.SPPParameter.Engine.DEFAULT;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, pyramidHeight_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(2, pool_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeEnum(6, engine_.getNumber());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, pyramidHeight_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, pool_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(6, engine_.getNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.SPPParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.SPPParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.SPPParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.SPPParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.SPPParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.SPPParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.SPPParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.SPPParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.SPPParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.SPPParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.SPPParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.SPPParameter}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements caffe.Caffe.SPPParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_SPPParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_SPPParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.SPPParameter.class, caffe.Caffe.SPPParameter.Builder.class);
      }

      // Construct using caffe.Caffe.SPPParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        pyramidHeight_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        pool_ = caffe.Caffe.SPPParameter.PoolMethod.MAX;
        bitField0_ = (bitField0_ & ~0x00000002);
        engine_ = caffe.Caffe.SPPParameter.Engine.DEFAULT;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_SPPParameter_descriptor;
      }

      public caffe.Caffe.SPPParameter getDefaultInstanceForType() {
        return caffe.Caffe.SPPParameter.getDefaultInstance();
      }

      public caffe.Caffe.SPPParameter build() {
        caffe.Caffe.SPPParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.SPPParameter buildPartial() {
        caffe.Caffe.SPPParameter result = new caffe.Caffe.SPPParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.pyramidHeight_ = pyramidHeight_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.pool_ = pool_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.engine_ = engine_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.SPPParameter) {
          return mergeFrom((caffe.Caffe.SPPParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.SPPParameter other) {
        if (other == caffe.Caffe.SPPParameter.getDefaultInstance()) return this;
        if (other.hasPyramidHeight()) {
          setPyramidHeight(other.getPyramidHeight());
        }
        if (other.hasPool()) {
          setPool(other.getPool());
        }
        if (other.hasEngine()) {
          setEngine(other.getEngine());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.SPPParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.SPPParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional uint32 pyramid_height = 1;
      private int pyramidHeight_ ;
      /**
       * <code>optional uint32 pyramid_height = 1;</code>
       */
      public boolean hasPyramidHeight() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 pyramid_height = 1;</code>
       */
      public int getPyramidHeight() {
        return pyramidHeight_;
      }
      /**
       * <code>optional uint32 pyramid_height = 1;</code>
       */
      public Builder setPyramidHeight(int value) {
        bitField0_ |= 0x00000001;
        pyramidHeight_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 pyramid_height = 1;</code>
       */
      public Builder clearPyramidHeight() {
        bitField0_ = (bitField0_ & ~0x00000001);
        pyramidHeight_ = 0;
        onChanged();
        return this;
      }

      // optional .caffe.SPPParameter.PoolMethod pool = 2 [default = MAX];
      private caffe.Caffe.SPPParameter.PoolMethod pool_ = caffe.Caffe.SPPParameter.PoolMethod.MAX;
      /**
       * <code>optional .caffe.SPPParameter.PoolMethod pool = 2 [default = MAX];</code>
       *
       * <pre>
       * The pooling method
       * </pre>
       */
      public boolean hasPool() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .caffe.SPPParameter.PoolMethod pool = 2 [default = MAX];</code>
       *
       * <pre>
       * The pooling method
       * </pre>
       */
      public caffe.Caffe.SPPParameter.PoolMethod getPool() {
        return pool_;
      }
      /**
       * <code>optional .caffe.SPPParameter.PoolMethod pool = 2 [default = MAX];</code>
       *
       * <pre>
       * The pooling method
       * </pre>
       */
      public Builder setPool(caffe.Caffe.SPPParameter.PoolMethod value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        pool_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .caffe.SPPParameter.PoolMethod pool = 2 [default = MAX];</code>
       *
       * <pre>
       * The pooling method
       * </pre>
       */
      public Builder clearPool() {
        bitField0_ = (bitField0_ & ~0x00000002);
        pool_ = caffe.Caffe.SPPParameter.PoolMethod.MAX;
        onChanged();
        return this;
      }

      // optional .caffe.SPPParameter.Engine engine = 6 [default = DEFAULT];
      private caffe.Caffe.SPPParameter.Engine engine_ = caffe.Caffe.SPPParameter.Engine.DEFAULT;
      /**
       * <code>optional .caffe.SPPParameter.Engine engine = 6 [default = DEFAULT];</code>
       */
      public boolean hasEngine() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .caffe.SPPParameter.Engine engine = 6 [default = DEFAULT];</code>
       */
      public caffe.Caffe.SPPParameter.Engine getEngine() {
        return engine_;
      }
      /**
       * <code>optional .caffe.SPPParameter.Engine engine = 6 [default = DEFAULT];</code>
       */
      public Builder setEngine(caffe.Caffe.SPPParameter.Engine value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000004;
        engine_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .caffe.SPPParameter.Engine engine = 6 [default = DEFAULT];</code>
       */
      public Builder clearEngine() {
        bitField0_ = (bitField0_ & ~0x00000004);
        engine_ = caffe.Caffe.SPPParameter.Engine.DEFAULT;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.SPPParameter)
    }

    static {
      defaultInstance = new SPPParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.SPPParameter)
  }

  public interface V1LayerParameterOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated string bottom = 2;
    /**
     * <code>repeated string bottom = 2;</code>
     */
    java.util.List<java.lang.String>
    getBottomList();
    /**
     * <code>repeated string bottom = 2;</code>
     */
    int getBottomCount();
    /**
     * <code>repeated string bottom = 2;</code>
     */
    java.lang.String getBottom(int index);
    /**
     * <code>repeated string bottom = 2;</code>
     */
    com.google.protobuf.ByteString
        getBottomBytes(int index);

    // repeated string top = 3;
    /**
     * <code>repeated string top = 3;</code>
     */
    java.util.List<java.lang.String>
    getTopList();
    /**
     * <code>repeated string top = 3;</code>
     */
    int getTopCount();
    /**
     * <code>repeated string top = 3;</code>
     */
    java.lang.String getTop(int index);
    /**
     * <code>repeated string top = 3;</code>
     */
    com.google.protobuf.ByteString
        getTopBytes(int index);

    // optional string name = 4;
    /**
     * <code>optional string name = 4;</code>
     */
    boolean hasName();
    /**
     * <code>optional string name = 4;</code>
     */
    java.lang.String getName();
    /**
     * <code>optional string name = 4;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    // repeated .caffe.NetStateRule include = 32;
    /**
     * <code>repeated .caffe.NetStateRule include = 32;</code>
     */
    java.util.List<caffe.Caffe.NetStateRule> 
        getIncludeList();
    /**
     * <code>repeated .caffe.NetStateRule include = 32;</code>
     */
    caffe.Caffe.NetStateRule getInclude(int index);
    /**
     * <code>repeated .caffe.NetStateRule include = 32;</code>
     */
    int getIncludeCount();
    /**
     * <code>repeated .caffe.NetStateRule include = 32;</code>
     */
    java.util.List<? extends caffe.Caffe.NetStateRuleOrBuilder> 
        getIncludeOrBuilderList();
    /**
     * <code>repeated .caffe.NetStateRule include = 32;</code>
     */
    caffe.Caffe.NetStateRuleOrBuilder getIncludeOrBuilder(
        int index);

    // repeated .caffe.NetStateRule exclude = 33;
    /**
     * <code>repeated .caffe.NetStateRule exclude = 33;</code>
     */
    java.util.List<caffe.Caffe.NetStateRule> 
        getExcludeList();
    /**
     * <code>repeated .caffe.NetStateRule exclude = 33;</code>
     */
    caffe.Caffe.NetStateRule getExclude(int index);
    /**
     * <code>repeated .caffe.NetStateRule exclude = 33;</code>
     */
    int getExcludeCount();
    /**
     * <code>repeated .caffe.NetStateRule exclude = 33;</code>
     */
    java.util.List<? extends caffe.Caffe.NetStateRuleOrBuilder> 
        getExcludeOrBuilderList();
    /**
     * <code>repeated .caffe.NetStateRule exclude = 33;</code>
     */
    caffe.Caffe.NetStateRuleOrBuilder getExcludeOrBuilder(
        int index);

    // optional .caffe.V1LayerParameter.LayerType type = 5;
    /**
     * <code>optional .caffe.V1LayerParameter.LayerType type = 5;</code>
     */
    boolean hasType();
    /**
     * <code>optional .caffe.V1LayerParameter.LayerType type = 5;</code>
     */
    caffe.Caffe.V1LayerParameter.LayerType getType();

    // repeated .caffe.BlobProto blobs = 6;
    /**
     * <code>repeated .caffe.BlobProto blobs = 6;</code>
     */
    java.util.List<caffe.Caffe.BlobProto> 
        getBlobsList();
    /**
     * <code>repeated .caffe.BlobProto blobs = 6;</code>
     */
    caffe.Caffe.BlobProto getBlobs(int index);
    /**
     * <code>repeated .caffe.BlobProto blobs = 6;</code>
     */
    int getBlobsCount();
    /**
     * <code>repeated .caffe.BlobProto blobs = 6;</code>
     */
    java.util.List<? extends caffe.Caffe.BlobProtoOrBuilder> 
        getBlobsOrBuilderList();
    /**
     * <code>repeated .caffe.BlobProto blobs = 6;</code>
     */
    caffe.Caffe.BlobProtoOrBuilder getBlobsOrBuilder(
        int index);

    // repeated string param = 1001;
    /**
     * <code>repeated string param = 1001;</code>
     */
    java.util.List<java.lang.String>
    getParamList();
    /**
     * <code>repeated string param = 1001;</code>
     */
    int getParamCount();
    /**
     * <code>repeated string param = 1001;</code>
     */
    java.lang.String getParam(int index);
    /**
     * <code>repeated string param = 1001;</code>
     */
    com.google.protobuf.ByteString
        getParamBytes(int index);

    // repeated .caffe.V1LayerParameter.DimCheckMode blob_share_mode = 1002;
    /**
     * <code>repeated .caffe.V1LayerParameter.DimCheckMode blob_share_mode = 1002;</code>
     */
    java.util.List<caffe.Caffe.V1LayerParameter.DimCheckMode> getBlobShareModeList();
    /**
     * <code>repeated .caffe.V1LayerParameter.DimCheckMode blob_share_mode = 1002;</code>
     */
    int getBlobShareModeCount();
    /**
     * <code>repeated .caffe.V1LayerParameter.DimCheckMode blob_share_mode = 1002;</code>
     */
    caffe.Caffe.V1LayerParameter.DimCheckMode getBlobShareMode(int index);

    // repeated float blobs_lr = 7;
    /**
     * <code>repeated float blobs_lr = 7;</code>
     */
    java.util.List<java.lang.Float> getBlobsLrList();
    /**
     * <code>repeated float blobs_lr = 7;</code>
     */
    int getBlobsLrCount();
    /**
     * <code>repeated float blobs_lr = 7;</code>
     */
    float getBlobsLr(int index);

    // repeated float weight_decay = 8;
    /**
     * <code>repeated float weight_decay = 8;</code>
     */
    java.util.List<java.lang.Float> getWeightDecayList();
    /**
     * <code>repeated float weight_decay = 8;</code>
     */
    int getWeightDecayCount();
    /**
     * <code>repeated float weight_decay = 8;</code>
     */
    float getWeightDecay(int index);

    // repeated float loss_weight = 35;
    /**
     * <code>repeated float loss_weight = 35;</code>
     */
    java.util.List<java.lang.Float> getLossWeightList();
    /**
     * <code>repeated float loss_weight = 35;</code>
     */
    int getLossWeightCount();
    /**
     * <code>repeated float loss_weight = 35;</code>
     */
    float getLossWeight(int index);

    // optional .caffe.AccuracyParameter accuracy_param = 27;
    /**
     * <code>optional .caffe.AccuracyParameter accuracy_param = 27;</code>
     */
    boolean hasAccuracyParam();
    /**
     * <code>optional .caffe.AccuracyParameter accuracy_param = 27;</code>
     */
    caffe.Caffe.AccuracyParameter getAccuracyParam();
    /**
     * <code>optional .caffe.AccuracyParameter accuracy_param = 27;</code>
     */
    caffe.Caffe.AccuracyParameterOrBuilder getAccuracyParamOrBuilder();

    // optional .caffe.ArgMaxParameter argmax_param = 23;
    /**
     * <code>optional .caffe.ArgMaxParameter argmax_param = 23;</code>
     */
    boolean hasArgmaxParam();
    /**
     * <code>optional .caffe.ArgMaxParameter argmax_param = 23;</code>
     */
    caffe.Caffe.ArgMaxParameter getArgmaxParam();
    /**
     * <code>optional .caffe.ArgMaxParameter argmax_param = 23;</code>
     */
    caffe.Caffe.ArgMaxParameterOrBuilder getArgmaxParamOrBuilder();

    // optional .caffe.ConcatParameter concat_param = 9;
    /**
     * <code>optional .caffe.ConcatParameter concat_param = 9;</code>
     */
    boolean hasConcatParam();
    /**
     * <code>optional .caffe.ConcatParameter concat_param = 9;</code>
     */
    caffe.Caffe.ConcatParameter getConcatParam();
    /**
     * <code>optional .caffe.ConcatParameter concat_param = 9;</code>
     */
    caffe.Caffe.ConcatParameterOrBuilder getConcatParamOrBuilder();

    // optional .caffe.ContrastiveLossParameter contrastive_loss_param = 40;
    /**
     * <code>optional .caffe.ContrastiveLossParameter contrastive_loss_param = 40;</code>
     */
    boolean hasContrastiveLossParam();
    /**
     * <code>optional .caffe.ContrastiveLossParameter contrastive_loss_param = 40;</code>
     */
    caffe.Caffe.ContrastiveLossParameter getContrastiveLossParam();
    /**
     * <code>optional .caffe.ContrastiveLossParameter contrastive_loss_param = 40;</code>
     */
    caffe.Caffe.ContrastiveLossParameterOrBuilder getContrastiveLossParamOrBuilder();

    // optional .caffe.ConvolutionParameter convolution_param = 10;
    /**
     * <code>optional .caffe.ConvolutionParameter convolution_param = 10;</code>
     */
    boolean hasConvolutionParam();
    /**
     * <code>optional .caffe.ConvolutionParameter convolution_param = 10;</code>
     */
    caffe.Caffe.ConvolutionParameter getConvolutionParam();
    /**
     * <code>optional .caffe.ConvolutionParameter convolution_param = 10;</code>
     */
    caffe.Caffe.ConvolutionParameterOrBuilder getConvolutionParamOrBuilder();

    // optional .caffe.DataParameter data_param = 11;
    /**
     * <code>optional .caffe.DataParameter data_param = 11;</code>
     */
    boolean hasDataParam();
    /**
     * <code>optional .caffe.DataParameter data_param = 11;</code>
     */
    caffe.Caffe.DataParameter getDataParam();
    /**
     * <code>optional .caffe.DataParameter data_param = 11;</code>
     */
    caffe.Caffe.DataParameterOrBuilder getDataParamOrBuilder();

    // optional .caffe.DropoutParameter dropout_param = 12;
    /**
     * <code>optional .caffe.DropoutParameter dropout_param = 12;</code>
     */
    boolean hasDropoutParam();
    /**
     * <code>optional .caffe.DropoutParameter dropout_param = 12;</code>
     */
    caffe.Caffe.DropoutParameter getDropoutParam();
    /**
     * <code>optional .caffe.DropoutParameter dropout_param = 12;</code>
     */
    caffe.Caffe.DropoutParameterOrBuilder getDropoutParamOrBuilder();

    // optional .caffe.DummyDataParameter dummy_data_param = 26;
    /**
     * <code>optional .caffe.DummyDataParameter dummy_data_param = 26;</code>
     */
    boolean hasDummyDataParam();
    /**
     * <code>optional .caffe.DummyDataParameter dummy_data_param = 26;</code>
     */
    caffe.Caffe.DummyDataParameter getDummyDataParam();
    /**
     * <code>optional .caffe.DummyDataParameter dummy_data_param = 26;</code>
     */
    caffe.Caffe.DummyDataParameterOrBuilder getDummyDataParamOrBuilder();

    // optional .caffe.EltwiseParameter eltwise_param = 24;
    /**
     * <code>optional .caffe.EltwiseParameter eltwise_param = 24;</code>
     */
    boolean hasEltwiseParam();
    /**
     * <code>optional .caffe.EltwiseParameter eltwise_param = 24;</code>
     */
    caffe.Caffe.EltwiseParameter getEltwiseParam();
    /**
     * <code>optional .caffe.EltwiseParameter eltwise_param = 24;</code>
     */
    caffe.Caffe.EltwiseParameterOrBuilder getEltwiseParamOrBuilder();

    // optional .caffe.ExpParameter exp_param = 41;
    /**
     * <code>optional .caffe.ExpParameter exp_param = 41;</code>
     */
    boolean hasExpParam();
    /**
     * <code>optional .caffe.ExpParameter exp_param = 41;</code>
     */
    caffe.Caffe.ExpParameter getExpParam();
    /**
     * <code>optional .caffe.ExpParameter exp_param = 41;</code>
     */
    caffe.Caffe.ExpParameterOrBuilder getExpParamOrBuilder();

    // optional .caffe.HDF5DataParameter hdf5_data_param = 13;
    /**
     * <code>optional .caffe.HDF5DataParameter hdf5_data_param = 13;</code>
     */
    boolean hasHdf5DataParam();
    /**
     * <code>optional .caffe.HDF5DataParameter hdf5_data_param = 13;</code>
     */
    caffe.Caffe.HDF5DataParameter getHdf5DataParam();
    /**
     * <code>optional .caffe.HDF5DataParameter hdf5_data_param = 13;</code>
     */
    caffe.Caffe.HDF5DataParameterOrBuilder getHdf5DataParamOrBuilder();

    // optional .caffe.HDF5OutputParameter hdf5_output_param = 14;
    /**
     * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 14;</code>
     */
    boolean hasHdf5OutputParam();
    /**
     * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 14;</code>
     */
    caffe.Caffe.HDF5OutputParameter getHdf5OutputParam();
    /**
     * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 14;</code>
     */
    caffe.Caffe.HDF5OutputParameterOrBuilder getHdf5OutputParamOrBuilder();

    // optional .caffe.HingeLossParameter hinge_loss_param = 29;
    /**
     * <code>optional .caffe.HingeLossParameter hinge_loss_param = 29;</code>
     */
    boolean hasHingeLossParam();
    /**
     * <code>optional .caffe.HingeLossParameter hinge_loss_param = 29;</code>
     */
    caffe.Caffe.HingeLossParameter getHingeLossParam();
    /**
     * <code>optional .caffe.HingeLossParameter hinge_loss_param = 29;</code>
     */
    caffe.Caffe.HingeLossParameterOrBuilder getHingeLossParamOrBuilder();

    // optional .caffe.ImageDataParameter image_data_param = 15;
    /**
     * <code>optional .caffe.ImageDataParameter image_data_param = 15;</code>
     */
    boolean hasImageDataParam();
    /**
     * <code>optional .caffe.ImageDataParameter image_data_param = 15;</code>
     */
    caffe.Caffe.ImageDataParameter getImageDataParam();
    /**
     * <code>optional .caffe.ImageDataParameter image_data_param = 15;</code>
     */
    caffe.Caffe.ImageDataParameterOrBuilder getImageDataParamOrBuilder();

    // optional .caffe.InfogainLossParameter infogain_loss_param = 16;
    /**
     * <code>optional .caffe.InfogainLossParameter infogain_loss_param = 16;</code>
     */
    boolean hasInfogainLossParam();
    /**
     * <code>optional .caffe.InfogainLossParameter infogain_loss_param = 16;</code>
     */
    caffe.Caffe.InfogainLossParameter getInfogainLossParam();
    /**
     * <code>optional .caffe.InfogainLossParameter infogain_loss_param = 16;</code>
     */
    caffe.Caffe.InfogainLossParameterOrBuilder getInfogainLossParamOrBuilder();

    // optional .caffe.InnerProductParameter inner_product_param = 17;
    /**
     * <code>optional .caffe.InnerProductParameter inner_product_param = 17;</code>
     */
    boolean hasInnerProductParam();
    /**
     * <code>optional .caffe.InnerProductParameter inner_product_param = 17;</code>
     */
    caffe.Caffe.InnerProductParameter getInnerProductParam();
    /**
     * <code>optional .caffe.InnerProductParameter inner_product_param = 17;</code>
     */
    caffe.Caffe.InnerProductParameterOrBuilder getInnerProductParamOrBuilder();

    // optional .caffe.LRNParameter lrn_param = 18;
    /**
     * <code>optional .caffe.LRNParameter lrn_param = 18;</code>
     */
    boolean hasLrnParam();
    /**
     * <code>optional .caffe.LRNParameter lrn_param = 18;</code>
     */
    caffe.Caffe.LRNParameter getLrnParam();
    /**
     * <code>optional .caffe.LRNParameter lrn_param = 18;</code>
     */
    caffe.Caffe.LRNParameterOrBuilder getLrnParamOrBuilder();

    // optional .caffe.MemoryDataParameter memory_data_param = 22;
    /**
     * <code>optional .caffe.MemoryDataParameter memory_data_param = 22;</code>
     */
    boolean hasMemoryDataParam();
    /**
     * <code>optional .caffe.MemoryDataParameter memory_data_param = 22;</code>
     */
    caffe.Caffe.MemoryDataParameter getMemoryDataParam();
    /**
     * <code>optional .caffe.MemoryDataParameter memory_data_param = 22;</code>
     */
    caffe.Caffe.MemoryDataParameterOrBuilder getMemoryDataParamOrBuilder();

    // optional .caffe.MVNParameter mvn_param = 34;
    /**
     * <code>optional .caffe.MVNParameter mvn_param = 34;</code>
     */
    boolean hasMvnParam();
    /**
     * <code>optional .caffe.MVNParameter mvn_param = 34;</code>
     */
    caffe.Caffe.MVNParameter getMvnParam();
    /**
     * <code>optional .caffe.MVNParameter mvn_param = 34;</code>
     */
    caffe.Caffe.MVNParameterOrBuilder getMvnParamOrBuilder();

    // optional .caffe.PoolingParameter pooling_param = 19;
    /**
     * <code>optional .caffe.PoolingParameter pooling_param = 19;</code>
     */
    boolean hasPoolingParam();
    /**
     * <code>optional .caffe.PoolingParameter pooling_param = 19;</code>
     */
    caffe.Caffe.PoolingParameter getPoolingParam();
    /**
     * <code>optional .caffe.PoolingParameter pooling_param = 19;</code>
     */
    caffe.Caffe.PoolingParameterOrBuilder getPoolingParamOrBuilder();

    // optional .caffe.PowerParameter power_param = 21;
    /**
     * <code>optional .caffe.PowerParameter power_param = 21;</code>
     */
    boolean hasPowerParam();
    /**
     * <code>optional .caffe.PowerParameter power_param = 21;</code>
     */
    caffe.Caffe.PowerParameter getPowerParam();
    /**
     * <code>optional .caffe.PowerParameter power_param = 21;</code>
     */
    caffe.Caffe.PowerParameterOrBuilder getPowerParamOrBuilder();

    // optional .caffe.ReLUParameter relu_param = 30;
    /**
     * <code>optional .caffe.ReLUParameter relu_param = 30;</code>
     */
    boolean hasReluParam();
    /**
     * <code>optional .caffe.ReLUParameter relu_param = 30;</code>
     */
    caffe.Caffe.ReLUParameter getReluParam();
    /**
     * <code>optional .caffe.ReLUParameter relu_param = 30;</code>
     */
    caffe.Caffe.ReLUParameterOrBuilder getReluParamOrBuilder();

    // optional .caffe.SigmoidParameter sigmoid_param = 38;
    /**
     * <code>optional .caffe.SigmoidParameter sigmoid_param = 38;</code>
     */
    boolean hasSigmoidParam();
    /**
     * <code>optional .caffe.SigmoidParameter sigmoid_param = 38;</code>
     */
    caffe.Caffe.SigmoidParameter getSigmoidParam();
    /**
     * <code>optional .caffe.SigmoidParameter sigmoid_param = 38;</code>
     */
    caffe.Caffe.SigmoidParameterOrBuilder getSigmoidParamOrBuilder();

    // optional .caffe.SoftmaxParameter softmax_param = 39;
    /**
     * <code>optional .caffe.SoftmaxParameter softmax_param = 39;</code>
     */
    boolean hasSoftmaxParam();
    /**
     * <code>optional .caffe.SoftmaxParameter softmax_param = 39;</code>
     */
    caffe.Caffe.SoftmaxParameter getSoftmaxParam();
    /**
     * <code>optional .caffe.SoftmaxParameter softmax_param = 39;</code>
     */
    caffe.Caffe.SoftmaxParameterOrBuilder getSoftmaxParamOrBuilder();

    // optional .caffe.SliceParameter slice_param = 31;
    /**
     * <code>optional .caffe.SliceParameter slice_param = 31;</code>
     */
    boolean hasSliceParam();
    /**
     * <code>optional .caffe.SliceParameter slice_param = 31;</code>
     */
    caffe.Caffe.SliceParameter getSliceParam();
    /**
     * <code>optional .caffe.SliceParameter slice_param = 31;</code>
     */
    caffe.Caffe.SliceParameterOrBuilder getSliceParamOrBuilder();

    // optional .caffe.TanHParameter tanh_param = 37;
    /**
     * <code>optional .caffe.TanHParameter tanh_param = 37;</code>
     */
    boolean hasTanhParam();
    /**
     * <code>optional .caffe.TanHParameter tanh_param = 37;</code>
     */
    caffe.Caffe.TanHParameter getTanhParam();
    /**
     * <code>optional .caffe.TanHParameter tanh_param = 37;</code>
     */
    caffe.Caffe.TanHParameterOrBuilder getTanhParamOrBuilder();

    // optional .caffe.ThresholdParameter threshold_param = 25;
    /**
     * <code>optional .caffe.ThresholdParameter threshold_param = 25;</code>
     */
    boolean hasThresholdParam();
    /**
     * <code>optional .caffe.ThresholdParameter threshold_param = 25;</code>
     */
    caffe.Caffe.ThresholdParameter getThresholdParam();
    /**
     * <code>optional .caffe.ThresholdParameter threshold_param = 25;</code>
     */
    caffe.Caffe.ThresholdParameterOrBuilder getThresholdParamOrBuilder();

    // optional .caffe.WindowDataParameter window_data_param = 20;
    /**
     * <code>optional .caffe.WindowDataParameter window_data_param = 20;</code>
     */
    boolean hasWindowDataParam();
    /**
     * <code>optional .caffe.WindowDataParameter window_data_param = 20;</code>
     */
    caffe.Caffe.WindowDataParameter getWindowDataParam();
    /**
     * <code>optional .caffe.WindowDataParameter window_data_param = 20;</code>
     */
    caffe.Caffe.WindowDataParameterOrBuilder getWindowDataParamOrBuilder();

    // optional .caffe.TransformationParameter transform_param = 36;
    /**
     * <code>optional .caffe.TransformationParameter transform_param = 36;</code>
     */
    boolean hasTransformParam();
    /**
     * <code>optional .caffe.TransformationParameter transform_param = 36;</code>
     */
    caffe.Caffe.TransformationParameter getTransformParam();
    /**
     * <code>optional .caffe.TransformationParameter transform_param = 36;</code>
     */
    caffe.Caffe.TransformationParameterOrBuilder getTransformParamOrBuilder();

    // optional .caffe.LossParameter loss_param = 42;
    /**
     * <code>optional .caffe.LossParameter loss_param = 42;</code>
     */
    boolean hasLossParam();
    /**
     * <code>optional .caffe.LossParameter loss_param = 42;</code>
     */
    caffe.Caffe.LossParameter getLossParam();
    /**
     * <code>optional .caffe.LossParameter loss_param = 42;</code>
     */
    caffe.Caffe.LossParameterOrBuilder getLossParamOrBuilder();

    // optional .caffe.V0LayerParameter layer = 1;
    /**
     * <code>optional .caffe.V0LayerParameter layer = 1;</code>
     */
    boolean hasLayer();
    /**
     * <code>optional .caffe.V0LayerParameter layer = 1;</code>
     */
    caffe.Caffe.V0LayerParameter getLayer();
    /**
     * <code>optional .caffe.V0LayerParameter layer = 1;</code>
     */
    caffe.Caffe.V0LayerParameterOrBuilder getLayerOrBuilder();
  }
  /**
   * Protobuf type {@code caffe.V1LayerParameter}
   *
   * <pre>
   * DEPRECATED: use LayerParameter.
   * </pre>
   */
  public static final class V1LayerParameter extends
      com.google.protobuf.GeneratedMessage
      implements V1LayerParameterOrBuilder {
    // Use V1LayerParameter.newBuilder() to construct.
    private V1LayerParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private V1LayerParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final V1LayerParameter defaultInstance;
    public static V1LayerParameter getDefaultInstance() {
      return defaultInstance;
    }

    public V1LayerParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private V1LayerParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      int mutable_bitField1_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              caffe.Caffe.V0LayerParameter.Builder subBuilder = null;
              if (((bitField1_ & 0x00000001) == 0x00000001)) {
                subBuilder = layer_.toBuilder();
              }
              layer_ = input.readMessage(caffe.Caffe.V0LayerParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(layer_);
                layer_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00000001;
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                bottom_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000001;
              }
              bottom_.add(input.readBytes());
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                top_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000002;
              }
              top_.add(input.readBytes());
              break;
            }
            case 34: {
              bitField0_ |= 0x00000001;
              name_ = input.readBytes();
              break;
            }
            case 40: {
              int rawValue = input.readEnum();
              caffe.Caffe.V1LayerParameter.LayerType value = caffe.Caffe.V1LayerParameter.LayerType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(5, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                type_ = value;
              }
              break;
            }
            case 50: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                blobs_ = new java.util.ArrayList<caffe.Caffe.BlobProto>();
                mutable_bitField0_ |= 0x00000040;
              }
              blobs_.add(input.readMessage(caffe.Caffe.BlobProto.PARSER, extensionRegistry));
              break;
            }
            case 61: {
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                blobsLr_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000200;
              }
              blobsLr_.add(input.readFloat());
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200) && input.getBytesUntilLimit() > 0) {
                blobsLr_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000200;
              }
              while (input.getBytesUntilLimit() > 0) {
                blobsLr_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 69: {
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
                weightDecay_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000400;
              }
              weightDecay_.add(input.readFloat());
              break;
            }
            case 66: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400) && input.getBytesUntilLimit() > 0) {
                weightDecay_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000400;
              }
              while (input.getBytesUntilLimit() > 0) {
                weightDecay_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 74: {
              caffe.Caffe.ConcatParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = concatParam_.toBuilder();
              }
              concatParam_ = input.readMessage(caffe.Caffe.ConcatParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(concatParam_);
                concatParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
            case 82: {
              caffe.Caffe.ConvolutionParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00000040) == 0x00000040)) {
                subBuilder = convolutionParam_.toBuilder();
              }
              convolutionParam_ = input.readMessage(caffe.Caffe.ConvolutionParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(convolutionParam_);
                convolutionParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000040;
              break;
            }
            case 90: {
              caffe.Caffe.DataParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00000080) == 0x00000080)) {
                subBuilder = dataParam_.toBuilder();
              }
              dataParam_ = input.readMessage(caffe.Caffe.DataParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(dataParam_);
                dataParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000080;
              break;
            }
            case 98: {
              caffe.Caffe.DropoutParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00000100) == 0x00000100)) {
                subBuilder = dropoutParam_.toBuilder();
              }
              dropoutParam_ = input.readMessage(caffe.Caffe.DropoutParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(dropoutParam_);
                dropoutParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000100;
              break;
            }
            case 106: {
              caffe.Caffe.HDF5DataParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00001000) == 0x00001000)) {
                subBuilder = hdf5DataParam_.toBuilder();
              }
              hdf5DataParam_ = input.readMessage(caffe.Caffe.HDF5DataParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(hdf5DataParam_);
                hdf5DataParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00001000;
              break;
            }
            case 114: {
              caffe.Caffe.HDF5OutputParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00002000) == 0x00002000)) {
                subBuilder = hdf5OutputParam_.toBuilder();
              }
              hdf5OutputParam_ = input.readMessage(caffe.Caffe.HDF5OutputParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(hdf5OutputParam_);
                hdf5OutputParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00002000;
              break;
            }
            case 122: {
              caffe.Caffe.ImageDataParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00008000) == 0x00008000)) {
                subBuilder = imageDataParam_.toBuilder();
              }
              imageDataParam_ = input.readMessage(caffe.Caffe.ImageDataParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(imageDataParam_);
                imageDataParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00008000;
              break;
            }
            case 130: {
              caffe.Caffe.InfogainLossParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00010000) == 0x00010000)) {
                subBuilder = infogainLossParam_.toBuilder();
              }
              infogainLossParam_ = input.readMessage(caffe.Caffe.InfogainLossParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(infogainLossParam_);
                infogainLossParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00010000;
              break;
            }
            case 138: {
              caffe.Caffe.InnerProductParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00020000) == 0x00020000)) {
                subBuilder = innerProductParam_.toBuilder();
              }
              innerProductParam_ = input.readMessage(caffe.Caffe.InnerProductParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(innerProductParam_);
                innerProductParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00020000;
              break;
            }
            case 146: {
              caffe.Caffe.LRNParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00040000) == 0x00040000)) {
                subBuilder = lrnParam_.toBuilder();
              }
              lrnParam_ = input.readMessage(caffe.Caffe.LRNParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(lrnParam_);
                lrnParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00040000;
              break;
            }
            case 154: {
              caffe.Caffe.PoolingParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00200000) == 0x00200000)) {
                subBuilder = poolingParam_.toBuilder();
              }
              poolingParam_ = input.readMessage(caffe.Caffe.PoolingParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(poolingParam_);
                poolingParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00200000;
              break;
            }
            case 162: {
              caffe.Caffe.WindowDataParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x20000000) == 0x20000000)) {
                subBuilder = windowDataParam_.toBuilder();
              }
              windowDataParam_ = input.readMessage(caffe.Caffe.WindowDataParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(windowDataParam_);
                windowDataParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x20000000;
              break;
            }
            case 170: {
              caffe.Caffe.PowerParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00400000) == 0x00400000)) {
                subBuilder = powerParam_.toBuilder();
              }
              powerParam_ = input.readMessage(caffe.Caffe.PowerParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(powerParam_);
                powerParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00400000;
              break;
            }
            case 178: {
              caffe.Caffe.MemoryDataParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00080000) == 0x00080000)) {
                subBuilder = memoryDataParam_.toBuilder();
              }
              memoryDataParam_ = input.readMessage(caffe.Caffe.MemoryDataParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(memoryDataParam_);
                memoryDataParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00080000;
              break;
            }
            case 186: {
              caffe.Caffe.ArgMaxParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = argmaxParam_.toBuilder();
              }
              argmaxParam_ = input.readMessage(caffe.Caffe.ArgMaxParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(argmaxParam_);
                argmaxParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 194: {
              caffe.Caffe.EltwiseParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00000400) == 0x00000400)) {
                subBuilder = eltwiseParam_.toBuilder();
              }
              eltwiseParam_ = input.readMessage(caffe.Caffe.EltwiseParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(eltwiseParam_);
                eltwiseParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000400;
              break;
            }
            case 202: {
              caffe.Caffe.ThresholdParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x10000000) == 0x10000000)) {
                subBuilder = thresholdParam_.toBuilder();
              }
              thresholdParam_ = input.readMessage(caffe.Caffe.ThresholdParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(thresholdParam_);
                thresholdParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x10000000;
              break;
            }
            case 210: {
              caffe.Caffe.DummyDataParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00000200) == 0x00000200)) {
                subBuilder = dummyDataParam_.toBuilder();
              }
              dummyDataParam_ = input.readMessage(caffe.Caffe.DummyDataParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(dummyDataParam_);
                dummyDataParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000200;
              break;
            }
            case 218: {
              caffe.Caffe.AccuracyParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = accuracyParam_.toBuilder();
              }
              accuracyParam_ = input.readMessage(caffe.Caffe.AccuracyParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(accuracyParam_);
                accuracyParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 234: {
              caffe.Caffe.HingeLossParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00004000) == 0x00004000)) {
                subBuilder = hingeLossParam_.toBuilder();
              }
              hingeLossParam_ = input.readMessage(caffe.Caffe.HingeLossParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(hingeLossParam_);
                hingeLossParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00004000;
              break;
            }
            case 242: {
              caffe.Caffe.ReLUParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00800000) == 0x00800000)) {
                subBuilder = reluParam_.toBuilder();
              }
              reluParam_ = input.readMessage(caffe.Caffe.ReLUParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(reluParam_);
                reluParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00800000;
              break;
            }
            case 250: {
              caffe.Caffe.SliceParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x04000000) == 0x04000000)) {
                subBuilder = sliceParam_.toBuilder();
              }
              sliceParam_ = input.readMessage(caffe.Caffe.SliceParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(sliceParam_);
                sliceParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x04000000;
              break;
            }
            case 258: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                include_ = new java.util.ArrayList<caffe.Caffe.NetStateRule>();
                mutable_bitField0_ |= 0x00000008;
              }
              include_.add(input.readMessage(caffe.Caffe.NetStateRule.PARSER, extensionRegistry));
              break;
            }
            case 266: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                exclude_ = new java.util.ArrayList<caffe.Caffe.NetStateRule>();
                mutable_bitField0_ |= 0x00000010;
              }
              exclude_.add(input.readMessage(caffe.Caffe.NetStateRule.PARSER, extensionRegistry));
              break;
            }
            case 274: {
              caffe.Caffe.MVNParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00100000) == 0x00100000)) {
                subBuilder = mvnParam_.toBuilder();
              }
              mvnParam_ = input.readMessage(caffe.Caffe.MVNParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mvnParam_);
                mvnParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00100000;
              break;
            }
            case 285: {
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
                lossWeight_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000800;
              }
              lossWeight_.add(input.readFloat());
              break;
            }
            case 282: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800) && input.getBytesUntilLimit() > 0) {
                lossWeight_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000800;
              }
              while (input.getBytesUntilLimit() > 0) {
                lossWeight_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 290: {
              caffe.Caffe.TransformationParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x40000000) == 0x40000000)) {
                subBuilder = transformParam_.toBuilder();
              }
              transformParam_ = input.readMessage(caffe.Caffe.TransformationParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(transformParam_);
                transformParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x40000000;
              break;
            }
            case 298: {
              caffe.Caffe.TanHParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x08000000) == 0x08000000)) {
                subBuilder = tanhParam_.toBuilder();
              }
              tanhParam_ = input.readMessage(caffe.Caffe.TanHParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(tanhParam_);
                tanhParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x08000000;
              break;
            }
            case 306: {
              caffe.Caffe.SigmoidParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x01000000) == 0x01000000)) {
                subBuilder = sigmoidParam_.toBuilder();
              }
              sigmoidParam_ = input.readMessage(caffe.Caffe.SigmoidParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(sigmoidParam_);
                sigmoidParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x01000000;
              break;
            }
            case 314: {
              caffe.Caffe.SoftmaxParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x02000000) == 0x02000000)) {
                subBuilder = softmaxParam_.toBuilder();
              }
              softmaxParam_ = input.readMessage(caffe.Caffe.SoftmaxParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(softmaxParam_);
                softmaxParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x02000000;
              break;
            }
            case 322: {
              caffe.Caffe.ContrastiveLossParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00000020) == 0x00000020)) {
                subBuilder = contrastiveLossParam_.toBuilder();
              }
              contrastiveLossParam_ = input.readMessage(caffe.Caffe.ContrastiveLossParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(contrastiveLossParam_);
                contrastiveLossParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000020;
              break;
            }
            case 330: {
              caffe.Caffe.ExpParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00000800) == 0x00000800)) {
                subBuilder = expParam_.toBuilder();
              }
              expParam_ = input.readMessage(caffe.Caffe.ExpParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(expParam_);
                expParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000800;
              break;
            }
            case 338: {
              caffe.Caffe.LossParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x80000000) == 0x80000000)) {
                subBuilder = lossParam_.toBuilder();
              }
              lossParam_ = input.readMessage(caffe.Caffe.LossParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(lossParam_);
                lossParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x80000000;
              break;
            }
            case 8010: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                param_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000080;
              }
              param_.add(input.readBytes());
              break;
            }
            case 8016: {
              int rawValue = input.readEnum();
              caffe.Caffe.V1LayerParameter.DimCheckMode value = caffe.Caffe.V1LayerParameter.DimCheckMode.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1002, rawValue);
              } else {
                if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                  blobShareMode_ = new java.util.ArrayList<caffe.Caffe.V1LayerParameter.DimCheckMode>();
                  mutable_bitField0_ |= 0x00000100;
                }
                blobShareMode_.add(value);
              }
              break;
            }
            case 8018: {
              int length = input.readRawVarint32();
              int oldLimit = input.pushLimit(length);
              while(input.getBytesUntilLimit() > 0) {
                int rawValue = input.readEnum();
                caffe.Caffe.V1LayerParameter.DimCheckMode value = caffe.Caffe.V1LayerParameter.DimCheckMode.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(1002, rawValue);
                } else {
                  if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                    blobShareMode_ = new java.util.ArrayList<caffe.Caffe.V1LayerParameter.DimCheckMode>();
                    mutable_bitField0_ |= 0x00000100;
                  }
                  blobShareMode_.add(value);
                }
              }
              input.popLimit(oldLimit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          bottom_ = new com.google.protobuf.UnmodifiableLazyStringList(bottom_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          top_ = new com.google.protobuf.UnmodifiableLazyStringList(top_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          blobs_ = java.util.Collections.unmodifiableList(blobs_);
        }
        if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
          blobsLr_ = java.util.Collections.unmodifiableList(blobsLr_);
        }
        if (((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
          weightDecay_ = java.util.Collections.unmodifiableList(weightDecay_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          include_ = java.util.Collections.unmodifiableList(include_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          exclude_ = java.util.Collections.unmodifiableList(exclude_);
        }
        if (((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
          lossWeight_ = java.util.Collections.unmodifiableList(lossWeight_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          param_ = new com.google.protobuf.UnmodifiableLazyStringList(param_);
        }
        if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
          blobShareMode_ = java.util.Collections.unmodifiableList(blobShareMode_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_V1LayerParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_V1LayerParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.V1LayerParameter.class, caffe.Caffe.V1LayerParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<V1LayerParameter> PARSER =
        new com.google.protobuf.AbstractParser<V1LayerParameter>() {
      public V1LayerParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new V1LayerParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<V1LayerParameter> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code caffe.V1LayerParameter.LayerType}
     */
    public enum LayerType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>NONE = 0;</code>
       */
      NONE(0, 0),
      /**
       * <code>ABSVAL = 35;</code>
       */
      ABSVAL(1, 35),
      /**
       * <code>ACCURACY = 1;</code>
       */
      ACCURACY(2, 1),
      /**
       * <code>ARGMAX = 30;</code>
       */
      ARGMAX(3, 30),
      /**
       * <code>BNLL = 2;</code>
       */
      BNLL(4, 2),
      /**
       * <code>CONCAT = 3;</code>
       */
      CONCAT(5, 3),
      /**
       * <code>CONTRASTIVE_LOSS = 37;</code>
       */
      CONTRASTIVE_LOSS(6, 37),
      /**
       * <code>CONVOLUTION = 4;</code>
       */
      CONVOLUTION(7, 4),
      /**
       * <code>DATA = 5;</code>
       */
      DATA(8, 5),
      /**
       * <code>DECONVOLUTION = 39;</code>
       */
      DECONVOLUTION(9, 39),
      /**
       * <code>DROPOUT = 6;</code>
       */
      DROPOUT(10, 6),
      /**
       * <code>DUMMY_DATA = 32;</code>
       */
      DUMMY_DATA(11, 32),
      /**
       * <code>EUCLIDEAN_LOSS = 7;</code>
       */
      EUCLIDEAN_LOSS(12, 7),
      /**
       * <code>ELTWISE = 25;</code>
       */
      ELTWISE(13, 25),
      /**
       * <code>EXP = 38;</code>
       */
      EXP(14, 38),
      /**
       * <code>FLATTEN = 8;</code>
       */
      FLATTEN(15, 8),
      /**
       * <code>HDF5_DATA = 9;</code>
       */
      HDF5_DATA(16, 9),
      /**
       * <code>HDF5_OUTPUT = 10;</code>
       */
      HDF5_OUTPUT(17, 10),
      /**
       * <code>HINGE_LOSS = 28;</code>
       */
      HINGE_LOSS(18, 28),
      /**
       * <code>IM2COL = 11;</code>
       */
      IM2COL(19, 11),
      /**
       * <code>IMAGE_DATA = 12;</code>
       */
      IMAGE_DATA(20, 12),
      /**
       * <code>INFOGAIN_LOSS = 13;</code>
       */
      INFOGAIN_LOSS(21, 13),
      /**
       * <code>INNER_PRODUCT = 14;</code>
       */
      INNER_PRODUCT(22, 14),
      /**
       * <code>LRN = 15;</code>
       */
      LRN(23, 15),
      /**
       * <code>MEMORY_DATA = 29;</code>
       */
      MEMORY_DATA(24, 29),
      /**
       * <code>MULTINOMIAL_LOGISTIC_LOSS = 16;</code>
       */
      MULTINOMIAL_LOGISTIC_LOSS(25, 16),
      /**
       * <code>MVN = 34;</code>
       */
      MVN(26, 34),
      /**
       * <code>POOLING = 17;</code>
       */
      POOLING(27, 17),
      /**
       * <code>POWER = 26;</code>
       */
      POWER(28, 26),
      /**
       * <code>RELU = 18;</code>
       */
      RELU(29, 18),
      /**
       * <code>SIGMOID = 19;</code>
       */
      SIGMOID(30, 19),
      /**
       * <code>SIGMOID_CROSS_ENTROPY_LOSS = 27;</code>
       */
      SIGMOID_CROSS_ENTROPY_LOSS(31, 27),
      /**
       * <code>SILENCE = 36;</code>
       */
      SILENCE(32, 36),
      /**
       * <code>SOFTMAX = 20;</code>
       */
      SOFTMAX(33, 20),
      /**
       * <code>SOFTMAX_LOSS = 21;</code>
       */
      SOFTMAX_LOSS(34, 21),
      /**
       * <code>SPLIT = 22;</code>
       */
      SPLIT(35, 22),
      /**
       * <code>SLICE = 33;</code>
       */
      SLICE(36, 33),
      /**
       * <code>TANH = 23;</code>
       */
      TANH(37, 23),
      /**
       * <code>WINDOW_DATA = 24;</code>
       */
      WINDOW_DATA(38, 24),
      /**
       * <code>THRESHOLD = 31;</code>
       */
      THRESHOLD(39, 31),
      ;

      /**
       * <code>NONE = 0;</code>
       */
      public static final int NONE_VALUE = 0;
      /**
       * <code>ABSVAL = 35;</code>
       */
      public static final int ABSVAL_VALUE = 35;
      /**
       * <code>ACCURACY = 1;</code>
       */
      public static final int ACCURACY_VALUE = 1;
      /**
       * <code>ARGMAX = 30;</code>
       */
      public static final int ARGMAX_VALUE = 30;
      /**
       * <code>BNLL = 2;</code>
       */
      public static final int BNLL_VALUE = 2;
      /**
       * <code>CONCAT = 3;</code>
       */
      public static final int CONCAT_VALUE = 3;
      /**
       * <code>CONTRASTIVE_LOSS = 37;</code>
       */
      public static final int CONTRASTIVE_LOSS_VALUE = 37;
      /**
       * <code>CONVOLUTION = 4;</code>
       */
      public static final int CONVOLUTION_VALUE = 4;
      /**
       * <code>DATA = 5;</code>
       */
      public static final int DATA_VALUE = 5;
      /**
       * <code>DECONVOLUTION = 39;</code>
       */
      public static final int DECONVOLUTION_VALUE = 39;
      /**
       * <code>DROPOUT = 6;</code>
       */
      public static final int DROPOUT_VALUE = 6;
      /**
       * <code>DUMMY_DATA = 32;</code>
       */
      public static final int DUMMY_DATA_VALUE = 32;
      /**
       * <code>EUCLIDEAN_LOSS = 7;</code>
       */
      public static final int EUCLIDEAN_LOSS_VALUE = 7;
      /**
       * <code>ELTWISE = 25;</code>
       */
      public static final int ELTWISE_VALUE = 25;
      /**
       * <code>EXP = 38;</code>
       */
      public static final int EXP_VALUE = 38;
      /**
       * <code>FLATTEN = 8;</code>
       */
      public static final int FLATTEN_VALUE = 8;
      /**
       * <code>HDF5_DATA = 9;</code>
       */
      public static final int HDF5_DATA_VALUE = 9;
      /**
       * <code>HDF5_OUTPUT = 10;</code>
       */
      public static final int HDF5_OUTPUT_VALUE = 10;
      /**
       * <code>HINGE_LOSS = 28;</code>
       */
      public static final int HINGE_LOSS_VALUE = 28;
      /**
       * <code>IM2COL = 11;</code>
       */
      public static final int IM2COL_VALUE = 11;
      /**
       * <code>IMAGE_DATA = 12;</code>
       */
      public static final int IMAGE_DATA_VALUE = 12;
      /**
       * <code>INFOGAIN_LOSS = 13;</code>
       */
      public static final int INFOGAIN_LOSS_VALUE = 13;
      /**
       * <code>INNER_PRODUCT = 14;</code>
       */
      public static final int INNER_PRODUCT_VALUE = 14;
      /**
       * <code>LRN = 15;</code>
       */
      public static final int LRN_VALUE = 15;
      /**
       * <code>MEMORY_DATA = 29;</code>
       */
      public static final int MEMORY_DATA_VALUE = 29;
      /**
       * <code>MULTINOMIAL_LOGISTIC_LOSS = 16;</code>
       */
      public static final int MULTINOMIAL_LOGISTIC_LOSS_VALUE = 16;
      /**
       * <code>MVN = 34;</code>
       */
      public static final int MVN_VALUE = 34;
      /**
       * <code>POOLING = 17;</code>
       */
      public static final int POOLING_VALUE = 17;
      /**
       * <code>POWER = 26;</code>
       */
      public static final int POWER_VALUE = 26;
      /**
       * <code>RELU = 18;</code>
       */
      public static final int RELU_VALUE = 18;
      /**
       * <code>SIGMOID = 19;</code>
       */
      public static final int SIGMOID_VALUE = 19;
      /**
       * <code>SIGMOID_CROSS_ENTROPY_LOSS = 27;</code>
       */
      public static final int SIGMOID_CROSS_ENTROPY_LOSS_VALUE = 27;
      /**
       * <code>SILENCE = 36;</code>
       */
      public static final int SILENCE_VALUE = 36;
      /**
       * <code>SOFTMAX = 20;</code>
       */
      public static final int SOFTMAX_VALUE = 20;
      /**
       * <code>SOFTMAX_LOSS = 21;</code>
       */
      public static final int SOFTMAX_LOSS_VALUE = 21;
      /**
       * <code>SPLIT = 22;</code>
       */
      public static final int SPLIT_VALUE = 22;
      /**
       * <code>SLICE = 33;</code>
       */
      public static final int SLICE_VALUE = 33;
      /**
       * <code>TANH = 23;</code>
       */
      public static final int TANH_VALUE = 23;
      /**
       * <code>WINDOW_DATA = 24;</code>
       */
      public static final int WINDOW_DATA_VALUE = 24;
      /**
       * <code>THRESHOLD = 31;</code>
       */
      public static final int THRESHOLD_VALUE = 31;


      public final int getNumber() { return value; }

      public static LayerType valueOf(int value) {
        switch (value) {
          case 0: return NONE;
          case 35: return ABSVAL;
          case 1: return ACCURACY;
          case 30: return ARGMAX;
          case 2: return BNLL;
          case 3: return CONCAT;
          case 37: return CONTRASTIVE_LOSS;
          case 4: return CONVOLUTION;
          case 5: return DATA;
          case 39: return DECONVOLUTION;
          case 6: return DROPOUT;
          case 32: return DUMMY_DATA;
          case 7: return EUCLIDEAN_LOSS;
          case 25: return ELTWISE;
          case 38: return EXP;
          case 8: return FLATTEN;
          case 9: return HDF5_DATA;
          case 10: return HDF5_OUTPUT;
          case 28: return HINGE_LOSS;
          case 11: return IM2COL;
          case 12: return IMAGE_DATA;
          case 13: return INFOGAIN_LOSS;
          case 14: return INNER_PRODUCT;
          case 15: return LRN;
          case 29: return MEMORY_DATA;
          case 16: return MULTINOMIAL_LOGISTIC_LOSS;
          case 34: return MVN;
          case 17: return POOLING;
          case 26: return POWER;
          case 18: return RELU;
          case 19: return SIGMOID;
          case 27: return SIGMOID_CROSS_ENTROPY_LOSS;
          case 36: return SILENCE;
          case 20: return SOFTMAX;
          case 21: return SOFTMAX_LOSS;
          case 22: return SPLIT;
          case 33: return SLICE;
          case 23: return TANH;
          case 24: return WINDOW_DATA;
          case 31: return THRESHOLD;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<LayerType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<LayerType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<LayerType>() {
              public LayerType findValueByNumber(int number) {
                return LayerType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return caffe.Caffe.V1LayerParameter.getDescriptor().getEnumTypes().get(0);
      }

      private static final LayerType[] VALUES = values();

      public static LayerType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private LayerType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:caffe.V1LayerParameter.LayerType)
    }

    /**
     * Protobuf enum {@code caffe.V1LayerParameter.DimCheckMode}
     */
    public enum DimCheckMode
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>STRICT = 0;</code>
       */
      STRICT(0, 0),
      /**
       * <code>PERMISSIVE = 1;</code>
       */
      PERMISSIVE(1, 1),
      ;

      /**
       * <code>STRICT = 0;</code>
       */
      public static final int STRICT_VALUE = 0;
      /**
       * <code>PERMISSIVE = 1;</code>
       */
      public static final int PERMISSIVE_VALUE = 1;


      public final int getNumber() { return value; }

      public static DimCheckMode valueOf(int value) {
        switch (value) {
          case 0: return STRICT;
          case 1: return PERMISSIVE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<DimCheckMode>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<DimCheckMode>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<DimCheckMode>() {
              public DimCheckMode findValueByNumber(int number) {
                return DimCheckMode.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return caffe.Caffe.V1LayerParameter.getDescriptor().getEnumTypes().get(1);
      }

      private static final DimCheckMode[] VALUES = values();

      public static DimCheckMode valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private DimCheckMode(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:caffe.V1LayerParameter.DimCheckMode)
    }

    private int bitField0_;
    private int bitField1_;
    // repeated string bottom = 2;
    public static final int BOTTOM_FIELD_NUMBER = 2;
    private com.google.protobuf.LazyStringList bottom_;
    /**
     * <code>repeated string bottom = 2;</code>
     */
    public java.util.List<java.lang.String>
        getBottomList() {
      return bottom_;
    }
    /**
     * <code>repeated string bottom = 2;</code>
     */
    public int getBottomCount() {
      return bottom_.size();
    }
    /**
     * <code>repeated string bottom = 2;</code>
     */
    public java.lang.String getBottom(int index) {
      return bottom_.get(index);
    }
    /**
     * <code>repeated string bottom = 2;</code>
     */
    public com.google.protobuf.ByteString
        getBottomBytes(int index) {
      return bottom_.getByteString(index);
    }

    // repeated string top = 3;
    public static final int TOP_FIELD_NUMBER = 3;
    private com.google.protobuf.LazyStringList top_;
    /**
     * <code>repeated string top = 3;</code>
     */
    public java.util.List<java.lang.String>
        getTopList() {
      return top_;
    }
    /**
     * <code>repeated string top = 3;</code>
     */
    public int getTopCount() {
      return top_.size();
    }
    /**
     * <code>repeated string top = 3;</code>
     */
    public java.lang.String getTop(int index) {
      return top_.get(index);
    }
    /**
     * <code>repeated string top = 3;</code>
     */
    public com.google.protobuf.ByteString
        getTopBytes(int index) {
      return top_.getByteString(index);
    }

    // optional string name = 4;
    public static final int NAME_FIELD_NUMBER = 4;
    private java.lang.Object name_;
    /**
     * <code>optional string name = 4;</code>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string name = 4;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string name = 4;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // repeated .caffe.NetStateRule include = 32;
    public static final int INCLUDE_FIELD_NUMBER = 32;
    private java.util.List<caffe.Caffe.NetStateRule> include_;
    /**
     * <code>repeated .caffe.NetStateRule include = 32;</code>
     */
    public java.util.List<caffe.Caffe.NetStateRule> getIncludeList() {
      return include_;
    }
    /**
     * <code>repeated .caffe.NetStateRule include = 32;</code>
     */
    public java.util.List<? extends caffe.Caffe.NetStateRuleOrBuilder> 
        getIncludeOrBuilderList() {
      return include_;
    }
    /**
     * <code>repeated .caffe.NetStateRule include = 32;</code>
     */
    public int getIncludeCount() {
      return include_.size();
    }
    /**
     * <code>repeated .caffe.NetStateRule include = 32;</code>
     */
    public caffe.Caffe.NetStateRule getInclude(int index) {
      return include_.get(index);
    }
    /**
     * <code>repeated .caffe.NetStateRule include = 32;</code>
     */
    public caffe.Caffe.NetStateRuleOrBuilder getIncludeOrBuilder(
        int index) {
      return include_.get(index);
    }

    // repeated .caffe.NetStateRule exclude = 33;
    public static final int EXCLUDE_FIELD_NUMBER = 33;
    private java.util.List<caffe.Caffe.NetStateRule> exclude_;
    /**
     * <code>repeated .caffe.NetStateRule exclude = 33;</code>
     */
    public java.util.List<caffe.Caffe.NetStateRule> getExcludeList() {
      return exclude_;
    }
    /**
     * <code>repeated .caffe.NetStateRule exclude = 33;</code>
     */
    public java.util.List<? extends caffe.Caffe.NetStateRuleOrBuilder> 
        getExcludeOrBuilderList() {
      return exclude_;
    }
    /**
     * <code>repeated .caffe.NetStateRule exclude = 33;</code>
     */
    public int getExcludeCount() {
      return exclude_.size();
    }
    /**
     * <code>repeated .caffe.NetStateRule exclude = 33;</code>
     */
    public caffe.Caffe.NetStateRule getExclude(int index) {
      return exclude_.get(index);
    }
    /**
     * <code>repeated .caffe.NetStateRule exclude = 33;</code>
     */
    public caffe.Caffe.NetStateRuleOrBuilder getExcludeOrBuilder(
        int index) {
      return exclude_.get(index);
    }

    // optional .caffe.V1LayerParameter.LayerType type = 5;
    public static final int TYPE_FIELD_NUMBER = 5;
    private caffe.Caffe.V1LayerParameter.LayerType type_;
    /**
     * <code>optional .caffe.V1LayerParameter.LayerType type = 5;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .caffe.V1LayerParameter.LayerType type = 5;</code>
     */
    public caffe.Caffe.V1LayerParameter.LayerType getType() {
      return type_;
    }

    // repeated .caffe.BlobProto blobs = 6;
    public static final int BLOBS_FIELD_NUMBER = 6;
    private java.util.List<caffe.Caffe.BlobProto> blobs_;
    /**
     * <code>repeated .caffe.BlobProto blobs = 6;</code>
     */
    public java.util.List<caffe.Caffe.BlobProto> getBlobsList() {
      return blobs_;
    }
    /**
     * <code>repeated .caffe.BlobProto blobs = 6;</code>
     */
    public java.util.List<? extends caffe.Caffe.BlobProtoOrBuilder> 
        getBlobsOrBuilderList() {
      return blobs_;
    }
    /**
     * <code>repeated .caffe.BlobProto blobs = 6;</code>
     */
    public int getBlobsCount() {
      return blobs_.size();
    }
    /**
     * <code>repeated .caffe.BlobProto blobs = 6;</code>
     */
    public caffe.Caffe.BlobProto getBlobs(int index) {
      return blobs_.get(index);
    }
    /**
     * <code>repeated .caffe.BlobProto blobs = 6;</code>
     */
    public caffe.Caffe.BlobProtoOrBuilder getBlobsOrBuilder(
        int index) {
      return blobs_.get(index);
    }

    // repeated string param = 1001;
    public static final int PARAM_FIELD_NUMBER = 1001;
    private com.google.protobuf.LazyStringList param_;
    /**
     * <code>repeated string param = 1001;</code>
     */
    public java.util.List<java.lang.String>
        getParamList() {
      return param_;
    }
    /**
     * <code>repeated string param = 1001;</code>
     */
    public int getParamCount() {
      return param_.size();
    }
    /**
     * <code>repeated string param = 1001;</code>
     */
    public java.lang.String getParam(int index) {
      return param_.get(index);
    }
    /**
     * <code>repeated string param = 1001;</code>
     */
    public com.google.protobuf.ByteString
        getParamBytes(int index) {
      return param_.getByteString(index);
    }

    // repeated .caffe.V1LayerParameter.DimCheckMode blob_share_mode = 1002;
    public static final int BLOB_SHARE_MODE_FIELD_NUMBER = 1002;
    private java.util.List<caffe.Caffe.V1LayerParameter.DimCheckMode> blobShareMode_;
    /**
     * <code>repeated .caffe.V1LayerParameter.DimCheckMode blob_share_mode = 1002;</code>
     */
    public java.util.List<caffe.Caffe.V1LayerParameter.DimCheckMode> getBlobShareModeList() {
      return blobShareMode_;
    }
    /**
     * <code>repeated .caffe.V1LayerParameter.DimCheckMode blob_share_mode = 1002;</code>
     */
    public int getBlobShareModeCount() {
      return blobShareMode_.size();
    }
    /**
     * <code>repeated .caffe.V1LayerParameter.DimCheckMode blob_share_mode = 1002;</code>
     */
    public caffe.Caffe.V1LayerParameter.DimCheckMode getBlobShareMode(int index) {
      return blobShareMode_.get(index);
    }

    // repeated float blobs_lr = 7;
    public static final int BLOBS_LR_FIELD_NUMBER = 7;
    private java.util.List<java.lang.Float> blobsLr_;
    /**
     * <code>repeated float blobs_lr = 7;</code>
     */
    public java.util.List<java.lang.Float>
        getBlobsLrList() {
      return blobsLr_;
    }
    /**
     * <code>repeated float blobs_lr = 7;</code>
     */
    public int getBlobsLrCount() {
      return blobsLr_.size();
    }
    /**
     * <code>repeated float blobs_lr = 7;</code>
     */
    public float getBlobsLr(int index) {
      return blobsLr_.get(index);
    }

    // repeated float weight_decay = 8;
    public static final int WEIGHT_DECAY_FIELD_NUMBER = 8;
    private java.util.List<java.lang.Float> weightDecay_;
    /**
     * <code>repeated float weight_decay = 8;</code>
     */
    public java.util.List<java.lang.Float>
        getWeightDecayList() {
      return weightDecay_;
    }
    /**
     * <code>repeated float weight_decay = 8;</code>
     */
    public int getWeightDecayCount() {
      return weightDecay_.size();
    }
    /**
     * <code>repeated float weight_decay = 8;</code>
     */
    public float getWeightDecay(int index) {
      return weightDecay_.get(index);
    }

    // repeated float loss_weight = 35;
    public static final int LOSS_WEIGHT_FIELD_NUMBER = 35;
    private java.util.List<java.lang.Float> lossWeight_;
    /**
     * <code>repeated float loss_weight = 35;</code>
     */
    public java.util.List<java.lang.Float>
        getLossWeightList() {
      return lossWeight_;
    }
    /**
     * <code>repeated float loss_weight = 35;</code>
     */
    public int getLossWeightCount() {
      return lossWeight_.size();
    }
    /**
     * <code>repeated float loss_weight = 35;</code>
     */
    public float getLossWeight(int index) {
      return lossWeight_.get(index);
    }

    // optional .caffe.AccuracyParameter accuracy_param = 27;
    public static final int ACCURACY_PARAM_FIELD_NUMBER = 27;
    private caffe.Caffe.AccuracyParameter accuracyParam_;
    /**
     * <code>optional .caffe.AccuracyParameter accuracy_param = 27;</code>
     */
    public boolean hasAccuracyParam() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .caffe.AccuracyParameter accuracy_param = 27;</code>
     */
    public caffe.Caffe.AccuracyParameter getAccuracyParam() {
      return accuracyParam_;
    }
    /**
     * <code>optional .caffe.AccuracyParameter accuracy_param = 27;</code>
     */
    public caffe.Caffe.AccuracyParameterOrBuilder getAccuracyParamOrBuilder() {
      return accuracyParam_;
    }

    // optional .caffe.ArgMaxParameter argmax_param = 23;
    public static final int ARGMAX_PARAM_FIELD_NUMBER = 23;
    private caffe.Caffe.ArgMaxParameter argmaxParam_;
    /**
     * <code>optional .caffe.ArgMaxParameter argmax_param = 23;</code>
     */
    public boolean hasArgmaxParam() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .caffe.ArgMaxParameter argmax_param = 23;</code>
     */
    public caffe.Caffe.ArgMaxParameter getArgmaxParam() {
      return argmaxParam_;
    }
    /**
     * <code>optional .caffe.ArgMaxParameter argmax_param = 23;</code>
     */
    public caffe.Caffe.ArgMaxParameterOrBuilder getArgmaxParamOrBuilder() {
      return argmaxParam_;
    }

    // optional .caffe.ConcatParameter concat_param = 9;
    public static final int CONCAT_PARAM_FIELD_NUMBER = 9;
    private caffe.Caffe.ConcatParameter concatParam_;
    /**
     * <code>optional .caffe.ConcatParameter concat_param = 9;</code>
     */
    public boolean hasConcatParam() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .caffe.ConcatParameter concat_param = 9;</code>
     */
    public caffe.Caffe.ConcatParameter getConcatParam() {
      return concatParam_;
    }
    /**
     * <code>optional .caffe.ConcatParameter concat_param = 9;</code>
     */
    public caffe.Caffe.ConcatParameterOrBuilder getConcatParamOrBuilder() {
      return concatParam_;
    }

    // optional .caffe.ContrastiveLossParameter contrastive_loss_param = 40;
    public static final int CONTRASTIVE_LOSS_PARAM_FIELD_NUMBER = 40;
    private caffe.Caffe.ContrastiveLossParameter contrastiveLossParam_;
    /**
     * <code>optional .caffe.ContrastiveLossParameter contrastive_loss_param = 40;</code>
     */
    public boolean hasContrastiveLossParam() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .caffe.ContrastiveLossParameter contrastive_loss_param = 40;</code>
     */
    public caffe.Caffe.ContrastiveLossParameter getContrastiveLossParam() {
      return contrastiveLossParam_;
    }
    /**
     * <code>optional .caffe.ContrastiveLossParameter contrastive_loss_param = 40;</code>
     */
    public caffe.Caffe.ContrastiveLossParameterOrBuilder getContrastiveLossParamOrBuilder() {
      return contrastiveLossParam_;
    }

    // optional .caffe.ConvolutionParameter convolution_param = 10;
    public static final int CONVOLUTION_PARAM_FIELD_NUMBER = 10;
    private caffe.Caffe.ConvolutionParameter convolutionParam_;
    /**
     * <code>optional .caffe.ConvolutionParameter convolution_param = 10;</code>
     */
    public boolean hasConvolutionParam() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional .caffe.ConvolutionParameter convolution_param = 10;</code>
     */
    public caffe.Caffe.ConvolutionParameter getConvolutionParam() {
      return convolutionParam_;
    }
    /**
     * <code>optional .caffe.ConvolutionParameter convolution_param = 10;</code>
     */
    public caffe.Caffe.ConvolutionParameterOrBuilder getConvolutionParamOrBuilder() {
      return convolutionParam_;
    }

    // optional .caffe.DataParameter data_param = 11;
    public static final int DATA_PARAM_FIELD_NUMBER = 11;
    private caffe.Caffe.DataParameter dataParam_;
    /**
     * <code>optional .caffe.DataParameter data_param = 11;</code>
     */
    public boolean hasDataParam() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional .caffe.DataParameter data_param = 11;</code>
     */
    public caffe.Caffe.DataParameter getDataParam() {
      return dataParam_;
    }
    /**
     * <code>optional .caffe.DataParameter data_param = 11;</code>
     */
    public caffe.Caffe.DataParameterOrBuilder getDataParamOrBuilder() {
      return dataParam_;
    }

    // optional .caffe.DropoutParameter dropout_param = 12;
    public static final int DROPOUT_PARAM_FIELD_NUMBER = 12;
    private caffe.Caffe.DropoutParameter dropoutParam_;
    /**
     * <code>optional .caffe.DropoutParameter dropout_param = 12;</code>
     */
    public boolean hasDropoutParam() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional .caffe.DropoutParameter dropout_param = 12;</code>
     */
    public caffe.Caffe.DropoutParameter getDropoutParam() {
      return dropoutParam_;
    }
    /**
     * <code>optional .caffe.DropoutParameter dropout_param = 12;</code>
     */
    public caffe.Caffe.DropoutParameterOrBuilder getDropoutParamOrBuilder() {
      return dropoutParam_;
    }

    // optional .caffe.DummyDataParameter dummy_data_param = 26;
    public static final int DUMMY_DATA_PARAM_FIELD_NUMBER = 26;
    private caffe.Caffe.DummyDataParameter dummyDataParam_;
    /**
     * <code>optional .caffe.DummyDataParameter dummy_data_param = 26;</code>
     */
    public boolean hasDummyDataParam() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional .caffe.DummyDataParameter dummy_data_param = 26;</code>
     */
    public caffe.Caffe.DummyDataParameter getDummyDataParam() {
      return dummyDataParam_;
    }
    /**
     * <code>optional .caffe.DummyDataParameter dummy_data_param = 26;</code>
     */
    public caffe.Caffe.DummyDataParameterOrBuilder getDummyDataParamOrBuilder() {
      return dummyDataParam_;
    }

    // optional .caffe.EltwiseParameter eltwise_param = 24;
    public static final int ELTWISE_PARAM_FIELD_NUMBER = 24;
    private caffe.Caffe.EltwiseParameter eltwiseParam_;
    /**
     * <code>optional .caffe.EltwiseParameter eltwise_param = 24;</code>
     */
    public boolean hasEltwiseParam() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional .caffe.EltwiseParameter eltwise_param = 24;</code>
     */
    public caffe.Caffe.EltwiseParameter getEltwiseParam() {
      return eltwiseParam_;
    }
    /**
     * <code>optional .caffe.EltwiseParameter eltwise_param = 24;</code>
     */
    public caffe.Caffe.EltwiseParameterOrBuilder getEltwiseParamOrBuilder() {
      return eltwiseParam_;
    }

    // optional .caffe.ExpParameter exp_param = 41;
    public static final int EXP_PARAM_FIELD_NUMBER = 41;
    private caffe.Caffe.ExpParameter expParam_;
    /**
     * <code>optional .caffe.ExpParameter exp_param = 41;</code>
     */
    public boolean hasExpParam() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional .caffe.ExpParameter exp_param = 41;</code>
     */
    public caffe.Caffe.ExpParameter getExpParam() {
      return expParam_;
    }
    /**
     * <code>optional .caffe.ExpParameter exp_param = 41;</code>
     */
    public caffe.Caffe.ExpParameterOrBuilder getExpParamOrBuilder() {
      return expParam_;
    }

    // optional .caffe.HDF5DataParameter hdf5_data_param = 13;
    public static final int HDF5_DATA_PARAM_FIELD_NUMBER = 13;
    private caffe.Caffe.HDF5DataParameter hdf5DataParam_;
    /**
     * <code>optional .caffe.HDF5DataParameter hdf5_data_param = 13;</code>
     */
    public boolean hasHdf5DataParam() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional .caffe.HDF5DataParameter hdf5_data_param = 13;</code>
     */
    public caffe.Caffe.HDF5DataParameter getHdf5DataParam() {
      return hdf5DataParam_;
    }
    /**
     * <code>optional .caffe.HDF5DataParameter hdf5_data_param = 13;</code>
     */
    public caffe.Caffe.HDF5DataParameterOrBuilder getHdf5DataParamOrBuilder() {
      return hdf5DataParam_;
    }

    // optional .caffe.HDF5OutputParameter hdf5_output_param = 14;
    public static final int HDF5_OUTPUT_PARAM_FIELD_NUMBER = 14;
    private caffe.Caffe.HDF5OutputParameter hdf5OutputParam_;
    /**
     * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 14;</code>
     */
    public boolean hasHdf5OutputParam() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 14;</code>
     */
    public caffe.Caffe.HDF5OutputParameter getHdf5OutputParam() {
      return hdf5OutputParam_;
    }
    /**
     * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 14;</code>
     */
    public caffe.Caffe.HDF5OutputParameterOrBuilder getHdf5OutputParamOrBuilder() {
      return hdf5OutputParam_;
    }

    // optional .caffe.HingeLossParameter hinge_loss_param = 29;
    public static final int HINGE_LOSS_PARAM_FIELD_NUMBER = 29;
    private caffe.Caffe.HingeLossParameter hingeLossParam_;
    /**
     * <code>optional .caffe.HingeLossParameter hinge_loss_param = 29;</code>
     */
    public boolean hasHingeLossParam() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional .caffe.HingeLossParameter hinge_loss_param = 29;</code>
     */
    public caffe.Caffe.HingeLossParameter getHingeLossParam() {
      return hingeLossParam_;
    }
    /**
     * <code>optional .caffe.HingeLossParameter hinge_loss_param = 29;</code>
     */
    public caffe.Caffe.HingeLossParameterOrBuilder getHingeLossParamOrBuilder() {
      return hingeLossParam_;
    }

    // optional .caffe.ImageDataParameter image_data_param = 15;
    public static final int IMAGE_DATA_PARAM_FIELD_NUMBER = 15;
    private caffe.Caffe.ImageDataParameter imageDataParam_;
    /**
     * <code>optional .caffe.ImageDataParameter image_data_param = 15;</code>
     */
    public boolean hasImageDataParam() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional .caffe.ImageDataParameter image_data_param = 15;</code>
     */
    public caffe.Caffe.ImageDataParameter getImageDataParam() {
      return imageDataParam_;
    }
    /**
     * <code>optional .caffe.ImageDataParameter image_data_param = 15;</code>
     */
    public caffe.Caffe.ImageDataParameterOrBuilder getImageDataParamOrBuilder() {
      return imageDataParam_;
    }

    // optional .caffe.InfogainLossParameter infogain_loss_param = 16;
    public static final int INFOGAIN_LOSS_PARAM_FIELD_NUMBER = 16;
    private caffe.Caffe.InfogainLossParameter infogainLossParam_;
    /**
     * <code>optional .caffe.InfogainLossParameter infogain_loss_param = 16;</code>
     */
    public boolean hasInfogainLossParam() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional .caffe.InfogainLossParameter infogain_loss_param = 16;</code>
     */
    public caffe.Caffe.InfogainLossParameter getInfogainLossParam() {
      return infogainLossParam_;
    }
    /**
     * <code>optional .caffe.InfogainLossParameter infogain_loss_param = 16;</code>
     */
    public caffe.Caffe.InfogainLossParameterOrBuilder getInfogainLossParamOrBuilder() {
      return infogainLossParam_;
    }

    // optional .caffe.InnerProductParameter inner_product_param = 17;
    public static final int INNER_PRODUCT_PARAM_FIELD_NUMBER = 17;
    private caffe.Caffe.InnerProductParameter innerProductParam_;
    /**
     * <code>optional .caffe.InnerProductParameter inner_product_param = 17;</code>
     */
    public boolean hasInnerProductParam() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional .caffe.InnerProductParameter inner_product_param = 17;</code>
     */
    public caffe.Caffe.InnerProductParameter getInnerProductParam() {
      return innerProductParam_;
    }
    /**
     * <code>optional .caffe.InnerProductParameter inner_product_param = 17;</code>
     */
    public caffe.Caffe.InnerProductParameterOrBuilder getInnerProductParamOrBuilder() {
      return innerProductParam_;
    }

    // optional .caffe.LRNParameter lrn_param = 18;
    public static final int LRN_PARAM_FIELD_NUMBER = 18;
    private caffe.Caffe.LRNParameter lrnParam_;
    /**
     * <code>optional .caffe.LRNParameter lrn_param = 18;</code>
     */
    public boolean hasLrnParam() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>optional .caffe.LRNParameter lrn_param = 18;</code>
     */
    public caffe.Caffe.LRNParameter getLrnParam() {
      return lrnParam_;
    }
    /**
     * <code>optional .caffe.LRNParameter lrn_param = 18;</code>
     */
    public caffe.Caffe.LRNParameterOrBuilder getLrnParamOrBuilder() {
      return lrnParam_;
    }

    // optional .caffe.MemoryDataParameter memory_data_param = 22;
    public static final int MEMORY_DATA_PARAM_FIELD_NUMBER = 22;
    private caffe.Caffe.MemoryDataParameter memoryDataParam_;
    /**
     * <code>optional .caffe.MemoryDataParameter memory_data_param = 22;</code>
     */
    public boolean hasMemoryDataParam() {
      return ((bitField0_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>optional .caffe.MemoryDataParameter memory_data_param = 22;</code>
     */
    public caffe.Caffe.MemoryDataParameter getMemoryDataParam() {
      return memoryDataParam_;
    }
    /**
     * <code>optional .caffe.MemoryDataParameter memory_data_param = 22;</code>
     */
    public caffe.Caffe.MemoryDataParameterOrBuilder getMemoryDataParamOrBuilder() {
      return memoryDataParam_;
    }

    // optional .caffe.MVNParameter mvn_param = 34;
    public static final int MVN_PARAM_FIELD_NUMBER = 34;
    private caffe.Caffe.MVNParameter mvnParam_;
    /**
     * <code>optional .caffe.MVNParameter mvn_param = 34;</code>
     */
    public boolean hasMvnParam() {
      return ((bitField0_ & 0x00100000) == 0x00100000);
    }
    /**
     * <code>optional .caffe.MVNParameter mvn_param = 34;</code>
     */
    public caffe.Caffe.MVNParameter getMvnParam() {
      return mvnParam_;
    }
    /**
     * <code>optional .caffe.MVNParameter mvn_param = 34;</code>
     */
    public caffe.Caffe.MVNParameterOrBuilder getMvnParamOrBuilder() {
      return mvnParam_;
    }

    // optional .caffe.PoolingParameter pooling_param = 19;
    public static final int POOLING_PARAM_FIELD_NUMBER = 19;
    private caffe.Caffe.PoolingParameter poolingParam_;
    /**
     * <code>optional .caffe.PoolingParameter pooling_param = 19;</code>
     */
    public boolean hasPoolingParam() {
      return ((bitField0_ & 0x00200000) == 0x00200000);
    }
    /**
     * <code>optional .caffe.PoolingParameter pooling_param = 19;</code>
     */
    public caffe.Caffe.PoolingParameter getPoolingParam() {
      return poolingParam_;
    }
    /**
     * <code>optional .caffe.PoolingParameter pooling_param = 19;</code>
     */
    public caffe.Caffe.PoolingParameterOrBuilder getPoolingParamOrBuilder() {
      return poolingParam_;
    }

    // optional .caffe.PowerParameter power_param = 21;
    public static final int POWER_PARAM_FIELD_NUMBER = 21;
    private caffe.Caffe.PowerParameter powerParam_;
    /**
     * <code>optional .caffe.PowerParameter power_param = 21;</code>
     */
    public boolean hasPowerParam() {
      return ((bitField0_ & 0x00400000) == 0x00400000);
    }
    /**
     * <code>optional .caffe.PowerParameter power_param = 21;</code>
     */
    public caffe.Caffe.PowerParameter getPowerParam() {
      return powerParam_;
    }
    /**
     * <code>optional .caffe.PowerParameter power_param = 21;</code>
     */
    public caffe.Caffe.PowerParameterOrBuilder getPowerParamOrBuilder() {
      return powerParam_;
    }

    // optional .caffe.ReLUParameter relu_param = 30;
    public static final int RELU_PARAM_FIELD_NUMBER = 30;
    private caffe.Caffe.ReLUParameter reluParam_;
    /**
     * <code>optional .caffe.ReLUParameter relu_param = 30;</code>
     */
    public boolean hasReluParam() {
      return ((bitField0_ & 0x00800000) == 0x00800000);
    }
    /**
     * <code>optional .caffe.ReLUParameter relu_param = 30;</code>
     */
    public caffe.Caffe.ReLUParameter getReluParam() {
      return reluParam_;
    }
    /**
     * <code>optional .caffe.ReLUParameter relu_param = 30;</code>
     */
    public caffe.Caffe.ReLUParameterOrBuilder getReluParamOrBuilder() {
      return reluParam_;
    }

    // optional .caffe.SigmoidParameter sigmoid_param = 38;
    public static final int SIGMOID_PARAM_FIELD_NUMBER = 38;
    private caffe.Caffe.SigmoidParameter sigmoidParam_;
    /**
     * <code>optional .caffe.SigmoidParameter sigmoid_param = 38;</code>
     */
    public boolean hasSigmoidParam() {
      return ((bitField0_ & 0x01000000) == 0x01000000);
    }
    /**
     * <code>optional .caffe.SigmoidParameter sigmoid_param = 38;</code>
     */
    public caffe.Caffe.SigmoidParameter getSigmoidParam() {
      return sigmoidParam_;
    }
    /**
     * <code>optional .caffe.SigmoidParameter sigmoid_param = 38;</code>
     */
    public caffe.Caffe.SigmoidParameterOrBuilder getSigmoidParamOrBuilder() {
      return sigmoidParam_;
    }

    // optional .caffe.SoftmaxParameter softmax_param = 39;
    public static final int SOFTMAX_PARAM_FIELD_NUMBER = 39;
    private caffe.Caffe.SoftmaxParameter softmaxParam_;
    /**
     * <code>optional .caffe.SoftmaxParameter softmax_param = 39;</code>
     */
    public boolean hasSoftmaxParam() {
      return ((bitField0_ & 0x02000000) == 0x02000000);
    }
    /**
     * <code>optional .caffe.SoftmaxParameter softmax_param = 39;</code>
     */
    public caffe.Caffe.SoftmaxParameter getSoftmaxParam() {
      return softmaxParam_;
    }
    /**
     * <code>optional .caffe.SoftmaxParameter softmax_param = 39;</code>
     */
    public caffe.Caffe.SoftmaxParameterOrBuilder getSoftmaxParamOrBuilder() {
      return softmaxParam_;
    }

    // optional .caffe.SliceParameter slice_param = 31;
    public static final int SLICE_PARAM_FIELD_NUMBER = 31;
    private caffe.Caffe.SliceParameter sliceParam_;
    /**
     * <code>optional .caffe.SliceParameter slice_param = 31;</code>
     */
    public boolean hasSliceParam() {
      return ((bitField0_ & 0x04000000) == 0x04000000);
    }
    /**
     * <code>optional .caffe.SliceParameter slice_param = 31;</code>
     */
    public caffe.Caffe.SliceParameter getSliceParam() {
      return sliceParam_;
    }
    /**
     * <code>optional .caffe.SliceParameter slice_param = 31;</code>
     */
    public caffe.Caffe.SliceParameterOrBuilder getSliceParamOrBuilder() {
      return sliceParam_;
    }

    // optional .caffe.TanHParameter tanh_param = 37;
    public static final int TANH_PARAM_FIELD_NUMBER = 37;
    private caffe.Caffe.TanHParameter tanhParam_;
    /**
     * <code>optional .caffe.TanHParameter tanh_param = 37;</code>
     */
    public boolean hasTanhParam() {
      return ((bitField0_ & 0x08000000) == 0x08000000);
    }
    /**
     * <code>optional .caffe.TanHParameter tanh_param = 37;</code>
     */
    public caffe.Caffe.TanHParameter getTanhParam() {
      return tanhParam_;
    }
    /**
     * <code>optional .caffe.TanHParameter tanh_param = 37;</code>
     */
    public caffe.Caffe.TanHParameterOrBuilder getTanhParamOrBuilder() {
      return tanhParam_;
    }

    // optional .caffe.ThresholdParameter threshold_param = 25;
    public static final int THRESHOLD_PARAM_FIELD_NUMBER = 25;
    private caffe.Caffe.ThresholdParameter thresholdParam_;
    /**
     * <code>optional .caffe.ThresholdParameter threshold_param = 25;</code>
     */
    public boolean hasThresholdParam() {
      return ((bitField0_ & 0x10000000) == 0x10000000);
    }
    /**
     * <code>optional .caffe.ThresholdParameter threshold_param = 25;</code>
     */
    public caffe.Caffe.ThresholdParameter getThresholdParam() {
      return thresholdParam_;
    }
    /**
     * <code>optional .caffe.ThresholdParameter threshold_param = 25;</code>
     */
    public caffe.Caffe.ThresholdParameterOrBuilder getThresholdParamOrBuilder() {
      return thresholdParam_;
    }

    // optional .caffe.WindowDataParameter window_data_param = 20;
    public static final int WINDOW_DATA_PARAM_FIELD_NUMBER = 20;
    private caffe.Caffe.WindowDataParameter windowDataParam_;
    /**
     * <code>optional .caffe.WindowDataParameter window_data_param = 20;</code>
     */
    public boolean hasWindowDataParam() {
      return ((bitField0_ & 0x20000000) == 0x20000000);
    }
    /**
     * <code>optional .caffe.WindowDataParameter window_data_param = 20;</code>
     */
    public caffe.Caffe.WindowDataParameter getWindowDataParam() {
      return windowDataParam_;
    }
    /**
     * <code>optional .caffe.WindowDataParameter window_data_param = 20;</code>
     */
    public caffe.Caffe.WindowDataParameterOrBuilder getWindowDataParamOrBuilder() {
      return windowDataParam_;
    }

    // optional .caffe.TransformationParameter transform_param = 36;
    public static final int TRANSFORM_PARAM_FIELD_NUMBER = 36;
    private caffe.Caffe.TransformationParameter transformParam_;
    /**
     * <code>optional .caffe.TransformationParameter transform_param = 36;</code>
     */
    public boolean hasTransformParam() {
      return ((bitField0_ & 0x40000000) == 0x40000000);
    }
    /**
     * <code>optional .caffe.TransformationParameter transform_param = 36;</code>
     */
    public caffe.Caffe.TransformationParameter getTransformParam() {
      return transformParam_;
    }
    /**
     * <code>optional .caffe.TransformationParameter transform_param = 36;</code>
     */
    public caffe.Caffe.TransformationParameterOrBuilder getTransformParamOrBuilder() {
      return transformParam_;
    }

    // optional .caffe.LossParameter loss_param = 42;
    public static final int LOSS_PARAM_FIELD_NUMBER = 42;
    private caffe.Caffe.LossParameter lossParam_;
    /**
     * <code>optional .caffe.LossParameter loss_param = 42;</code>
     */
    public boolean hasLossParam() {
      return ((bitField0_ & 0x80000000) == 0x80000000);
    }
    /**
     * <code>optional .caffe.LossParameter loss_param = 42;</code>
     */
    public caffe.Caffe.LossParameter getLossParam() {
      return lossParam_;
    }
    /**
     * <code>optional .caffe.LossParameter loss_param = 42;</code>
     */
    public caffe.Caffe.LossParameterOrBuilder getLossParamOrBuilder() {
      return lossParam_;
    }

    // optional .caffe.V0LayerParameter layer = 1;
    public static final int LAYER_FIELD_NUMBER = 1;
    private caffe.Caffe.V0LayerParameter layer_;
    /**
     * <code>optional .caffe.V0LayerParameter layer = 1;</code>
     */
    public boolean hasLayer() {
      return ((bitField1_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .caffe.V0LayerParameter layer = 1;</code>
     */
    public caffe.Caffe.V0LayerParameter getLayer() {
      return layer_;
    }
    /**
     * <code>optional .caffe.V0LayerParameter layer = 1;</code>
     */
    public caffe.Caffe.V0LayerParameterOrBuilder getLayerOrBuilder() {
      return layer_;
    }

    private void initFields() {
      bottom_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      top_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      name_ = "";
      include_ = java.util.Collections.emptyList();
      exclude_ = java.util.Collections.emptyList();
      type_ = caffe.Caffe.V1LayerParameter.LayerType.NONE;
      blobs_ = java.util.Collections.emptyList();
      param_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      blobShareMode_ = java.util.Collections.emptyList();
      blobsLr_ = java.util.Collections.emptyList();
      weightDecay_ = java.util.Collections.emptyList();
      lossWeight_ = java.util.Collections.emptyList();
      accuracyParam_ = caffe.Caffe.AccuracyParameter.getDefaultInstance();
      argmaxParam_ = caffe.Caffe.ArgMaxParameter.getDefaultInstance();
      concatParam_ = caffe.Caffe.ConcatParameter.getDefaultInstance();
      contrastiveLossParam_ = caffe.Caffe.ContrastiveLossParameter.getDefaultInstance();
      convolutionParam_ = caffe.Caffe.ConvolutionParameter.getDefaultInstance();
      dataParam_ = caffe.Caffe.DataParameter.getDefaultInstance();
      dropoutParam_ = caffe.Caffe.DropoutParameter.getDefaultInstance();
      dummyDataParam_ = caffe.Caffe.DummyDataParameter.getDefaultInstance();
      eltwiseParam_ = caffe.Caffe.EltwiseParameter.getDefaultInstance();
      expParam_ = caffe.Caffe.ExpParameter.getDefaultInstance();
      hdf5DataParam_ = caffe.Caffe.HDF5DataParameter.getDefaultInstance();
      hdf5OutputParam_ = caffe.Caffe.HDF5OutputParameter.getDefaultInstance();
      hingeLossParam_ = caffe.Caffe.HingeLossParameter.getDefaultInstance();
      imageDataParam_ = caffe.Caffe.ImageDataParameter.getDefaultInstance();
      infogainLossParam_ = caffe.Caffe.InfogainLossParameter.getDefaultInstance();
      innerProductParam_ = caffe.Caffe.InnerProductParameter.getDefaultInstance();
      lrnParam_ = caffe.Caffe.LRNParameter.getDefaultInstance();
      memoryDataParam_ = caffe.Caffe.MemoryDataParameter.getDefaultInstance();
      mvnParam_ = caffe.Caffe.MVNParameter.getDefaultInstance();
      poolingParam_ = caffe.Caffe.PoolingParameter.getDefaultInstance();
      powerParam_ = caffe.Caffe.PowerParameter.getDefaultInstance();
      reluParam_ = caffe.Caffe.ReLUParameter.getDefaultInstance();
      sigmoidParam_ = caffe.Caffe.SigmoidParameter.getDefaultInstance();
      softmaxParam_ = caffe.Caffe.SoftmaxParameter.getDefaultInstance();
      sliceParam_ = caffe.Caffe.SliceParameter.getDefaultInstance();
      tanhParam_ = caffe.Caffe.TanHParameter.getDefaultInstance();
      thresholdParam_ = caffe.Caffe.ThresholdParameter.getDefaultInstance();
      windowDataParam_ = caffe.Caffe.WindowDataParameter.getDefaultInstance();
      transformParam_ = caffe.Caffe.TransformationParameter.getDefaultInstance();
      lossParam_ = caffe.Caffe.LossParameter.getDefaultInstance();
      layer_ = caffe.Caffe.V0LayerParameter.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField1_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, layer_);
      }
      for (int i = 0; i < bottom_.size(); i++) {
        output.writeBytes(2, bottom_.getByteString(i));
      }
      for (int i = 0; i < top_.size(); i++) {
        output.writeBytes(3, top_.getByteString(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(4, getNameBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(5, type_.getNumber());
      }
      for (int i = 0; i < blobs_.size(); i++) {
        output.writeMessage(6, blobs_.get(i));
      }
      for (int i = 0; i < blobsLr_.size(); i++) {
        output.writeFloat(7, blobsLr_.get(i));
      }
      for (int i = 0; i < weightDecay_.size(); i++) {
        output.writeFloat(8, weightDecay_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(9, concatParam_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeMessage(10, convolutionParam_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeMessage(11, dataParam_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeMessage(12, dropoutParam_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeMessage(13, hdf5DataParam_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeMessage(14, hdf5OutputParam_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeMessage(15, imageDataParam_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeMessage(16, infogainLossParam_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeMessage(17, innerProductParam_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeMessage(18, lrnParam_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        output.writeMessage(19, poolingParam_);
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        output.writeMessage(20, windowDataParam_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        output.writeMessage(21, powerParam_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        output.writeMessage(22, memoryDataParam_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(23, argmaxParam_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeMessage(24, eltwiseParam_);
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        output.writeMessage(25, thresholdParam_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeMessage(26, dummyDataParam_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(27, accuracyParam_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeMessage(29, hingeLossParam_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        output.writeMessage(30, reluParam_);
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        output.writeMessage(31, sliceParam_);
      }
      for (int i = 0; i < include_.size(); i++) {
        output.writeMessage(32, include_.get(i));
      }
      for (int i = 0; i < exclude_.size(); i++) {
        output.writeMessage(33, exclude_.get(i));
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        output.writeMessage(34, mvnParam_);
      }
      for (int i = 0; i < lossWeight_.size(); i++) {
        output.writeFloat(35, lossWeight_.get(i));
      }
      if (((bitField0_ & 0x40000000) == 0x40000000)) {
        output.writeMessage(36, transformParam_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        output.writeMessage(37, tanhParam_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        output.writeMessage(38, sigmoidParam_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        output.writeMessage(39, softmaxParam_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(40, contrastiveLossParam_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeMessage(41, expParam_);
      }
      if (((bitField0_ & 0x80000000) == 0x80000000)) {
        output.writeMessage(42, lossParam_);
      }
      for (int i = 0; i < param_.size(); i++) {
        output.writeBytes(1001, param_.getByteString(i));
      }
      for (int i = 0; i < blobShareMode_.size(); i++) {
        output.writeEnum(1002, blobShareMode_.get(i).getNumber());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField1_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, layer_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < bottom_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(bottom_.getByteString(i));
        }
        size += dataSize;
        size += 1 * getBottomList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < top_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(top_.getByteString(i));
        }
        size += dataSize;
        size += 1 * getTopList().size();
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, getNameBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(5, type_.getNumber());
      }
      for (int i = 0; i < blobs_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, blobs_.get(i));
      }
      {
        int dataSize = 0;
        dataSize = 4 * getBlobsLrList().size();
        size += dataSize;
        size += 1 * getBlobsLrList().size();
      }
      {
        int dataSize = 0;
        dataSize = 4 * getWeightDecayList().size();
        size += dataSize;
        size += 1 * getWeightDecayList().size();
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, concatParam_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, convolutionParam_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, dataParam_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(12, dropoutParam_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(13, hdf5DataParam_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(14, hdf5OutputParam_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(15, imageDataParam_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(16, infogainLossParam_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(17, innerProductParam_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(18, lrnParam_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(19, poolingParam_);
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(20, windowDataParam_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(21, powerParam_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(22, memoryDataParam_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(23, argmaxParam_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(24, eltwiseParam_);
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(25, thresholdParam_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(26, dummyDataParam_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(27, accuracyParam_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(29, hingeLossParam_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(30, reluParam_);
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(31, sliceParam_);
      }
      for (int i = 0; i < include_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(32, include_.get(i));
      }
      for (int i = 0; i < exclude_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(33, exclude_.get(i));
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(34, mvnParam_);
      }
      {
        int dataSize = 0;
        dataSize = 4 * getLossWeightList().size();
        size += dataSize;
        size += 2 * getLossWeightList().size();
      }
      if (((bitField0_ & 0x40000000) == 0x40000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(36, transformParam_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(37, tanhParam_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(38, sigmoidParam_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(39, softmaxParam_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(40, contrastiveLossParam_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(41, expParam_);
      }
      if (((bitField0_ & 0x80000000) == 0x80000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(42, lossParam_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < param_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(param_.getByteString(i));
        }
        size += dataSize;
        size += 2 * getParamList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < blobShareMode_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeEnumSizeNoTag(blobShareMode_.get(i).getNumber());
        }
        size += dataSize;
        size += 2 * blobShareMode_.size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.V1LayerParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.V1LayerParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.V1LayerParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.V1LayerParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.V1LayerParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.V1LayerParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.V1LayerParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.V1LayerParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.V1LayerParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.V1LayerParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.V1LayerParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.V1LayerParameter}
     *
     * <pre>
     * DEPRECATED: use LayerParameter.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements caffe.Caffe.V1LayerParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_V1LayerParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_V1LayerParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.V1LayerParameter.class, caffe.Caffe.V1LayerParameter.Builder.class);
      }

      // Construct using caffe.Caffe.V1LayerParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getIncludeFieldBuilder();
          getExcludeFieldBuilder();
          getBlobsFieldBuilder();
          getAccuracyParamFieldBuilder();
          getArgmaxParamFieldBuilder();
          getConcatParamFieldBuilder();
          getContrastiveLossParamFieldBuilder();
          getConvolutionParamFieldBuilder();
          getDataParamFieldBuilder();
          getDropoutParamFieldBuilder();
          getDummyDataParamFieldBuilder();
          getEltwiseParamFieldBuilder();
          getExpParamFieldBuilder();
          getHdf5DataParamFieldBuilder();
          getHdf5OutputParamFieldBuilder();
          getHingeLossParamFieldBuilder();
          getImageDataParamFieldBuilder();
          getInfogainLossParamFieldBuilder();
          getInnerProductParamFieldBuilder();
          getLrnParamFieldBuilder();
          getMemoryDataParamFieldBuilder();
          getMvnParamFieldBuilder();
          getPoolingParamFieldBuilder();
          getPowerParamFieldBuilder();
          getReluParamFieldBuilder();
          getSigmoidParamFieldBuilder();
          getSoftmaxParamFieldBuilder();
          getSliceParamFieldBuilder();
          getTanhParamFieldBuilder();
          getThresholdParamFieldBuilder();
          getWindowDataParamFieldBuilder();
          getTransformParamFieldBuilder();
          getLossParamFieldBuilder();
          getLayerFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        bottom_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        top_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        if (includeBuilder_ == null) {
          include_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          includeBuilder_.clear();
        }
        if (excludeBuilder_ == null) {
          exclude_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          excludeBuilder_.clear();
        }
        type_ = caffe.Caffe.V1LayerParameter.LayerType.NONE;
        bitField0_ = (bitField0_ & ~0x00000020);
        if (blobsBuilder_ == null) {
          blobs_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000040);
        } else {
          blobsBuilder_.clear();
        }
        param_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000080);
        blobShareMode_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        blobsLr_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        weightDecay_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        lossWeight_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000800);
        if (accuracyParamBuilder_ == null) {
          accuracyParam_ = caffe.Caffe.AccuracyParameter.getDefaultInstance();
        } else {
          accuracyParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00001000);
        if (argmaxParamBuilder_ == null) {
          argmaxParam_ = caffe.Caffe.ArgMaxParameter.getDefaultInstance();
        } else {
          argmaxParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00002000);
        if (concatParamBuilder_ == null) {
          concatParam_ = caffe.Caffe.ConcatParameter.getDefaultInstance();
        } else {
          concatParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00004000);
        if (contrastiveLossParamBuilder_ == null) {
          contrastiveLossParam_ = caffe.Caffe.ContrastiveLossParameter.getDefaultInstance();
        } else {
          contrastiveLossParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00008000);
        if (convolutionParamBuilder_ == null) {
          convolutionParam_ = caffe.Caffe.ConvolutionParameter.getDefaultInstance();
        } else {
          convolutionParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00010000);
        if (dataParamBuilder_ == null) {
          dataParam_ = caffe.Caffe.DataParameter.getDefaultInstance();
        } else {
          dataParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00020000);
        if (dropoutParamBuilder_ == null) {
          dropoutParam_ = caffe.Caffe.DropoutParameter.getDefaultInstance();
        } else {
          dropoutParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00040000);
        if (dummyDataParamBuilder_ == null) {
          dummyDataParam_ = caffe.Caffe.DummyDataParameter.getDefaultInstance();
        } else {
          dummyDataParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00080000);
        if (eltwiseParamBuilder_ == null) {
          eltwiseParam_ = caffe.Caffe.EltwiseParameter.getDefaultInstance();
        } else {
          eltwiseParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00100000);
        if (expParamBuilder_ == null) {
          expParam_ = caffe.Caffe.ExpParameter.getDefaultInstance();
        } else {
          expParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00200000);
        if (hdf5DataParamBuilder_ == null) {
          hdf5DataParam_ = caffe.Caffe.HDF5DataParameter.getDefaultInstance();
        } else {
          hdf5DataParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00400000);
        if (hdf5OutputParamBuilder_ == null) {
          hdf5OutputParam_ = caffe.Caffe.HDF5OutputParameter.getDefaultInstance();
        } else {
          hdf5OutputParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00800000);
        if (hingeLossParamBuilder_ == null) {
          hingeLossParam_ = caffe.Caffe.HingeLossParameter.getDefaultInstance();
        } else {
          hingeLossParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x01000000);
        if (imageDataParamBuilder_ == null) {
          imageDataParam_ = caffe.Caffe.ImageDataParameter.getDefaultInstance();
        } else {
          imageDataParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x02000000);
        if (infogainLossParamBuilder_ == null) {
          infogainLossParam_ = caffe.Caffe.InfogainLossParameter.getDefaultInstance();
        } else {
          infogainLossParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x04000000);
        if (innerProductParamBuilder_ == null) {
          innerProductParam_ = caffe.Caffe.InnerProductParameter.getDefaultInstance();
        } else {
          innerProductParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x08000000);
        if (lrnParamBuilder_ == null) {
          lrnParam_ = caffe.Caffe.LRNParameter.getDefaultInstance();
        } else {
          lrnParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x10000000);
        if (memoryDataParamBuilder_ == null) {
          memoryDataParam_ = caffe.Caffe.MemoryDataParameter.getDefaultInstance();
        } else {
          memoryDataParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x20000000);
        if (mvnParamBuilder_ == null) {
          mvnParam_ = caffe.Caffe.MVNParameter.getDefaultInstance();
        } else {
          mvnParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x40000000);
        if (poolingParamBuilder_ == null) {
          poolingParam_ = caffe.Caffe.PoolingParameter.getDefaultInstance();
        } else {
          poolingParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x80000000);
        if (powerParamBuilder_ == null) {
          powerParam_ = caffe.Caffe.PowerParameter.getDefaultInstance();
        } else {
          powerParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000001);
        if (reluParamBuilder_ == null) {
          reluParam_ = caffe.Caffe.ReLUParameter.getDefaultInstance();
        } else {
          reluParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000002);
        if (sigmoidParamBuilder_ == null) {
          sigmoidParam_ = caffe.Caffe.SigmoidParameter.getDefaultInstance();
        } else {
          sigmoidParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000004);
        if (softmaxParamBuilder_ == null) {
          softmaxParam_ = caffe.Caffe.SoftmaxParameter.getDefaultInstance();
        } else {
          softmaxParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000008);
        if (sliceParamBuilder_ == null) {
          sliceParam_ = caffe.Caffe.SliceParameter.getDefaultInstance();
        } else {
          sliceParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000010);
        if (tanhParamBuilder_ == null) {
          tanhParam_ = caffe.Caffe.TanHParameter.getDefaultInstance();
        } else {
          tanhParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000020);
        if (thresholdParamBuilder_ == null) {
          thresholdParam_ = caffe.Caffe.ThresholdParameter.getDefaultInstance();
        } else {
          thresholdParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000040);
        if (windowDataParamBuilder_ == null) {
          windowDataParam_ = caffe.Caffe.WindowDataParameter.getDefaultInstance();
        } else {
          windowDataParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000080);
        if (transformParamBuilder_ == null) {
          transformParam_ = caffe.Caffe.TransformationParameter.getDefaultInstance();
        } else {
          transformParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000100);
        if (lossParamBuilder_ == null) {
          lossParam_ = caffe.Caffe.LossParameter.getDefaultInstance();
        } else {
          lossParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000200);
        if (layerBuilder_ == null) {
          layer_ = caffe.Caffe.V0LayerParameter.getDefaultInstance();
        } else {
          layerBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000400);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_V1LayerParameter_descriptor;
      }

      public caffe.Caffe.V1LayerParameter getDefaultInstanceForType() {
        return caffe.Caffe.V1LayerParameter.getDefaultInstance();
      }

      public caffe.Caffe.V1LayerParameter build() {
        caffe.Caffe.V1LayerParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.V1LayerParameter buildPartial() {
        caffe.Caffe.V1LayerParameter result = new caffe.Caffe.V1LayerParameter(this);
        int from_bitField0_ = bitField0_;
        int from_bitField1_ = bitField1_;
        int to_bitField0_ = 0;
        int to_bitField1_ = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          bottom_ = new com.google.protobuf.UnmodifiableLazyStringList(
              bottom_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.bottom_ = bottom_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          top_ = new com.google.protobuf.UnmodifiableLazyStringList(
              top_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.top_ = top_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000001;
        }
        result.name_ = name_;
        if (includeBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            include_ = java.util.Collections.unmodifiableList(include_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.include_ = include_;
        } else {
          result.include_ = includeBuilder_.build();
        }
        if (excludeBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            exclude_ = java.util.Collections.unmodifiableList(exclude_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.exclude_ = exclude_;
        } else {
          result.exclude_ = excludeBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000002;
        }
        result.type_ = type_;
        if (blobsBuilder_ == null) {
          if (((bitField0_ & 0x00000040) == 0x00000040)) {
            blobs_ = java.util.Collections.unmodifiableList(blobs_);
            bitField0_ = (bitField0_ & ~0x00000040);
          }
          result.blobs_ = blobs_;
        } else {
          result.blobs_ = blobsBuilder_.build();
        }
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          param_ = new com.google.protobuf.UnmodifiableLazyStringList(
              param_);
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.param_ = param_;
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
          blobShareMode_ = java.util.Collections.unmodifiableList(blobShareMode_);
          bitField0_ = (bitField0_ & ~0x00000100);
        }
        result.blobShareMode_ = blobShareMode_;
        if (((bitField0_ & 0x00000200) == 0x00000200)) {
          blobsLr_ = java.util.Collections.unmodifiableList(blobsLr_);
          bitField0_ = (bitField0_ & ~0x00000200);
        }
        result.blobsLr_ = blobsLr_;
        if (((bitField0_ & 0x00000400) == 0x00000400)) {
          weightDecay_ = java.util.Collections.unmodifiableList(weightDecay_);
          bitField0_ = (bitField0_ & ~0x00000400);
        }
        result.weightDecay_ = weightDecay_;
        if (((bitField0_ & 0x00000800) == 0x00000800)) {
          lossWeight_ = java.util.Collections.unmodifiableList(lossWeight_);
          bitField0_ = (bitField0_ & ~0x00000800);
        }
        result.lossWeight_ = lossWeight_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00000004;
        }
        if (accuracyParamBuilder_ == null) {
          result.accuracyParam_ = accuracyParam_;
        } else {
          result.accuracyParam_ = accuracyParamBuilder_.build();
        }
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00000008;
        }
        if (argmaxParamBuilder_ == null) {
          result.argmaxParam_ = argmaxParam_;
        } else {
          result.argmaxParam_ = argmaxParamBuilder_.build();
        }
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00000010;
        }
        if (concatParamBuilder_ == null) {
          result.concatParam_ = concatParam_;
        } else {
          result.concatParam_ = concatParamBuilder_.build();
        }
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00000020;
        }
        if (contrastiveLossParamBuilder_ == null) {
          result.contrastiveLossParam_ = contrastiveLossParam_;
        } else {
          result.contrastiveLossParam_ = contrastiveLossParamBuilder_.build();
        }
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00000040;
        }
        if (convolutionParamBuilder_ == null) {
          result.convolutionParam_ = convolutionParam_;
        } else {
          result.convolutionParam_ = convolutionParamBuilder_.build();
        }
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00000080;
        }
        if (dataParamBuilder_ == null) {
          result.dataParam_ = dataParam_;
        } else {
          result.dataParam_ = dataParamBuilder_.build();
        }
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00000100;
        }
        if (dropoutParamBuilder_ == null) {
          result.dropoutParam_ = dropoutParam_;
        } else {
          result.dropoutParam_ = dropoutParamBuilder_.build();
        }
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00000200;
        }
        if (dummyDataParamBuilder_ == null) {
          result.dummyDataParam_ = dummyDataParam_;
        } else {
          result.dummyDataParam_ = dummyDataParamBuilder_.build();
        }
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00000400;
        }
        if (eltwiseParamBuilder_ == null) {
          result.eltwiseParam_ = eltwiseParam_;
        } else {
          result.eltwiseParam_ = eltwiseParamBuilder_.build();
        }
        if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
          to_bitField0_ |= 0x00000800;
        }
        if (expParamBuilder_ == null) {
          result.expParam_ = expParam_;
        } else {
          result.expParam_ = expParamBuilder_.build();
        }
        if (((from_bitField0_ & 0x00400000) == 0x00400000)) {
          to_bitField0_ |= 0x00001000;
        }
        if (hdf5DataParamBuilder_ == null) {
          result.hdf5DataParam_ = hdf5DataParam_;
        } else {
          result.hdf5DataParam_ = hdf5DataParamBuilder_.build();
        }
        if (((from_bitField0_ & 0x00800000) == 0x00800000)) {
          to_bitField0_ |= 0x00002000;
        }
        if (hdf5OutputParamBuilder_ == null) {
          result.hdf5OutputParam_ = hdf5OutputParam_;
        } else {
          result.hdf5OutputParam_ = hdf5OutputParamBuilder_.build();
        }
        if (((from_bitField0_ & 0x01000000) == 0x01000000)) {
          to_bitField0_ |= 0x00004000;
        }
        if (hingeLossParamBuilder_ == null) {
          result.hingeLossParam_ = hingeLossParam_;
        } else {
          result.hingeLossParam_ = hingeLossParamBuilder_.build();
        }
        if (((from_bitField0_ & 0x02000000) == 0x02000000)) {
          to_bitField0_ |= 0x00008000;
        }
        if (imageDataParamBuilder_ == null) {
          result.imageDataParam_ = imageDataParam_;
        } else {
          result.imageDataParam_ = imageDataParamBuilder_.build();
        }
        if (((from_bitField0_ & 0x04000000) == 0x04000000)) {
          to_bitField0_ |= 0x00010000;
        }
        if (infogainLossParamBuilder_ == null) {
          result.infogainLossParam_ = infogainLossParam_;
        } else {
          result.infogainLossParam_ = infogainLossParamBuilder_.build();
        }
        if (((from_bitField0_ & 0x08000000) == 0x08000000)) {
          to_bitField0_ |= 0x00020000;
        }
        if (innerProductParamBuilder_ == null) {
          result.innerProductParam_ = innerProductParam_;
        } else {
          result.innerProductParam_ = innerProductParamBuilder_.build();
        }
        if (((from_bitField0_ & 0x10000000) == 0x10000000)) {
          to_bitField0_ |= 0x00040000;
        }
        if (lrnParamBuilder_ == null) {
          result.lrnParam_ = lrnParam_;
        } else {
          result.lrnParam_ = lrnParamBuilder_.build();
        }
        if (((from_bitField0_ & 0x20000000) == 0x20000000)) {
          to_bitField0_ |= 0x00080000;
        }
        if (memoryDataParamBuilder_ == null) {
          result.memoryDataParam_ = memoryDataParam_;
        } else {
          result.memoryDataParam_ = memoryDataParamBuilder_.build();
        }
        if (((from_bitField0_ & 0x40000000) == 0x40000000)) {
          to_bitField0_ |= 0x00100000;
        }
        if (mvnParamBuilder_ == null) {
          result.mvnParam_ = mvnParam_;
        } else {
          result.mvnParam_ = mvnParamBuilder_.build();
        }
        if (((from_bitField0_ & 0x80000000) == 0x80000000)) {
          to_bitField0_ |= 0x00200000;
        }
        if (poolingParamBuilder_ == null) {
          result.poolingParam_ = poolingParam_;
        } else {
          result.poolingParam_ = poolingParamBuilder_.build();
        }
        if (((from_bitField1_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00400000;
        }
        if (powerParamBuilder_ == null) {
          result.powerParam_ = powerParam_;
        } else {
          result.powerParam_ = powerParamBuilder_.build();
        }
        if (((from_bitField1_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00800000;
        }
        if (reluParamBuilder_ == null) {
          result.reluParam_ = reluParam_;
        } else {
          result.reluParam_ = reluParamBuilder_.build();
        }
        if (((from_bitField1_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x01000000;
        }
        if (sigmoidParamBuilder_ == null) {
          result.sigmoidParam_ = sigmoidParam_;
        } else {
          result.sigmoidParam_ = sigmoidParamBuilder_.build();
        }
        if (((from_bitField1_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x02000000;
        }
        if (softmaxParamBuilder_ == null) {
          result.softmaxParam_ = softmaxParam_;
        } else {
          result.softmaxParam_ = softmaxParamBuilder_.build();
        }
        if (((from_bitField1_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x04000000;
        }
        if (sliceParamBuilder_ == null) {
          result.sliceParam_ = sliceParam_;
        } else {
          result.sliceParam_ = sliceParamBuilder_.build();
        }
        if (((from_bitField1_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x08000000;
        }
        if (tanhParamBuilder_ == null) {
          result.tanhParam_ = tanhParam_;
        } else {
          result.tanhParam_ = tanhParamBuilder_.build();
        }
        if (((from_bitField1_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x10000000;
        }
        if (thresholdParamBuilder_ == null) {
          result.thresholdParam_ = thresholdParam_;
        } else {
          result.thresholdParam_ = thresholdParamBuilder_.build();
        }
        if (((from_bitField1_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x20000000;
        }
        if (windowDataParamBuilder_ == null) {
          result.windowDataParam_ = windowDataParam_;
        } else {
          result.windowDataParam_ = windowDataParamBuilder_.build();
        }
        if (((from_bitField1_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x40000000;
        }
        if (transformParamBuilder_ == null) {
          result.transformParam_ = transformParam_;
        } else {
          result.transformParam_ = transformParamBuilder_.build();
        }
        if (((from_bitField1_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x80000000;
        }
        if (lossParamBuilder_ == null) {
          result.lossParam_ = lossParam_;
        } else {
          result.lossParam_ = lossParamBuilder_.build();
        }
        if (((from_bitField1_ & 0x00000400) == 0x00000400)) {
          to_bitField1_ |= 0x00000001;
        }
        if (layerBuilder_ == null) {
          result.layer_ = layer_;
        } else {
          result.layer_ = layerBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        result.bitField1_ = to_bitField1_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.V1LayerParameter) {
          return mergeFrom((caffe.Caffe.V1LayerParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.V1LayerParameter other) {
        if (other == caffe.Caffe.V1LayerParameter.getDefaultInstance()) return this;
        if (!other.bottom_.isEmpty()) {
          if (bottom_.isEmpty()) {
            bottom_ = other.bottom_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureBottomIsMutable();
            bottom_.addAll(other.bottom_);
          }
          onChanged();
        }
        if (!other.top_.isEmpty()) {
          if (top_.isEmpty()) {
            top_ = other.top_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureTopIsMutable();
            top_.addAll(other.top_);
          }
          onChanged();
        }
        if (other.hasName()) {
          bitField0_ |= 0x00000004;
          name_ = other.name_;
          onChanged();
        }
        if (includeBuilder_ == null) {
          if (!other.include_.isEmpty()) {
            if (include_.isEmpty()) {
              include_ = other.include_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureIncludeIsMutable();
              include_.addAll(other.include_);
            }
            onChanged();
          }
        } else {
          if (!other.include_.isEmpty()) {
            if (includeBuilder_.isEmpty()) {
              includeBuilder_.dispose();
              includeBuilder_ = null;
              include_ = other.include_;
              bitField0_ = (bitField0_ & ~0x00000008);
              includeBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getIncludeFieldBuilder() : null;
            } else {
              includeBuilder_.addAllMessages(other.include_);
            }
          }
        }
        if (excludeBuilder_ == null) {
          if (!other.exclude_.isEmpty()) {
            if (exclude_.isEmpty()) {
              exclude_ = other.exclude_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureExcludeIsMutable();
              exclude_.addAll(other.exclude_);
            }
            onChanged();
          }
        } else {
          if (!other.exclude_.isEmpty()) {
            if (excludeBuilder_.isEmpty()) {
              excludeBuilder_.dispose();
              excludeBuilder_ = null;
              exclude_ = other.exclude_;
              bitField0_ = (bitField0_ & ~0x00000010);
              excludeBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getExcludeFieldBuilder() : null;
            } else {
              excludeBuilder_.addAllMessages(other.exclude_);
            }
          }
        }
        if (other.hasType()) {
          setType(other.getType());
        }
        if (blobsBuilder_ == null) {
          if (!other.blobs_.isEmpty()) {
            if (blobs_.isEmpty()) {
              blobs_ = other.blobs_;
              bitField0_ = (bitField0_ & ~0x00000040);
            } else {
              ensureBlobsIsMutable();
              blobs_.addAll(other.blobs_);
            }
            onChanged();
          }
        } else {
          if (!other.blobs_.isEmpty()) {
            if (blobsBuilder_.isEmpty()) {
              blobsBuilder_.dispose();
              blobsBuilder_ = null;
              blobs_ = other.blobs_;
              bitField0_ = (bitField0_ & ~0x00000040);
              blobsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getBlobsFieldBuilder() : null;
            } else {
              blobsBuilder_.addAllMessages(other.blobs_);
            }
          }
        }
        if (!other.param_.isEmpty()) {
          if (param_.isEmpty()) {
            param_ = other.param_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensureParamIsMutable();
            param_.addAll(other.param_);
          }
          onChanged();
        }
        if (!other.blobShareMode_.isEmpty()) {
          if (blobShareMode_.isEmpty()) {
            blobShareMode_ = other.blobShareMode_;
            bitField0_ = (bitField0_ & ~0x00000100);
          } else {
            ensureBlobShareModeIsMutable();
            blobShareMode_.addAll(other.blobShareMode_);
          }
          onChanged();
        }
        if (!other.blobsLr_.isEmpty()) {
          if (blobsLr_.isEmpty()) {
            blobsLr_ = other.blobsLr_;
            bitField0_ = (bitField0_ & ~0x00000200);
          } else {
            ensureBlobsLrIsMutable();
            blobsLr_.addAll(other.blobsLr_);
          }
          onChanged();
        }
        if (!other.weightDecay_.isEmpty()) {
          if (weightDecay_.isEmpty()) {
            weightDecay_ = other.weightDecay_;
            bitField0_ = (bitField0_ & ~0x00000400);
          } else {
            ensureWeightDecayIsMutable();
            weightDecay_.addAll(other.weightDecay_);
          }
          onChanged();
        }
        if (!other.lossWeight_.isEmpty()) {
          if (lossWeight_.isEmpty()) {
            lossWeight_ = other.lossWeight_;
            bitField0_ = (bitField0_ & ~0x00000800);
          } else {
            ensureLossWeightIsMutable();
            lossWeight_.addAll(other.lossWeight_);
          }
          onChanged();
        }
        if (other.hasAccuracyParam()) {
          mergeAccuracyParam(other.getAccuracyParam());
        }
        if (other.hasArgmaxParam()) {
          mergeArgmaxParam(other.getArgmaxParam());
        }
        if (other.hasConcatParam()) {
          mergeConcatParam(other.getConcatParam());
        }
        if (other.hasContrastiveLossParam()) {
          mergeContrastiveLossParam(other.getContrastiveLossParam());
        }
        if (other.hasConvolutionParam()) {
          mergeConvolutionParam(other.getConvolutionParam());
        }
        if (other.hasDataParam()) {
          mergeDataParam(other.getDataParam());
        }
        if (other.hasDropoutParam()) {
          mergeDropoutParam(other.getDropoutParam());
        }
        if (other.hasDummyDataParam()) {
          mergeDummyDataParam(other.getDummyDataParam());
        }
        if (other.hasEltwiseParam()) {
          mergeEltwiseParam(other.getEltwiseParam());
        }
        if (other.hasExpParam()) {
          mergeExpParam(other.getExpParam());
        }
        if (other.hasHdf5DataParam()) {
          mergeHdf5DataParam(other.getHdf5DataParam());
        }
        if (other.hasHdf5OutputParam()) {
          mergeHdf5OutputParam(other.getHdf5OutputParam());
        }
        if (other.hasHingeLossParam()) {
          mergeHingeLossParam(other.getHingeLossParam());
        }
        if (other.hasImageDataParam()) {
          mergeImageDataParam(other.getImageDataParam());
        }
        if (other.hasInfogainLossParam()) {
          mergeInfogainLossParam(other.getInfogainLossParam());
        }
        if (other.hasInnerProductParam()) {
          mergeInnerProductParam(other.getInnerProductParam());
        }
        if (other.hasLrnParam()) {
          mergeLrnParam(other.getLrnParam());
        }
        if (other.hasMemoryDataParam()) {
          mergeMemoryDataParam(other.getMemoryDataParam());
        }
        if (other.hasMvnParam()) {
          mergeMvnParam(other.getMvnParam());
        }
        if (other.hasPoolingParam()) {
          mergePoolingParam(other.getPoolingParam());
        }
        if (other.hasPowerParam()) {
          mergePowerParam(other.getPowerParam());
        }
        if (other.hasReluParam()) {
          mergeReluParam(other.getReluParam());
        }
        if (other.hasSigmoidParam()) {
          mergeSigmoidParam(other.getSigmoidParam());
        }
        if (other.hasSoftmaxParam()) {
          mergeSoftmaxParam(other.getSoftmaxParam());
        }
        if (other.hasSliceParam()) {
          mergeSliceParam(other.getSliceParam());
        }
        if (other.hasTanhParam()) {
          mergeTanhParam(other.getTanhParam());
        }
        if (other.hasThresholdParam()) {
          mergeThresholdParam(other.getThresholdParam());
        }
        if (other.hasWindowDataParam()) {
          mergeWindowDataParam(other.getWindowDataParam());
        }
        if (other.hasTransformParam()) {
          mergeTransformParam(other.getTransformParam());
        }
        if (other.hasLossParam()) {
          mergeLossParam(other.getLossParam());
        }
        if (other.hasLayer()) {
          mergeLayer(other.getLayer());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.V1LayerParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.V1LayerParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;
      private int bitField1_;

      // repeated string bottom = 2;
      private com.google.protobuf.LazyStringList bottom_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureBottomIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          bottom_ = new com.google.protobuf.LazyStringArrayList(bottom_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated string bottom = 2;</code>
       */
      public java.util.List<java.lang.String>
          getBottomList() {
        return java.util.Collections.unmodifiableList(bottom_);
      }
      /**
       * <code>repeated string bottom = 2;</code>
       */
      public int getBottomCount() {
        return bottom_.size();
      }
      /**
       * <code>repeated string bottom = 2;</code>
       */
      public java.lang.String getBottom(int index) {
        return bottom_.get(index);
      }
      /**
       * <code>repeated string bottom = 2;</code>
       */
      public com.google.protobuf.ByteString
          getBottomBytes(int index) {
        return bottom_.getByteString(index);
      }
      /**
       * <code>repeated string bottom = 2;</code>
       */
      public Builder setBottom(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureBottomIsMutable();
        bottom_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string bottom = 2;</code>
       */
      public Builder addBottom(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureBottomIsMutable();
        bottom_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string bottom = 2;</code>
       */
      public Builder addAllBottom(
          java.lang.Iterable<java.lang.String> values) {
        ensureBottomIsMutable();
        super.addAll(values, bottom_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string bottom = 2;</code>
       */
      public Builder clearBottom() {
        bottom_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string bottom = 2;</code>
       */
      public Builder addBottomBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureBottomIsMutable();
        bottom_.add(value);
        onChanged();
        return this;
      }

      // repeated string top = 3;
      private com.google.protobuf.LazyStringList top_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureTopIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          top_ = new com.google.protobuf.LazyStringArrayList(top_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated string top = 3;</code>
       */
      public java.util.List<java.lang.String>
          getTopList() {
        return java.util.Collections.unmodifiableList(top_);
      }
      /**
       * <code>repeated string top = 3;</code>
       */
      public int getTopCount() {
        return top_.size();
      }
      /**
       * <code>repeated string top = 3;</code>
       */
      public java.lang.String getTop(int index) {
        return top_.get(index);
      }
      /**
       * <code>repeated string top = 3;</code>
       */
      public com.google.protobuf.ByteString
          getTopBytes(int index) {
        return top_.getByteString(index);
      }
      /**
       * <code>repeated string top = 3;</code>
       */
      public Builder setTop(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureTopIsMutable();
        top_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string top = 3;</code>
       */
      public Builder addTop(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureTopIsMutable();
        top_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string top = 3;</code>
       */
      public Builder addAllTop(
          java.lang.Iterable<java.lang.String> values) {
        ensureTopIsMutable();
        super.addAll(values, top_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string top = 3;</code>
       */
      public Builder clearTop() {
        top_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string top = 3;</code>
       */
      public Builder addTopBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureTopIsMutable();
        top_.add(value);
        onChanged();
        return this;
      }

      // optional string name = 4;
      private java.lang.Object name_ = "";
      /**
       * <code>optional string name = 4;</code>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional string name = 4;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string name = 4;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string name = 4;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 4;</code>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000004);
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 4;</code>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        name_ = value;
        onChanged();
        return this;
      }

      // repeated .caffe.NetStateRule include = 32;
      private java.util.List<caffe.Caffe.NetStateRule> include_ =
        java.util.Collections.emptyList();
      private void ensureIncludeIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          include_ = new java.util.ArrayList<caffe.Caffe.NetStateRule>(include_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          caffe.Caffe.NetStateRule, caffe.Caffe.NetStateRule.Builder, caffe.Caffe.NetStateRuleOrBuilder> includeBuilder_;

      /**
       * <code>repeated .caffe.NetStateRule include = 32;</code>
       */
      public java.util.List<caffe.Caffe.NetStateRule> getIncludeList() {
        if (includeBuilder_ == null) {
          return java.util.Collections.unmodifiableList(include_);
        } else {
          return includeBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .caffe.NetStateRule include = 32;</code>
       */
      public int getIncludeCount() {
        if (includeBuilder_ == null) {
          return include_.size();
        } else {
          return includeBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .caffe.NetStateRule include = 32;</code>
       */
      public caffe.Caffe.NetStateRule getInclude(int index) {
        if (includeBuilder_ == null) {
          return include_.get(index);
        } else {
          return includeBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .caffe.NetStateRule include = 32;</code>
       */
      public Builder setInclude(
          int index, caffe.Caffe.NetStateRule value) {
        if (includeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureIncludeIsMutable();
          include_.set(index, value);
          onChanged();
        } else {
          includeBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.NetStateRule include = 32;</code>
       */
      public Builder setInclude(
          int index, caffe.Caffe.NetStateRule.Builder builderForValue) {
        if (includeBuilder_ == null) {
          ensureIncludeIsMutable();
          include_.set(index, builderForValue.build());
          onChanged();
        } else {
          includeBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.NetStateRule include = 32;</code>
       */
      public Builder addInclude(caffe.Caffe.NetStateRule value) {
        if (includeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureIncludeIsMutable();
          include_.add(value);
          onChanged();
        } else {
          includeBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.NetStateRule include = 32;</code>
       */
      public Builder addInclude(
          int index, caffe.Caffe.NetStateRule value) {
        if (includeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureIncludeIsMutable();
          include_.add(index, value);
          onChanged();
        } else {
          includeBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.NetStateRule include = 32;</code>
       */
      public Builder addInclude(
          caffe.Caffe.NetStateRule.Builder builderForValue) {
        if (includeBuilder_ == null) {
          ensureIncludeIsMutable();
          include_.add(builderForValue.build());
          onChanged();
        } else {
          includeBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.NetStateRule include = 32;</code>
       */
      public Builder addInclude(
          int index, caffe.Caffe.NetStateRule.Builder builderForValue) {
        if (includeBuilder_ == null) {
          ensureIncludeIsMutable();
          include_.add(index, builderForValue.build());
          onChanged();
        } else {
          includeBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.NetStateRule include = 32;</code>
       */
      public Builder addAllInclude(
          java.lang.Iterable<? extends caffe.Caffe.NetStateRule> values) {
        if (includeBuilder_ == null) {
          ensureIncludeIsMutable();
          super.addAll(values, include_);
          onChanged();
        } else {
          includeBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.NetStateRule include = 32;</code>
       */
      public Builder clearInclude() {
        if (includeBuilder_ == null) {
          include_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          includeBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .caffe.NetStateRule include = 32;</code>
       */
      public Builder removeInclude(int index) {
        if (includeBuilder_ == null) {
          ensureIncludeIsMutable();
          include_.remove(index);
          onChanged();
        } else {
          includeBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.NetStateRule include = 32;</code>
       */
      public caffe.Caffe.NetStateRule.Builder getIncludeBuilder(
          int index) {
        return getIncludeFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .caffe.NetStateRule include = 32;</code>
       */
      public caffe.Caffe.NetStateRuleOrBuilder getIncludeOrBuilder(
          int index) {
        if (includeBuilder_ == null) {
          return include_.get(index);  } else {
          return includeBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .caffe.NetStateRule include = 32;</code>
       */
      public java.util.List<? extends caffe.Caffe.NetStateRuleOrBuilder> 
           getIncludeOrBuilderList() {
        if (includeBuilder_ != null) {
          return includeBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(include_);
        }
      }
      /**
       * <code>repeated .caffe.NetStateRule include = 32;</code>
       */
      public caffe.Caffe.NetStateRule.Builder addIncludeBuilder() {
        return getIncludeFieldBuilder().addBuilder(
            caffe.Caffe.NetStateRule.getDefaultInstance());
      }
      /**
       * <code>repeated .caffe.NetStateRule include = 32;</code>
       */
      public caffe.Caffe.NetStateRule.Builder addIncludeBuilder(
          int index) {
        return getIncludeFieldBuilder().addBuilder(
            index, caffe.Caffe.NetStateRule.getDefaultInstance());
      }
      /**
       * <code>repeated .caffe.NetStateRule include = 32;</code>
       */
      public java.util.List<caffe.Caffe.NetStateRule.Builder> 
           getIncludeBuilderList() {
        return getIncludeFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          caffe.Caffe.NetStateRule, caffe.Caffe.NetStateRule.Builder, caffe.Caffe.NetStateRuleOrBuilder> 
          getIncludeFieldBuilder() {
        if (includeBuilder_ == null) {
          includeBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              caffe.Caffe.NetStateRule, caffe.Caffe.NetStateRule.Builder, caffe.Caffe.NetStateRuleOrBuilder>(
                  include_,
                  ((bitField0_ & 0x00000008) == 0x00000008),
                  getParentForChildren(),
                  isClean());
          include_ = null;
        }
        return includeBuilder_;
      }

      // repeated .caffe.NetStateRule exclude = 33;
      private java.util.List<caffe.Caffe.NetStateRule> exclude_ =
        java.util.Collections.emptyList();
      private void ensureExcludeIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          exclude_ = new java.util.ArrayList<caffe.Caffe.NetStateRule>(exclude_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          caffe.Caffe.NetStateRule, caffe.Caffe.NetStateRule.Builder, caffe.Caffe.NetStateRuleOrBuilder> excludeBuilder_;

      /**
       * <code>repeated .caffe.NetStateRule exclude = 33;</code>
       */
      public java.util.List<caffe.Caffe.NetStateRule> getExcludeList() {
        if (excludeBuilder_ == null) {
          return java.util.Collections.unmodifiableList(exclude_);
        } else {
          return excludeBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .caffe.NetStateRule exclude = 33;</code>
       */
      public int getExcludeCount() {
        if (excludeBuilder_ == null) {
          return exclude_.size();
        } else {
          return excludeBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .caffe.NetStateRule exclude = 33;</code>
       */
      public caffe.Caffe.NetStateRule getExclude(int index) {
        if (excludeBuilder_ == null) {
          return exclude_.get(index);
        } else {
          return excludeBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .caffe.NetStateRule exclude = 33;</code>
       */
      public Builder setExclude(
          int index, caffe.Caffe.NetStateRule value) {
        if (excludeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureExcludeIsMutable();
          exclude_.set(index, value);
          onChanged();
        } else {
          excludeBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.NetStateRule exclude = 33;</code>
       */
      public Builder setExclude(
          int index, caffe.Caffe.NetStateRule.Builder builderForValue) {
        if (excludeBuilder_ == null) {
          ensureExcludeIsMutable();
          exclude_.set(index, builderForValue.build());
          onChanged();
        } else {
          excludeBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.NetStateRule exclude = 33;</code>
       */
      public Builder addExclude(caffe.Caffe.NetStateRule value) {
        if (excludeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureExcludeIsMutable();
          exclude_.add(value);
          onChanged();
        } else {
          excludeBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.NetStateRule exclude = 33;</code>
       */
      public Builder addExclude(
          int index, caffe.Caffe.NetStateRule value) {
        if (excludeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureExcludeIsMutable();
          exclude_.add(index, value);
          onChanged();
        } else {
          excludeBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.NetStateRule exclude = 33;</code>
       */
      public Builder addExclude(
          caffe.Caffe.NetStateRule.Builder builderForValue) {
        if (excludeBuilder_ == null) {
          ensureExcludeIsMutable();
          exclude_.add(builderForValue.build());
          onChanged();
        } else {
          excludeBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.NetStateRule exclude = 33;</code>
       */
      public Builder addExclude(
          int index, caffe.Caffe.NetStateRule.Builder builderForValue) {
        if (excludeBuilder_ == null) {
          ensureExcludeIsMutable();
          exclude_.add(index, builderForValue.build());
          onChanged();
        } else {
          excludeBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.NetStateRule exclude = 33;</code>
       */
      public Builder addAllExclude(
          java.lang.Iterable<? extends caffe.Caffe.NetStateRule> values) {
        if (excludeBuilder_ == null) {
          ensureExcludeIsMutable();
          super.addAll(values, exclude_);
          onChanged();
        } else {
          excludeBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.NetStateRule exclude = 33;</code>
       */
      public Builder clearExclude() {
        if (excludeBuilder_ == null) {
          exclude_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          excludeBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .caffe.NetStateRule exclude = 33;</code>
       */
      public Builder removeExclude(int index) {
        if (excludeBuilder_ == null) {
          ensureExcludeIsMutable();
          exclude_.remove(index);
          onChanged();
        } else {
          excludeBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.NetStateRule exclude = 33;</code>
       */
      public caffe.Caffe.NetStateRule.Builder getExcludeBuilder(
          int index) {
        return getExcludeFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .caffe.NetStateRule exclude = 33;</code>
       */
      public caffe.Caffe.NetStateRuleOrBuilder getExcludeOrBuilder(
          int index) {
        if (excludeBuilder_ == null) {
          return exclude_.get(index);  } else {
          return excludeBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .caffe.NetStateRule exclude = 33;</code>
       */
      public java.util.List<? extends caffe.Caffe.NetStateRuleOrBuilder> 
           getExcludeOrBuilderList() {
        if (excludeBuilder_ != null) {
          return excludeBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(exclude_);
        }
      }
      /**
       * <code>repeated .caffe.NetStateRule exclude = 33;</code>
       */
      public caffe.Caffe.NetStateRule.Builder addExcludeBuilder() {
        return getExcludeFieldBuilder().addBuilder(
            caffe.Caffe.NetStateRule.getDefaultInstance());
      }
      /**
       * <code>repeated .caffe.NetStateRule exclude = 33;</code>
       */
      public caffe.Caffe.NetStateRule.Builder addExcludeBuilder(
          int index) {
        return getExcludeFieldBuilder().addBuilder(
            index, caffe.Caffe.NetStateRule.getDefaultInstance());
      }
      /**
       * <code>repeated .caffe.NetStateRule exclude = 33;</code>
       */
      public java.util.List<caffe.Caffe.NetStateRule.Builder> 
           getExcludeBuilderList() {
        return getExcludeFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          caffe.Caffe.NetStateRule, caffe.Caffe.NetStateRule.Builder, caffe.Caffe.NetStateRuleOrBuilder> 
          getExcludeFieldBuilder() {
        if (excludeBuilder_ == null) {
          excludeBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              caffe.Caffe.NetStateRule, caffe.Caffe.NetStateRule.Builder, caffe.Caffe.NetStateRuleOrBuilder>(
                  exclude_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          exclude_ = null;
        }
        return excludeBuilder_;
      }

      // optional .caffe.V1LayerParameter.LayerType type = 5;
      private caffe.Caffe.V1LayerParameter.LayerType type_ = caffe.Caffe.V1LayerParameter.LayerType.NONE;
      /**
       * <code>optional .caffe.V1LayerParameter.LayerType type = 5;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .caffe.V1LayerParameter.LayerType type = 5;</code>
       */
      public caffe.Caffe.V1LayerParameter.LayerType getType() {
        return type_;
      }
      /**
       * <code>optional .caffe.V1LayerParameter.LayerType type = 5;</code>
       */
      public Builder setType(caffe.Caffe.V1LayerParameter.LayerType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000020;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .caffe.V1LayerParameter.LayerType type = 5;</code>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000020);
        type_ = caffe.Caffe.V1LayerParameter.LayerType.NONE;
        onChanged();
        return this;
      }

      // repeated .caffe.BlobProto blobs = 6;
      private java.util.List<caffe.Caffe.BlobProto> blobs_ =
        java.util.Collections.emptyList();
      private void ensureBlobsIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          blobs_ = new java.util.ArrayList<caffe.Caffe.BlobProto>(blobs_);
          bitField0_ |= 0x00000040;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          caffe.Caffe.BlobProto, caffe.Caffe.BlobProto.Builder, caffe.Caffe.BlobProtoOrBuilder> blobsBuilder_;

      /**
       * <code>repeated .caffe.BlobProto blobs = 6;</code>
       */
      public java.util.List<caffe.Caffe.BlobProto> getBlobsList() {
        if (blobsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(blobs_);
        } else {
          return blobsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 6;</code>
       */
      public int getBlobsCount() {
        if (blobsBuilder_ == null) {
          return blobs_.size();
        } else {
          return blobsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 6;</code>
       */
      public caffe.Caffe.BlobProto getBlobs(int index) {
        if (blobsBuilder_ == null) {
          return blobs_.get(index);
        } else {
          return blobsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 6;</code>
       */
      public Builder setBlobs(
          int index, caffe.Caffe.BlobProto value) {
        if (blobsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBlobsIsMutable();
          blobs_.set(index, value);
          onChanged();
        } else {
          blobsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 6;</code>
       */
      public Builder setBlobs(
          int index, caffe.Caffe.BlobProto.Builder builderForValue) {
        if (blobsBuilder_ == null) {
          ensureBlobsIsMutable();
          blobs_.set(index, builderForValue.build());
          onChanged();
        } else {
          blobsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 6;</code>
       */
      public Builder addBlobs(caffe.Caffe.BlobProto value) {
        if (blobsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBlobsIsMutable();
          blobs_.add(value);
          onChanged();
        } else {
          blobsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 6;</code>
       */
      public Builder addBlobs(
          int index, caffe.Caffe.BlobProto value) {
        if (blobsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBlobsIsMutable();
          blobs_.add(index, value);
          onChanged();
        } else {
          blobsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 6;</code>
       */
      public Builder addBlobs(
          caffe.Caffe.BlobProto.Builder builderForValue) {
        if (blobsBuilder_ == null) {
          ensureBlobsIsMutable();
          blobs_.add(builderForValue.build());
          onChanged();
        } else {
          blobsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 6;</code>
       */
      public Builder addBlobs(
          int index, caffe.Caffe.BlobProto.Builder builderForValue) {
        if (blobsBuilder_ == null) {
          ensureBlobsIsMutable();
          blobs_.add(index, builderForValue.build());
          onChanged();
        } else {
          blobsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 6;</code>
       */
      public Builder addAllBlobs(
          java.lang.Iterable<? extends caffe.Caffe.BlobProto> values) {
        if (blobsBuilder_ == null) {
          ensureBlobsIsMutable();
          super.addAll(values, blobs_);
          onChanged();
        } else {
          blobsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 6;</code>
       */
      public Builder clearBlobs() {
        if (blobsBuilder_ == null) {
          blobs_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000040);
          onChanged();
        } else {
          blobsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 6;</code>
       */
      public Builder removeBlobs(int index) {
        if (blobsBuilder_ == null) {
          ensureBlobsIsMutable();
          blobs_.remove(index);
          onChanged();
        } else {
          blobsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 6;</code>
       */
      public caffe.Caffe.BlobProto.Builder getBlobsBuilder(
          int index) {
        return getBlobsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 6;</code>
       */
      public caffe.Caffe.BlobProtoOrBuilder getBlobsOrBuilder(
          int index) {
        if (blobsBuilder_ == null) {
          return blobs_.get(index);  } else {
          return blobsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 6;</code>
       */
      public java.util.List<? extends caffe.Caffe.BlobProtoOrBuilder> 
           getBlobsOrBuilderList() {
        if (blobsBuilder_ != null) {
          return blobsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(blobs_);
        }
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 6;</code>
       */
      public caffe.Caffe.BlobProto.Builder addBlobsBuilder() {
        return getBlobsFieldBuilder().addBuilder(
            caffe.Caffe.BlobProto.getDefaultInstance());
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 6;</code>
       */
      public caffe.Caffe.BlobProto.Builder addBlobsBuilder(
          int index) {
        return getBlobsFieldBuilder().addBuilder(
            index, caffe.Caffe.BlobProto.getDefaultInstance());
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 6;</code>
       */
      public java.util.List<caffe.Caffe.BlobProto.Builder> 
           getBlobsBuilderList() {
        return getBlobsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          caffe.Caffe.BlobProto, caffe.Caffe.BlobProto.Builder, caffe.Caffe.BlobProtoOrBuilder> 
          getBlobsFieldBuilder() {
        if (blobsBuilder_ == null) {
          blobsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              caffe.Caffe.BlobProto, caffe.Caffe.BlobProto.Builder, caffe.Caffe.BlobProtoOrBuilder>(
                  blobs_,
                  ((bitField0_ & 0x00000040) == 0x00000040),
                  getParentForChildren(),
                  isClean());
          blobs_ = null;
        }
        return blobsBuilder_;
      }

      // repeated string param = 1001;
      private com.google.protobuf.LazyStringList param_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureParamIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          param_ = new com.google.protobuf.LazyStringArrayList(param_);
          bitField0_ |= 0x00000080;
         }
      }
      /**
       * <code>repeated string param = 1001;</code>
       */
      public java.util.List<java.lang.String>
          getParamList() {
        return java.util.Collections.unmodifiableList(param_);
      }
      /**
       * <code>repeated string param = 1001;</code>
       */
      public int getParamCount() {
        return param_.size();
      }
      /**
       * <code>repeated string param = 1001;</code>
       */
      public java.lang.String getParam(int index) {
        return param_.get(index);
      }
      /**
       * <code>repeated string param = 1001;</code>
       */
      public com.google.protobuf.ByteString
          getParamBytes(int index) {
        return param_.getByteString(index);
      }
      /**
       * <code>repeated string param = 1001;</code>
       */
      public Builder setParam(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureParamIsMutable();
        param_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string param = 1001;</code>
       */
      public Builder addParam(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureParamIsMutable();
        param_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string param = 1001;</code>
       */
      public Builder addAllParam(
          java.lang.Iterable<java.lang.String> values) {
        ensureParamIsMutable();
        super.addAll(values, param_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string param = 1001;</code>
       */
      public Builder clearParam() {
        param_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string param = 1001;</code>
       */
      public Builder addParamBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureParamIsMutable();
        param_.add(value);
        onChanged();
        return this;
      }

      // repeated .caffe.V1LayerParameter.DimCheckMode blob_share_mode = 1002;
      private java.util.List<caffe.Caffe.V1LayerParameter.DimCheckMode> blobShareMode_ =
        java.util.Collections.emptyList();
      private void ensureBlobShareModeIsMutable() {
        if (!((bitField0_ & 0x00000100) == 0x00000100)) {
          blobShareMode_ = new java.util.ArrayList<caffe.Caffe.V1LayerParameter.DimCheckMode>(blobShareMode_);
          bitField0_ |= 0x00000100;
        }
      }
      /**
       * <code>repeated .caffe.V1LayerParameter.DimCheckMode blob_share_mode = 1002;</code>
       */
      public java.util.List<caffe.Caffe.V1LayerParameter.DimCheckMode> getBlobShareModeList() {
        return java.util.Collections.unmodifiableList(blobShareMode_);
      }
      /**
       * <code>repeated .caffe.V1LayerParameter.DimCheckMode blob_share_mode = 1002;</code>
       */
      public int getBlobShareModeCount() {
        return blobShareMode_.size();
      }
      /**
       * <code>repeated .caffe.V1LayerParameter.DimCheckMode blob_share_mode = 1002;</code>
       */
      public caffe.Caffe.V1LayerParameter.DimCheckMode getBlobShareMode(int index) {
        return blobShareMode_.get(index);
      }
      /**
       * <code>repeated .caffe.V1LayerParameter.DimCheckMode blob_share_mode = 1002;</code>
       */
      public Builder setBlobShareMode(
          int index, caffe.Caffe.V1LayerParameter.DimCheckMode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureBlobShareModeIsMutable();
        blobShareMode_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated .caffe.V1LayerParameter.DimCheckMode blob_share_mode = 1002;</code>
       */
      public Builder addBlobShareMode(caffe.Caffe.V1LayerParameter.DimCheckMode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureBlobShareModeIsMutable();
        blobShareMode_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated .caffe.V1LayerParameter.DimCheckMode blob_share_mode = 1002;</code>
       */
      public Builder addAllBlobShareMode(
          java.lang.Iterable<? extends caffe.Caffe.V1LayerParameter.DimCheckMode> values) {
        ensureBlobShareModeIsMutable();
        super.addAll(values, blobShareMode_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated .caffe.V1LayerParameter.DimCheckMode blob_share_mode = 1002;</code>
       */
      public Builder clearBlobShareMode() {
        blobShareMode_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        onChanged();
        return this;
      }

      // repeated float blobs_lr = 7;
      private java.util.List<java.lang.Float> blobsLr_ = java.util.Collections.emptyList();
      private void ensureBlobsLrIsMutable() {
        if (!((bitField0_ & 0x00000200) == 0x00000200)) {
          blobsLr_ = new java.util.ArrayList<java.lang.Float>(blobsLr_);
          bitField0_ |= 0x00000200;
         }
      }
      /**
       * <code>repeated float blobs_lr = 7;</code>
       */
      public java.util.List<java.lang.Float>
          getBlobsLrList() {
        return java.util.Collections.unmodifiableList(blobsLr_);
      }
      /**
       * <code>repeated float blobs_lr = 7;</code>
       */
      public int getBlobsLrCount() {
        return blobsLr_.size();
      }
      /**
       * <code>repeated float blobs_lr = 7;</code>
       */
      public float getBlobsLr(int index) {
        return blobsLr_.get(index);
      }
      /**
       * <code>repeated float blobs_lr = 7;</code>
       */
      public Builder setBlobsLr(
          int index, float value) {
        ensureBlobsLrIsMutable();
        blobsLr_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float blobs_lr = 7;</code>
       */
      public Builder addBlobsLr(float value) {
        ensureBlobsLrIsMutable();
        blobsLr_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float blobs_lr = 7;</code>
       */
      public Builder addAllBlobsLr(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureBlobsLrIsMutable();
        super.addAll(values, blobsLr_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float blobs_lr = 7;</code>
       */
      public Builder clearBlobsLr() {
        blobsLr_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        onChanged();
        return this;
      }

      // repeated float weight_decay = 8;
      private java.util.List<java.lang.Float> weightDecay_ = java.util.Collections.emptyList();
      private void ensureWeightDecayIsMutable() {
        if (!((bitField0_ & 0x00000400) == 0x00000400)) {
          weightDecay_ = new java.util.ArrayList<java.lang.Float>(weightDecay_);
          bitField0_ |= 0x00000400;
         }
      }
      /**
       * <code>repeated float weight_decay = 8;</code>
       */
      public java.util.List<java.lang.Float>
          getWeightDecayList() {
        return java.util.Collections.unmodifiableList(weightDecay_);
      }
      /**
       * <code>repeated float weight_decay = 8;</code>
       */
      public int getWeightDecayCount() {
        return weightDecay_.size();
      }
      /**
       * <code>repeated float weight_decay = 8;</code>
       */
      public float getWeightDecay(int index) {
        return weightDecay_.get(index);
      }
      /**
       * <code>repeated float weight_decay = 8;</code>
       */
      public Builder setWeightDecay(
          int index, float value) {
        ensureWeightDecayIsMutable();
        weightDecay_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float weight_decay = 8;</code>
       */
      public Builder addWeightDecay(float value) {
        ensureWeightDecayIsMutable();
        weightDecay_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float weight_decay = 8;</code>
       */
      public Builder addAllWeightDecay(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureWeightDecayIsMutable();
        super.addAll(values, weightDecay_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float weight_decay = 8;</code>
       */
      public Builder clearWeightDecay() {
        weightDecay_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        onChanged();
        return this;
      }

      // repeated float loss_weight = 35;
      private java.util.List<java.lang.Float> lossWeight_ = java.util.Collections.emptyList();
      private void ensureLossWeightIsMutable() {
        if (!((bitField0_ & 0x00000800) == 0x00000800)) {
          lossWeight_ = new java.util.ArrayList<java.lang.Float>(lossWeight_);
          bitField0_ |= 0x00000800;
         }
      }
      /**
       * <code>repeated float loss_weight = 35;</code>
       */
      public java.util.List<java.lang.Float>
          getLossWeightList() {
        return java.util.Collections.unmodifiableList(lossWeight_);
      }
      /**
       * <code>repeated float loss_weight = 35;</code>
       */
      public int getLossWeightCount() {
        return lossWeight_.size();
      }
      /**
       * <code>repeated float loss_weight = 35;</code>
       */
      public float getLossWeight(int index) {
        return lossWeight_.get(index);
      }
      /**
       * <code>repeated float loss_weight = 35;</code>
       */
      public Builder setLossWeight(
          int index, float value) {
        ensureLossWeightIsMutable();
        lossWeight_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float loss_weight = 35;</code>
       */
      public Builder addLossWeight(float value) {
        ensureLossWeightIsMutable();
        lossWeight_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float loss_weight = 35;</code>
       */
      public Builder addAllLossWeight(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureLossWeightIsMutable();
        super.addAll(values, lossWeight_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float loss_weight = 35;</code>
       */
      public Builder clearLossWeight() {
        lossWeight_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000800);
        onChanged();
        return this;
      }

      // optional .caffe.AccuracyParameter accuracy_param = 27;
      private caffe.Caffe.AccuracyParameter accuracyParam_ = caffe.Caffe.AccuracyParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.AccuracyParameter, caffe.Caffe.AccuracyParameter.Builder, caffe.Caffe.AccuracyParameterOrBuilder> accuracyParamBuilder_;
      /**
       * <code>optional .caffe.AccuracyParameter accuracy_param = 27;</code>
       */
      public boolean hasAccuracyParam() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional .caffe.AccuracyParameter accuracy_param = 27;</code>
       */
      public caffe.Caffe.AccuracyParameter getAccuracyParam() {
        if (accuracyParamBuilder_ == null) {
          return accuracyParam_;
        } else {
          return accuracyParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.AccuracyParameter accuracy_param = 27;</code>
       */
      public Builder setAccuracyParam(caffe.Caffe.AccuracyParameter value) {
        if (accuracyParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          accuracyParam_ = value;
          onChanged();
        } else {
          accuracyParamBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00001000;
        return this;
      }
      /**
       * <code>optional .caffe.AccuracyParameter accuracy_param = 27;</code>
       */
      public Builder setAccuracyParam(
          caffe.Caffe.AccuracyParameter.Builder builderForValue) {
        if (accuracyParamBuilder_ == null) {
          accuracyParam_ = builderForValue.build();
          onChanged();
        } else {
          accuracyParamBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00001000;
        return this;
      }
      /**
       * <code>optional .caffe.AccuracyParameter accuracy_param = 27;</code>
       */
      public Builder mergeAccuracyParam(caffe.Caffe.AccuracyParameter value) {
        if (accuracyParamBuilder_ == null) {
          if (((bitField0_ & 0x00001000) == 0x00001000) &&
              accuracyParam_ != caffe.Caffe.AccuracyParameter.getDefaultInstance()) {
            accuracyParam_ =
              caffe.Caffe.AccuracyParameter.newBuilder(accuracyParam_).mergeFrom(value).buildPartial();
          } else {
            accuracyParam_ = value;
          }
          onChanged();
        } else {
          accuracyParamBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00001000;
        return this;
      }
      /**
       * <code>optional .caffe.AccuracyParameter accuracy_param = 27;</code>
       */
      public Builder clearAccuracyParam() {
        if (accuracyParamBuilder_ == null) {
          accuracyParam_ = caffe.Caffe.AccuracyParameter.getDefaultInstance();
          onChanged();
        } else {
          accuracyParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00001000);
        return this;
      }
      /**
       * <code>optional .caffe.AccuracyParameter accuracy_param = 27;</code>
       */
      public caffe.Caffe.AccuracyParameter.Builder getAccuracyParamBuilder() {
        bitField0_ |= 0x00001000;
        onChanged();
        return getAccuracyParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.AccuracyParameter accuracy_param = 27;</code>
       */
      public caffe.Caffe.AccuracyParameterOrBuilder getAccuracyParamOrBuilder() {
        if (accuracyParamBuilder_ != null) {
          return accuracyParamBuilder_.getMessageOrBuilder();
        } else {
          return accuracyParam_;
        }
      }
      /**
       * <code>optional .caffe.AccuracyParameter accuracy_param = 27;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.AccuracyParameter, caffe.Caffe.AccuracyParameter.Builder, caffe.Caffe.AccuracyParameterOrBuilder> 
          getAccuracyParamFieldBuilder() {
        if (accuracyParamBuilder_ == null) {
          accuracyParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.AccuracyParameter, caffe.Caffe.AccuracyParameter.Builder, caffe.Caffe.AccuracyParameterOrBuilder>(
                  accuracyParam_,
                  getParentForChildren(),
                  isClean());
          accuracyParam_ = null;
        }
        return accuracyParamBuilder_;
      }

      // optional .caffe.ArgMaxParameter argmax_param = 23;
      private caffe.Caffe.ArgMaxParameter argmaxParam_ = caffe.Caffe.ArgMaxParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.ArgMaxParameter, caffe.Caffe.ArgMaxParameter.Builder, caffe.Caffe.ArgMaxParameterOrBuilder> argmaxParamBuilder_;
      /**
       * <code>optional .caffe.ArgMaxParameter argmax_param = 23;</code>
       */
      public boolean hasArgmaxParam() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional .caffe.ArgMaxParameter argmax_param = 23;</code>
       */
      public caffe.Caffe.ArgMaxParameter getArgmaxParam() {
        if (argmaxParamBuilder_ == null) {
          return argmaxParam_;
        } else {
          return argmaxParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.ArgMaxParameter argmax_param = 23;</code>
       */
      public Builder setArgmaxParam(caffe.Caffe.ArgMaxParameter value) {
        if (argmaxParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          argmaxParam_ = value;
          onChanged();
        } else {
          argmaxParamBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00002000;
        return this;
      }
      /**
       * <code>optional .caffe.ArgMaxParameter argmax_param = 23;</code>
       */
      public Builder setArgmaxParam(
          caffe.Caffe.ArgMaxParameter.Builder builderForValue) {
        if (argmaxParamBuilder_ == null) {
          argmaxParam_ = builderForValue.build();
          onChanged();
        } else {
          argmaxParamBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00002000;
        return this;
      }
      /**
       * <code>optional .caffe.ArgMaxParameter argmax_param = 23;</code>
       */
      public Builder mergeArgmaxParam(caffe.Caffe.ArgMaxParameter value) {
        if (argmaxParamBuilder_ == null) {
          if (((bitField0_ & 0x00002000) == 0x00002000) &&
              argmaxParam_ != caffe.Caffe.ArgMaxParameter.getDefaultInstance()) {
            argmaxParam_ =
              caffe.Caffe.ArgMaxParameter.newBuilder(argmaxParam_).mergeFrom(value).buildPartial();
          } else {
            argmaxParam_ = value;
          }
          onChanged();
        } else {
          argmaxParamBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00002000;
        return this;
      }
      /**
       * <code>optional .caffe.ArgMaxParameter argmax_param = 23;</code>
       */
      public Builder clearArgmaxParam() {
        if (argmaxParamBuilder_ == null) {
          argmaxParam_ = caffe.Caffe.ArgMaxParameter.getDefaultInstance();
          onChanged();
        } else {
          argmaxParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00002000);
        return this;
      }
      /**
       * <code>optional .caffe.ArgMaxParameter argmax_param = 23;</code>
       */
      public caffe.Caffe.ArgMaxParameter.Builder getArgmaxParamBuilder() {
        bitField0_ |= 0x00002000;
        onChanged();
        return getArgmaxParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.ArgMaxParameter argmax_param = 23;</code>
       */
      public caffe.Caffe.ArgMaxParameterOrBuilder getArgmaxParamOrBuilder() {
        if (argmaxParamBuilder_ != null) {
          return argmaxParamBuilder_.getMessageOrBuilder();
        } else {
          return argmaxParam_;
        }
      }
      /**
       * <code>optional .caffe.ArgMaxParameter argmax_param = 23;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.ArgMaxParameter, caffe.Caffe.ArgMaxParameter.Builder, caffe.Caffe.ArgMaxParameterOrBuilder> 
          getArgmaxParamFieldBuilder() {
        if (argmaxParamBuilder_ == null) {
          argmaxParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.ArgMaxParameter, caffe.Caffe.ArgMaxParameter.Builder, caffe.Caffe.ArgMaxParameterOrBuilder>(
                  argmaxParam_,
                  getParentForChildren(),
                  isClean());
          argmaxParam_ = null;
        }
        return argmaxParamBuilder_;
      }

      // optional .caffe.ConcatParameter concat_param = 9;
      private caffe.Caffe.ConcatParameter concatParam_ = caffe.Caffe.ConcatParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.ConcatParameter, caffe.Caffe.ConcatParameter.Builder, caffe.Caffe.ConcatParameterOrBuilder> concatParamBuilder_;
      /**
       * <code>optional .caffe.ConcatParameter concat_param = 9;</code>
       */
      public boolean hasConcatParam() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional .caffe.ConcatParameter concat_param = 9;</code>
       */
      public caffe.Caffe.ConcatParameter getConcatParam() {
        if (concatParamBuilder_ == null) {
          return concatParam_;
        } else {
          return concatParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.ConcatParameter concat_param = 9;</code>
       */
      public Builder setConcatParam(caffe.Caffe.ConcatParameter value) {
        if (concatParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          concatParam_ = value;
          onChanged();
        } else {
          concatParamBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00004000;
        return this;
      }
      /**
       * <code>optional .caffe.ConcatParameter concat_param = 9;</code>
       */
      public Builder setConcatParam(
          caffe.Caffe.ConcatParameter.Builder builderForValue) {
        if (concatParamBuilder_ == null) {
          concatParam_ = builderForValue.build();
          onChanged();
        } else {
          concatParamBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00004000;
        return this;
      }
      /**
       * <code>optional .caffe.ConcatParameter concat_param = 9;</code>
       */
      public Builder mergeConcatParam(caffe.Caffe.ConcatParameter value) {
        if (concatParamBuilder_ == null) {
          if (((bitField0_ & 0x00004000) == 0x00004000) &&
              concatParam_ != caffe.Caffe.ConcatParameter.getDefaultInstance()) {
            concatParam_ =
              caffe.Caffe.ConcatParameter.newBuilder(concatParam_).mergeFrom(value).buildPartial();
          } else {
            concatParam_ = value;
          }
          onChanged();
        } else {
          concatParamBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00004000;
        return this;
      }
      /**
       * <code>optional .caffe.ConcatParameter concat_param = 9;</code>
       */
      public Builder clearConcatParam() {
        if (concatParamBuilder_ == null) {
          concatParam_ = caffe.Caffe.ConcatParameter.getDefaultInstance();
          onChanged();
        } else {
          concatParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00004000);
        return this;
      }
      /**
       * <code>optional .caffe.ConcatParameter concat_param = 9;</code>
       */
      public caffe.Caffe.ConcatParameter.Builder getConcatParamBuilder() {
        bitField0_ |= 0x00004000;
        onChanged();
        return getConcatParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.ConcatParameter concat_param = 9;</code>
       */
      public caffe.Caffe.ConcatParameterOrBuilder getConcatParamOrBuilder() {
        if (concatParamBuilder_ != null) {
          return concatParamBuilder_.getMessageOrBuilder();
        } else {
          return concatParam_;
        }
      }
      /**
       * <code>optional .caffe.ConcatParameter concat_param = 9;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.ConcatParameter, caffe.Caffe.ConcatParameter.Builder, caffe.Caffe.ConcatParameterOrBuilder> 
          getConcatParamFieldBuilder() {
        if (concatParamBuilder_ == null) {
          concatParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.ConcatParameter, caffe.Caffe.ConcatParameter.Builder, caffe.Caffe.ConcatParameterOrBuilder>(
                  concatParam_,
                  getParentForChildren(),
                  isClean());
          concatParam_ = null;
        }
        return concatParamBuilder_;
      }

      // optional .caffe.ContrastiveLossParameter contrastive_loss_param = 40;
      private caffe.Caffe.ContrastiveLossParameter contrastiveLossParam_ = caffe.Caffe.ContrastiveLossParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.ContrastiveLossParameter, caffe.Caffe.ContrastiveLossParameter.Builder, caffe.Caffe.ContrastiveLossParameterOrBuilder> contrastiveLossParamBuilder_;
      /**
       * <code>optional .caffe.ContrastiveLossParameter contrastive_loss_param = 40;</code>
       */
      public boolean hasContrastiveLossParam() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional .caffe.ContrastiveLossParameter contrastive_loss_param = 40;</code>
       */
      public caffe.Caffe.ContrastiveLossParameter getContrastiveLossParam() {
        if (contrastiveLossParamBuilder_ == null) {
          return contrastiveLossParam_;
        } else {
          return contrastiveLossParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.ContrastiveLossParameter contrastive_loss_param = 40;</code>
       */
      public Builder setContrastiveLossParam(caffe.Caffe.ContrastiveLossParameter value) {
        if (contrastiveLossParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          contrastiveLossParam_ = value;
          onChanged();
        } else {
          contrastiveLossParamBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00008000;
        return this;
      }
      /**
       * <code>optional .caffe.ContrastiveLossParameter contrastive_loss_param = 40;</code>
       */
      public Builder setContrastiveLossParam(
          caffe.Caffe.ContrastiveLossParameter.Builder builderForValue) {
        if (contrastiveLossParamBuilder_ == null) {
          contrastiveLossParam_ = builderForValue.build();
          onChanged();
        } else {
          contrastiveLossParamBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00008000;
        return this;
      }
      /**
       * <code>optional .caffe.ContrastiveLossParameter contrastive_loss_param = 40;</code>
       */
      public Builder mergeContrastiveLossParam(caffe.Caffe.ContrastiveLossParameter value) {
        if (contrastiveLossParamBuilder_ == null) {
          if (((bitField0_ & 0x00008000) == 0x00008000) &&
              contrastiveLossParam_ != caffe.Caffe.ContrastiveLossParameter.getDefaultInstance()) {
            contrastiveLossParam_ =
              caffe.Caffe.ContrastiveLossParameter.newBuilder(contrastiveLossParam_).mergeFrom(value).buildPartial();
          } else {
            contrastiveLossParam_ = value;
          }
          onChanged();
        } else {
          contrastiveLossParamBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00008000;
        return this;
      }
      /**
       * <code>optional .caffe.ContrastiveLossParameter contrastive_loss_param = 40;</code>
       */
      public Builder clearContrastiveLossParam() {
        if (contrastiveLossParamBuilder_ == null) {
          contrastiveLossParam_ = caffe.Caffe.ContrastiveLossParameter.getDefaultInstance();
          onChanged();
        } else {
          contrastiveLossParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00008000);
        return this;
      }
      /**
       * <code>optional .caffe.ContrastiveLossParameter contrastive_loss_param = 40;</code>
       */
      public caffe.Caffe.ContrastiveLossParameter.Builder getContrastiveLossParamBuilder() {
        bitField0_ |= 0x00008000;
        onChanged();
        return getContrastiveLossParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.ContrastiveLossParameter contrastive_loss_param = 40;</code>
       */
      public caffe.Caffe.ContrastiveLossParameterOrBuilder getContrastiveLossParamOrBuilder() {
        if (contrastiveLossParamBuilder_ != null) {
          return contrastiveLossParamBuilder_.getMessageOrBuilder();
        } else {
          return contrastiveLossParam_;
        }
      }
      /**
       * <code>optional .caffe.ContrastiveLossParameter contrastive_loss_param = 40;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.ContrastiveLossParameter, caffe.Caffe.ContrastiveLossParameter.Builder, caffe.Caffe.ContrastiveLossParameterOrBuilder> 
          getContrastiveLossParamFieldBuilder() {
        if (contrastiveLossParamBuilder_ == null) {
          contrastiveLossParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.ContrastiveLossParameter, caffe.Caffe.ContrastiveLossParameter.Builder, caffe.Caffe.ContrastiveLossParameterOrBuilder>(
                  contrastiveLossParam_,
                  getParentForChildren(),
                  isClean());
          contrastiveLossParam_ = null;
        }
        return contrastiveLossParamBuilder_;
      }

      // optional .caffe.ConvolutionParameter convolution_param = 10;
      private caffe.Caffe.ConvolutionParameter convolutionParam_ = caffe.Caffe.ConvolutionParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.ConvolutionParameter, caffe.Caffe.ConvolutionParameter.Builder, caffe.Caffe.ConvolutionParameterOrBuilder> convolutionParamBuilder_;
      /**
       * <code>optional .caffe.ConvolutionParameter convolution_param = 10;</code>
       */
      public boolean hasConvolutionParam() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional .caffe.ConvolutionParameter convolution_param = 10;</code>
       */
      public caffe.Caffe.ConvolutionParameter getConvolutionParam() {
        if (convolutionParamBuilder_ == null) {
          return convolutionParam_;
        } else {
          return convolutionParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.ConvolutionParameter convolution_param = 10;</code>
       */
      public Builder setConvolutionParam(caffe.Caffe.ConvolutionParameter value) {
        if (convolutionParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          convolutionParam_ = value;
          onChanged();
        } else {
          convolutionParamBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00010000;
        return this;
      }
      /**
       * <code>optional .caffe.ConvolutionParameter convolution_param = 10;</code>
       */
      public Builder setConvolutionParam(
          caffe.Caffe.ConvolutionParameter.Builder builderForValue) {
        if (convolutionParamBuilder_ == null) {
          convolutionParam_ = builderForValue.build();
          onChanged();
        } else {
          convolutionParamBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00010000;
        return this;
      }
      /**
       * <code>optional .caffe.ConvolutionParameter convolution_param = 10;</code>
       */
      public Builder mergeConvolutionParam(caffe.Caffe.ConvolutionParameter value) {
        if (convolutionParamBuilder_ == null) {
          if (((bitField0_ & 0x00010000) == 0x00010000) &&
              convolutionParam_ != caffe.Caffe.ConvolutionParameter.getDefaultInstance()) {
            convolutionParam_ =
              caffe.Caffe.ConvolutionParameter.newBuilder(convolutionParam_).mergeFrom(value).buildPartial();
          } else {
            convolutionParam_ = value;
          }
          onChanged();
        } else {
          convolutionParamBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00010000;
        return this;
      }
      /**
       * <code>optional .caffe.ConvolutionParameter convolution_param = 10;</code>
       */
      public Builder clearConvolutionParam() {
        if (convolutionParamBuilder_ == null) {
          convolutionParam_ = caffe.Caffe.ConvolutionParameter.getDefaultInstance();
          onChanged();
        } else {
          convolutionParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00010000);
        return this;
      }
      /**
       * <code>optional .caffe.ConvolutionParameter convolution_param = 10;</code>
       */
      public caffe.Caffe.ConvolutionParameter.Builder getConvolutionParamBuilder() {
        bitField0_ |= 0x00010000;
        onChanged();
        return getConvolutionParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.ConvolutionParameter convolution_param = 10;</code>
       */
      public caffe.Caffe.ConvolutionParameterOrBuilder getConvolutionParamOrBuilder() {
        if (convolutionParamBuilder_ != null) {
          return convolutionParamBuilder_.getMessageOrBuilder();
        } else {
          return convolutionParam_;
        }
      }
      /**
       * <code>optional .caffe.ConvolutionParameter convolution_param = 10;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.ConvolutionParameter, caffe.Caffe.ConvolutionParameter.Builder, caffe.Caffe.ConvolutionParameterOrBuilder> 
          getConvolutionParamFieldBuilder() {
        if (convolutionParamBuilder_ == null) {
          convolutionParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.ConvolutionParameter, caffe.Caffe.ConvolutionParameter.Builder, caffe.Caffe.ConvolutionParameterOrBuilder>(
                  convolutionParam_,
                  getParentForChildren(),
                  isClean());
          convolutionParam_ = null;
        }
        return convolutionParamBuilder_;
      }

      // optional .caffe.DataParameter data_param = 11;
      private caffe.Caffe.DataParameter dataParam_ = caffe.Caffe.DataParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.DataParameter, caffe.Caffe.DataParameter.Builder, caffe.Caffe.DataParameterOrBuilder> dataParamBuilder_;
      /**
       * <code>optional .caffe.DataParameter data_param = 11;</code>
       */
      public boolean hasDataParam() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional .caffe.DataParameter data_param = 11;</code>
       */
      public caffe.Caffe.DataParameter getDataParam() {
        if (dataParamBuilder_ == null) {
          return dataParam_;
        } else {
          return dataParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.DataParameter data_param = 11;</code>
       */
      public Builder setDataParam(caffe.Caffe.DataParameter value) {
        if (dataParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          dataParam_ = value;
          onChanged();
        } else {
          dataParamBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00020000;
        return this;
      }
      /**
       * <code>optional .caffe.DataParameter data_param = 11;</code>
       */
      public Builder setDataParam(
          caffe.Caffe.DataParameter.Builder builderForValue) {
        if (dataParamBuilder_ == null) {
          dataParam_ = builderForValue.build();
          onChanged();
        } else {
          dataParamBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00020000;
        return this;
      }
      /**
       * <code>optional .caffe.DataParameter data_param = 11;</code>
       */
      public Builder mergeDataParam(caffe.Caffe.DataParameter value) {
        if (dataParamBuilder_ == null) {
          if (((bitField0_ & 0x00020000) == 0x00020000) &&
              dataParam_ != caffe.Caffe.DataParameter.getDefaultInstance()) {
            dataParam_ =
              caffe.Caffe.DataParameter.newBuilder(dataParam_).mergeFrom(value).buildPartial();
          } else {
            dataParam_ = value;
          }
          onChanged();
        } else {
          dataParamBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00020000;
        return this;
      }
      /**
       * <code>optional .caffe.DataParameter data_param = 11;</code>
       */
      public Builder clearDataParam() {
        if (dataParamBuilder_ == null) {
          dataParam_ = caffe.Caffe.DataParameter.getDefaultInstance();
          onChanged();
        } else {
          dataParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00020000);
        return this;
      }
      /**
       * <code>optional .caffe.DataParameter data_param = 11;</code>
       */
      public caffe.Caffe.DataParameter.Builder getDataParamBuilder() {
        bitField0_ |= 0x00020000;
        onChanged();
        return getDataParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.DataParameter data_param = 11;</code>
       */
      public caffe.Caffe.DataParameterOrBuilder getDataParamOrBuilder() {
        if (dataParamBuilder_ != null) {
          return dataParamBuilder_.getMessageOrBuilder();
        } else {
          return dataParam_;
        }
      }
      /**
       * <code>optional .caffe.DataParameter data_param = 11;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.DataParameter, caffe.Caffe.DataParameter.Builder, caffe.Caffe.DataParameterOrBuilder> 
          getDataParamFieldBuilder() {
        if (dataParamBuilder_ == null) {
          dataParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.DataParameter, caffe.Caffe.DataParameter.Builder, caffe.Caffe.DataParameterOrBuilder>(
                  dataParam_,
                  getParentForChildren(),
                  isClean());
          dataParam_ = null;
        }
        return dataParamBuilder_;
      }

      // optional .caffe.DropoutParameter dropout_param = 12;
      private caffe.Caffe.DropoutParameter dropoutParam_ = caffe.Caffe.DropoutParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.DropoutParameter, caffe.Caffe.DropoutParameter.Builder, caffe.Caffe.DropoutParameterOrBuilder> dropoutParamBuilder_;
      /**
       * <code>optional .caffe.DropoutParameter dropout_param = 12;</code>
       */
      public boolean hasDropoutParam() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional .caffe.DropoutParameter dropout_param = 12;</code>
       */
      public caffe.Caffe.DropoutParameter getDropoutParam() {
        if (dropoutParamBuilder_ == null) {
          return dropoutParam_;
        } else {
          return dropoutParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.DropoutParameter dropout_param = 12;</code>
       */
      public Builder setDropoutParam(caffe.Caffe.DropoutParameter value) {
        if (dropoutParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          dropoutParam_ = value;
          onChanged();
        } else {
          dropoutParamBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00040000;
        return this;
      }
      /**
       * <code>optional .caffe.DropoutParameter dropout_param = 12;</code>
       */
      public Builder setDropoutParam(
          caffe.Caffe.DropoutParameter.Builder builderForValue) {
        if (dropoutParamBuilder_ == null) {
          dropoutParam_ = builderForValue.build();
          onChanged();
        } else {
          dropoutParamBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00040000;
        return this;
      }
      /**
       * <code>optional .caffe.DropoutParameter dropout_param = 12;</code>
       */
      public Builder mergeDropoutParam(caffe.Caffe.DropoutParameter value) {
        if (dropoutParamBuilder_ == null) {
          if (((bitField0_ & 0x00040000) == 0x00040000) &&
              dropoutParam_ != caffe.Caffe.DropoutParameter.getDefaultInstance()) {
            dropoutParam_ =
              caffe.Caffe.DropoutParameter.newBuilder(dropoutParam_).mergeFrom(value).buildPartial();
          } else {
            dropoutParam_ = value;
          }
          onChanged();
        } else {
          dropoutParamBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00040000;
        return this;
      }
      /**
       * <code>optional .caffe.DropoutParameter dropout_param = 12;</code>
       */
      public Builder clearDropoutParam() {
        if (dropoutParamBuilder_ == null) {
          dropoutParam_ = caffe.Caffe.DropoutParameter.getDefaultInstance();
          onChanged();
        } else {
          dropoutParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00040000);
        return this;
      }
      /**
       * <code>optional .caffe.DropoutParameter dropout_param = 12;</code>
       */
      public caffe.Caffe.DropoutParameter.Builder getDropoutParamBuilder() {
        bitField0_ |= 0x00040000;
        onChanged();
        return getDropoutParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.DropoutParameter dropout_param = 12;</code>
       */
      public caffe.Caffe.DropoutParameterOrBuilder getDropoutParamOrBuilder() {
        if (dropoutParamBuilder_ != null) {
          return dropoutParamBuilder_.getMessageOrBuilder();
        } else {
          return dropoutParam_;
        }
      }
      /**
       * <code>optional .caffe.DropoutParameter dropout_param = 12;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.DropoutParameter, caffe.Caffe.DropoutParameter.Builder, caffe.Caffe.DropoutParameterOrBuilder> 
          getDropoutParamFieldBuilder() {
        if (dropoutParamBuilder_ == null) {
          dropoutParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.DropoutParameter, caffe.Caffe.DropoutParameter.Builder, caffe.Caffe.DropoutParameterOrBuilder>(
                  dropoutParam_,
                  getParentForChildren(),
                  isClean());
          dropoutParam_ = null;
        }
        return dropoutParamBuilder_;
      }

      // optional .caffe.DummyDataParameter dummy_data_param = 26;
      private caffe.Caffe.DummyDataParameter dummyDataParam_ = caffe.Caffe.DummyDataParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.DummyDataParameter, caffe.Caffe.DummyDataParameter.Builder, caffe.Caffe.DummyDataParameterOrBuilder> dummyDataParamBuilder_;
      /**
       * <code>optional .caffe.DummyDataParameter dummy_data_param = 26;</code>
       */
      public boolean hasDummyDataParam() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional .caffe.DummyDataParameter dummy_data_param = 26;</code>
       */
      public caffe.Caffe.DummyDataParameter getDummyDataParam() {
        if (dummyDataParamBuilder_ == null) {
          return dummyDataParam_;
        } else {
          return dummyDataParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.DummyDataParameter dummy_data_param = 26;</code>
       */
      public Builder setDummyDataParam(caffe.Caffe.DummyDataParameter value) {
        if (dummyDataParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          dummyDataParam_ = value;
          onChanged();
        } else {
          dummyDataParamBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00080000;
        return this;
      }
      /**
       * <code>optional .caffe.DummyDataParameter dummy_data_param = 26;</code>
       */
      public Builder setDummyDataParam(
          caffe.Caffe.DummyDataParameter.Builder builderForValue) {
        if (dummyDataParamBuilder_ == null) {
          dummyDataParam_ = builderForValue.build();
          onChanged();
        } else {
          dummyDataParamBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00080000;
        return this;
      }
      /**
       * <code>optional .caffe.DummyDataParameter dummy_data_param = 26;</code>
       */
      public Builder mergeDummyDataParam(caffe.Caffe.DummyDataParameter value) {
        if (dummyDataParamBuilder_ == null) {
          if (((bitField0_ & 0x00080000) == 0x00080000) &&
              dummyDataParam_ != caffe.Caffe.DummyDataParameter.getDefaultInstance()) {
            dummyDataParam_ =
              caffe.Caffe.DummyDataParameter.newBuilder(dummyDataParam_).mergeFrom(value).buildPartial();
          } else {
            dummyDataParam_ = value;
          }
          onChanged();
        } else {
          dummyDataParamBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00080000;
        return this;
      }
      /**
       * <code>optional .caffe.DummyDataParameter dummy_data_param = 26;</code>
       */
      public Builder clearDummyDataParam() {
        if (dummyDataParamBuilder_ == null) {
          dummyDataParam_ = caffe.Caffe.DummyDataParameter.getDefaultInstance();
          onChanged();
        } else {
          dummyDataParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00080000);
        return this;
      }
      /**
       * <code>optional .caffe.DummyDataParameter dummy_data_param = 26;</code>
       */
      public caffe.Caffe.DummyDataParameter.Builder getDummyDataParamBuilder() {
        bitField0_ |= 0x00080000;
        onChanged();
        return getDummyDataParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.DummyDataParameter dummy_data_param = 26;</code>
       */
      public caffe.Caffe.DummyDataParameterOrBuilder getDummyDataParamOrBuilder() {
        if (dummyDataParamBuilder_ != null) {
          return dummyDataParamBuilder_.getMessageOrBuilder();
        } else {
          return dummyDataParam_;
        }
      }
      /**
       * <code>optional .caffe.DummyDataParameter dummy_data_param = 26;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.DummyDataParameter, caffe.Caffe.DummyDataParameter.Builder, caffe.Caffe.DummyDataParameterOrBuilder> 
          getDummyDataParamFieldBuilder() {
        if (dummyDataParamBuilder_ == null) {
          dummyDataParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.DummyDataParameter, caffe.Caffe.DummyDataParameter.Builder, caffe.Caffe.DummyDataParameterOrBuilder>(
                  dummyDataParam_,
                  getParentForChildren(),
                  isClean());
          dummyDataParam_ = null;
        }
        return dummyDataParamBuilder_;
      }

      // optional .caffe.EltwiseParameter eltwise_param = 24;
      private caffe.Caffe.EltwiseParameter eltwiseParam_ = caffe.Caffe.EltwiseParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.EltwiseParameter, caffe.Caffe.EltwiseParameter.Builder, caffe.Caffe.EltwiseParameterOrBuilder> eltwiseParamBuilder_;
      /**
       * <code>optional .caffe.EltwiseParameter eltwise_param = 24;</code>
       */
      public boolean hasEltwiseParam() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional .caffe.EltwiseParameter eltwise_param = 24;</code>
       */
      public caffe.Caffe.EltwiseParameter getEltwiseParam() {
        if (eltwiseParamBuilder_ == null) {
          return eltwiseParam_;
        } else {
          return eltwiseParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.EltwiseParameter eltwise_param = 24;</code>
       */
      public Builder setEltwiseParam(caffe.Caffe.EltwiseParameter value) {
        if (eltwiseParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          eltwiseParam_ = value;
          onChanged();
        } else {
          eltwiseParamBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00100000;
        return this;
      }
      /**
       * <code>optional .caffe.EltwiseParameter eltwise_param = 24;</code>
       */
      public Builder setEltwiseParam(
          caffe.Caffe.EltwiseParameter.Builder builderForValue) {
        if (eltwiseParamBuilder_ == null) {
          eltwiseParam_ = builderForValue.build();
          onChanged();
        } else {
          eltwiseParamBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00100000;
        return this;
      }
      /**
       * <code>optional .caffe.EltwiseParameter eltwise_param = 24;</code>
       */
      public Builder mergeEltwiseParam(caffe.Caffe.EltwiseParameter value) {
        if (eltwiseParamBuilder_ == null) {
          if (((bitField0_ & 0x00100000) == 0x00100000) &&
              eltwiseParam_ != caffe.Caffe.EltwiseParameter.getDefaultInstance()) {
            eltwiseParam_ =
              caffe.Caffe.EltwiseParameter.newBuilder(eltwiseParam_).mergeFrom(value).buildPartial();
          } else {
            eltwiseParam_ = value;
          }
          onChanged();
        } else {
          eltwiseParamBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00100000;
        return this;
      }
      /**
       * <code>optional .caffe.EltwiseParameter eltwise_param = 24;</code>
       */
      public Builder clearEltwiseParam() {
        if (eltwiseParamBuilder_ == null) {
          eltwiseParam_ = caffe.Caffe.EltwiseParameter.getDefaultInstance();
          onChanged();
        } else {
          eltwiseParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00100000);
        return this;
      }
      /**
       * <code>optional .caffe.EltwiseParameter eltwise_param = 24;</code>
       */
      public caffe.Caffe.EltwiseParameter.Builder getEltwiseParamBuilder() {
        bitField0_ |= 0x00100000;
        onChanged();
        return getEltwiseParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.EltwiseParameter eltwise_param = 24;</code>
       */
      public caffe.Caffe.EltwiseParameterOrBuilder getEltwiseParamOrBuilder() {
        if (eltwiseParamBuilder_ != null) {
          return eltwiseParamBuilder_.getMessageOrBuilder();
        } else {
          return eltwiseParam_;
        }
      }
      /**
       * <code>optional .caffe.EltwiseParameter eltwise_param = 24;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.EltwiseParameter, caffe.Caffe.EltwiseParameter.Builder, caffe.Caffe.EltwiseParameterOrBuilder> 
          getEltwiseParamFieldBuilder() {
        if (eltwiseParamBuilder_ == null) {
          eltwiseParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.EltwiseParameter, caffe.Caffe.EltwiseParameter.Builder, caffe.Caffe.EltwiseParameterOrBuilder>(
                  eltwiseParam_,
                  getParentForChildren(),
                  isClean());
          eltwiseParam_ = null;
        }
        return eltwiseParamBuilder_;
      }

      // optional .caffe.ExpParameter exp_param = 41;
      private caffe.Caffe.ExpParameter expParam_ = caffe.Caffe.ExpParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.ExpParameter, caffe.Caffe.ExpParameter.Builder, caffe.Caffe.ExpParameterOrBuilder> expParamBuilder_;
      /**
       * <code>optional .caffe.ExpParameter exp_param = 41;</code>
       */
      public boolean hasExpParam() {
        return ((bitField0_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>optional .caffe.ExpParameter exp_param = 41;</code>
       */
      public caffe.Caffe.ExpParameter getExpParam() {
        if (expParamBuilder_ == null) {
          return expParam_;
        } else {
          return expParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.ExpParameter exp_param = 41;</code>
       */
      public Builder setExpParam(caffe.Caffe.ExpParameter value) {
        if (expParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          expParam_ = value;
          onChanged();
        } else {
          expParamBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00200000;
        return this;
      }
      /**
       * <code>optional .caffe.ExpParameter exp_param = 41;</code>
       */
      public Builder setExpParam(
          caffe.Caffe.ExpParameter.Builder builderForValue) {
        if (expParamBuilder_ == null) {
          expParam_ = builderForValue.build();
          onChanged();
        } else {
          expParamBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00200000;
        return this;
      }
      /**
       * <code>optional .caffe.ExpParameter exp_param = 41;</code>
       */
      public Builder mergeExpParam(caffe.Caffe.ExpParameter value) {
        if (expParamBuilder_ == null) {
          if (((bitField0_ & 0x00200000) == 0x00200000) &&
              expParam_ != caffe.Caffe.ExpParameter.getDefaultInstance()) {
            expParam_ =
              caffe.Caffe.ExpParameter.newBuilder(expParam_).mergeFrom(value).buildPartial();
          } else {
            expParam_ = value;
          }
          onChanged();
        } else {
          expParamBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00200000;
        return this;
      }
      /**
       * <code>optional .caffe.ExpParameter exp_param = 41;</code>
       */
      public Builder clearExpParam() {
        if (expParamBuilder_ == null) {
          expParam_ = caffe.Caffe.ExpParameter.getDefaultInstance();
          onChanged();
        } else {
          expParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00200000);
        return this;
      }
      /**
       * <code>optional .caffe.ExpParameter exp_param = 41;</code>
       */
      public caffe.Caffe.ExpParameter.Builder getExpParamBuilder() {
        bitField0_ |= 0x00200000;
        onChanged();
        return getExpParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.ExpParameter exp_param = 41;</code>
       */
      public caffe.Caffe.ExpParameterOrBuilder getExpParamOrBuilder() {
        if (expParamBuilder_ != null) {
          return expParamBuilder_.getMessageOrBuilder();
        } else {
          return expParam_;
        }
      }
      /**
       * <code>optional .caffe.ExpParameter exp_param = 41;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.ExpParameter, caffe.Caffe.ExpParameter.Builder, caffe.Caffe.ExpParameterOrBuilder> 
          getExpParamFieldBuilder() {
        if (expParamBuilder_ == null) {
          expParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.ExpParameter, caffe.Caffe.ExpParameter.Builder, caffe.Caffe.ExpParameterOrBuilder>(
                  expParam_,
                  getParentForChildren(),
                  isClean());
          expParam_ = null;
        }
        return expParamBuilder_;
      }

      // optional .caffe.HDF5DataParameter hdf5_data_param = 13;
      private caffe.Caffe.HDF5DataParameter hdf5DataParam_ = caffe.Caffe.HDF5DataParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.HDF5DataParameter, caffe.Caffe.HDF5DataParameter.Builder, caffe.Caffe.HDF5DataParameterOrBuilder> hdf5DataParamBuilder_;
      /**
       * <code>optional .caffe.HDF5DataParameter hdf5_data_param = 13;</code>
       */
      public boolean hasHdf5DataParam() {
        return ((bitField0_ & 0x00400000) == 0x00400000);
      }
      /**
       * <code>optional .caffe.HDF5DataParameter hdf5_data_param = 13;</code>
       */
      public caffe.Caffe.HDF5DataParameter getHdf5DataParam() {
        if (hdf5DataParamBuilder_ == null) {
          return hdf5DataParam_;
        } else {
          return hdf5DataParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.HDF5DataParameter hdf5_data_param = 13;</code>
       */
      public Builder setHdf5DataParam(caffe.Caffe.HDF5DataParameter value) {
        if (hdf5DataParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          hdf5DataParam_ = value;
          onChanged();
        } else {
          hdf5DataParamBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00400000;
        return this;
      }
      /**
       * <code>optional .caffe.HDF5DataParameter hdf5_data_param = 13;</code>
       */
      public Builder setHdf5DataParam(
          caffe.Caffe.HDF5DataParameter.Builder builderForValue) {
        if (hdf5DataParamBuilder_ == null) {
          hdf5DataParam_ = builderForValue.build();
          onChanged();
        } else {
          hdf5DataParamBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00400000;
        return this;
      }
      /**
       * <code>optional .caffe.HDF5DataParameter hdf5_data_param = 13;</code>
       */
      public Builder mergeHdf5DataParam(caffe.Caffe.HDF5DataParameter value) {
        if (hdf5DataParamBuilder_ == null) {
          if (((bitField0_ & 0x00400000) == 0x00400000) &&
              hdf5DataParam_ != caffe.Caffe.HDF5DataParameter.getDefaultInstance()) {
            hdf5DataParam_ =
              caffe.Caffe.HDF5DataParameter.newBuilder(hdf5DataParam_).mergeFrom(value).buildPartial();
          } else {
            hdf5DataParam_ = value;
          }
          onChanged();
        } else {
          hdf5DataParamBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00400000;
        return this;
      }
      /**
       * <code>optional .caffe.HDF5DataParameter hdf5_data_param = 13;</code>
       */
      public Builder clearHdf5DataParam() {
        if (hdf5DataParamBuilder_ == null) {
          hdf5DataParam_ = caffe.Caffe.HDF5DataParameter.getDefaultInstance();
          onChanged();
        } else {
          hdf5DataParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00400000);
        return this;
      }
      /**
       * <code>optional .caffe.HDF5DataParameter hdf5_data_param = 13;</code>
       */
      public caffe.Caffe.HDF5DataParameter.Builder getHdf5DataParamBuilder() {
        bitField0_ |= 0x00400000;
        onChanged();
        return getHdf5DataParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.HDF5DataParameter hdf5_data_param = 13;</code>
       */
      public caffe.Caffe.HDF5DataParameterOrBuilder getHdf5DataParamOrBuilder() {
        if (hdf5DataParamBuilder_ != null) {
          return hdf5DataParamBuilder_.getMessageOrBuilder();
        } else {
          return hdf5DataParam_;
        }
      }
      /**
       * <code>optional .caffe.HDF5DataParameter hdf5_data_param = 13;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.HDF5DataParameter, caffe.Caffe.HDF5DataParameter.Builder, caffe.Caffe.HDF5DataParameterOrBuilder> 
          getHdf5DataParamFieldBuilder() {
        if (hdf5DataParamBuilder_ == null) {
          hdf5DataParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.HDF5DataParameter, caffe.Caffe.HDF5DataParameter.Builder, caffe.Caffe.HDF5DataParameterOrBuilder>(
                  hdf5DataParam_,
                  getParentForChildren(),
                  isClean());
          hdf5DataParam_ = null;
        }
        return hdf5DataParamBuilder_;
      }

      // optional .caffe.HDF5OutputParameter hdf5_output_param = 14;
      private caffe.Caffe.HDF5OutputParameter hdf5OutputParam_ = caffe.Caffe.HDF5OutputParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.HDF5OutputParameter, caffe.Caffe.HDF5OutputParameter.Builder, caffe.Caffe.HDF5OutputParameterOrBuilder> hdf5OutputParamBuilder_;
      /**
       * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 14;</code>
       */
      public boolean hasHdf5OutputParam() {
        return ((bitField0_ & 0x00800000) == 0x00800000);
      }
      /**
       * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 14;</code>
       */
      public caffe.Caffe.HDF5OutputParameter getHdf5OutputParam() {
        if (hdf5OutputParamBuilder_ == null) {
          return hdf5OutputParam_;
        } else {
          return hdf5OutputParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 14;</code>
       */
      public Builder setHdf5OutputParam(caffe.Caffe.HDF5OutputParameter value) {
        if (hdf5OutputParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          hdf5OutputParam_ = value;
          onChanged();
        } else {
          hdf5OutputParamBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00800000;
        return this;
      }
      /**
       * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 14;</code>
       */
      public Builder setHdf5OutputParam(
          caffe.Caffe.HDF5OutputParameter.Builder builderForValue) {
        if (hdf5OutputParamBuilder_ == null) {
          hdf5OutputParam_ = builderForValue.build();
          onChanged();
        } else {
          hdf5OutputParamBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00800000;
        return this;
      }
      /**
       * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 14;</code>
       */
      public Builder mergeHdf5OutputParam(caffe.Caffe.HDF5OutputParameter value) {
        if (hdf5OutputParamBuilder_ == null) {
          if (((bitField0_ & 0x00800000) == 0x00800000) &&
              hdf5OutputParam_ != caffe.Caffe.HDF5OutputParameter.getDefaultInstance()) {
            hdf5OutputParam_ =
              caffe.Caffe.HDF5OutputParameter.newBuilder(hdf5OutputParam_).mergeFrom(value).buildPartial();
          } else {
            hdf5OutputParam_ = value;
          }
          onChanged();
        } else {
          hdf5OutputParamBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00800000;
        return this;
      }
      /**
       * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 14;</code>
       */
      public Builder clearHdf5OutputParam() {
        if (hdf5OutputParamBuilder_ == null) {
          hdf5OutputParam_ = caffe.Caffe.HDF5OutputParameter.getDefaultInstance();
          onChanged();
        } else {
          hdf5OutputParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00800000);
        return this;
      }
      /**
       * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 14;</code>
       */
      public caffe.Caffe.HDF5OutputParameter.Builder getHdf5OutputParamBuilder() {
        bitField0_ |= 0x00800000;
        onChanged();
        return getHdf5OutputParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 14;</code>
       */
      public caffe.Caffe.HDF5OutputParameterOrBuilder getHdf5OutputParamOrBuilder() {
        if (hdf5OutputParamBuilder_ != null) {
          return hdf5OutputParamBuilder_.getMessageOrBuilder();
        } else {
          return hdf5OutputParam_;
        }
      }
      /**
       * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 14;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.HDF5OutputParameter, caffe.Caffe.HDF5OutputParameter.Builder, caffe.Caffe.HDF5OutputParameterOrBuilder> 
          getHdf5OutputParamFieldBuilder() {
        if (hdf5OutputParamBuilder_ == null) {
          hdf5OutputParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.HDF5OutputParameter, caffe.Caffe.HDF5OutputParameter.Builder, caffe.Caffe.HDF5OutputParameterOrBuilder>(
                  hdf5OutputParam_,
                  getParentForChildren(),
                  isClean());
          hdf5OutputParam_ = null;
        }
        return hdf5OutputParamBuilder_;
      }

      // optional .caffe.HingeLossParameter hinge_loss_param = 29;
      private caffe.Caffe.HingeLossParameter hingeLossParam_ = caffe.Caffe.HingeLossParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.HingeLossParameter, caffe.Caffe.HingeLossParameter.Builder, caffe.Caffe.HingeLossParameterOrBuilder> hingeLossParamBuilder_;
      /**
       * <code>optional .caffe.HingeLossParameter hinge_loss_param = 29;</code>
       */
      public boolean hasHingeLossParam() {
        return ((bitField0_ & 0x01000000) == 0x01000000);
      }
      /**
       * <code>optional .caffe.HingeLossParameter hinge_loss_param = 29;</code>
       */
      public caffe.Caffe.HingeLossParameter getHingeLossParam() {
        if (hingeLossParamBuilder_ == null) {
          return hingeLossParam_;
        } else {
          return hingeLossParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.HingeLossParameter hinge_loss_param = 29;</code>
       */
      public Builder setHingeLossParam(caffe.Caffe.HingeLossParameter value) {
        if (hingeLossParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          hingeLossParam_ = value;
          onChanged();
        } else {
          hingeLossParamBuilder_.setMessage(value);
        }
        bitField0_ |= 0x01000000;
        return this;
      }
      /**
       * <code>optional .caffe.HingeLossParameter hinge_loss_param = 29;</code>
       */
      public Builder setHingeLossParam(
          caffe.Caffe.HingeLossParameter.Builder builderForValue) {
        if (hingeLossParamBuilder_ == null) {
          hingeLossParam_ = builderForValue.build();
          onChanged();
        } else {
          hingeLossParamBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x01000000;
        return this;
      }
      /**
       * <code>optional .caffe.HingeLossParameter hinge_loss_param = 29;</code>
       */
      public Builder mergeHingeLossParam(caffe.Caffe.HingeLossParameter value) {
        if (hingeLossParamBuilder_ == null) {
          if (((bitField0_ & 0x01000000) == 0x01000000) &&
              hingeLossParam_ != caffe.Caffe.HingeLossParameter.getDefaultInstance()) {
            hingeLossParam_ =
              caffe.Caffe.HingeLossParameter.newBuilder(hingeLossParam_).mergeFrom(value).buildPartial();
          } else {
            hingeLossParam_ = value;
          }
          onChanged();
        } else {
          hingeLossParamBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x01000000;
        return this;
      }
      /**
       * <code>optional .caffe.HingeLossParameter hinge_loss_param = 29;</code>
       */
      public Builder clearHingeLossParam() {
        if (hingeLossParamBuilder_ == null) {
          hingeLossParam_ = caffe.Caffe.HingeLossParameter.getDefaultInstance();
          onChanged();
        } else {
          hingeLossParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x01000000);
        return this;
      }
      /**
       * <code>optional .caffe.HingeLossParameter hinge_loss_param = 29;</code>
       */
      public caffe.Caffe.HingeLossParameter.Builder getHingeLossParamBuilder() {
        bitField0_ |= 0x01000000;
        onChanged();
        return getHingeLossParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.HingeLossParameter hinge_loss_param = 29;</code>
       */
      public caffe.Caffe.HingeLossParameterOrBuilder getHingeLossParamOrBuilder() {
        if (hingeLossParamBuilder_ != null) {
          return hingeLossParamBuilder_.getMessageOrBuilder();
        } else {
          return hingeLossParam_;
        }
      }
      /**
       * <code>optional .caffe.HingeLossParameter hinge_loss_param = 29;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.HingeLossParameter, caffe.Caffe.HingeLossParameter.Builder, caffe.Caffe.HingeLossParameterOrBuilder> 
          getHingeLossParamFieldBuilder() {
        if (hingeLossParamBuilder_ == null) {
          hingeLossParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.HingeLossParameter, caffe.Caffe.HingeLossParameter.Builder, caffe.Caffe.HingeLossParameterOrBuilder>(
                  hingeLossParam_,
                  getParentForChildren(),
                  isClean());
          hingeLossParam_ = null;
        }
        return hingeLossParamBuilder_;
      }

      // optional .caffe.ImageDataParameter image_data_param = 15;
      private caffe.Caffe.ImageDataParameter imageDataParam_ = caffe.Caffe.ImageDataParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.ImageDataParameter, caffe.Caffe.ImageDataParameter.Builder, caffe.Caffe.ImageDataParameterOrBuilder> imageDataParamBuilder_;
      /**
       * <code>optional .caffe.ImageDataParameter image_data_param = 15;</code>
       */
      public boolean hasImageDataParam() {
        return ((bitField0_ & 0x02000000) == 0x02000000);
      }
      /**
       * <code>optional .caffe.ImageDataParameter image_data_param = 15;</code>
       */
      public caffe.Caffe.ImageDataParameter getImageDataParam() {
        if (imageDataParamBuilder_ == null) {
          return imageDataParam_;
        } else {
          return imageDataParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.ImageDataParameter image_data_param = 15;</code>
       */
      public Builder setImageDataParam(caffe.Caffe.ImageDataParameter value) {
        if (imageDataParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          imageDataParam_ = value;
          onChanged();
        } else {
          imageDataParamBuilder_.setMessage(value);
        }
        bitField0_ |= 0x02000000;
        return this;
      }
      /**
       * <code>optional .caffe.ImageDataParameter image_data_param = 15;</code>
       */
      public Builder setImageDataParam(
          caffe.Caffe.ImageDataParameter.Builder builderForValue) {
        if (imageDataParamBuilder_ == null) {
          imageDataParam_ = builderForValue.build();
          onChanged();
        } else {
          imageDataParamBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x02000000;
        return this;
      }
      /**
       * <code>optional .caffe.ImageDataParameter image_data_param = 15;</code>
       */
      public Builder mergeImageDataParam(caffe.Caffe.ImageDataParameter value) {
        if (imageDataParamBuilder_ == null) {
          if (((bitField0_ & 0x02000000) == 0x02000000) &&
              imageDataParam_ != caffe.Caffe.ImageDataParameter.getDefaultInstance()) {
            imageDataParam_ =
              caffe.Caffe.ImageDataParameter.newBuilder(imageDataParam_).mergeFrom(value).buildPartial();
          } else {
            imageDataParam_ = value;
          }
          onChanged();
        } else {
          imageDataParamBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x02000000;
        return this;
      }
      /**
       * <code>optional .caffe.ImageDataParameter image_data_param = 15;</code>
       */
      public Builder clearImageDataParam() {
        if (imageDataParamBuilder_ == null) {
          imageDataParam_ = caffe.Caffe.ImageDataParameter.getDefaultInstance();
          onChanged();
        } else {
          imageDataParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x02000000);
        return this;
      }
      /**
       * <code>optional .caffe.ImageDataParameter image_data_param = 15;</code>
       */
      public caffe.Caffe.ImageDataParameter.Builder getImageDataParamBuilder() {
        bitField0_ |= 0x02000000;
        onChanged();
        return getImageDataParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.ImageDataParameter image_data_param = 15;</code>
       */
      public caffe.Caffe.ImageDataParameterOrBuilder getImageDataParamOrBuilder() {
        if (imageDataParamBuilder_ != null) {
          return imageDataParamBuilder_.getMessageOrBuilder();
        } else {
          return imageDataParam_;
        }
      }
      /**
       * <code>optional .caffe.ImageDataParameter image_data_param = 15;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.ImageDataParameter, caffe.Caffe.ImageDataParameter.Builder, caffe.Caffe.ImageDataParameterOrBuilder> 
          getImageDataParamFieldBuilder() {
        if (imageDataParamBuilder_ == null) {
          imageDataParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.ImageDataParameter, caffe.Caffe.ImageDataParameter.Builder, caffe.Caffe.ImageDataParameterOrBuilder>(
                  imageDataParam_,
                  getParentForChildren(),
                  isClean());
          imageDataParam_ = null;
        }
        return imageDataParamBuilder_;
      }

      // optional .caffe.InfogainLossParameter infogain_loss_param = 16;
      private caffe.Caffe.InfogainLossParameter infogainLossParam_ = caffe.Caffe.InfogainLossParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.InfogainLossParameter, caffe.Caffe.InfogainLossParameter.Builder, caffe.Caffe.InfogainLossParameterOrBuilder> infogainLossParamBuilder_;
      /**
       * <code>optional .caffe.InfogainLossParameter infogain_loss_param = 16;</code>
       */
      public boolean hasInfogainLossParam() {
        return ((bitField0_ & 0x04000000) == 0x04000000);
      }
      /**
       * <code>optional .caffe.InfogainLossParameter infogain_loss_param = 16;</code>
       */
      public caffe.Caffe.InfogainLossParameter getInfogainLossParam() {
        if (infogainLossParamBuilder_ == null) {
          return infogainLossParam_;
        } else {
          return infogainLossParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.InfogainLossParameter infogain_loss_param = 16;</code>
       */
      public Builder setInfogainLossParam(caffe.Caffe.InfogainLossParameter value) {
        if (infogainLossParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          infogainLossParam_ = value;
          onChanged();
        } else {
          infogainLossParamBuilder_.setMessage(value);
        }
        bitField0_ |= 0x04000000;
        return this;
      }
      /**
       * <code>optional .caffe.InfogainLossParameter infogain_loss_param = 16;</code>
       */
      public Builder setInfogainLossParam(
          caffe.Caffe.InfogainLossParameter.Builder builderForValue) {
        if (infogainLossParamBuilder_ == null) {
          infogainLossParam_ = builderForValue.build();
          onChanged();
        } else {
          infogainLossParamBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x04000000;
        return this;
      }
      /**
       * <code>optional .caffe.InfogainLossParameter infogain_loss_param = 16;</code>
       */
      public Builder mergeInfogainLossParam(caffe.Caffe.InfogainLossParameter value) {
        if (infogainLossParamBuilder_ == null) {
          if (((bitField0_ & 0x04000000) == 0x04000000) &&
              infogainLossParam_ != caffe.Caffe.InfogainLossParameter.getDefaultInstance()) {
            infogainLossParam_ =
              caffe.Caffe.InfogainLossParameter.newBuilder(infogainLossParam_).mergeFrom(value).buildPartial();
          } else {
            infogainLossParam_ = value;
          }
          onChanged();
        } else {
          infogainLossParamBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x04000000;
        return this;
      }
      /**
       * <code>optional .caffe.InfogainLossParameter infogain_loss_param = 16;</code>
       */
      public Builder clearInfogainLossParam() {
        if (infogainLossParamBuilder_ == null) {
          infogainLossParam_ = caffe.Caffe.InfogainLossParameter.getDefaultInstance();
          onChanged();
        } else {
          infogainLossParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x04000000);
        return this;
      }
      /**
       * <code>optional .caffe.InfogainLossParameter infogain_loss_param = 16;</code>
       */
      public caffe.Caffe.InfogainLossParameter.Builder getInfogainLossParamBuilder() {
        bitField0_ |= 0x04000000;
        onChanged();
        return getInfogainLossParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.InfogainLossParameter infogain_loss_param = 16;</code>
       */
      public caffe.Caffe.InfogainLossParameterOrBuilder getInfogainLossParamOrBuilder() {
        if (infogainLossParamBuilder_ != null) {
          return infogainLossParamBuilder_.getMessageOrBuilder();
        } else {
          return infogainLossParam_;
        }
      }
      /**
       * <code>optional .caffe.InfogainLossParameter infogain_loss_param = 16;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.InfogainLossParameter, caffe.Caffe.InfogainLossParameter.Builder, caffe.Caffe.InfogainLossParameterOrBuilder> 
          getInfogainLossParamFieldBuilder() {
        if (infogainLossParamBuilder_ == null) {
          infogainLossParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.InfogainLossParameter, caffe.Caffe.InfogainLossParameter.Builder, caffe.Caffe.InfogainLossParameterOrBuilder>(
                  infogainLossParam_,
                  getParentForChildren(),
                  isClean());
          infogainLossParam_ = null;
        }
        return infogainLossParamBuilder_;
      }

      // optional .caffe.InnerProductParameter inner_product_param = 17;
      private caffe.Caffe.InnerProductParameter innerProductParam_ = caffe.Caffe.InnerProductParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.InnerProductParameter, caffe.Caffe.InnerProductParameter.Builder, caffe.Caffe.InnerProductParameterOrBuilder> innerProductParamBuilder_;
      /**
       * <code>optional .caffe.InnerProductParameter inner_product_param = 17;</code>
       */
      public boolean hasInnerProductParam() {
        return ((bitField0_ & 0x08000000) == 0x08000000);
      }
      /**
       * <code>optional .caffe.InnerProductParameter inner_product_param = 17;</code>
       */
      public caffe.Caffe.InnerProductParameter getInnerProductParam() {
        if (innerProductParamBuilder_ == null) {
          return innerProductParam_;
        } else {
          return innerProductParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.InnerProductParameter inner_product_param = 17;</code>
       */
      public Builder setInnerProductParam(caffe.Caffe.InnerProductParameter value) {
        if (innerProductParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          innerProductParam_ = value;
          onChanged();
        } else {
          innerProductParamBuilder_.setMessage(value);
        }
        bitField0_ |= 0x08000000;
        return this;
      }
      /**
       * <code>optional .caffe.InnerProductParameter inner_product_param = 17;</code>
       */
      public Builder setInnerProductParam(
          caffe.Caffe.InnerProductParameter.Builder builderForValue) {
        if (innerProductParamBuilder_ == null) {
          innerProductParam_ = builderForValue.build();
          onChanged();
        } else {
          innerProductParamBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x08000000;
        return this;
      }
      /**
       * <code>optional .caffe.InnerProductParameter inner_product_param = 17;</code>
       */
      public Builder mergeInnerProductParam(caffe.Caffe.InnerProductParameter value) {
        if (innerProductParamBuilder_ == null) {
          if (((bitField0_ & 0x08000000) == 0x08000000) &&
              innerProductParam_ != caffe.Caffe.InnerProductParameter.getDefaultInstance()) {
            innerProductParam_ =
              caffe.Caffe.InnerProductParameter.newBuilder(innerProductParam_).mergeFrom(value).buildPartial();
          } else {
            innerProductParam_ = value;
          }
          onChanged();
        } else {
          innerProductParamBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x08000000;
        return this;
      }
      /**
       * <code>optional .caffe.InnerProductParameter inner_product_param = 17;</code>
       */
      public Builder clearInnerProductParam() {
        if (innerProductParamBuilder_ == null) {
          innerProductParam_ = caffe.Caffe.InnerProductParameter.getDefaultInstance();
          onChanged();
        } else {
          innerProductParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x08000000);
        return this;
      }
      /**
       * <code>optional .caffe.InnerProductParameter inner_product_param = 17;</code>
       */
      public caffe.Caffe.InnerProductParameter.Builder getInnerProductParamBuilder() {
        bitField0_ |= 0x08000000;
        onChanged();
        return getInnerProductParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.InnerProductParameter inner_product_param = 17;</code>
       */
      public caffe.Caffe.InnerProductParameterOrBuilder getInnerProductParamOrBuilder() {
        if (innerProductParamBuilder_ != null) {
          return innerProductParamBuilder_.getMessageOrBuilder();
        } else {
          return innerProductParam_;
        }
      }
      /**
       * <code>optional .caffe.InnerProductParameter inner_product_param = 17;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.InnerProductParameter, caffe.Caffe.InnerProductParameter.Builder, caffe.Caffe.InnerProductParameterOrBuilder> 
          getInnerProductParamFieldBuilder() {
        if (innerProductParamBuilder_ == null) {
          innerProductParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.InnerProductParameter, caffe.Caffe.InnerProductParameter.Builder, caffe.Caffe.InnerProductParameterOrBuilder>(
                  innerProductParam_,
                  getParentForChildren(),
                  isClean());
          innerProductParam_ = null;
        }
        return innerProductParamBuilder_;
      }

      // optional .caffe.LRNParameter lrn_param = 18;
      private caffe.Caffe.LRNParameter lrnParam_ = caffe.Caffe.LRNParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.LRNParameter, caffe.Caffe.LRNParameter.Builder, caffe.Caffe.LRNParameterOrBuilder> lrnParamBuilder_;
      /**
       * <code>optional .caffe.LRNParameter lrn_param = 18;</code>
       */
      public boolean hasLrnParam() {
        return ((bitField0_ & 0x10000000) == 0x10000000);
      }
      /**
       * <code>optional .caffe.LRNParameter lrn_param = 18;</code>
       */
      public caffe.Caffe.LRNParameter getLrnParam() {
        if (lrnParamBuilder_ == null) {
          return lrnParam_;
        } else {
          return lrnParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.LRNParameter lrn_param = 18;</code>
       */
      public Builder setLrnParam(caffe.Caffe.LRNParameter value) {
        if (lrnParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          lrnParam_ = value;
          onChanged();
        } else {
          lrnParamBuilder_.setMessage(value);
        }
        bitField0_ |= 0x10000000;
        return this;
      }
      /**
       * <code>optional .caffe.LRNParameter lrn_param = 18;</code>
       */
      public Builder setLrnParam(
          caffe.Caffe.LRNParameter.Builder builderForValue) {
        if (lrnParamBuilder_ == null) {
          lrnParam_ = builderForValue.build();
          onChanged();
        } else {
          lrnParamBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x10000000;
        return this;
      }
      /**
       * <code>optional .caffe.LRNParameter lrn_param = 18;</code>
       */
      public Builder mergeLrnParam(caffe.Caffe.LRNParameter value) {
        if (lrnParamBuilder_ == null) {
          if (((bitField0_ & 0x10000000) == 0x10000000) &&
              lrnParam_ != caffe.Caffe.LRNParameter.getDefaultInstance()) {
            lrnParam_ =
              caffe.Caffe.LRNParameter.newBuilder(lrnParam_).mergeFrom(value).buildPartial();
          } else {
            lrnParam_ = value;
          }
          onChanged();
        } else {
          lrnParamBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x10000000;
        return this;
      }
      /**
       * <code>optional .caffe.LRNParameter lrn_param = 18;</code>
       */
      public Builder clearLrnParam() {
        if (lrnParamBuilder_ == null) {
          lrnParam_ = caffe.Caffe.LRNParameter.getDefaultInstance();
          onChanged();
        } else {
          lrnParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x10000000);
        return this;
      }
      /**
       * <code>optional .caffe.LRNParameter lrn_param = 18;</code>
       */
      public caffe.Caffe.LRNParameter.Builder getLrnParamBuilder() {
        bitField0_ |= 0x10000000;
        onChanged();
        return getLrnParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.LRNParameter lrn_param = 18;</code>
       */
      public caffe.Caffe.LRNParameterOrBuilder getLrnParamOrBuilder() {
        if (lrnParamBuilder_ != null) {
          return lrnParamBuilder_.getMessageOrBuilder();
        } else {
          return lrnParam_;
        }
      }
      /**
       * <code>optional .caffe.LRNParameter lrn_param = 18;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.LRNParameter, caffe.Caffe.LRNParameter.Builder, caffe.Caffe.LRNParameterOrBuilder> 
          getLrnParamFieldBuilder() {
        if (lrnParamBuilder_ == null) {
          lrnParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.LRNParameter, caffe.Caffe.LRNParameter.Builder, caffe.Caffe.LRNParameterOrBuilder>(
                  lrnParam_,
                  getParentForChildren(),
                  isClean());
          lrnParam_ = null;
        }
        return lrnParamBuilder_;
      }

      // optional .caffe.MemoryDataParameter memory_data_param = 22;
      private caffe.Caffe.MemoryDataParameter memoryDataParam_ = caffe.Caffe.MemoryDataParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.MemoryDataParameter, caffe.Caffe.MemoryDataParameter.Builder, caffe.Caffe.MemoryDataParameterOrBuilder> memoryDataParamBuilder_;
      /**
       * <code>optional .caffe.MemoryDataParameter memory_data_param = 22;</code>
       */
      public boolean hasMemoryDataParam() {
        return ((bitField0_ & 0x20000000) == 0x20000000);
      }
      /**
       * <code>optional .caffe.MemoryDataParameter memory_data_param = 22;</code>
       */
      public caffe.Caffe.MemoryDataParameter getMemoryDataParam() {
        if (memoryDataParamBuilder_ == null) {
          return memoryDataParam_;
        } else {
          return memoryDataParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.MemoryDataParameter memory_data_param = 22;</code>
       */
      public Builder setMemoryDataParam(caffe.Caffe.MemoryDataParameter value) {
        if (memoryDataParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          memoryDataParam_ = value;
          onChanged();
        } else {
          memoryDataParamBuilder_.setMessage(value);
        }
        bitField0_ |= 0x20000000;
        return this;
      }
      /**
       * <code>optional .caffe.MemoryDataParameter memory_data_param = 22;</code>
       */
      public Builder setMemoryDataParam(
          caffe.Caffe.MemoryDataParameter.Builder builderForValue) {
        if (memoryDataParamBuilder_ == null) {
          memoryDataParam_ = builderForValue.build();
          onChanged();
        } else {
          memoryDataParamBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x20000000;
        return this;
      }
      /**
       * <code>optional .caffe.MemoryDataParameter memory_data_param = 22;</code>
       */
      public Builder mergeMemoryDataParam(caffe.Caffe.MemoryDataParameter value) {
        if (memoryDataParamBuilder_ == null) {
          if (((bitField0_ & 0x20000000) == 0x20000000) &&
              memoryDataParam_ != caffe.Caffe.MemoryDataParameter.getDefaultInstance()) {
            memoryDataParam_ =
              caffe.Caffe.MemoryDataParameter.newBuilder(memoryDataParam_).mergeFrom(value).buildPartial();
          } else {
            memoryDataParam_ = value;
          }
          onChanged();
        } else {
          memoryDataParamBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x20000000;
        return this;
      }
      /**
       * <code>optional .caffe.MemoryDataParameter memory_data_param = 22;</code>
       */
      public Builder clearMemoryDataParam() {
        if (memoryDataParamBuilder_ == null) {
          memoryDataParam_ = caffe.Caffe.MemoryDataParameter.getDefaultInstance();
          onChanged();
        } else {
          memoryDataParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x20000000);
        return this;
      }
      /**
       * <code>optional .caffe.MemoryDataParameter memory_data_param = 22;</code>
       */
      public caffe.Caffe.MemoryDataParameter.Builder getMemoryDataParamBuilder() {
        bitField0_ |= 0x20000000;
        onChanged();
        return getMemoryDataParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.MemoryDataParameter memory_data_param = 22;</code>
       */
      public caffe.Caffe.MemoryDataParameterOrBuilder getMemoryDataParamOrBuilder() {
        if (memoryDataParamBuilder_ != null) {
          return memoryDataParamBuilder_.getMessageOrBuilder();
        } else {
          return memoryDataParam_;
        }
      }
      /**
       * <code>optional .caffe.MemoryDataParameter memory_data_param = 22;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.MemoryDataParameter, caffe.Caffe.MemoryDataParameter.Builder, caffe.Caffe.MemoryDataParameterOrBuilder> 
          getMemoryDataParamFieldBuilder() {
        if (memoryDataParamBuilder_ == null) {
          memoryDataParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.MemoryDataParameter, caffe.Caffe.MemoryDataParameter.Builder, caffe.Caffe.MemoryDataParameterOrBuilder>(
                  memoryDataParam_,
                  getParentForChildren(),
                  isClean());
          memoryDataParam_ = null;
        }
        return memoryDataParamBuilder_;
      }

      // optional .caffe.MVNParameter mvn_param = 34;
      private caffe.Caffe.MVNParameter mvnParam_ = caffe.Caffe.MVNParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.MVNParameter, caffe.Caffe.MVNParameter.Builder, caffe.Caffe.MVNParameterOrBuilder> mvnParamBuilder_;
      /**
       * <code>optional .caffe.MVNParameter mvn_param = 34;</code>
       */
      public boolean hasMvnParam() {
        return ((bitField0_ & 0x40000000) == 0x40000000);
      }
      /**
       * <code>optional .caffe.MVNParameter mvn_param = 34;</code>
       */
      public caffe.Caffe.MVNParameter getMvnParam() {
        if (mvnParamBuilder_ == null) {
          return mvnParam_;
        } else {
          return mvnParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.MVNParameter mvn_param = 34;</code>
       */
      public Builder setMvnParam(caffe.Caffe.MVNParameter value) {
        if (mvnParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mvnParam_ = value;
          onChanged();
        } else {
          mvnParamBuilder_.setMessage(value);
        }
        bitField0_ |= 0x40000000;
        return this;
      }
      /**
       * <code>optional .caffe.MVNParameter mvn_param = 34;</code>
       */
      public Builder setMvnParam(
          caffe.Caffe.MVNParameter.Builder builderForValue) {
        if (mvnParamBuilder_ == null) {
          mvnParam_ = builderForValue.build();
          onChanged();
        } else {
          mvnParamBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x40000000;
        return this;
      }
      /**
       * <code>optional .caffe.MVNParameter mvn_param = 34;</code>
       */
      public Builder mergeMvnParam(caffe.Caffe.MVNParameter value) {
        if (mvnParamBuilder_ == null) {
          if (((bitField0_ & 0x40000000) == 0x40000000) &&
              mvnParam_ != caffe.Caffe.MVNParameter.getDefaultInstance()) {
            mvnParam_ =
              caffe.Caffe.MVNParameter.newBuilder(mvnParam_).mergeFrom(value).buildPartial();
          } else {
            mvnParam_ = value;
          }
          onChanged();
        } else {
          mvnParamBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x40000000;
        return this;
      }
      /**
       * <code>optional .caffe.MVNParameter mvn_param = 34;</code>
       */
      public Builder clearMvnParam() {
        if (mvnParamBuilder_ == null) {
          mvnParam_ = caffe.Caffe.MVNParameter.getDefaultInstance();
          onChanged();
        } else {
          mvnParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x40000000);
        return this;
      }
      /**
       * <code>optional .caffe.MVNParameter mvn_param = 34;</code>
       */
      public caffe.Caffe.MVNParameter.Builder getMvnParamBuilder() {
        bitField0_ |= 0x40000000;
        onChanged();
        return getMvnParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.MVNParameter mvn_param = 34;</code>
       */
      public caffe.Caffe.MVNParameterOrBuilder getMvnParamOrBuilder() {
        if (mvnParamBuilder_ != null) {
          return mvnParamBuilder_.getMessageOrBuilder();
        } else {
          return mvnParam_;
        }
      }
      /**
       * <code>optional .caffe.MVNParameter mvn_param = 34;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.MVNParameter, caffe.Caffe.MVNParameter.Builder, caffe.Caffe.MVNParameterOrBuilder> 
          getMvnParamFieldBuilder() {
        if (mvnParamBuilder_ == null) {
          mvnParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.MVNParameter, caffe.Caffe.MVNParameter.Builder, caffe.Caffe.MVNParameterOrBuilder>(
                  mvnParam_,
                  getParentForChildren(),
                  isClean());
          mvnParam_ = null;
        }
        return mvnParamBuilder_;
      }

      // optional .caffe.PoolingParameter pooling_param = 19;
      private caffe.Caffe.PoolingParameter poolingParam_ = caffe.Caffe.PoolingParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.PoolingParameter, caffe.Caffe.PoolingParameter.Builder, caffe.Caffe.PoolingParameterOrBuilder> poolingParamBuilder_;
      /**
       * <code>optional .caffe.PoolingParameter pooling_param = 19;</code>
       */
      public boolean hasPoolingParam() {
        return ((bitField0_ & 0x80000000) == 0x80000000);
      }
      /**
       * <code>optional .caffe.PoolingParameter pooling_param = 19;</code>
       */
      public caffe.Caffe.PoolingParameter getPoolingParam() {
        if (poolingParamBuilder_ == null) {
          return poolingParam_;
        } else {
          return poolingParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.PoolingParameter pooling_param = 19;</code>
       */
      public Builder setPoolingParam(caffe.Caffe.PoolingParameter value) {
        if (poolingParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          poolingParam_ = value;
          onChanged();
        } else {
          poolingParamBuilder_.setMessage(value);
        }
        bitField0_ |= 0x80000000;
        return this;
      }
      /**
       * <code>optional .caffe.PoolingParameter pooling_param = 19;</code>
       */
      public Builder setPoolingParam(
          caffe.Caffe.PoolingParameter.Builder builderForValue) {
        if (poolingParamBuilder_ == null) {
          poolingParam_ = builderForValue.build();
          onChanged();
        } else {
          poolingParamBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x80000000;
        return this;
      }
      /**
       * <code>optional .caffe.PoolingParameter pooling_param = 19;</code>
       */
      public Builder mergePoolingParam(caffe.Caffe.PoolingParameter value) {
        if (poolingParamBuilder_ == null) {
          if (((bitField0_ & 0x80000000) == 0x80000000) &&
              poolingParam_ != caffe.Caffe.PoolingParameter.getDefaultInstance()) {
            poolingParam_ =
              caffe.Caffe.PoolingParameter.newBuilder(poolingParam_).mergeFrom(value).buildPartial();
          } else {
            poolingParam_ = value;
          }
          onChanged();
        } else {
          poolingParamBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x80000000;
        return this;
      }
      /**
       * <code>optional .caffe.PoolingParameter pooling_param = 19;</code>
       */
      public Builder clearPoolingParam() {
        if (poolingParamBuilder_ == null) {
          poolingParam_ = caffe.Caffe.PoolingParameter.getDefaultInstance();
          onChanged();
        } else {
          poolingParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x80000000);
        return this;
      }
      /**
       * <code>optional .caffe.PoolingParameter pooling_param = 19;</code>
       */
      public caffe.Caffe.PoolingParameter.Builder getPoolingParamBuilder() {
        bitField0_ |= 0x80000000;
        onChanged();
        return getPoolingParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.PoolingParameter pooling_param = 19;</code>
       */
      public caffe.Caffe.PoolingParameterOrBuilder getPoolingParamOrBuilder() {
        if (poolingParamBuilder_ != null) {
          return poolingParamBuilder_.getMessageOrBuilder();
        } else {
          return poolingParam_;
        }
      }
      /**
       * <code>optional .caffe.PoolingParameter pooling_param = 19;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.PoolingParameter, caffe.Caffe.PoolingParameter.Builder, caffe.Caffe.PoolingParameterOrBuilder> 
          getPoolingParamFieldBuilder() {
        if (poolingParamBuilder_ == null) {
          poolingParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.PoolingParameter, caffe.Caffe.PoolingParameter.Builder, caffe.Caffe.PoolingParameterOrBuilder>(
                  poolingParam_,
                  getParentForChildren(),
                  isClean());
          poolingParam_ = null;
        }
        return poolingParamBuilder_;
      }

      // optional .caffe.PowerParameter power_param = 21;
      private caffe.Caffe.PowerParameter powerParam_ = caffe.Caffe.PowerParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.PowerParameter, caffe.Caffe.PowerParameter.Builder, caffe.Caffe.PowerParameterOrBuilder> powerParamBuilder_;
      /**
       * <code>optional .caffe.PowerParameter power_param = 21;</code>
       */
      public boolean hasPowerParam() {
        return ((bitField1_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .caffe.PowerParameter power_param = 21;</code>
       */
      public caffe.Caffe.PowerParameter getPowerParam() {
        if (powerParamBuilder_ == null) {
          return powerParam_;
        } else {
          return powerParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.PowerParameter power_param = 21;</code>
       */
      public Builder setPowerParam(caffe.Caffe.PowerParameter value) {
        if (powerParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          powerParam_ = value;
          onChanged();
        } else {
          powerParamBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .caffe.PowerParameter power_param = 21;</code>
       */
      public Builder setPowerParam(
          caffe.Caffe.PowerParameter.Builder builderForValue) {
        if (powerParamBuilder_ == null) {
          powerParam_ = builderForValue.build();
          onChanged();
        } else {
          powerParamBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .caffe.PowerParameter power_param = 21;</code>
       */
      public Builder mergePowerParam(caffe.Caffe.PowerParameter value) {
        if (powerParamBuilder_ == null) {
          if (((bitField1_ & 0x00000001) == 0x00000001) &&
              powerParam_ != caffe.Caffe.PowerParameter.getDefaultInstance()) {
            powerParam_ =
              caffe.Caffe.PowerParameter.newBuilder(powerParam_).mergeFrom(value).buildPartial();
          } else {
            powerParam_ = value;
          }
          onChanged();
        } else {
          powerParamBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .caffe.PowerParameter power_param = 21;</code>
       */
      public Builder clearPowerParam() {
        if (powerParamBuilder_ == null) {
          powerParam_ = caffe.Caffe.PowerParameter.getDefaultInstance();
          onChanged();
        } else {
          powerParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .caffe.PowerParameter power_param = 21;</code>
       */
      public caffe.Caffe.PowerParameter.Builder getPowerParamBuilder() {
        bitField1_ |= 0x00000001;
        onChanged();
        return getPowerParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.PowerParameter power_param = 21;</code>
       */
      public caffe.Caffe.PowerParameterOrBuilder getPowerParamOrBuilder() {
        if (powerParamBuilder_ != null) {
          return powerParamBuilder_.getMessageOrBuilder();
        } else {
          return powerParam_;
        }
      }
      /**
       * <code>optional .caffe.PowerParameter power_param = 21;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.PowerParameter, caffe.Caffe.PowerParameter.Builder, caffe.Caffe.PowerParameterOrBuilder> 
          getPowerParamFieldBuilder() {
        if (powerParamBuilder_ == null) {
          powerParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.PowerParameter, caffe.Caffe.PowerParameter.Builder, caffe.Caffe.PowerParameterOrBuilder>(
                  powerParam_,
                  getParentForChildren(),
                  isClean());
          powerParam_ = null;
        }
        return powerParamBuilder_;
      }

      // optional .caffe.ReLUParameter relu_param = 30;
      private caffe.Caffe.ReLUParameter reluParam_ = caffe.Caffe.ReLUParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.ReLUParameter, caffe.Caffe.ReLUParameter.Builder, caffe.Caffe.ReLUParameterOrBuilder> reluParamBuilder_;
      /**
       * <code>optional .caffe.ReLUParameter relu_param = 30;</code>
       */
      public boolean hasReluParam() {
        return ((bitField1_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .caffe.ReLUParameter relu_param = 30;</code>
       */
      public caffe.Caffe.ReLUParameter getReluParam() {
        if (reluParamBuilder_ == null) {
          return reluParam_;
        } else {
          return reluParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.ReLUParameter relu_param = 30;</code>
       */
      public Builder setReluParam(caffe.Caffe.ReLUParameter value) {
        if (reluParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          reluParam_ = value;
          onChanged();
        } else {
          reluParamBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .caffe.ReLUParameter relu_param = 30;</code>
       */
      public Builder setReluParam(
          caffe.Caffe.ReLUParameter.Builder builderForValue) {
        if (reluParamBuilder_ == null) {
          reluParam_ = builderForValue.build();
          onChanged();
        } else {
          reluParamBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .caffe.ReLUParameter relu_param = 30;</code>
       */
      public Builder mergeReluParam(caffe.Caffe.ReLUParameter value) {
        if (reluParamBuilder_ == null) {
          if (((bitField1_ & 0x00000002) == 0x00000002) &&
              reluParam_ != caffe.Caffe.ReLUParameter.getDefaultInstance()) {
            reluParam_ =
              caffe.Caffe.ReLUParameter.newBuilder(reluParam_).mergeFrom(value).buildPartial();
          } else {
            reluParam_ = value;
          }
          onChanged();
        } else {
          reluParamBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .caffe.ReLUParameter relu_param = 30;</code>
       */
      public Builder clearReluParam() {
        if (reluParamBuilder_ == null) {
          reluParam_ = caffe.Caffe.ReLUParameter.getDefaultInstance();
          onChanged();
        } else {
          reluParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000002);
        return this;
      }
      /**
       * <code>optional .caffe.ReLUParameter relu_param = 30;</code>
       */
      public caffe.Caffe.ReLUParameter.Builder getReluParamBuilder() {
        bitField1_ |= 0x00000002;
        onChanged();
        return getReluParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.ReLUParameter relu_param = 30;</code>
       */
      public caffe.Caffe.ReLUParameterOrBuilder getReluParamOrBuilder() {
        if (reluParamBuilder_ != null) {
          return reluParamBuilder_.getMessageOrBuilder();
        } else {
          return reluParam_;
        }
      }
      /**
       * <code>optional .caffe.ReLUParameter relu_param = 30;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.ReLUParameter, caffe.Caffe.ReLUParameter.Builder, caffe.Caffe.ReLUParameterOrBuilder> 
          getReluParamFieldBuilder() {
        if (reluParamBuilder_ == null) {
          reluParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.ReLUParameter, caffe.Caffe.ReLUParameter.Builder, caffe.Caffe.ReLUParameterOrBuilder>(
                  reluParam_,
                  getParentForChildren(),
                  isClean());
          reluParam_ = null;
        }
        return reluParamBuilder_;
      }

      // optional .caffe.SigmoidParameter sigmoid_param = 38;
      private caffe.Caffe.SigmoidParameter sigmoidParam_ = caffe.Caffe.SigmoidParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.SigmoidParameter, caffe.Caffe.SigmoidParameter.Builder, caffe.Caffe.SigmoidParameterOrBuilder> sigmoidParamBuilder_;
      /**
       * <code>optional .caffe.SigmoidParameter sigmoid_param = 38;</code>
       */
      public boolean hasSigmoidParam() {
        return ((bitField1_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .caffe.SigmoidParameter sigmoid_param = 38;</code>
       */
      public caffe.Caffe.SigmoidParameter getSigmoidParam() {
        if (sigmoidParamBuilder_ == null) {
          return sigmoidParam_;
        } else {
          return sigmoidParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.SigmoidParameter sigmoid_param = 38;</code>
       */
      public Builder setSigmoidParam(caffe.Caffe.SigmoidParameter value) {
        if (sigmoidParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          sigmoidParam_ = value;
          onChanged();
        } else {
          sigmoidParamBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .caffe.SigmoidParameter sigmoid_param = 38;</code>
       */
      public Builder setSigmoidParam(
          caffe.Caffe.SigmoidParameter.Builder builderForValue) {
        if (sigmoidParamBuilder_ == null) {
          sigmoidParam_ = builderForValue.build();
          onChanged();
        } else {
          sigmoidParamBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .caffe.SigmoidParameter sigmoid_param = 38;</code>
       */
      public Builder mergeSigmoidParam(caffe.Caffe.SigmoidParameter value) {
        if (sigmoidParamBuilder_ == null) {
          if (((bitField1_ & 0x00000004) == 0x00000004) &&
              sigmoidParam_ != caffe.Caffe.SigmoidParameter.getDefaultInstance()) {
            sigmoidParam_ =
              caffe.Caffe.SigmoidParameter.newBuilder(sigmoidParam_).mergeFrom(value).buildPartial();
          } else {
            sigmoidParam_ = value;
          }
          onChanged();
        } else {
          sigmoidParamBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .caffe.SigmoidParameter sigmoid_param = 38;</code>
       */
      public Builder clearSigmoidParam() {
        if (sigmoidParamBuilder_ == null) {
          sigmoidParam_ = caffe.Caffe.SigmoidParameter.getDefaultInstance();
          onChanged();
        } else {
          sigmoidParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000004);
        return this;
      }
      /**
       * <code>optional .caffe.SigmoidParameter sigmoid_param = 38;</code>
       */
      public caffe.Caffe.SigmoidParameter.Builder getSigmoidParamBuilder() {
        bitField1_ |= 0x00000004;
        onChanged();
        return getSigmoidParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.SigmoidParameter sigmoid_param = 38;</code>
       */
      public caffe.Caffe.SigmoidParameterOrBuilder getSigmoidParamOrBuilder() {
        if (sigmoidParamBuilder_ != null) {
          return sigmoidParamBuilder_.getMessageOrBuilder();
        } else {
          return sigmoidParam_;
        }
      }
      /**
       * <code>optional .caffe.SigmoidParameter sigmoid_param = 38;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.SigmoidParameter, caffe.Caffe.SigmoidParameter.Builder, caffe.Caffe.SigmoidParameterOrBuilder> 
          getSigmoidParamFieldBuilder() {
        if (sigmoidParamBuilder_ == null) {
          sigmoidParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.SigmoidParameter, caffe.Caffe.SigmoidParameter.Builder, caffe.Caffe.SigmoidParameterOrBuilder>(
                  sigmoidParam_,
                  getParentForChildren(),
                  isClean());
          sigmoidParam_ = null;
        }
        return sigmoidParamBuilder_;
      }

      // optional .caffe.SoftmaxParameter softmax_param = 39;
      private caffe.Caffe.SoftmaxParameter softmaxParam_ = caffe.Caffe.SoftmaxParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.SoftmaxParameter, caffe.Caffe.SoftmaxParameter.Builder, caffe.Caffe.SoftmaxParameterOrBuilder> softmaxParamBuilder_;
      /**
       * <code>optional .caffe.SoftmaxParameter softmax_param = 39;</code>
       */
      public boolean hasSoftmaxParam() {
        return ((bitField1_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .caffe.SoftmaxParameter softmax_param = 39;</code>
       */
      public caffe.Caffe.SoftmaxParameter getSoftmaxParam() {
        if (softmaxParamBuilder_ == null) {
          return softmaxParam_;
        } else {
          return softmaxParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.SoftmaxParameter softmax_param = 39;</code>
       */
      public Builder setSoftmaxParam(caffe.Caffe.SoftmaxParameter value) {
        if (softmaxParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          softmaxParam_ = value;
          onChanged();
        } else {
          softmaxParamBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .caffe.SoftmaxParameter softmax_param = 39;</code>
       */
      public Builder setSoftmaxParam(
          caffe.Caffe.SoftmaxParameter.Builder builderForValue) {
        if (softmaxParamBuilder_ == null) {
          softmaxParam_ = builderForValue.build();
          onChanged();
        } else {
          softmaxParamBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .caffe.SoftmaxParameter softmax_param = 39;</code>
       */
      public Builder mergeSoftmaxParam(caffe.Caffe.SoftmaxParameter value) {
        if (softmaxParamBuilder_ == null) {
          if (((bitField1_ & 0x00000008) == 0x00000008) &&
              softmaxParam_ != caffe.Caffe.SoftmaxParameter.getDefaultInstance()) {
            softmaxParam_ =
              caffe.Caffe.SoftmaxParameter.newBuilder(softmaxParam_).mergeFrom(value).buildPartial();
          } else {
            softmaxParam_ = value;
          }
          onChanged();
        } else {
          softmaxParamBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .caffe.SoftmaxParameter softmax_param = 39;</code>
       */
      public Builder clearSoftmaxParam() {
        if (softmaxParamBuilder_ == null) {
          softmaxParam_ = caffe.Caffe.SoftmaxParameter.getDefaultInstance();
          onChanged();
        } else {
          softmaxParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000008);
        return this;
      }
      /**
       * <code>optional .caffe.SoftmaxParameter softmax_param = 39;</code>
       */
      public caffe.Caffe.SoftmaxParameter.Builder getSoftmaxParamBuilder() {
        bitField1_ |= 0x00000008;
        onChanged();
        return getSoftmaxParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.SoftmaxParameter softmax_param = 39;</code>
       */
      public caffe.Caffe.SoftmaxParameterOrBuilder getSoftmaxParamOrBuilder() {
        if (softmaxParamBuilder_ != null) {
          return softmaxParamBuilder_.getMessageOrBuilder();
        } else {
          return softmaxParam_;
        }
      }
      /**
       * <code>optional .caffe.SoftmaxParameter softmax_param = 39;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.SoftmaxParameter, caffe.Caffe.SoftmaxParameter.Builder, caffe.Caffe.SoftmaxParameterOrBuilder> 
          getSoftmaxParamFieldBuilder() {
        if (softmaxParamBuilder_ == null) {
          softmaxParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.SoftmaxParameter, caffe.Caffe.SoftmaxParameter.Builder, caffe.Caffe.SoftmaxParameterOrBuilder>(
                  softmaxParam_,
                  getParentForChildren(),
                  isClean());
          softmaxParam_ = null;
        }
        return softmaxParamBuilder_;
      }

      // optional .caffe.SliceParameter slice_param = 31;
      private caffe.Caffe.SliceParameter sliceParam_ = caffe.Caffe.SliceParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.SliceParameter, caffe.Caffe.SliceParameter.Builder, caffe.Caffe.SliceParameterOrBuilder> sliceParamBuilder_;
      /**
       * <code>optional .caffe.SliceParameter slice_param = 31;</code>
       */
      public boolean hasSliceParam() {
        return ((bitField1_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .caffe.SliceParameter slice_param = 31;</code>
       */
      public caffe.Caffe.SliceParameter getSliceParam() {
        if (sliceParamBuilder_ == null) {
          return sliceParam_;
        } else {
          return sliceParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.SliceParameter slice_param = 31;</code>
       */
      public Builder setSliceParam(caffe.Caffe.SliceParameter value) {
        if (sliceParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          sliceParam_ = value;
          onChanged();
        } else {
          sliceParamBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .caffe.SliceParameter slice_param = 31;</code>
       */
      public Builder setSliceParam(
          caffe.Caffe.SliceParameter.Builder builderForValue) {
        if (sliceParamBuilder_ == null) {
          sliceParam_ = builderForValue.build();
          onChanged();
        } else {
          sliceParamBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .caffe.SliceParameter slice_param = 31;</code>
       */
      public Builder mergeSliceParam(caffe.Caffe.SliceParameter value) {
        if (sliceParamBuilder_ == null) {
          if (((bitField1_ & 0x00000010) == 0x00000010) &&
              sliceParam_ != caffe.Caffe.SliceParameter.getDefaultInstance()) {
            sliceParam_ =
              caffe.Caffe.SliceParameter.newBuilder(sliceParam_).mergeFrom(value).buildPartial();
          } else {
            sliceParam_ = value;
          }
          onChanged();
        } else {
          sliceParamBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .caffe.SliceParameter slice_param = 31;</code>
       */
      public Builder clearSliceParam() {
        if (sliceParamBuilder_ == null) {
          sliceParam_ = caffe.Caffe.SliceParameter.getDefaultInstance();
          onChanged();
        } else {
          sliceParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000010);
        return this;
      }
      /**
       * <code>optional .caffe.SliceParameter slice_param = 31;</code>
       */
      public caffe.Caffe.SliceParameter.Builder getSliceParamBuilder() {
        bitField1_ |= 0x00000010;
        onChanged();
        return getSliceParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.SliceParameter slice_param = 31;</code>
       */
      public caffe.Caffe.SliceParameterOrBuilder getSliceParamOrBuilder() {
        if (sliceParamBuilder_ != null) {
          return sliceParamBuilder_.getMessageOrBuilder();
        } else {
          return sliceParam_;
        }
      }
      /**
       * <code>optional .caffe.SliceParameter slice_param = 31;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.SliceParameter, caffe.Caffe.SliceParameter.Builder, caffe.Caffe.SliceParameterOrBuilder> 
          getSliceParamFieldBuilder() {
        if (sliceParamBuilder_ == null) {
          sliceParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.SliceParameter, caffe.Caffe.SliceParameter.Builder, caffe.Caffe.SliceParameterOrBuilder>(
                  sliceParam_,
                  getParentForChildren(),
                  isClean());
          sliceParam_ = null;
        }
        return sliceParamBuilder_;
      }

      // optional .caffe.TanHParameter tanh_param = 37;
      private caffe.Caffe.TanHParameter tanhParam_ = caffe.Caffe.TanHParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.TanHParameter, caffe.Caffe.TanHParameter.Builder, caffe.Caffe.TanHParameterOrBuilder> tanhParamBuilder_;
      /**
       * <code>optional .caffe.TanHParameter tanh_param = 37;</code>
       */
      public boolean hasTanhParam() {
        return ((bitField1_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .caffe.TanHParameter tanh_param = 37;</code>
       */
      public caffe.Caffe.TanHParameter getTanhParam() {
        if (tanhParamBuilder_ == null) {
          return tanhParam_;
        } else {
          return tanhParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.TanHParameter tanh_param = 37;</code>
       */
      public Builder setTanhParam(caffe.Caffe.TanHParameter value) {
        if (tanhParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          tanhParam_ = value;
          onChanged();
        } else {
          tanhParamBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .caffe.TanHParameter tanh_param = 37;</code>
       */
      public Builder setTanhParam(
          caffe.Caffe.TanHParameter.Builder builderForValue) {
        if (tanhParamBuilder_ == null) {
          tanhParam_ = builderForValue.build();
          onChanged();
        } else {
          tanhParamBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .caffe.TanHParameter tanh_param = 37;</code>
       */
      public Builder mergeTanhParam(caffe.Caffe.TanHParameter value) {
        if (tanhParamBuilder_ == null) {
          if (((bitField1_ & 0x00000020) == 0x00000020) &&
              tanhParam_ != caffe.Caffe.TanHParameter.getDefaultInstance()) {
            tanhParam_ =
              caffe.Caffe.TanHParameter.newBuilder(tanhParam_).mergeFrom(value).buildPartial();
          } else {
            tanhParam_ = value;
          }
          onChanged();
        } else {
          tanhParamBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .caffe.TanHParameter tanh_param = 37;</code>
       */
      public Builder clearTanhParam() {
        if (tanhParamBuilder_ == null) {
          tanhParam_ = caffe.Caffe.TanHParameter.getDefaultInstance();
          onChanged();
        } else {
          tanhParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000020);
        return this;
      }
      /**
       * <code>optional .caffe.TanHParameter tanh_param = 37;</code>
       */
      public caffe.Caffe.TanHParameter.Builder getTanhParamBuilder() {
        bitField1_ |= 0x00000020;
        onChanged();
        return getTanhParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.TanHParameter tanh_param = 37;</code>
       */
      public caffe.Caffe.TanHParameterOrBuilder getTanhParamOrBuilder() {
        if (tanhParamBuilder_ != null) {
          return tanhParamBuilder_.getMessageOrBuilder();
        } else {
          return tanhParam_;
        }
      }
      /**
       * <code>optional .caffe.TanHParameter tanh_param = 37;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.TanHParameter, caffe.Caffe.TanHParameter.Builder, caffe.Caffe.TanHParameterOrBuilder> 
          getTanhParamFieldBuilder() {
        if (tanhParamBuilder_ == null) {
          tanhParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.TanHParameter, caffe.Caffe.TanHParameter.Builder, caffe.Caffe.TanHParameterOrBuilder>(
                  tanhParam_,
                  getParentForChildren(),
                  isClean());
          tanhParam_ = null;
        }
        return tanhParamBuilder_;
      }

      // optional .caffe.ThresholdParameter threshold_param = 25;
      private caffe.Caffe.ThresholdParameter thresholdParam_ = caffe.Caffe.ThresholdParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.ThresholdParameter, caffe.Caffe.ThresholdParameter.Builder, caffe.Caffe.ThresholdParameterOrBuilder> thresholdParamBuilder_;
      /**
       * <code>optional .caffe.ThresholdParameter threshold_param = 25;</code>
       */
      public boolean hasThresholdParam() {
        return ((bitField1_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional .caffe.ThresholdParameter threshold_param = 25;</code>
       */
      public caffe.Caffe.ThresholdParameter getThresholdParam() {
        if (thresholdParamBuilder_ == null) {
          return thresholdParam_;
        } else {
          return thresholdParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.ThresholdParameter threshold_param = 25;</code>
       */
      public Builder setThresholdParam(caffe.Caffe.ThresholdParameter value) {
        if (thresholdParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          thresholdParam_ = value;
          onChanged();
        } else {
          thresholdParamBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .caffe.ThresholdParameter threshold_param = 25;</code>
       */
      public Builder setThresholdParam(
          caffe.Caffe.ThresholdParameter.Builder builderForValue) {
        if (thresholdParamBuilder_ == null) {
          thresholdParam_ = builderForValue.build();
          onChanged();
        } else {
          thresholdParamBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .caffe.ThresholdParameter threshold_param = 25;</code>
       */
      public Builder mergeThresholdParam(caffe.Caffe.ThresholdParameter value) {
        if (thresholdParamBuilder_ == null) {
          if (((bitField1_ & 0x00000040) == 0x00000040) &&
              thresholdParam_ != caffe.Caffe.ThresholdParameter.getDefaultInstance()) {
            thresholdParam_ =
              caffe.Caffe.ThresholdParameter.newBuilder(thresholdParam_).mergeFrom(value).buildPartial();
          } else {
            thresholdParam_ = value;
          }
          onChanged();
        } else {
          thresholdParamBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .caffe.ThresholdParameter threshold_param = 25;</code>
       */
      public Builder clearThresholdParam() {
        if (thresholdParamBuilder_ == null) {
          thresholdParam_ = caffe.Caffe.ThresholdParameter.getDefaultInstance();
          onChanged();
        } else {
          thresholdParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000040);
        return this;
      }
      /**
       * <code>optional .caffe.ThresholdParameter threshold_param = 25;</code>
       */
      public caffe.Caffe.ThresholdParameter.Builder getThresholdParamBuilder() {
        bitField1_ |= 0x00000040;
        onChanged();
        return getThresholdParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.ThresholdParameter threshold_param = 25;</code>
       */
      public caffe.Caffe.ThresholdParameterOrBuilder getThresholdParamOrBuilder() {
        if (thresholdParamBuilder_ != null) {
          return thresholdParamBuilder_.getMessageOrBuilder();
        } else {
          return thresholdParam_;
        }
      }
      /**
       * <code>optional .caffe.ThresholdParameter threshold_param = 25;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.ThresholdParameter, caffe.Caffe.ThresholdParameter.Builder, caffe.Caffe.ThresholdParameterOrBuilder> 
          getThresholdParamFieldBuilder() {
        if (thresholdParamBuilder_ == null) {
          thresholdParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.ThresholdParameter, caffe.Caffe.ThresholdParameter.Builder, caffe.Caffe.ThresholdParameterOrBuilder>(
                  thresholdParam_,
                  getParentForChildren(),
                  isClean());
          thresholdParam_ = null;
        }
        return thresholdParamBuilder_;
      }

      // optional .caffe.WindowDataParameter window_data_param = 20;
      private caffe.Caffe.WindowDataParameter windowDataParam_ = caffe.Caffe.WindowDataParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.WindowDataParameter, caffe.Caffe.WindowDataParameter.Builder, caffe.Caffe.WindowDataParameterOrBuilder> windowDataParamBuilder_;
      /**
       * <code>optional .caffe.WindowDataParameter window_data_param = 20;</code>
       */
      public boolean hasWindowDataParam() {
        return ((bitField1_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional .caffe.WindowDataParameter window_data_param = 20;</code>
       */
      public caffe.Caffe.WindowDataParameter getWindowDataParam() {
        if (windowDataParamBuilder_ == null) {
          return windowDataParam_;
        } else {
          return windowDataParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.WindowDataParameter window_data_param = 20;</code>
       */
      public Builder setWindowDataParam(caffe.Caffe.WindowDataParameter value) {
        if (windowDataParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          windowDataParam_ = value;
          onChanged();
        } else {
          windowDataParamBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .caffe.WindowDataParameter window_data_param = 20;</code>
       */
      public Builder setWindowDataParam(
          caffe.Caffe.WindowDataParameter.Builder builderForValue) {
        if (windowDataParamBuilder_ == null) {
          windowDataParam_ = builderForValue.build();
          onChanged();
        } else {
          windowDataParamBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .caffe.WindowDataParameter window_data_param = 20;</code>
       */
      public Builder mergeWindowDataParam(caffe.Caffe.WindowDataParameter value) {
        if (windowDataParamBuilder_ == null) {
          if (((bitField1_ & 0x00000080) == 0x00000080) &&
              windowDataParam_ != caffe.Caffe.WindowDataParameter.getDefaultInstance()) {
            windowDataParam_ =
              caffe.Caffe.WindowDataParameter.newBuilder(windowDataParam_).mergeFrom(value).buildPartial();
          } else {
            windowDataParam_ = value;
          }
          onChanged();
        } else {
          windowDataParamBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .caffe.WindowDataParameter window_data_param = 20;</code>
       */
      public Builder clearWindowDataParam() {
        if (windowDataParamBuilder_ == null) {
          windowDataParam_ = caffe.Caffe.WindowDataParameter.getDefaultInstance();
          onChanged();
        } else {
          windowDataParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000080);
        return this;
      }
      /**
       * <code>optional .caffe.WindowDataParameter window_data_param = 20;</code>
       */
      public caffe.Caffe.WindowDataParameter.Builder getWindowDataParamBuilder() {
        bitField1_ |= 0x00000080;
        onChanged();
        return getWindowDataParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.WindowDataParameter window_data_param = 20;</code>
       */
      public caffe.Caffe.WindowDataParameterOrBuilder getWindowDataParamOrBuilder() {
        if (windowDataParamBuilder_ != null) {
          return windowDataParamBuilder_.getMessageOrBuilder();
        } else {
          return windowDataParam_;
        }
      }
      /**
       * <code>optional .caffe.WindowDataParameter window_data_param = 20;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.WindowDataParameter, caffe.Caffe.WindowDataParameter.Builder, caffe.Caffe.WindowDataParameterOrBuilder> 
          getWindowDataParamFieldBuilder() {
        if (windowDataParamBuilder_ == null) {
          windowDataParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.WindowDataParameter, caffe.Caffe.WindowDataParameter.Builder, caffe.Caffe.WindowDataParameterOrBuilder>(
                  windowDataParam_,
                  getParentForChildren(),
                  isClean());
          windowDataParam_ = null;
        }
        return windowDataParamBuilder_;
      }

      // optional .caffe.TransformationParameter transform_param = 36;
      private caffe.Caffe.TransformationParameter transformParam_ = caffe.Caffe.TransformationParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.TransformationParameter, caffe.Caffe.TransformationParameter.Builder, caffe.Caffe.TransformationParameterOrBuilder> transformParamBuilder_;
      /**
       * <code>optional .caffe.TransformationParameter transform_param = 36;</code>
       */
      public boolean hasTransformParam() {
        return ((bitField1_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional .caffe.TransformationParameter transform_param = 36;</code>
       */
      public caffe.Caffe.TransformationParameter getTransformParam() {
        if (transformParamBuilder_ == null) {
          return transformParam_;
        } else {
          return transformParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.TransformationParameter transform_param = 36;</code>
       */
      public Builder setTransformParam(caffe.Caffe.TransformationParameter value) {
        if (transformParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          transformParam_ = value;
          onChanged();
        } else {
          transformParamBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .caffe.TransformationParameter transform_param = 36;</code>
       */
      public Builder setTransformParam(
          caffe.Caffe.TransformationParameter.Builder builderForValue) {
        if (transformParamBuilder_ == null) {
          transformParam_ = builderForValue.build();
          onChanged();
        } else {
          transformParamBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .caffe.TransformationParameter transform_param = 36;</code>
       */
      public Builder mergeTransformParam(caffe.Caffe.TransformationParameter value) {
        if (transformParamBuilder_ == null) {
          if (((bitField1_ & 0x00000100) == 0x00000100) &&
              transformParam_ != caffe.Caffe.TransformationParameter.getDefaultInstance()) {
            transformParam_ =
              caffe.Caffe.TransformationParameter.newBuilder(transformParam_).mergeFrom(value).buildPartial();
          } else {
            transformParam_ = value;
          }
          onChanged();
        } else {
          transformParamBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .caffe.TransformationParameter transform_param = 36;</code>
       */
      public Builder clearTransformParam() {
        if (transformParamBuilder_ == null) {
          transformParam_ = caffe.Caffe.TransformationParameter.getDefaultInstance();
          onChanged();
        } else {
          transformParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000100);
        return this;
      }
      /**
       * <code>optional .caffe.TransformationParameter transform_param = 36;</code>
       */
      public caffe.Caffe.TransformationParameter.Builder getTransformParamBuilder() {
        bitField1_ |= 0x00000100;
        onChanged();
        return getTransformParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.TransformationParameter transform_param = 36;</code>
       */
      public caffe.Caffe.TransformationParameterOrBuilder getTransformParamOrBuilder() {
        if (transformParamBuilder_ != null) {
          return transformParamBuilder_.getMessageOrBuilder();
        } else {
          return transformParam_;
        }
      }
      /**
       * <code>optional .caffe.TransformationParameter transform_param = 36;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.TransformationParameter, caffe.Caffe.TransformationParameter.Builder, caffe.Caffe.TransformationParameterOrBuilder> 
          getTransformParamFieldBuilder() {
        if (transformParamBuilder_ == null) {
          transformParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.TransformationParameter, caffe.Caffe.TransformationParameter.Builder, caffe.Caffe.TransformationParameterOrBuilder>(
                  transformParam_,
                  getParentForChildren(),
                  isClean());
          transformParam_ = null;
        }
        return transformParamBuilder_;
      }

      // optional .caffe.LossParameter loss_param = 42;
      private caffe.Caffe.LossParameter lossParam_ = caffe.Caffe.LossParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.LossParameter, caffe.Caffe.LossParameter.Builder, caffe.Caffe.LossParameterOrBuilder> lossParamBuilder_;
      /**
       * <code>optional .caffe.LossParameter loss_param = 42;</code>
       */
      public boolean hasLossParam() {
        return ((bitField1_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional .caffe.LossParameter loss_param = 42;</code>
       */
      public caffe.Caffe.LossParameter getLossParam() {
        if (lossParamBuilder_ == null) {
          return lossParam_;
        } else {
          return lossParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.LossParameter loss_param = 42;</code>
       */
      public Builder setLossParam(caffe.Caffe.LossParameter value) {
        if (lossParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          lossParam_ = value;
          onChanged();
        } else {
          lossParamBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00000200;
        return this;
      }
      /**
       * <code>optional .caffe.LossParameter loss_param = 42;</code>
       */
      public Builder setLossParam(
          caffe.Caffe.LossParameter.Builder builderForValue) {
        if (lossParamBuilder_ == null) {
          lossParam_ = builderForValue.build();
          onChanged();
        } else {
          lossParamBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00000200;
        return this;
      }
      /**
       * <code>optional .caffe.LossParameter loss_param = 42;</code>
       */
      public Builder mergeLossParam(caffe.Caffe.LossParameter value) {
        if (lossParamBuilder_ == null) {
          if (((bitField1_ & 0x00000200) == 0x00000200) &&
              lossParam_ != caffe.Caffe.LossParameter.getDefaultInstance()) {
            lossParam_ =
              caffe.Caffe.LossParameter.newBuilder(lossParam_).mergeFrom(value).buildPartial();
          } else {
            lossParam_ = value;
          }
          onChanged();
        } else {
          lossParamBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x00000200;
        return this;
      }
      /**
       * <code>optional .caffe.LossParameter loss_param = 42;</code>
       */
      public Builder clearLossParam() {
        if (lossParamBuilder_ == null) {
          lossParam_ = caffe.Caffe.LossParameter.getDefaultInstance();
          onChanged();
        } else {
          lossParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000200);
        return this;
      }
      /**
       * <code>optional .caffe.LossParameter loss_param = 42;</code>
       */
      public caffe.Caffe.LossParameter.Builder getLossParamBuilder() {
        bitField1_ |= 0x00000200;
        onChanged();
        return getLossParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.LossParameter loss_param = 42;</code>
       */
      public caffe.Caffe.LossParameterOrBuilder getLossParamOrBuilder() {
        if (lossParamBuilder_ != null) {
          return lossParamBuilder_.getMessageOrBuilder();
        } else {
          return lossParam_;
        }
      }
      /**
       * <code>optional .caffe.LossParameter loss_param = 42;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.LossParameter, caffe.Caffe.LossParameter.Builder, caffe.Caffe.LossParameterOrBuilder> 
          getLossParamFieldBuilder() {
        if (lossParamBuilder_ == null) {
          lossParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.LossParameter, caffe.Caffe.LossParameter.Builder, caffe.Caffe.LossParameterOrBuilder>(
                  lossParam_,
                  getParentForChildren(),
                  isClean());
          lossParam_ = null;
        }
        return lossParamBuilder_;
      }

      // optional .caffe.V0LayerParameter layer = 1;
      private caffe.Caffe.V0LayerParameter layer_ = caffe.Caffe.V0LayerParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.V0LayerParameter, caffe.Caffe.V0LayerParameter.Builder, caffe.Caffe.V0LayerParameterOrBuilder> layerBuilder_;
      /**
       * <code>optional .caffe.V0LayerParameter layer = 1;</code>
       */
      public boolean hasLayer() {
        return ((bitField1_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional .caffe.V0LayerParameter layer = 1;</code>
       */
      public caffe.Caffe.V0LayerParameter getLayer() {
        if (layerBuilder_ == null) {
          return layer_;
        } else {
          return layerBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.V0LayerParameter layer = 1;</code>
       */
      public Builder setLayer(caffe.Caffe.V0LayerParameter value) {
        if (layerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          layer_ = value;
          onChanged();
        } else {
          layerBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .caffe.V0LayerParameter layer = 1;</code>
       */
      public Builder setLayer(
          caffe.Caffe.V0LayerParameter.Builder builderForValue) {
        if (layerBuilder_ == null) {
          layer_ = builderForValue.build();
          onChanged();
        } else {
          layerBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .caffe.V0LayerParameter layer = 1;</code>
       */
      public Builder mergeLayer(caffe.Caffe.V0LayerParameter value) {
        if (layerBuilder_ == null) {
          if (((bitField1_ & 0x00000400) == 0x00000400) &&
              layer_ != caffe.Caffe.V0LayerParameter.getDefaultInstance()) {
            layer_ =
              caffe.Caffe.V0LayerParameter.newBuilder(layer_).mergeFrom(value).buildPartial();
          } else {
            layer_ = value;
          }
          onChanged();
        } else {
          layerBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .caffe.V0LayerParameter layer = 1;</code>
       */
      public Builder clearLayer() {
        if (layerBuilder_ == null) {
          layer_ = caffe.Caffe.V0LayerParameter.getDefaultInstance();
          onChanged();
        } else {
          layerBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000400);
        return this;
      }
      /**
       * <code>optional .caffe.V0LayerParameter layer = 1;</code>
       */
      public caffe.Caffe.V0LayerParameter.Builder getLayerBuilder() {
        bitField1_ |= 0x00000400;
        onChanged();
        return getLayerFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.V0LayerParameter layer = 1;</code>
       */
      public caffe.Caffe.V0LayerParameterOrBuilder getLayerOrBuilder() {
        if (layerBuilder_ != null) {
          return layerBuilder_.getMessageOrBuilder();
        } else {
          return layer_;
        }
      }
      /**
       * <code>optional .caffe.V0LayerParameter layer = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.V0LayerParameter, caffe.Caffe.V0LayerParameter.Builder, caffe.Caffe.V0LayerParameterOrBuilder> 
          getLayerFieldBuilder() {
        if (layerBuilder_ == null) {
          layerBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.V0LayerParameter, caffe.Caffe.V0LayerParameter.Builder, caffe.Caffe.V0LayerParameterOrBuilder>(
                  layer_,
                  getParentForChildren(),
                  isClean());
          layer_ = null;
        }
        return layerBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:caffe.V1LayerParameter)
    }

    static {
      defaultInstance = new V1LayerParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.V1LayerParameter)
  }

  public interface V0LayerParameterOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional string name = 1;
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * the layer name
     * </pre>
     */
    boolean hasName();
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * the layer name
     * </pre>
     */
    java.lang.String getName();
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * the layer name
     * </pre>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    // optional string type = 2;
    /**
     * <code>optional string type = 2;</code>
     *
     * <pre>
     * the string to specify the layer type
     * </pre>
     */
    boolean hasType();
    /**
     * <code>optional string type = 2;</code>
     *
     * <pre>
     * the string to specify the layer type
     * </pre>
     */
    java.lang.String getType();
    /**
     * <code>optional string type = 2;</code>
     *
     * <pre>
     * the string to specify the layer type
     * </pre>
     */
    com.google.protobuf.ByteString
        getTypeBytes();

    // optional uint32 num_output = 3;
    /**
     * <code>optional uint32 num_output = 3;</code>
     *
     * <pre>
     * Parameters to specify layers with inner products.
     * </pre>
     */
    boolean hasNumOutput();
    /**
     * <code>optional uint32 num_output = 3;</code>
     *
     * <pre>
     * Parameters to specify layers with inner products.
     * </pre>
     */
    int getNumOutput();

    // optional bool biasterm = 4 [default = true];
    /**
     * <code>optional bool biasterm = 4 [default = true];</code>
     *
     * <pre>
     * whether to have bias terms
     * </pre>
     */
    boolean hasBiasterm();
    /**
     * <code>optional bool biasterm = 4 [default = true];</code>
     *
     * <pre>
     * whether to have bias terms
     * </pre>
     */
    boolean getBiasterm();

    // optional .caffe.FillerParameter weight_filler = 5;
    /**
     * <code>optional .caffe.FillerParameter weight_filler = 5;</code>
     *
     * <pre>
     * The filler for the weight
     * </pre>
     */
    boolean hasWeightFiller();
    /**
     * <code>optional .caffe.FillerParameter weight_filler = 5;</code>
     *
     * <pre>
     * The filler for the weight
     * </pre>
     */
    caffe.Caffe.FillerParameter getWeightFiller();
    /**
     * <code>optional .caffe.FillerParameter weight_filler = 5;</code>
     *
     * <pre>
     * The filler for the weight
     * </pre>
     */
    caffe.Caffe.FillerParameterOrBuilder getWeightFillerOrBuilder();

    // optional .caffe.FillerParameter bias_filler = 6;
    /**
     * <code>optional .caffe.FillerParameter bias_filler = 6;</code>
     *
     * <pre>
     * The filler for the bias
     * </pre>
     */
    boolean hasBiasFiller();
    /**
     * <code>optional .caffe.FillerParameter bias_filler = 6;</code>
     *
     * <pre>
     * The filler for the bias
     * </pre>
     */
    caffe.Caffe.FillerParameter getBiasFiller();
    /**
     * <code>optional .caffe.FillerParameter bias_filler = 6;</code>
     *
     * <pre>
     * The filler for the bias
     * </pre>
     */
    caffe.Caffe.FillerParameterOrBuilder getBiasFillerOrBuilder();

    // optional uint32 pad = 7 [default = 0];
    /**
     * <code>optional uint32 pad = 7 [default = 0];</code>
     *
     * <pre>
     * The padding size
     * </pre>
     */
    boolean hasPad();
    /**
     * <code>optional uint32 pad = 7 [default = 0];</code>
     *
     * <pre>
     * The padding size
     * </pre>
     */
    int getPad();

    // optional uint32 kernelsize = 8;
    /**
     * <code>optional uint32 kernelsize = 8;</code>
     *
     * <pre>
     * The kernel size
     * </pre>
     */
    boolean hasKernelsize();
    /**
     * <code>optional uint32 kernelsize = 8;</code>
     *
     * <pre>
     * The kernel size
     * </pre>
     */
    int getKernelsize();

    // optional uint32 group = 9 [default = 1];
    /**
     * <code>optional uint32 group = 9 [default = 1];</code>
     *
     * <pre>
     * The group size for group conv
     * </pre>
     */
    boolean hasGroup();
    /**
     * <code>optional uint32 group = 9 [default = 1];</code>
     *
     * <pre>
     * The group size for group conv
     * </pre>
     */
    int getGroup();

    // optional uint32 stride = 10 [default = 1];
    /**
     * <code>optional uint32 stride = 10 [default = 1];</code>
     *
     * <pre>
     * The stride
     * </pre>
     */
    boolean hasStride();
    /**
     * <code>optional uint32 stride = 10 [default = 1];</code>
     *
     * <pre>
     * The stride
     * </pre>
     */
    int getStride();

    // optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];
    /**
     * <code>optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];</code>
     *
     * <pre>
     * The pooling method
     * </pre>
     */
    boolean hasPool();
    /**
     * <code>optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];</code>
     *
     * <pre>
     * The pooling method
     * </pre>
     */
    caffe.Caffe.V0LayerParameter.PoolMethod getPool();

    // optional float dropout_ratio = 12 [default = 0.5];
    /**
     * <code>optional float dropout_ratio = 12 [default = 0.5];</code>
     *
     * <pre>
     * dropout ratio
     * </pre>
     */
    boolean hasDropoutRatio();
    /**
     * <code>optional float dropout_ratio = 12 [default = 0.5];</code>
     *
     * <pre>
     * dropout ratio
     * </pre>
     */
    float getDropoutRatio();

    // optional uint32 local_size = 13 [default = 5];
    /**
     * <code>optional uint32 local_size = 13 [default = 5];</code>
     *
     * <pre>
     * for local response norm
     * </pre>
     */
    boolean hasLocalSize();
    /**
     * <code>optional uint32 local_size = 13 [default = 5];</code>
     *
     * <pre>
     * for local response norm
     * </pre>
     */
    int getLocalSize();

    // optional float alpha = 14 [default = 1];
    /**
     * <code>optional float alpha = 14 [default = 1];</code>
     *
     * <pre>
     * for local response norm
     * </pre>
     */
    boolean hasAlpha();
    /**
     * <code>optional float alpha = 14 [default = 1];</code>
     *
     * <pre>
     * for local response norm
     * </pre>
     */
    float getAlpha();

    // optional float beta = 15 [default = 0.75];
    /**
     * <code>optional float beta = 15 [default = 0.75];</code>
     *
     * <pre>
     * for local response norm
     * </pre>
     */
    boolean hasBeta();
    /**
     * <code>optional float beta = 15 [default = 0.75];</code>
     *
     * <pre>
     * for local response norm
     * </pre>
     */
    float getBeta();

    // optional float k = 22 [default = 1];
    /**
     * <code>optional float k = 22 [default = 1];</code>
     */
    boolean hasK();
    /**
     * <code>optional float k = 22 [default = 1];</code>
     */
    float getK();

    // optional string source = 16;
    /**
     * <code>optional string source = 16;</code>
     *
     * <pre>
     * For data layers, specify the data source
     * </pre>
     */
    boolean hasSource();
    /**
     * <code>optional string source = 16;</code>
     *
     * <pre>
     * For data layers, specify the data source
     * </pre>
     */
    java.lang.String getSource();
    /**
     * <code>optional string source = 16;</code>
     *
     * <pre>
     * For data layers, specify the data source
     * </pre>
     */
    com.google.protobuf.ByteString
        getSourceBytes();

    // optional float scale = 17 [default = 1];
    /**
     * <code>optional float scale = 17 [default = 1];</code>
     *
     * <pre>
     * For data pre-processing, we can do simple scaling and subtracting the
     * data mean, if provided. Note that the mean subtraction is always carried
     * out before scaling.
     * </pre>
     */
    boolean hasScale();
    /**
     * <code>optional float scale = 17 [default = 1];</code>
     *
     * <pre>
     * For data pre-processing, we can do simple scaling and subtracting the
     * data mean, if provided. Note that the mean subtraction is always carried
     * out before scaling.
     * </pre>
     */
    float getScale();

    // optional string meanfile = 18;
    /**
     * <code>optional string meanfile = 18;</code>
     */
    boolean hasMeanfile();
    /**
     * <code>optional string meanfile = 18;</code>
     */
    java.lang.String getMeanfile();
    /**
     * <code>optional string meanfile = 18;</code>
     */
    com.google.protobuf.ByteString
        getMeanfileBytes();

    // optional uint32 batchsize = 19;
    /**
     * <code>optional uint32 batchsize = 19;</code>
     *
     * <pre>
     * For data layers, specify the batch size.
     * </pre>
     */
    boolean hasBatchsize();
    /**
     * <code>optional uint32 batchsize = 19;</code>
     *
     * <pre>
     * For data layers, specify the batch size.
     * </pre>
     */
    int getBatchsize();

    // optional uint32 cropsize = 20 [default = 0];
    /**
     * <code>optional uint32 cropsize = 20 [default = 0];</code>
     *
     * <pre>
     * For data layers, specify if we would like to randomly crop an image.
     * </pre>
     */
    boolean hasCropsize();
    /**
     * <code>optional uint32 cropsize = 20 [default = 0];</code>
     *
     * <pre>
     * For data layers, specify if we would like to randomly crop an image.
     * </pre>
     */
    int getCropsize();

    // optional bool mirror = 21 [default = false];
    /**
     * <code>optional bool mirror = 21 [default = false];</code>
     *
     * <pre>
     * For data layers, specify if we want to randomly mirror data.
     * </pre>
     */
    boolean hasMirror();
    /**
     * <code>optional bool mirror = 21 [default = false];</code>
     *
     * <pre>
     * For data layers, specify if we want to randomly mirror data.
     * </pre>
     */
    boolean getMirror();

    // repeated .caffe.BlobProto blobs = 50;
    /**
     * <code>repeated .caffe.BlobProto blobs = 50;</code>
     *
     * <pre>
     * The blobs containing the numeric parameters of the layer
     * </pre>
     */
    java.util.List<caffe.Caffe.BlobProto> 
        getBlobsList();
    /**
     * <code>repeated .caffe.BlobProto blobs = 50;</code>
     *
     * <pre>
     * The blobs containing the numeric parameters of the layer
     * </pre>
     */
    caffe.Caffe.BlobProto getBlobs(int index);
    /**
     * <code>repeated .caffe.BlobProto blobs = 50;</code>
     *
     * <pre>
     * The blobs containing the numeric parameters of the layer
     * </pre>
     */
    int getBlobsCount();
    /**
     * <code>repeated .caffe.BlobProto blobs = 50;</code>
     *
     * <pre>
     * The blobs containing the numeric parameters of the layer
     * </pre>
     */
    java.util.List<? extends caffe.Caffe.BlobProtoOrBuilder> 
        getBlobsOrBuilderList();
    /**
     * <code>repeated .caffe.BlobProto blobs = 50;</code>
     *
     * <pre>
     * The blobs containing the numeric parameters of the layer
     * </pre>
     */
    caffe.Caffe.BlobProtoOrBuilder getBlobsOrBuilder(
        int index);

    // repeated float blobs_lr = 51;
    /**
     * <code>repeated float blobs_lr = 51;</code>
     *
     * <pre>
     * The ratio that is multiplied on the global learning rate. If you want to
     * set the learning ratio for one blob, you need to set it for all blobs.
     * </pre>
     */
    java.util.List<java.lang.Float> getBlobsLrList();
    /**
     * <code>repeated float blobs_lr = 51;</code>
     *
     * <pre>
     * The ratio that is multiplied on the global learning rate. If you want to
     * set the learning ratio for one blob, you need to set it for all blobs.
     * </pre>
     */
    int getBlobsLrCount();
    /**
     * <code>repeated float blobs_lr = 51;</code>
     *
     * <pre>
     * The ratio that is multiplied on the global learning rate. If you want to
     * set the learning ratio for one blob, you need to set it for all blobs.
     * </pre>
     */
    float getBlobsLr(int index);

    // repeated float weight_decay = 52;
    /**
     * <code>repeated float weight_decay = 52;</code>
     *
     * <pre>
     * The weight decay that is multiplied on the global weight decay.
     * </pre>
     */
    java.util.List<java.lang.Float> getWeightDecayList();
    /**
     * <code>repeated float weight_decay = 52;</code>
     *
     * <pre>
     * The weight decay that is multiplied on the global weight decay.
     * </pre>
     */
    int getWeightDecayCount();
    /**
     * <code>repeated float weight_decay = 52;</code>
     *
     * <pre>
     * The weight decay that is multiplied on the global weight decay.
     * </pre>
     */
    float getWeightDecay(int index);

    // optional uint32 rand_skip = 53 [default = 0];
    /**
     * <code>optional uint32 rand_skip = 53 [default = 0];</code>
     *
     * <pre>
     * The rand_skip variable is for the data layer to skip a few data points
     * to avoid all asynchronous sgd clients to start at the same point. The skip
     * point would be set as rand_skip * rand(0,1). Note that rand_skip should not
     * be larger than the number of keys in the database.
     * </pre>
     */
    boolean hasRandSkip();
    /**
     * <code>optional uint32 rand_skip = 53 [default = 0];</code>
     *
     * <pre>
     * The rand_skip variable is for the data layer to skip a few data points
     * to avoid all asynchronous sgd clients to start at the same point. The skip
     * point would be set as rand_skip * rand(0,1). Note that rand_skip should not
     * be larger than the number of keys in the database.
     * </pre>
     */
    int getRandSkip();

    // optional float det_fg_threshold = 54 [default = 0.5];
    /**
     * <code>optional float det_fg_threshold = 54 [default = 0.5];</code>
     *
     * <pre>
     * Fields related to detection (det_*)
     * foreground (object) overlap threshold
     * </pre>
     */
    boolean hasDetFgThreshold();
    /**
     * <code>optional float det_fg_threshold = 54 [default = 0.5];</code>
     *
     * <pre>
     * Fields related to detection (det_*)
     * foreground (object) overlap threshold
     * </pre>
     */
    float getDetFgThreshold();

    // optional float det_bg_threshold = 55 [default = 0.5];
    /**
     * <code>optional float det_bg_threshold = 55 [default = 0.5];</code>
     *
     * <pre>
     * background (non-object) overlap threshold
     * </pre>
     */
    boolean hasDetBgThreshold();
    /**
     * <code>optional float det_bg_threshold = 55 [default = 0.5];</code>
     *
     * <pre>
     * background (non-object) overlap threshold
     * </pre>
     */
    float getDetBgThreshold();

    // optional float det_fg_fraction = 56 [default = 0.25];
    /**
     * <code>optional float det_fg_fraction = 56 [default = 0.25];</code>
     *
     * <pre>
     * Fraction of batch that should be foreground objects
     * </pre>
     */
    boolean hasDetFgFraction();
    /**
     * <code>optional float det_fg_fraction = 56 [default = 0.25];</code>
     *
     * <pre>
     * Fraction of batch that should be foreground objects
     * </pre>
     */
    float getDetFgFraction();

    // optional uint32 det_context_pad = 58 [default = 0];
    /**
     * <code>optional uint32 det_context_pad = 58 [default = 0];</code>
     *
     * <pre>
     * Amount of contextual padding to add around a window
     * (used only by the window_data_layer)
     * </pre>
     */
    boolean hasDetContextPad();
    /**
     * <code>optional uint32 det_context_pad = 58 [default = 0];</code>
     *
     * <pre>
     * Amount of contextual padding to add around a window
     * (used only by the window_data_layer)
     * </pre>
     */
    int getDetContextPad();

    // optional string det_crop_mode = 59 [default = "warp"];
    /**
     * <code>optional string det_crop_mode = 59 [default = "warp"];</code>
     *
     * <pre>
     * Mode for cropping out a detection window
     * warp: cropped window is warped to a fixed size and aspect ratio
     * square: the tightest square around the window is cropped
     * </pre>
     */
    boolean hasDetCropMode();
    /**
     * <code>optional string det_crop_mode = 59 [default = "warp"];</code>
     *
     * <pre>
     * Mode for cropping out a detection window
     * warp: cropped window is warped to a fixed size and aspect ratio
     * square: the tightest square around the window is cropped
     * </pre>
     */
    java.lang.String getDetCropMode();
    /**
     * <code>optional string det_crop_mode = 59 [default = "warp"];</code>
     *
     * <pre>
     * Mode for cropping out a detection window
     * warp: cropped window is warped to a fixed size and aspect ratio
     * square: the tightest square around the window is cropped
     * </pre>
     */
    com.google.protobuf.ByteString
        getDetCropModeBytes();

    // optional int32 new_num = 60 [default = 0];
    /**
     * <code>optional int32 new_num = 60 [default = 0];</code>
     *
     * <pre>
     * For ReshapeLayer, one needs to specify the new dimensions.
     * </pre>
     */
    boolean hasNewNum();
    /**
     * <code>optional int32 new_num = 60 [default = 0];</code>
     *
     * <pre>
     * For ReshapeLayer, one needs to specify the new dimensions.
     * </pre>
     */
    int getNewNum();

    // optional int32 new_channels = 61 [default = 0];
    /**
     * <code>optional int32 new_channels = 61 [default = 0];</code>
     */
    boolean hasNewChannels();
    /**
     * <code>optional int32 new_channels = 61 [default = 0];</code>
     */
    int getNewChannels();

    // optional int32 new_height = 62 [default = 0];
    /**
     * <code>optional int32 new_height = 62 [default = 0];</code>
     */
    boolean hasNewHeight();
    /**
     * <code>optional int32 new_height = 62 [default = 0];</code>
     */
    int getNewHeight();

    // optional int32 new_width = 63 [default = 0];
    /**
     * <code>optional int32 new_width = 63 [default = 0];</code>
     */
    boolean hasNewWidth();
    /**
     * <code>optional int32 new_width = 63 [default = 0];</code>
     */
    int getNewWidth();

    // optional bool shuffle_images = 64 [default = false];
    /**
     * <code>optional bool shuffle_images = 64 [default = false];</code>
     *
     * <pre>
     * Whether or not ImageLayer should shuffle the list of files at every epoch.
     * It will also resize images if new_height or new_width are not zero.
     * </pre>
     */
    boolean hasShuffleImages();
    /**
     * <code>optional bool shuffle_images = 64 [default = false];</code>
     *
     * <pre>
     * Whether or not ImageLayer should shuffle the list of files at every epoch.
     * It will also resize images if new_height or new_width are not zero.
     * </pre>
     */
    boolean getShuffleImages();

    // optional uint32 concat_dim = 65 [default = 1];
    /**
     * <code>optional uint32 concat_dim = 65 [default = 1];</code>
     *
     * <pre>
     * For ConcatLayer, one needs to specify the dimension for concatenation, and
     * the other dimensions must be the same for all the bottom blobs.
     * By default it will concatenate blobs along the channels dimension.
     * </pre>
     */
    boolean hasConcatDim();
    /**
     * <code>optional uint32 concat_dim = 65 [default = 1];</code>
     *
     * <pre>
     * For ConcatLayer, one needs to specify the dimension for concatenation, and
     * the other dimensions must be the same for all the bottom blobs.
     * By default it will concatenate blobs along the channels dimension.
     * </pre>
     */
    int getConcatDim();

    // optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;
    /**
     * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;</code>
     */
    boolean hasHdf5OutputParam();
    /**
     * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;</code>
     */
    caffe.Caffe.HDF5OutputParameter getHdf5OutputParam();
    /**
     * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;</code>
     */
    caffe.Caffe.HDF5OutputParameterOrBuilder getHdf5OutputParamOrBuilder();
  }
  /**
   * Protobuf type {@code caffe.V0LayerParameter}
   *
   * <pre>
   * DEPRECATED: V0LayerParameter is the old way of specifying layer parameters
   * in Caffe.  We keep this message type around for legacy support.
   * </pre>
   */
  public static final class V0LayerParameter extends
      com.google.protobuf.GeneratedMessage
      implements V0LayerParameterOrBuilder {
    // Use V0LayerParameter.newBuilder() to construct.
    private V0LayerParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private V0LayerParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final V0LayerParameter defaultInstance;
    public static V0LayerParameter getDefaultInstance() {
      return defaultInstance;
    }

    public V0LayerParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private V0LayerParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      int mutable_bitField1_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              name_ = input.readBytes();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              type_ = input.readBytes();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              numOutput_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              biasterm_ = input.readBool();
              break;
            }
            case 42: {
              caffe.Caffe.FillerParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = weightFiller_.toBuilder();
              }
              weightFiller_ = input.readMessage(caffe.Caffe.FillerParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(weightFiller_);
                weightFiller_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
            case 50: {
              caffe.Caffe.FillerParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00000020) == 0x00000020)) {
                subBuilder = biasFiller_.toBuilder();
              }
              biasFiller_ = input.readMessage(caffe.Caffe.FillerParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(biasFiller_);
                biasFiller_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000020;
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              pad_ = input.readUInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              kernelsize_ = input.readUInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              group_ = input.readUInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              stride_ = input.readUInt32();
              break;
            }
            case 88: {
              int rawValue = input.readEnum();
              caffe.Caffe.V0LayerParameter.PoolMethod value = caffe.Caffe.V0LayerParameter.PoolMethod.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(11, rawValue);
              } else {
                bitField0_ |= 0x00000400;
                pool_ = value;
              }
              break;
            }
            case 101: {
              bitField0_ |= 0x00000800;
              dropoutRatio_ = input.readFloat();
              break;
            }
            case 104: {
              bitField0_ |= 0x00001000;
              localSize_ = input.readUInt32();
              break;
            }
            case 117: {
              bitField0_ |= 0x00002000;
              alpha_ = input.readFloat();
              break;
            }
            case 125: {
              bitField0_ |= 0x00004000;
              beta_ = input.readFloat();
              break;
            }
            case 130: {
              bitField0_ |= 0x00010000;
              source_ = input.readBytes();
              break;
            }
            case 141: {
              bitField0_ |= 0x00020000;
              scale_ = input.readFloat();
              break;
            }
            case 146: {
              bitField0_ |= 0x00040000;
              meanfile_ = input.readBytes();
              break;
            }
            case 152: {
              bitField0_ |= 0x00080000;
              batchsize_ = input.readUInt32();
              break;
            }
            case 160: {
              bitField0_ |= 0x00100000;
              cropsize_ = input.readUInt32();
              break;
            }
            case 168: {
              bitField0_ |= 0x00200000;
              mirror_ = input.readBool();
              break;
            }
            case 181: {
              bitField0_ |= 0x00008000;
              k_ = input.readFloat();
              break;
            }
            case 402: {
              if (!((mutable_bitField0_ & 0x00400000) == 0x00400000)) {
                blobs_ = new java.util.ArrayList<caffe.Caffe.BlobProto>();
                mutable_bitField0_ |= 0x00400000;
              }
              blobs_.add(input.readMessage(caffe.Caffe.BlobProto.PARSER, extensionRegistry));
              break;
            }
            case 413: {
              if (!((mutable_bitField0_ & 0x00800000) == 0x00800000)) {
                blobsLr_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00800000;
              }
              blobsLr_.add(input.readFloat());
              break;
            }
            case 410: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00800000) == 0x00800000) && input.getBytesUntilLimit() > 0) {
                blobsLr_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00800000;
              }
              while (input.getBytesUntilLimit() > 0) {
                blobsLr_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 421: {
              if (!((mutable_bitField0_ & 0x01000000) == 0x01000000)) {
                weightDecay_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x01000000;
              }
              weightDecay_.add(input.readFloat());
              break;
            }
            case 418: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x01000000) == 0x01000000) && input.getBytesUntilLimit() > 0) {
                weightDecay_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x01000000;
              }
              while (input.getBytesUntilLimit() > 0) {
                weightDecay_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 424: {
              bitField0_ |= 0x00400000;
              randSkip_ = input.readUInt32();
              break;
            }
            case 437: {
              bitField0_ |= 0x00800000;
              detFgThreshold_ = input.readFloat();
              break;
            }
            case 445: {
              bitField0_ |= 0x01000000;
              detBgThreshold_ = input.readFloat();
              break;
            }
            case 453: {
              bitField0_ |= 0x02000000;
              detFgFraction_ = input.readFloat();
              break;
            }
            case 464: {
              bitField0_ |= 0x04000000;
              detContextPad_ = input.readUInt32();
              break;
            }
            case 474: {
              bitField0_ |= 0x08000000;
              detCropMode_ = input.readBytes();
              break;
            }
            case 480: {
              bitField0_ |= 0x10000000;
              newNum_ = input.readInt32();
              break;
            }
            case 488: {
              bitField0_ |= 0x20000000;
              newChannels_ = input.readInt32();
              break;
            }
            case 496: {
              bitField0_ |= 0x40000000;
              newHeight_ = input.readInt32();
              break;
            }
            case 504: {
              bitField0_ |= 0x80000000;
              newWidth_ = input.readInt32();
              break;
            }
            case 512: {
              bitField1_ |= 0x00000001;
              shuffleImages_ = input.readBool();
              break;
            }
            case 520: {
              bitField1_ |= 0x00000002;
              concatDim_ = input.readUInt32();
              break;
            }
            case 8010: {
              caffe.Caffe.HDF5OutputParameter.Builder subBuilder = null;
              if (((bitField1_ & 0x00000004) == 0x00000004)) {
                subBuilder = hdf5OutputParam_.toBuilder();
              }
              hdf5OutputParam_ = input.readMessage(caffe.Caffe.HDF5OutputParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(hdf5OutputParam_);
                hdf5OutputParam_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00000004;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00400000) == 0x00400000)) {
          blobs_ = java.util.Collections.unmodifiableList(blobs_);
        }
        if (((mutable_bitField0_ & 0x00800000) == 0x00800000)) {
          blobsLr_ = java.util.Collections.unmodifiableList(blobsLr_);
        }
        if (((mutable_bitField0_ & 0x01000000) == 0x01000000)) {
          weightDecay_ = java.util.Collections.unmodifiableList(weightDecay_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_V0LayerParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_V0LayerParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.V0LayerParameter.class, caffe.Caffe.V0LayerParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<V0LayerParameter> PARSER =
        new com.google.protobuf.AbstractParser<V0LayerParameter>() {
      public V0LayerParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new V0LayerParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<V0LayerParameter> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code caffe.V0LayerParameter.PoolMethod}
     */
    public enum PoolMethod
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>MAX = 0;</code>
       */
      MAX(0, 0),
      /**
       * <code>AVE = 1;</code>
       */
      AVE(1, 1),
      /**
       * <code>STOCHASTIC = 2;</code>
       */
      STOCHASTIC(2, 2),
      ;

      /**
       * <code>MAX = 0;</code>
       */
      public static final int MAX_VALUE = 0;
      /**
       * <code>AVE = 1;</code>
       */
      public static final int AVE_VALUE = 1;
      /**
       * <code>STOCHASTIC = 2;</code>
       */
      public static final int STOCHASTIC_VALUE = 2;


      public final int getNumber() { return value; }

      public static PoolMethod valueOf(int value) {
        switch (value) {
          case 0: return MAX;
          case 1: return AVE;
          case 2: return STOCHASTIC;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<PoolMethod>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<PoolMethod>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<PoolMethod>() {
              public PoolMethod findValueByNumber(int number) {
                return PoolMethod.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return caffe.Caffe.V0LayerParameter.getDescriptor().getEnumTypes().get(0);
      }

      private static final PoolMethod[] VALUES = values();

      public static PoolMethod valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private PoolMethod(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:caffe.V0LayerParameter.PoolMethod)
    }

    private int bitField0_;
    private int bitField1_;
    // optional string name = 1;
    public static final int NAME_FIELD_NUMBER = 1;
    private java.lang.Object name_;
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * the layer name
     * </pre>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * the layer name
     * </pre>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * the layer name
     * </pre>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional string type = 2;
    public static final int TYPE_FIELD_NUMBER = 2;
    private java.lang.Object type_;
    /**
     * <code>optional string type = 2;</code>
     *
     * <pre>
     * the string to specify the layer type
     * </pre>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string type = 2;</code>
     *
     * <pre>
     * the string to specify the layer type
     * </pre>
     */
    public java.lang.String getType() {
      java.lang.Object ref = type_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          type_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string type = 2;</code>
     *
     * <pre>
     * the string to specify the layer type
     * </pre>
     */
    public com.google.protobuf.ByteString
        getTypeBytes() {
      java.lang.Object ref = type_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        type_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional uint32 num_output = 3;
    public static final int NUM_OUTPUT_FIELD_NUMBER = 3;
    private int numOutput_;
    /**
     * <code>optional uint32 num_output = 3;</code>
     *
     * <pre>
     * Parameters to specify layers with inner products.
     * </pre>
     */
    public boolean hasNumOutput() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 num_output = 3;</code>
     *
     * <pre>
     * Parameters to specify layers with inner products.
     * </pre>
     */
    public int getNumOutput() {
      return numOutput_;
    }

    // optional bool biasterm = 4 [default = true];
    public static final int BIASTERM_FIELD_NUMBER = 4;
    private boolean biasterm_;
    /**
     * <code>optional bool biasterm = 4 [default = true];</code>
     *
     * <pre>
     * whether to have bias terms
     * </pre>
     */
    public boolean hasBiasterm() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional bool biasterm = 4 [default = true];</code>
     *
     * <pre>
     * whether to have bias terms
     * </pre>
     */
    public boolean getBiasterm() {
      return biasterm_;
    }

    // optional .caffe.FillerParameter weight_filler = 5;
    public static final int WEIGHT_FILLER_FIELD_NUMBER = 5;
    private caffe.Caffe.FillerParameter weightFiller_;
    /**
     * <code>optional .caffe.FillerParameter weight_filler = 5;</code>
     *
     * <pre>
     * The filler for the weight
     * </pre>
     */
    public boolean hasWeightFiller() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .caffe.FillerParameter weight_filler = 5;</code>
     *
     * <pre>
     * The filler for the weight
     * </pre>
     */
    public caffe.Caffe.FillerParameter getWeightFiller() {
      return weightFiller_;
    }
    /**
     * <code>optional .caffe.FillerParameter weight_filler = 5;</code>
     *
     * <pre>
     * The filler for the weight
     * </pre>
     */
    public caffe.Caffe.FillerParameterOrBuilder getWeightFillerOrBuilder() {
      return weightFiller_;
    }

    // optional .caffe.FillerParameter bias_filler = 6;
    public static final int BIAS_FILLER_FIELD_NUMBER = 6;
    private caffe.Caffe.FillerParameter biasFiller_;
    /**
     * <code>optional .caffe.FillerParameter bias_filler = 6;</code>
     *
     * <pre>
     * The filler for the bias
     * </pre>
     */
    public boolean hasBiasFiller() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .caffe.FillerParameter bias_filler = 6;</code>
     *
     * <pre>
     * The filler for the bias
     * </pre>
     */
    public caffe.Caffe.FillerParameter getBiasFiller() {
      return biasFiller_;
    }
    /**
     * <code>optional .caffe.FillerParameter bias_filler = 6;</code>
     *
     * <pre>
     * The filler for the bias
     * </pre>
     */
    public caffe.Caffe.FillerParameterOrBuilder getBiasFillerOrBuilder() {
      return biasFiller_;
    }

    // optional uint32 pad = 7 [default = 0];
    public static final int PAD_FIELD_NUMBER = 7;
    private int pad_;
    /**
     * <code>optional uint32 pad = 7 [default = 0];</code>
     *
     * <pre>
     * The padding size
     * </pre>
     */
    public boolean hasPad() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional uint32 pad = 7 [default = 0];</code>
     *
     * <pre>
     * The padding size
     * </pre>
     */
    public int getPad() {
      return pad_;
    }

    // optional uint32 kernelsize = 8;
    public static final int KERNELSIZE_FIELD_NUMBER = 8;
    private int kernelsize_;
    /**
     * <code>optional uint32 kernelsize = 8;</code>
     *
     * <pre>
     * The kernel size
     * </pre>
     */
    public boolean hasKernelsize() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional uint32 kernelsize = 8;</code>
     *
     * <pre>
     * The kernel size
     * </pre>
     */
    public int getKernelsize() {
      return kernelsize_;
    }

    // optional uint32 group = 9 [default = 1];
    public static final int GROUP_FIELD_NUMBER = 9;
    private int group_;
    /**
     * <code>optional uint32 group = 9 [default = 1];</code>
     *
     * <pre>
     * The group size for group conv
     * </pre>
     */
    public boolean hasGroup() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional uint32 group = 9 [default = 1];</code>
     *
     * <pre>
     * The group size for group conv
     * </pre>
     */
    public int getGroup() {
      return group_;
    }

    // optional uint32 stride = 10 [default = 1];
    public static final int STRIDE_FIELD_NUMBER = 10;
    private int stride_;
    /**
     * <code>optional uint32 stride = 10 [default = 1];</code>
     *
     * <pre>
     * The stride
     * </pre>
     */
    public boolean hasStride() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional uint32 stride = 10 [default = 1];</code>
     *
     * <pre>
     * The stride
     * </pre>
     */
    public int getStride() {
      return stride_;
    }

    // optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];
    public static final int POOL_FIELD_NUMBER = 11;
    private caffe.Caffe.V0LayerParameter.PoolMethod pool_;
    /**
     * <code>optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];</code>
     *
     * <pre>
     * The pooling method
     * </pre>
     */
    public boolean hasPool() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];</code>
     *
     * <pre>
     * The pooling method
     * </pre>
     */
    public caffe.Caffe.V0LayerParameter.PoolMethod getPool() {
      return pool_;
    }

    // optional float dropout_ratio = 12 [default = 0.5];
    public static final int DROPOUT_RATIO_FIELD_NUMBER = 12;
    private float dropoutRatio_;
    /**
     * <code>optional float dropout_ratio = 12 [default = 0.5];</code>
     *
     * <pre>
     * dropout ratio
     * </pre>
     */
    public boolean hasDropoutRatio() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional float dropout_ratio = 12 [default = 0.5];</code>
     *
     * <pre>
     * dropout ratio
     * </pre>
     */
    public float getDropoutRatio() {
      return dropoutRatio_;
    }

    // optional uint32 local_size = 13 [default = 5];
    public static final int LOCAL_SIZE_FIELD_NUMBER = 13;
    private int localSize_;
    /**
     * <code>optional uint32 local_size = 13 [default = 5];</code>
     *
     * <pre>
     * for local response norm
     * </pre>
     */
    public boolean hasLocalSize() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional uint32 local_size = 13 [default = 5];</code>
     *
     * <pre>
     * for local response norm
     * </pre>
     */
    public int getLocalSize() {
      return localSize_;
    }

    // optional float alpha = 14 [default = 1];
    public static final int ALPHA_FIELD_NUMBER = 14;
    private float alpha_;
    /**
     * <code>optional float alpha = 14 [default = 1];</code>
     *
     * <pre>
     * for local response norm
     * </pre>
     */
    public boolean hasAlpha() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional float alpha = 14 [default = 1];</code>
     *
     * <pre>
     * for local response norm
     * </pre>
     */
    public float getAlpha() {
      return alpha_;
    }

    // optional float beta = 15 [default = 0.75];
    public static final int BETA_FIELD_NUMBER = 15;
    private float beta_;
    /**
     * <code>optional float beta = 15 [default = 0.75];</code>
     *
     * <pre>
     * for local response norm
     * </pre>
     */
    public boolean hasBeta() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional float beta = 15 [default = 0.75];</code>
     *
     * <pre>
     * for local response norm
     * </pre>
     */
    public float getBeta() {
      return beta_;
    }

    // optional float k = 22 [default = 1];
    public static final int K_FIELD_NUMBER = 22;
    private float k_;
    /**
     * <code>optional float k = 22 [default = 1];</code>
     */
    public boolean hasK() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional float k = 22 [default = 1];</code>
     */
    public float getK() {
      return k_;
    }

    // optional string source = 16;
    public static final int SOURCE_FIELD_NUMBER = 16;
    private java.lang.Object source_;
    /**
     * <code>optional string source = 16;</code>
     *
     * <pre>
     * For data layers, specify the data source
     * </pre>
     */
    public boolean hasSource() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional string source = 16;</code>
     *
     * <pre>
     * For data layers, specify the data source
     * </pre>
     */
    public java.lang.String getSource() {
      java.lang.Object ref = source_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          source_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string source = 16;</code>
     *
     * <pre>
     * For data layers, specify the data source
     * </pre>
     */
    public com.google.protobuf.ByteString
        getSourceBytes() {
      java.lang.Object ref = source_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        source_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional float scale = 17 [default = 1];
    public static final int SCALE_FIELD_NUMBER = 17;
    private float scale_;
    /**
     * <code>optional float scale = 17 [default = 1];</code>
     *
     * <pre>
     * For data pre-processing, we can do simple scaling and subtracting the
     * data mean, if provided. Note that the mean subtraction is always carried
     * out before scaling.
     * </pre>
     */
    public boolean hasScale() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional float scale = 17 [default = 1];</code>
     *
     * <pre>
     * For data pre-processing, we can do simple scaling and subtracting the
     * data mean, if provided. Note that the mean subtraction is always carried
     * out before scaling.
     * </pre>
     */
    public float getScale() {
      return scale_;
    }

    // optional string meanfile = 18;
    public static final int MEANFILE_FIELD_NUMBER = 18;
    private java.lang.Object meanfile_;
    /**
     * <code>optional string meanfile = 18;</code>
     */
    public boolean hasMeanfile() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>optional string meanfile = 18;</code>
     */
    public java.lang.String getMeanfile() {
      java.lang.Object ref = meanfile_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          meanfile_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string meanfile = 18;</code>
     */
    public com.google.protobuf.ByteString
        getMeanfileBytes() {
      java.lang.Object ref = meanfile_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        meanfile_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional uint32 batchsize = 19;
    public static final int BATCHSIZE_FIELD_NUMBER = 19;
    private int batchsize_;
    /**
     * <code>optional uint32 batchsize = 19;</code>
     *
     * <pre>
     * For data layers, specify the batch size.
     * </pre>
     */
    public boolean hasBatchsize() {
      return ((bitField0_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>optional uint32 batchsize = 19;</code>
     *
     * <pre>
     * For data layers, specify the batch size.
     * </pre>
     */
    public int getBatchsize() {
      return batchsize_;
    }

    // optional uint32 cropsize = 20 [default = 0];
    public static final int CROPSIZE_FIELD_NUMBER = 20;
    private int cropsize_;
    /**
     * <code>optional uint32 cropsize = 20 [default = 0];</code>
     *
     * <pre>
     * For data layers, specify if we would like to randomly crop an image.
     * </pre>
     */
    public boolean hasCropsize() {
      return ((bitField0_ & 0x00100000) == 0x00100000);
    }
    /**
     * <code>optional uint32 cropsize = 20 [default = 0];</code>
     *
     * <pre>
     * For data layers, specify if we would like to randomly crop an image.
     * </pre>
     */
    public int getCropsize() {
      return cropsize_;
    }

    // optional bool mirror = 21 [default = false];
    public static final int MIRROR_FIELD_NUMBER = 21;
    private boolean mirror_;
    /**
     * <code>optional bool mirror = 21 [default = false];</code>
     *
     * <pre>
     * For data layers, specify if we want to randomly mirror data.
     * </pre>
     */
    public boolean hasMirror() {
      return ((bitField0_ & 0x00200000) == 0x00200000);
    }
    /**
     * <code>optional bool mirror = 21 [default = false];</code>
     *
     * <pre>
     * For data layers, specify if we want to randomly mirror data.
     * </pre>
     */
    public boolean getMirror() {
      return mirror_;
    }

    // repeated .caffe.BlobProto blobs = 50;
    public static final int BLOBS_FIELD_NUMBER = 50;
    private java.util.List<caffe.Caffe.BlobProto> blobs_;
    /**
     * <code>repeated .caffe.BlobProto blobs = 50;</code>
     *
     * <pre>
     * The blobs containing the numeric parameters of the layer
     * </pre>
     */
    public java.util.List<caffe.Caffe.BlobProto> getBlobsList() {
      return blobs_;
    }
    /**
     * <code>repeated .caffe.BlobProto blobs = 50;</code>
     *
     * <pre>
     * The blobs containing the numeric parameters of the layer
     * </pre>
     */
    public java.util.List<? extends caffe.Caffe.BlobProtoOrBuilder> 
        getBlobsOrBuilderList() {
      return blobs_;
    }
    /**
     * <code>repeated .caffe.BlobProto blobs = 50;</code>
     *
     * <pre>
     * The blobs containing the numeric parameters of the layer
     * </pre>
     */
    public int getBlobsCount() {
      return blobs_.size();
    }
    /**
     * <code>repeated .caffe.BlobProto blobs = 50;</code>
     *
     * <pre>
     * The blobs containing the numeric parameters of the layer
     * </pre>
     */
    public caffe.Caffe.BlobProto getBlobs(int index) {
      return blobs_.get(index);
    }
    /**
     * <code>repeated .caffe.BlobProto blobs = 50;</code>
     *
     * <pre>
     * The blobs containing the numeric parameters of the layer
     * </pre>
     */
    public caffe.Caffe.BlobProtoOrBuilder getBlobsOrBuilder(
        int index) {
      return blobs_.get(index);
    }

    // repeated float blobs_lr = 51;
    public static final int BLOBS_LR_FIELD_NUMBER = 51;
    private java.util.List<java.lang.Float> blobsLr_;
    /**
     * <code>repeated float blobs_lr = 51;</code>
     *
     * <pre>
     * The ratio that is multiplied on the global learning rate. If you want to
     * set the learning ratio for one blob, you need to set it for all blobs.
     * </pre>
     */
    public java.util.List<java.lang.Float>
        getBlobsLrList() {
      return blobsLr_;
    }
    /**
     * <code>repeated float blobs_lr = 51;</code>
     *
     * <pre>
     * The ratio that is multiplied on the global learning rate. If you want to
     * set the learning ratio for one blob, you need to set it for all blobs.
     * </pre>
     */
    public int getBlobsLrCount() {
      return blobsLr_.size();
    }
    /**
     * <code>repeated float blobs_lr = 51;</code>
     *
     * <pre>
     * The ratio that is multiplied on the global learning rate. If you want to
     * set the learning ratio for one blob, you need to set it for all blobs.
     * </pre>
     */
    public float getBlobsLr(int index) {
      return blobsLr_.get(index);
    }

    // repeated float weight_decay = 52;
    public static final int WEIGHT_DECAY_FIELD_NUMBER = 52;
    private java.util.List<java.lang.Float> weightDecay_;
    /**
     * <code>repeated float weight_decay = 52;</code>
     *
     * <pre>
     * The weight decay that is multiplied on the global weight decay.
     * </pre>
     */
    public java.util.List<java.lang.Float>
        getWeightDecayList() {
      return weightDecay_;
    }
    /**
     * <code>repeated float weight_decay = 52;</code>
     *
     * <pre>
     * The weight decay that is multiplied on the global weight decay.
     * </pre>
     */
    public int getWeightDecayCount() {
      return weightDecay_.size();
    }
    /**
     * <code>repeated float weight_decay = 52;</code>
     *
     * <pre>
     * The weight decay that is multiplied on the global weight decay.
     * </pre>
     */
    public float getWeightDecay(int index) {
      return weightDecay_.get(index);
    }

    // optional uint32 rand_skip = 53 [default = 0];
    public static final int RAND_SKIP_FIELD_NUMBER = 53;
    private int randSkip_;
    /**
     * <code>optional uint32 rand_skip = 53 [default = 0];</code>
     *
     * <pre>
     * The rand_skip variable is for the data layer to skip a few data points
     * to avoid all asynchronous sgd clients to start at the same point. The skip
     * point would be set as rand_skip * rand(0,1). Note that rand_skip should not
     * be larger than the number of keys in the database.
     * </pre>
     */
    public boolean hasRandSkip() {
      return ((bitField0_ & 0x00400000) == 0x00400000);
    }
    /**
     * <code>optional uint32 rand_skip = 53 [default = 0];</code>
     *
     * <pre>
     * The rand_skip variable is for the data layer to skip a few data points
     * to avoid all asynchronous sgd clients to start at the same point. The skip
     * point would be set as rand_skip * rand(0,1). Note that rand_skip should not
     * be larger than the number of keys in the database.
     * </pre>
     */
    public int getRandSkip() {
      return randSkip_;
    }

    // optional float det_fg_threshold = 54 [default = 0.5];
    public static final int DET_FG_THRESHOLD_FIELD_NUMBER = 54;
    private float detFgThreshold_;
    /**
     * <code>optional float det_fg_threshold = 54 [default = 0.5];</code>
     *
     * <pre>
     * Fields related to detection (det_*)
     * foreground (object) overlap threshold
     * </pre>
     */
    public boolean hasDetFgThreshold() {
      return ((bitField0_ & 0x00800000) == 0x00800000);
    }
    /**
     * <code>optional float det_fg_threshold = 54 [default = 0.5];</code>
     *
     * <pre>
     * Fields related to detection (det_*)
     * foreground (object) overlap threshold
     * </pre>
     */
    public float getDetFgThreshold() {
      return detFgThreshold_;
    }

    // optional float det_bg_threshold = 55 [default = 0.5];
    public static final int DET_BG_THRESHOLD_FIELD_NUMBER = 55;
    private float detBgThreshold_;
    /**
     * <code>optional float det_bg_threshold = 55 [default = 0.5];</code>
     *
     * <pre>
     * background (non-object) overlap threshold
     * </pre>
     */
    public boolean hasDetBgThreshold() {
      return ((bitField0_ & 0x01000000) == 0x01000000);
    }
    /**
     * <code>optional float det_bg_threshold = 55 [default = 0.5];</code>
     *
     * <pre>
     * background (non-object) overlap threshold
     * </pre>
     */
    public float getDetBgThreshold() {
      return detBgThreshold_;
    }

    // optional float det_fg_fraction = 56 [default = 0.25];
    public static final int DET_FG_FRACTION_FIELD_NUMBER = 56;
    private float detFgFraction_;
    /**
     * <code>optional float det_fg_fraction = 56 [default = 0.25];</code>
     *
     * <pre>
     * Fraction of batch that should be foreground objects
     * </pre>
     */
    public boolean hasDetFgFraction() {
      return ((bitField0_ & 0x02000000) == 0x02000000);
    }
    /**
     * <code>optional float det_fg_fraction = 56 [default = 0.25];</code>
     *
     * <pre>
     * Fraction of batch that should be foreground objects
     * </pre>
     */
    public float getDetFgFraction() {
      return detFgFraction_;
    }

    // optional uint32 det_context_pad = 58 [default = 0];
    public static final int DET_CONTEXT_PAD_FIELD_NUMBER = 58;
    private int detContextPad_;
    /**
     * <code>optional uint32 det_context_pad = 58 [default = 0];</code>
     *
     * <pre>
     * Amount of contextual padding to add around a window
     * (used only by the window_data_layer)
     * </pre>
     */
    public boolean hasDetContextPad() {
      return ((bitField0_ & 0x04000000) == 0x04000000);
    }
    /**
     * <code>optional uint32 det_context_pad = 58 [default = 0];</code>
     *
     * <pre>
     * Amount of contextual padding to add around a window
     * (used only by the window_data_layer)
     * </pre>
     */
    public int getDetContextPad() {
      return detContextPad_;
    }

    // optional string det_crop_mode = 59 [default = "warp"];
    public static final int DET_CROP_MODE_FIELD_NUMBER = 59;
    private java.lang.Object detCropMode_;
    /**
     * <code>optional string det_crop_mode = 59 [default = "warp"];</code>
     *
     * <pre>
     * Mode for cropping out a detection window
     * warp: cropped window is warped to a fixed size and aspect ratio
     * square: the tightest square around the window is cropped
     * </pre>
     */
    public boolean hasDetCropMode() {
      return ((bitField0_ & 0x08000000) == 0x08000000);
    }
    /**
     * <code>optional string det_crop_mode = 59 [default = "warp"];</code>
     *
     * <pre>
     * Mode for cropping out a detection window
     * warp: cropped window is warped to a fixed size and aspect ratio
     * square: the tightest square around the window is cropped
     * </pre>
     */
    public java.lang.String getDetCropMode() {
      java.lang.Object ref = detCropMode_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          detCropMode_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string det_crop_mode = 59 [default = "warp"];</code>
     *
     * <pre>
     * Mode for cropping out a detection window
     * warp: cropped window is warped to a fixed size and aspect ratio
     * square: the tightest square around the window is cropped
     * </pre>
     */
    public com.google.protobuf.ByteString
        getDetCropModeBytes() {
      java.lang.Object ref = detCropMode_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        detCropMode_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional int32 new_num = 60 [default = 0];
    public static final int NEW_NUM_FIELD_NUMBER = 60;
    private int newNum_;
    /**
     * <code>optional int32 new_num = 60 [default = 0];</code>
     *
     * <pre>
     * For ReshapeLayer, one needs to specify the new dimensions.
     * </pre>
     */
    public boolean hasNewNum() {
      return ((bitField0_ & 0x10000000) == 0x10000000);
    }
    /**
     * <code>optional int32 new_num = 60 [default = 0];</code>
     *
     * <pre>
     * For ReshapeLayer, one needs to specify the new dimensions.
     * </pre>
     */
    public int getNewNum() {
      return newNum_;
    }

    // optional int32 new_channels = 61 [default = 0];
    public static final int NEW_CHANNELS_FIELD_NUMBER = 61;
    private int newChannels_;
    /**
     * <code>optional int32 new_channels = 61 [default = 0];</code>
     */
    public boolean hasNewChannels() {
      return ((bitField0_ & 0x20000000) == 0x20000000);
    }
    /**
     * <code>optional int32 new_channels = 61 [default = 0];</code>
     */
    public int getNewChannels() {
      return newChannels_;
    }

    // optional int32 new_height = 62 [default = 0];
    public static final int NEW_HEIGHT_FIELD_NUMBER = 62;
    private int newHeight_;
    /**
     * <code>optional int32 new_height = 62 [default = 0];</code>
     */
    public boolean hasNewHeight() {
      return ((bitField0_ & 0x40000000) == 0x40000000);
    }
    /**
     * <code>optional int32 new_height = 62 [default = 0];</code>
     */
    public int getNewHeight() {
      return newHeight_;
    }

    // optional int32 new_width = 63 [default = 0];
    public static final int NEW_WIDTH_FIELD_NUMBER = 63;
    private int newWidth_;
    /**
     * <code>optional int32 new_width = 63 [default = 0];</code>
     */
    public boolean hasNewWidth() {
      return ((bitField0_ & 0x80000000) == 0x80000000);
    }
    /**
     * <code>optional int32 new_width = 63 [default = 0];</code>
     */
    public int getNewWidth() {
      return newWidth_;
    }

    // optional bool shuffle_images = 64 [default = false];
    public static final int SHUFFLE_IMAGES_FIELD_NUMBER = 64;
    private boolean shuffleImages_;
    /**
     * <code>optional bool shuffle_images = 64 [default = false];</code>
     *
     * <pre>
     * Whether or not ImageLayer should shuffle the list of files at every epoch.
     * It will also resize images if new_height or new_width are not zero.
     * </pre>
     */
    public boolean hasShuffleImages() {
      return ((bitField1_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional bool shuffle_images = 64 [default = false];</code>
     *
     * <pre>
     * Whether or not ImageLayer should shuffle the list of files at every epoch.
     * It will also resize images if new_height or new_width are not zero.
     * </pre>
     */
    public boolean getShuffleImages() {
      return shuffleImages_;
    }

    // optional uint32 concat_dim = 65 [default = 1];
    public static final int CONCAT_DIM_FIELD_NUMBER = 65;
    private int concatDim_;
    /**
     * <code>optional uint32 concat_dim = 65 [default = 1];</code>
     *
     * <pre>
     * For ConcatLayer, one needs to specify the dimension for concatenation, and
     * the other dimensions must be the same for all the bottom blobs.
     * By default it will concatenate blobs along the channels dimension.
     * </pre>
     */
    public boolean hasConcatDim() {
      return ((bitField1_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 concat_dim = 65 [default = 1];</code>
     *
     * <pre>
     * For ConcatLayer, one needs to specify the dimension for concatenation, and
     * the other dimensions must be the same for all the bottom blobs.
     * By default it will concatenate blobs along the channels dimension.
     * </pre>
     */
    public int getConcatDim() {
      return concatDim_;
    }

    // optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;
    public static final int HDF5_OUTPUT_PARAM_FIELD_NUMBER = 1001;
    private caffe.Caffe.HDF5OutputParameter hdf5OutputParam_;
    /**
     * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;</code>
     */
    public boolean hasHdf5OutputParam() {
      return ((bitField1_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;</code>
     */
    public caffe.Caffe.HDF5OutputParameter getHdf5OutputParam() {
      return hdf5OutputParam_;
    }
    /**
     * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;</code>
     */
    public caffe.Caffe.HDF5OutputParameterOrBuilder getHdf5OutputParamOrBuilder() {
      return hdf5OutputParam_;
    }

    private void initFields() {
      name_ = "";
      type_ = "";
      numOutput_ = 0;
      biasterm_ = true;
      weightFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
      biasFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
      pad_ = 0;
      kernelsize_ = 0;
      group_ = 1;
      stride_ = 1;
      pool_ = caffe.Caffe.V0LayerParameter.PoolMethod.MAX;
      dropoutRatio_ = 0.5F;
      localSize_ = 5;
      alpha_ = 1F;
      beta_ = 0.75F;
      k_ = 1F;
      source_ = "";
      scale_ = 1F;
      meanfile_ = "";
      batchsize_ = 0;
      cropsize_ = 0;
      mirror_ = false;
      blobs_ = java.util.Collections.emptyList();
      blobsLr_ = java.util.Collections.emptyList();
      weightDecay_ = java.util.Collections.emptyList();
      randSkip_ = 0;
      detFgThreshold_ = 0.5F;
      detBgThreshold_ = 0.5F;
      detFgFraction_ = 0.25F;
      detContextPad_ = 0;
      detCropMode_ = "warp";
      newNum_ = 0;
      newChannels_ = 0;
      newHeight_ = 0;
      newWidth_ = 0;
      shuffleImages_ = false;
      concatDim_ = 1;
      hdf5OutputParam_ = caffe.Caffe.HDF5OutputParameter.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getNameBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getTypeBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, numOutput_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBool(4, biasterm_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(5, weightFiller_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(6, biasFiller_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeUInt32(7, pad_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeUInt32(8, kernelsize_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeUInt32(9, group_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeUInt32(10, stride_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeEnum(11, pool_.getNumber());
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeFloat(12, dropoutRatio_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeUInt32(13, localSize_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeFloat(14, alpha_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeFloat(15, beta_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeBytes(16, getSourceBytes());
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeFloat(17, scale_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeBytes(18, getMeanfileBytes());
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        output.writeUInt32(19, batchsize_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        output.writeUInt32(20, cropsize_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        output.writeBool(21, mirror_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeFloat(22, k_);
      }
      for (int i = 0; i < blobs_.size(); i++) {
        output.writeMessage(50, blobs_.get(i));
      }
      for (int i = 0; i < blobsLr_.size(); i++) {
        output.writeFloat(51, blobsLr_.get(i));
      }
      for (int i = 0; i < weightDecay_.size(); i++) {
        output.writeFloat(52, weightDecay_.get(i));
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        output.writeUInt32(53, randSkip_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        output.writeFloat(54, detFgThreshold_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        output.writeFloat(55, detBgThreshold_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        output.writeFloat(56, detFgFraction_);
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        output.writeUInt32(58, detContextPad_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        output.writeBytes(59, getDetCropModeBytes());
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        output.writeInt32(60, newNum_);
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        output.writeInt32(61, newChannels_);
      }
      if (((bitField0_ & 0x40000000) == 0x40000000)) {
        output.writeInt32(62, newHeight_);
      }
      if (((bitField0_ & 0x80000000) == 0x80000000)) {
        output.writeInt32(63, newWidth_);
      }
      if (((bitField1_ & 0x00000001) == 0x00000001)) {
        output.writeBool(64, shuffleImages_);
      }
      if (((bitField1_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(65, concatDim_);
      }
      if (((bitField1_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(1001, hdf5OutputParam_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getNameBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getTypeBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, numOutput_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, biasterm_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, weightFiller_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, biasFiller_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, pad_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(8, kernelsize_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(9, group_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(10, stride_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(11, pool_.getNumber());
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(12, dropoutRatio_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(13, localSize_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(14, alpha_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(15, beta_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(16, getSourceBytes());
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(17, scale_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(18, getMeanfileBytes());
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(19, batchsize_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(20, cropsize_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(21, mirror_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(22, k_);
      }
      for (int i = 0; i < blobs_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(50, blobs_.get(i));
      }
      {
        int dataSize = 0;
        dataSize = 4 * getBlobsLrList().size();
        size += dataSize;
        size += 2 * getBlobsLrList().size();
      }
      {
        int dataSize = 0;
        dataSize = 4 * getWeightDecayList().size();
        size += dataSize;
        size += 2 * getWeightDecayList().size();
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(53, randSkip_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(54, detFgThreshold_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(55, detBgThreshold_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(56, detFgFraction_);
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(58, detContextPad_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(59, getDetCropModeBytes());
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(60, newNum_);
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(61, newChannels_);
      }
      if (((bitField0_ & 0x40000000) == 0x40000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(62, newHeight_);
      }
      if (((bitField0_ & 0x80000000) == 0x80000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(63, newWidth_);
      }
      if (((bitField1_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(64, shuffleImages_);
      }
      if (((bitField1_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(65, concatDim_);
      }
      if (((bitField1_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1001, hdf5OutputParam_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.V0LayerParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.V0LayerParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.V0LayerParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.V0LayerParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.V0LayerParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.V0LayerParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.V0LayerParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.V0LayerParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.V0LayerParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.V0LayerParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.V0LayerParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.V0LayerParameter}
     *
     * <pre>
     * DEPRECATED: V0LayerParameter is the old way of specifying layer parameters
     * in Caffe.  We keep this message type around for legacy support.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements caffe.Caffe.V0LayerParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_V0LayerParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_V0LayerParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.V0LayerParameter.class, caffe.Caffe.V0LayerParameter.Builder.class);
      }

      // Construct using caffe.Caffe.V0LayerParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getWeightFillerFieldBuilder();
          getBiasFillerFieldBuilder();
          getBlobsFieldBuilder();
          getHdf5OutputParamFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        numOutput_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        biasterm_ = true;
        bitField0_ = (bitField0_ & ~0x00000008);
        if (weightFillerBuilder_ == null) {
          weightFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
        } else {
          weightFillerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        if (biasFillerBuilder_ == null) {
          biasFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
        } else {
          biasFillerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        pad_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        kernelsize_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        group_ = 1;
        bitField0_ = (bitField0_ & ~0x00000100);
        stride_ = 1;
        bitField0_ = (bitField0_ & ~0x00000200);
        pool_ = caffe.Caffe.V0LayerParameter.PoolMethod.MAX;
        bitField0_ = (bitField0_ & ~0x00000400);
        dropoutRatio_ = 0.5F;
        bitField0_ = (bitField0_ & ~0x00000800);
        localSize_ = 5;
        bitField0_ = (bitField0_ & ~0x00001000);
        alpha_ = 1F;
        bitField0_ = (bitField0_ & ~0x00002000);
        beta_ = 0.75F;
        bitField0_ = (bitField0_ & ~0x00004000);
        k_ = 1F;
        bitField0_ = (bitField0_ & ~0x00008000);
        source_ = "";
        bitField0_ = (bitField0_ & ~0x00010000);
        scale_ = 1F;
        bitField0_ = (bitField0_ & ~0x00020000);
        meanfile_ = "";
        bitField0_ = (bitField0_ & ~0x00040000);
        batchsize_ = 0;
        bitField0_ = (bitField0_ & ~0x00080000);
        cropsize_ = 0;
        bitField0_ = (bitField0_ & ~0x00100000);
        mirror_ = false;
        bitField0_ = (bitField0_ & ~0x00200000);
        if (blobsBuilder_ == null) {
          blobs_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00400000);
        } else {
          blobsBuilder_.clear();
        }
        blobsLr_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00800000);
        weightDecay_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x01000000);
        randSkip_ = 0;
        bitField0_ = (bitField0_ & ~0x02000000);
        detFgThreshold_ = 0.5F;
        bitField0_ = (bitField0_ & ~0x04000000);
        detBgThreshold_ = 0.5F;
        bitField0_ = (bitField0_ & ~0x08000000);
        detFgFraction_ = 0.25F;
        bitField0_ = (bitField0_ & ~0x10000000);
        detContextPad_ = 0;
        bitField0_ = (bitField0_ & ~0x20000000);
        detCropMode_ = "warp";
        bitField0_ = (bitField0_ & ~0x40000000);
        newNum_ = 0;
        bitField0_ = (bitField0_ & ~0x80000000);
        newChannels_ = 0;
        bitField1_ = (bitField1_ & ~0x00000001);
        newHeight_ = 0;
        bitField1_ = (bitField1_ & ~0x00000002);
        newWidth_ = 0;
        bitField1_ = (bitField1_ & ~0x00000004);
        shuffleImages_ = false;
        bitField1_ = (bitField1_ & ~0x00000008);
        concatDim_ = 1;
        bitField1_ = (bitField1_ & ~0x00000010);
        if (hdf5OutputParamBuilder_ == null) {
          hdf5OutputParam_ = caffe.Caffe.HDF5OutputParameter.getDefaultInstance();
        } else {
          hdf5OutputParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_V0LayerParameter_descriptor;
      }

      public caffe.Caffe.V0LayerParameter getDefaultInstanceForType() {
        return caffe.Caffe.V0LayerParameter.getDefaultInstance();
      }

      public caffe.Caffe.V0LayerParameter build() {
        caffe.Caffe.V0LayerParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.V0LayerParameter buildPartial() {
        caffe.Caffe.V0LayerParameter result = new caffe.Caffe.V0LayerParameter(this);
        int from_bitField0_ = bitField0_;
        int from_bitField1_ = bitField1_;
        int to_bitField0_ = 0;
        int to_bitField1_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.name_ = name_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.numOutput_ = numOutput_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.biasterm_ = biasterm_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        if (weightFillerBuilder_ == null) {
          result.weightFiller_ = weightFiller_;
        } else {
          result.weightFiller_ = weightFillerBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        if (biasFillerBuilder_ == null) {
          result.biasFiller_ = biasFiller_;
        } else {
          result.biasFiller_ = biasFillerBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.pad_ = pad_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.kernelsize_ = kernelsize_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.group_ = group_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.stride_ = stride_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.pool_ = pool_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.dropoutRatio_ = dropoutRatio_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.localSize_ = localSize_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.alpha_ = alpha_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.beta_ = beta_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.k_ = k_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.source_ = source_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00020000;
        }
        result.scale_ = scale_;
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00040000;
        }
        result.meanfile_ = meanfile_;
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00080000;
        }
        result.batchsize_ = batchsize_;
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00100000;
        }
        result.cropsize_ = cropsize_;
        if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
          to_bitField0_ |= 0x00200000;
        }
        result.mirror_ = mirror_;
        if (blobsBuilder_ == null) {
          if (((bitField0_ & 0x00400000) == 0x00400000)) {
            blobs_ = java.util.Collections.unmodifiableList(blobs_);
            bitField0_ = (bitField0_ & ~0x00400000);
          }
          result.blobs_ = blobs_;
        } else {
          result.blobs_ = blobsBuilder_.build();
        }
        if (((bitField0_ & 0x00800000) == 0x00800000)) {
          blobsLr_ = java.util.Collections.unmodifiableList(blobsLr_);
          bitField0_ = (bitField0_ & ~0x00800000);
        }
        result.blobsLr_ = blobsLr_;
        if (((bitField0_ & 0x01000000) == 0x01000000)) {
          weightDecay_ = java.util.Collections.unmodifiableList(weightDecay_);
          bitField0_ = (bitField0_ & ~0x01000000);
        }
        result.weightDecay_ = weightDecay_;
        if (((from_bitField0_ & 0x02000000) == 0x02000000)) {
          to_bitField0_ |= 0x00400000;
        }
        result.randSkip_ = randSkip_;
        if (((from_bitField0_ & 0x04000000) == 0x04000000)) {
          to_bitField0_ |= 0x00800000;
        }
        result.detFgThreshold_ = detFgThreshold_;
        if (((from_bitField0_ & 0x08000000) == 0x08000000)) {
          to_bitField0_ |= 0x01000000;
        }
        result.detBgThreshold_ = detBgThreshold_;
        if (((from_bitField0_ & 0x10000000) == 0x10000000)) {
          to_bitField0_ |= 0x02000000;
        }
        result.detFgFraction_ = detFgFraction_;
        if (((from_bitField0_ & 0x20000000) == 0x20000000)) {
          to_bitField0_ |= 0x04000000;
        }
        result.detContextPad_ = detContextPad_;
        if (((from_bitField0_ & 0x40000000) == 0x40000000)) {
          to_bitField0_ |= 0x08000000;
        }
        result.detCropMode_ = detCropMode_;
        if (((from_bitField0_ & 0x80000000) == 0x80000000)) {
          to_bitField0_ |= 0x10000000;
        }
        result.newNum_ = newNum_;
        if (((from_bitField1_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x20000000;
        }
        result.newChannels_ = newChannels_;
        if (((from_bitField1_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x40000000;
        }
        result.newHeight_ = newHeight_;
        if (((from_bitField1_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x80000000;
        }
        result.newWidth_ = newWidth_;
        if (((from_bitField1_ & 0x00000008) == 0x00000008)) {
          to_bitField1_ |= 0x00000001;
        }
        result.shuffleImages_ = shuffleImages_;
        if (((from_bitField1_ & 0x00000010) == 0x00000010)) {
          to_bitField1_ |= 0x00000002;
        }
        result.concatDim_ = concatDim_;
        if (((from_bitField1_ & 0x00000020) == 0x00000020)) {
          to_bitField1_ |= 0x00000004;
        }
        if (hdf5OutputParamBuilder_ == null) {
          result.hdf5OutputParam_ = hdf5OutputParam_;
        } else {
          result.hdf5OutputParam_ = hdf5OutputParamBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        result.bitField1_ = to_bitField1_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.V0LayerParameter) {
          return mergeFrom((caffe.Caffe.V0LayerParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.V0LayerParameter other) {
        if (other == caffe.Caffe.V0LayerParameter.getDefaultInstance()) return this;
        if (other.hasName()) {
          bitField0_ |= 0x00000001;
          name_ = other.name_;
          onChanged();
        }
        if (other.hasType()) {
          bitField0_ |= 0x00000002;
          type_ = other.type_;
          onChanged();
        }
        if (other.hasNumOutput()) {
          setNumOutput(other.getNumOutput());
        }
        if (other.hasBiasterm()) {
          setBiasterm(other.getBiasterm());
        }
        if (other.hasWeightFiller()) {
          mergeWeightFiller(other.getWeightFiller());
        }
        if (other.hasBiasFiller()) {
          mergeBiasFiller(other.getBiasFiller());
        }
        if (other.hasPad()) {
          setPad(other.getPad());
        }
        if (other.hasKernelsize()) {
          setKernelsize(other.getKernelsize());
        }
        if (other.hasGroup()) {
          setGroup(other.getGroup());
        }
        if (other.hasStride()) {
          setStride(other.getStride());
        }
        if (other.hasPool()) {
          setPool(other.getPool());
        }
        if (other.hasDropoutRatio()) {
          setDropoutRatio(other.getDropoutRatio());
        }
        if (other.hasLocalSize()) {
          setLocalSize(other.getLocalSize());
        }
        if (other.hasAlpha()) {
          setAlpha(other.getAlpha());
        }
        if (other.hasBeta()) {
          setBeta(other.getBeta());
        }
        if (other.hasK()) {
          setK(other.getK());
        }
        if (other.hasSource()) {
          bitField0_ |= 0x00010000;
          source_ = other.source_;
          onChanged();
        }
        if (other.hasScale()) {
          setScale(other.getScale());
        }
        if (other.hasMeanfile()) {
          bitField0_ |= 0x00040000;
          meanfile_ = other.meanfile_;
          onChanged();
        }
        if (other.hasBatchsize()) {
          setBatchsize(other.getBatchsize());
        }
        if (other.hasCropsize()) {
          setCropsize(other.getCropsize());
        }
        if (other.hasMirror()) {
          setMirror(other.getMirror());
        }
        if (blobsBuilder_ == null) {
          if (!other.blobs_.isEmpty()) {
            if (blobs_.isEmpty()) {
              blobs_ = other.blobs_;
              bitField0_ = (bitField0_ & ~0x00400000);
            } else {
              ensureBlobsIsMutable();
              blobs_.addAll(other.blobs_);
            }
            onChanged();
          }
        } else {
          if (!other.blobs_.isEmpty()) {
            if (blobsBuilder_.isEmpty()) {
              blobsBuilder_.dispose();
              blobsBuilder_ = null;
              blobs_ = other.blobs_;
              bitField0_ = (bitField0_ & ~0x00400000);
              blobsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getBlobsFieldBuilder() : null;
            } else {
              blobsBuilder_.addAllMessages(other.blobs_);
            }
          }
        }
        if (!other.blobsLr_.isEmpty()) {
          if (blobsLr_.isEmpty()) {
            blobsLr_ = other.blobsLr_;
            bitField0_ = (bitField0_ & ~0x00800000);
          } else {
            ensureBlobsLrIsMutable();
            blobsLr_.addAll(other.blobsLr_);
          }
          onChanged();
        }
        if (!other.weightDecay_.isEmpty()) {
          if (weightDecay_.isEmpty()) {
            weightDecay_ = other.weightDecay_;
            bitField0_ = (bitField0_ & ~0x01000000);
          } else {
            ensureWeightDecayIsMutable();
            weightDecay_.addAll(other.weightDecay_);
          }
          onChanged();
        }
        if (other.hasRandSkip()) {
          setRandSkip(other.getRandSkip());
        }
        if (other.hasDetFgThreshold()) {
          setDetFgThreshold(other.getDetFgThreshold());
        }
        if (other.hasDetBgThreshold()) {
          setDetBgThreshold(other.getDetBgThreshold());
        }
        if (other.hasDetFgFraction()) {
          setDetFgFraction(other.getDetFgFraction());
        }
        if (other.hasDetContextPad()) {
          setDetContextPad(other.getDetContextPad());
        }
        if (other.hasDetCropMode()) {
          bitField0_ |= 0x40000000;
          detCropMode_ = other.detCropMode_;
          onChanged();
        }
        if (other.hasNewNum()) {
          setNewNum(other.getNewNum());
        }
        if (other.hasNewChannels()) {
          setNewChannels(other.getNewChannels());
        }
        if (other.hasNewHeight()) {
          setNewHeight(other.getNewHeight());
        }
        if (other.hasNewWidth()) {
          setNewWidth(other.getNewWidth());
        }
        if (other.hasShuffleImages()) {
          setShuffleImages(other.getShuffleImages());
        }
        if (other.hasConcatDim()) {
          setConcatDim(other.getConcatDim());
        }
        if (other.hasHdf5OutputParam()) {
          mergeHdf5OutputParam(other.getHdf5OutputParam());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.V0LayerParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.V0LayerParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;
      private int bitField1_;

      // optional string name = 1;
      private java.lang.Object name_ = "";
      /**
       * <code>optional string name = 1;</code>
       *
       * <pre>
       * the layer name
       * </pre>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string name = 1;</code>
       *
       * <pre>
       * the layer name
       * </pre>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string name = 1;</code>
       *
       * <pre>
       * the layer name
       * </pre>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string name = 1;</code>
       *
       * <pre>
       * the layer name
       * </pre>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 1;</code>
       *
       * <pre>
       * the layer name
       * </pre>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 1;</code>
       *
       * <pre>
       * the layer name
       * </pre>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }

      // optional string type = 2;
      private java.lang.Object type_ = "";
      /**
       * <code>optional string type = 2;</code>
       *
       * <pre>
       * the string to specify the layer type
       * </pre>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string type = 2;</code>
       *
       * <pre>
       * the string to specify the layer type
       * </pre>
       */
      public java.lang.String getType() {
        java.lang.Object ref = type_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          type_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string type = 2;</code>
       *
       * <pre>
       * the string to specify the layer type
       * </pre>
       */
      public com.google.protobuf.ByteString
          getTypeBytes() {
        java.lang.Object ref = type_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          type_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string type = 2;</code>
       *
       * <pre>
       * the string to specify the layer type
       * </pre>
       */
      public Builder setType(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string type = 2;</code>
       *
       * <pre>
       * the string to specify the layer type
       * </pre>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000002);
        type_ = getDefaultInstance().getType();
        onChanged();
        return this;
      }
      /**
       * <code>optional string type = 2;</code>
       *
       * <pre>
       * the string to specify the layer type
       * </pre>
       */
      public Builder setTypeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        type_ = value;
        onChanged();
        return this;
      }

      // optional uint32 num_output = 3;
      private int numOutput_ ;
      /**
       * <code>optional uint32 num_output = 3;</code>
       *
       * <pre>
       * Parameters to specify layers with inner products.
       * </pre>
       */
      public boolean hasNumOutput() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 num_output = 3;</code>
       *
       * <pre>
       * Parameters to specify layers with inner products.
       * </pre>
       */
      public int getNumOutput() {
        return numOutput_;
      }
      /**
       * <code>optional uint32 num_output = 3;</code>
       *
       * <pre>
       * Parameters to specify layers with inner products.
       * </pre>
       */
      public Builder setNumOutput(int value) {
        bitField0_ |= 0x00000004;
        numOutput_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 num_output = 3;</code>
       *
       * <pre>
       * Parameters to specify layers with inner products.
       * </pre>
       */
      public Builder clearNumOutput() {
        bitField0_ = (bitField0_ & ~0x00000004);
        numOutput_ = 0;
        onChanged();
        return this;
      }

      // optional bool biasterm = 4 [default = true];
      private boolean biasterm_ = true;
      /**
       * <code>optional bool biasterm = 4 [default = true];</code>
       *
       * <pre>
       * whether to have bias terms
       * </pre>
       */
      public boolean hasBiasterm() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional bool biasterm = 4 [default = true];</code>
       *
       * <pre>
       * whether to have bias terms
       * </pre>
       */
      public boolean getBiasterm() {
        return biasterm_;
      }
      /**
       * <code>optional bool biasterm = 4 [default = true];</code>
       *
       * <pre>
       * whether to have bias terms
       * </pre>
       */
      public Builder setBiasterm(boolean value) {
        bitField0_ |= 0x00000008;
        biasterm_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool biasterm = 4 [default = true];</code>
       *
       * <pre>
       * whether to have bias terms
       * </pre>
       */
      public Builder clearBiasterm() {
        bitField0_ = (bitField0_ & ~0x00000008);
        biasterm_ = true;
        onChanged();
        return this;
      }

      // optional .caffe.FillerParameter weight_filler = 5;
      private caffe.Caffe.FillerParameter weightFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.FillerParameter, caffe.Caffe.FillerParameter.Builder, caffe.Caffe.FillerParameterOrBuilder> weightFillerBuilder_;
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 5;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public boolean hasWeightFiller() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 5;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public caffe.Caffe.FillerParameter getWeightFiller() {
        if (weightFillerBuilder_ == null) {
          return weightFiller_;
        } else {
          return weightFillerBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 5;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public Builder setWeightFiller(caffe.Caffe.FillerParameter value) {
        if (weightFillerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          weightFiller_ = value;
          onChanged();
        } else {
          weightFillerBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 5;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public Builder setWeightFiller(
          caffe.Caffe.FillerParameter.Builder builderForValue) {
        if (weightFillerBuilder_ == null) {
          weightFiller_ = builderForValue.build();
          onChanged();
        } else {
          weightFillerBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 5;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public Builder mergeWeightFiller(caffe.Caffe.FillerParameter value) {
        if (weightFillerBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              weightFiller_ != caffe.Caffe.FillerParameter.getDefaultInstance()) {
            weightFiller_ =
              caffe.Caffe.FillerParameter.newBuilder(weightFiller_).mergeFrom(value).buildPartial();
          } else {
            weightFiller_ = value;
          }
          onChanged();
        } else {
          weightFillerBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 5;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public Builder clearWeightFiller() {
        if (weightFillerBuilder_ == null) {
          weightFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
          onChanged();
        } else {
          weightFillerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 5;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public caffe.Caffe.FillerParameter.Builder getWeightFillerBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getWeightFillerFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 5;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public caffe.Caffe.FillerParameterOrBuilder getWeightFillerOrBuilder() {
        if (weightFillerBuilder_ != null) {
          return weightFillerBuilder_.getMessageOrBuilder();
        } else {
          return weightFiller_;
        }
      }
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 5;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.FillerParameter, caffe.Caffe.FillerParameter.Builder, caffe.Caffe.FillerParameterOrBuilder> 
          getWeightFillerFieldBuilder() {
        if (weightFillerBuilder_ == null) {
          weightFillerBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.FillerParameter, caffe.Caffe.FillerParameter.Builder, caffe.Caffe.FillerParameterOrBuilder>(
                  weightFiller_,
                  getParentForChildren(),
                  isClean());
          weightFiller_ = null;
        }
        return weightFillerBuilder_;
      }

      // optional .caffe.FillerParameter bias_filler = 6;
      private caffe.Caffe.FillerParameter biasFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.FillerParameter, caffe.Caffe.FillerParameter.Builder, caffe.Caffe.FillerParameterOrBuilder> biasFillerBuilder_;
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 6;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public boolean hasBiasFiller() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 6;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public caffe.Caffe.FillerParameter getBiasFiller() {
        if (biasFillerBuilder_ == null) {
          return biasFiller_;
        } else {
          return biasFillerBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 6;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public Builder setBiasFiller(caffe.Caffe.FillerParameter value) {
        if (biasFillerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          biasFiller_ = value;
          onChanged();
        } else {
          biasFillerBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 6;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public Builder setBiasFiller(
          caffe.Caffe.FillerParameter.Builder builderForValue) {
        if (biasFillerBuilder_ == null) {
          biasFiller_ = builderForValue.build();
          onChanged();
        } else {
          biasFillerBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 6;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public Builder mergeBiasFiller(caffe.Caffe.FillerParameter value) {
        if (biasFillerBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020) &&
              biasFiller_ != caffe.Caffe.FillerParameter.getDefaultInstance()) {
            biasFiller_ =
              caffe.Caffe.FillerParameter.newBuilder(biasFiller_).mergeFrom(value).buildPartial();
          } else {
            biasFiller_ = value;
          }
          onChanged();
        } else {
          biasFillerBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 6;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public Builder clearBiasFiller() {
        if (biasFillerBuilder_ == null) {
          biasFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
          onChanged();
        } else {
          biasFillerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 6;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public caffe.Caffe.FillerParameter.Builder getBiasFillerBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getBiasFillerFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 6;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public caffe.Caffe.FillerParameterOrBuilder getBiasFillerOrBuilder() {
        if (biasFillerBuilder_ != null) {
          return biasFillerBuilder_.getMessageOrBuilder();
        } else {
          return biasFiller_;
        }
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 6;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.FillerParameter, caffe.Caffe.FillerParameter.Builder, caffe.Caffe.FillerParameterOrBuilder> 
          getBiasFillerFieldBuilder() {
        if (biasFillerBuilder_ == null) {
          biasFillerBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.FillerParameter, caffe.Caffe.FillerParameter.Builder, caffe.Caffe.FillerParameterOrBuilder>(
                  biasFiller_,
                  getParentForChildren(),
                  isClean());
          biasFiller_ = null;
        }
        return biasFillerBuilder_;
      }

      // optional uint32 pad = 7 [default = 0];
      private int pad_ ;
      /**
       * <code>optional uint32 pad = 7 [default = 0];</code>
       *
       * <pre>
       * The padding size
       * </pre>
       */
      public boolean hasPad() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional uint32 pad = 7 [default = 0];</code>
       *
       * <pre>
       * The padding size
       * </pre>
       */
      public int getPad() {
        return pad_;
      }
      /**
       * <code>optional uint32 pad = 7 [default = 0];</code>
       *
       * <pre>
       * The padding size
       * </pre>
       */
      public Builder setPad(int value) {
        bitField0_ |= 0x00000040;
        pad_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 pad = 7 [default = 0];</code>
       *
       * <pre>
       * The padding size
       * </pre>
       */
      public Builder clearPad() {
        bitField0_ = (bitField0_ & ~0x00000040);
        pad_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 kernelsize = 8;
      private int kernelsize_ ;
      /**
       * <code>optional uint32 kernelsize = 8;</code>
       *
       * <pre>
       * The kernel size
       * </pre>
       */
      public boolean hasKernelsize() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional uint32 kernelsize = 8;</code>
       *
       * <pre>
       * The kernel size
       * </pre>
       */
      public int getKernelsize() {
        return kernelsize_;
      }
      /**
       * <code>optional uint32 kernelsize = 8;</code>
       *
       * <pre>
       * The kernel size
       * </pre>
       */
      public Builder setKernelsize(int value) {
        bitField0_ |= 0x00000080;
        kernelsize_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 kernelsize = 8;</code>
       *
       * <pre>
       * The kernel size
       * </pre>
       */
      public Builder clearKernelsize() {
        bitField0_ = (bitField0_ & ~0x00000080);
        kernelsize_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 group = 9 [default = 1];
      private int group_ = 1;
      /**
       * <code>optional uint32 group = 9 [default = 1];</code>
       *
       * <pre>
       * The group size for group conv
       * </pre>
       */
      public boolean hasGroup() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional uint32 group = 9 [default = 1];</code>
       *
       * <pre>
       * The group size for group conv
       * </pre>
       */
      public int getGroup() {
        return group_;
      }
      /**
       * <code>optional uint32 group = 9 [default = 1];</code>
       *
       * <pre>
       * The group size for group conv
       * </pre>
       */
      public Builder setGroup(int value) {
        bitField0_ |= 0x00000100;
        group_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 group = 9 [default = 1];</code>
       *
       * <pre>
       * The group size for group conv
       * </pre>
       */
      public Builder clearGroup() {
        bitField0_ = (bitField0_ & ~0x00000100);
        group_ = 1;
        onChanged();
        return this;
      }

      // optional uint32 stride = 10 [default = 1];
      private int stride_ = 1;
      /**
       * <code>optional uint32 stride = 10 [default = 1];</code>
       *
       * <pre>
       * The stride
       * </pre>
       */
      public boolean hasStride() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional uint32 stride = 10 [default = 1];</code>
       *
       * <pre>
       * The stride
       * </pre>
       */
      public int getStride() {
        return stride_;
      }
      /**
       * <code>optional uint32 stride = 10 [default = 1];</code>
       *
       * <pre>
       * The stride
       * </pre>
       */
      public Builder setStride(int value) {
        bitField0_ |= 0x00000200;
        stride_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 stride = 10 [default = 1];</code>
       *
       * <pre>
       * The stride
       * </pre>
       */
      public Builder clearStride() {
        bitField0_ = (bitField0_ & ~0x00000200);
        stride_ = 1;
        onChanged();
        return this;
      }

      // optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];
      private caffe.Caffe.V0LayerParameter.PoolMethod pool_ = caffe.Caffe.V0LayerParameter.PoolMethod.MAX;
      /**
       * <code>optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];</code>
       *
       * <pre>
       * The pooling method
       * </pre>
       */
      public boolean hasPool() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];</code>
       *
       * <pre>
       * The pooling method
       * </pre>
       */
      public caffe.Caffe.V0LayerParameter.PoolMethod getPool() {
        return pool_;
      }
      /**
       * <code>optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];</code>
       *
       * <pre>
       * The pooling method
       * </pre>
       */
      public Builder setPool(caffe.Caffe.V0LayerParameter.PoolMethod value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000400;
        pool_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];</code>
       *
       * <pre>
       * The pooling method
       * </pre>
       */
      public Builder clearPool() {
        bitField0_ = (bitField0_ & ~0x00000400);
        pool_ = caffe.Caffe.V0LayerParameter.PoolMethod.MAX;
        onChanged();
        return this;
      }

      // optional float dropout_ratio = 12 [default = 0.5];
      private float dropoutRatio_ = 0.5F;
      /**
       * <code>optional float dropout_ratio = 12 [default = 0.5];</code>
       *
       * <pre>
       * dropout ratio
       * </pre>
       */
      public boolean hasDropoutRatio() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional float dropout_ratio = 12 [default = 0.5];</code>
       *
       * <pre>
       * dropout ratio
       * </pre>
       */
      public float getDropoutRatio() {
        return dropoutRatio_;
      }
      /**
       * <code>optional float dropout_ratio = 12 [default = 0.5];</code>
       *
       * <pre>
       * dropout ratio
       * </pre>
       */
      public Builder setDropoutRatio(float value) {
        bitField0_ |= 0x00000800;
        dropoutRatio_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float dropout_ratio = 12 [default = 0.5];</code>
       *
       * <pre>
       * dropout ratio
       * </pre>
       */
      public Builder clearDropoutRatio() {
        bitField0_ = (bitField0_ & ~0x00000800);
        dropoutRatio_ = 0.5F;
        onChanged();
        return this;
      }

      // optional uint32 local_size = 13 [default = 5];
      private int localSize_ = 5;
      /**
       * <code>optional uint32 local_size = 13 [default = 5];</code>
       *
       * <pre>
       * for local response norm
       * </pre>
       */
      public boolean hasLocalSize() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional uint32 local_size = 13 [default = 5];</code>
       *
       * <pre>
       * for local response norm
       * </pre>
       */
      public int getLocalSize() {
        return localSize_;
      }
      /**
       * <code>optional uint32 local_size = 13 [default = 5];</code>
       *
       * <pre>
       * for local response norm
       * </pre>
       */
      public Builder setLocalSize(int value) {
        bitField0_ |= 0x00001000;
        localSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 local_size = 13 [default = 5];</code>
       *
       * <pre>
       * for local response norm
       * </pre>
       */
      public Builder clearLocalSize() {
        bitField0_ = (bitField0_ & ~0x00001000);
        localSize_ = 5;
        onChanged();
        return this;
      }

      // optional float alpha = 14 [default = 1];
      private float alpha_ = 1F;
      /**
       * <code>optional float alpha = 14 [default = 1];</code>
       *
       * <pre>
       * for local response norm
       * </pre>
       */
      public boolean hasAlpha() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional float alpha = 14 [default = 1];</code>
       *
       * <pre>
       * for local response norm
       * </pre>
       */
      public float getAlpha() {
        return alpha_;
      }
      /**
       * <code>optional float alpha = 14 [default = 1];</code>
       *
       * <pre>
       * for local response norm
       * </pre>
       */
      public Builder setAlpha(float value) {
        bitField0_ |= 0x00002000;
        alpha_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float alpha = 14 [default = 1];</code>
       *
       * <pre>
       * for local response norm
       * </pre>
       */
      public Builder clearAlpha() {
        bitField0_ = (bitField0_ & ~0x00002000);
        alpha_ = 1F;
        onChanged();
        return this;
      }

      // optional float beta = 15 [default = 0.75];
      private float beta_ = 0.75F;
      /**
       * <code>optional float beta = 15 [default = 0.75];</code>
       *
       * <pre>
       * for local response norm
       * </pre>
       */
      public boolean hasBeta() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional float beta = 15 [default = 0.75];</code>
       *
       * <pre>
       * for local response norm
       * </pre>
       */
      public float getBeta() {
        return beta_;
      }
      /**
       * <code>optional float beta = 15 [default = 0.75];</code>
       *
       * <pre>
       * for local response norm
       * </pre>
       */
      public Builder setBeta(float value) {
        bitField0_ |= 0x00004000;
        beta_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float beta = 15 [default = 0.75];</code>
       *
       * <pre>
       * for local response norm
       * </pre>
       */
      public Builder clearBeta() {
        bitField0_ = (bitField0_ & ~0x00004000);
        beta_ = 0.75F;
        onChanged();
        return this;
      }

      // optional float k = 22 [default = 1];
      private float k_ = 1F;
      /**
       * <code>optional float k = 22 [default = 1];</code>
       */
      public boolean hasK() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional float k = 22 [default = 1];</code>
       */
      public float getK() {
        return k_;
      }
      /**
       * <code>optional float k = 22 [default = 1];</code>
       */
      public Builder setK(float value) {
        bitField0_ |= 0x00008000;
        k_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float k = 22 [default = 1];</code>
       */
      public Builder clearK() {
        bitField0_ = (bitField0_ & ~0x00008000);
        k_ = 1F;
        onChanged();
        return this;
      }

      // optional string source = 16;
      private java.lang.Object source_ = "";
      /**
       * <code>optional string source = 16;</code>
       *
       * <pre>
       * For data layers, specify the data source
       * </pre>
       */
      public boolean hasSource() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional string source = 16;</code>
       *
       * <pre>
       * For data layers, specify the data source
       * </pre>
       */
      public java.lang.String getSource() {
        java.lang.Object ref = source_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          source_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string source = 16;</code>
       *
       * <pre>
       * For data layers, specify the data source
       * </pre>
       */
      public com.google.protobuf.ByteString
          getSourceBytes() {
        java.lang.Object ref = source_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          source_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string source = 16;</code>
       *
       * <pre>
       * For data layers, specify the data source
       * </pre>
       */
      public Builder setSource(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00010000;
        source_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string source = 16;</code>
       *
       * <pre>
       * For data layers, specify the data source
       * </pre>
       */
      public Builder clearSource() {
        bitField0_ = (bitField0_ & ~0x00010000);
        source_ = getDefaultInstance().getSource();
        onChanged();
        return this;
      }
      /**
       * <code>optional string source = 16;</code>
       *
       * <pre>
       * For data layers, specify the data source
       * </pre>
       */
      public Builder setSourceBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00010000;
        source_ = value;
        onChanged();
        return this;
      }

      // optional float scale = 17 [default = 1];
      private float scale_ = 1F;
      /**
       * <code>optional float scale = 17 [default = 1];</code>
       *
       * <pre>
       * For data pre-processing, we can do simple scaling and subtracting the
       * data mean, if provided. Note that the mean subtraction is always carried
       * out before scaling.
       * </pre>
       */
      public boolean hasScale() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional float scale = 17 [default = 1];</code>
       *
       * <pre>
       * For data pre-processing, we can do simple scaling and subtracting the
       * data mean, if provided. Note that the mean subtraction is always carried
       * out before scaling.
       * </pre>
       */
      public float getScale() {
        return scale_;
      }
      /**
       * <code>optional float scale = 17 [default = 1];</code>
       *
       * <pre>
       * For data pre-processing, we can do simple scaling and subtracting the
       * data mean, if provided. Note that the mean subtraction is always carried
       * out before scaling.
       * </pre>
       */
      public Builder setScale(float value) {
        bitField0_ |= 0x00020000;
        scale_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float scale = 17 [default = 1];</code>
       *
       * <pre>
       * For data pre-processing, we can do simple scaling and subtracting the
       * data mean, if provided. Note that the mean subtraction is always carried
       * out before scaling.
       * </pre>
       */
      public Builder clearScale() {
        bitField0_ = (bitField0_ & ~0x00020000);
        scale_ = 1F;
        onChanged();
        return this;
      }

      // optional string meanfile = 18;
      private java.lang.Object meanfile_ = "";
      /**
       * <code>optional string meanfile = 18;</code>
       */
      public boolean hasMeanfile() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional string meanfile = 18;</code>
       */
      public java.lang.String getMeanfile() {
        java.lang.Object ref = meanfile_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          meanfile_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string meanfile = 18;</code>
       */
      public com.google.protobuf.ByteString
          getMeanfileBytes() {
        java.lang.Object ref = meanfile_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          meanfile_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string meanfile = 18;</code>
       */
      public Builder setMeanfile(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00040000;
        meanfile_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string meanfile = 18;</code>
       */
      public Builder clearMeanfile() {
        bitField0_ = (bitField0_ & ~0x00040000);
        meanfile_ = getDefaultInstance().getMeanfile();
        onChanged();
        return this;
      }
      /**
       * <code>optional string meanfile = 18;</code>
       */
      public Builder setMeanfileBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00040000;
        meanfile_ = value;
        onChanged();
        return this;
      }

      // optional uint32 batchsize = 19;
      private int batchsize_ ;
      /**
       * <code>optional uint32 batchsize = 19;</code>
       *
       * <pre>
       * For data layers, specify the batch size.
       * </pre>
       */
      public boolean hasBatchsize() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional uint32 batchsize = 19;</code>
       *
       * <pre>
       * For data layers, specify the batch size.
       * </pre>
       */
      public int getBatchsize() {
        return batchsize_;
      }
      /**
       * <code>optional uint32 batchsize = 19;</code>
       *
       * <pre>
       * For data layers, specify the batch size.
       * </pre>
       */
      public Builder setBatchsize(int value) {
        bitField0_ |= 0x00080000;
        batchsize_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 batchsize = 19;</code>
       *
       * <pre>
       * For data layers, specify the batch size.
       * </pre>
       */
      public Builder clearBatchsize() {
        bitField0_ = (bitField0_ & ~0x00080000);
        batchsize_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 cropsize = 20 [default = 0];
      private int cropsize_ ;
      /**
       * <code>optional uint32 cropsize = 20 [default = 0];</code>
       *
       * <pre>
       * For data layers, specify if we would like to randomly crop an image.
       * </pre>
       */
      public boolean hasCropsize() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional uint32 cropsize = 20 [default = 0];</code>
       *
       * <pre>
       * For data layers, specify if we would like to randomly crop an image.
       * </pre>
       */
      public int getCropsize() {
        return cropsize_;
      }
      /**
       * <code>optional uint32 cropsize = 20 [default = 0];</code>
       *
       * <pre>
       * For data layers, specify if we would like to randomly crop an image.
       * </pre>
       */
      public Builder setCropsize(int value) {
        bitField0_ |= 0x00100000;
        cropsize_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 cropsize = 20 [default = 0];</code>
       *
       * <pre>
       * For data layers, specify if we would like to randomly crop an image.
       * </pre>
       */
      public Builder clearCropsize() {
        bitField0_ = (bitField0_ & ~0x00100000);
        cropsize_ = 0;
        onChanged();
        return this;
      }

      // optional bool mirror = 21 [default = false];
      private boolean mirror_ ;
      /**
       * <code>optional bool mirror = 21 [default = false];</code>
       *
       * <pre>
       * For data layers, specify if we want to randomly mirror data.
       * </pre>
       */
      public boolean hasMirror() {
        return ((bitField0_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>optional bool mirror = 21 [default = false];</code>
       *
       * <pre>
       * For data layers, specify if we want to randomly mirror data.
       * </pre>
       */
      public boolean getMirror() {
        return mirror_;
      }
      /**
       * <code>optional bool mirror = 21 [default = false];</code>
       *
       * <pre>
       * For data layers, specify if we want to randomly mirror data.
       * </pre>
       */
      public Builder setMirror(boolean value) {
        bitField0_ |= 0x00200000;
        mirror_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool mirror = 21 [default = false];</code>
       *
       * <pre>
       * For data layers, specify if we want to randomly mirror data.
       * </pre>
       */
      public Builder clearMirror() {
        bitField0_ = (bitField0_ & ~0x00200000);
        mirror_ = false;
        onChanged();
        return this;
      }

      // repeated .caffe.BlobProto blobs = 50;
      private java.util.List<caffe.Caffe.BlobProto> blobs_ =
        java.util.Collections.emptyList();
      private void ensureBlobsIsMutable() {
        if (!((bitField0_ & 0x00400000) == 0x00400000)) {
          blobs_ = new java.util.ArrayList<caffe.Caffe.BlobProto>(blobs_);
          bitField0_ |= 0x00400000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          caffe.Caffe.BlobProto, caffe.Caffe.BlobProto.Builder, caffe.Caffe.BlobProtoOrBuilder> blobsBuilder_;

      /**
       * <code>repeated .caffe.BlobProto blobs = 50;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public java.util.List<caffe.Caffe.BlobProto> getBlobsList() {
        if (blobsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(blobs_);
        } else {
          return blobsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 50;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public int getBlobsCount() {
        if (blobsBuilder_ == null) {
          return blobs_.size();
        } else {
          return blobsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 50;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public caffe.Caffe.BlobProto getBlobs(int index) {
        if (blobsBuilder_ == null) {
          return blobs_.get(index);
        } else {
          return blobsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 50;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public Builder setBlobs(
          int index, caffe.Caffe.BlobProto value) {
        if (blobsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBlobsIsMutable();
          blobs_.set(index, value);
          onChanged();
        } else {
          blobsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 50;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public Builder setBlobs(
          int index, caffe.Caffe.BlobProto.Builder builderForValue) {
        if (blobsBuilder_ == null) {
          ensureBlobsIsMutable();
          blobs_.set(index, builderForValue.build());
          onChanged();
        } else {
          blobsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 50;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public Builder addBlobs(caffe.Caffe.BlobProto value) {
        if (blobsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBlobsIsMutable();
          blobs_.add(value);
          onChanged();
        } else {
          blobsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 50;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public Builder addBlobs(
          int index, caffe.Caffe.BlobProto value) {
        if (blobsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBlobsIsMutable();
          blobs_.add(index, value);
          onChanged();
        } else {
          blobsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 50;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public Builder addBlobs(
          caffe.Caffe.BlobProto.Builder builderForValue) {
        if (blobsBuilder_ == null) {
          ensureBlobsIsMutable();
          blobs_.add(builderForValue.build());
          onChanged();
        } else {
          blobsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 50;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public Builder addBlobs(
          int index, caffe.Caffe.BlobProto.Builder builderForValue) {
        if (blobsBuilder_ == null) {
          ensureBlobsIsMutable();
          blobs_.add(index, builderForValue.build());
          onChanged();
        } else {
          blobsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 50;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public Builder addAllBlobs(
          java.lang.Iterable<? extends caffe.Caffe.BlobProto> values) {
        if (blobsBuilder_ == null) {
          ensureBlobsIsMutable();
          super.addAll(values, blobs_);
          onChanged();
        } else {
          blobsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 50;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public Builder clearBlobs() {
        if (blobsBuilder_ == null) {
          blobs_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00400000);
          onChanged();
        } else {
          blobsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 50;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public Builder removeBlobs(int index) {
        if (blobsBuilder_ == null) {
          ensureBlobsIsMutable();
          blobs_.remove(index);
          onChanged();
        } else {
          blobsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 50;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public caffe.Caffe.BlobProto.Builder getBlobsBuilder(
          int index) {
        return getBlobsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 50;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public caffe.Caffe.BlobProtoOrBuilder getBlobsOrBuilder(
          int index) {
        if (blobsBuilder_ == null) {
          return blobs_.get(index);  } else {
          return blobsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 50;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public java.util.List<? extends caffe.Caffe.BlobProtoOrBuilder> 
           getBlobsOrBuilderList() {
        if (blobsBuilder_ != null) {
          return blobsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(blobs_);
        }
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 50;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public caffe.Caffe.BlobProto.Builder addBlobsBuilder() {
        return getBlobsFieldBuilder().addBuilder(
            caffe.Caffe.BlobProto.getDefaultInstance());
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 50;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public caffe.Caffe.BlobProto.Builder addBlobsBuilder(
          int index) {
        return getBlobsFieldBuilder().addBuilder(
            index, caffe.Caffe.BlobProto.getDefaultInstance());
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 50;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public java.util.List<caffe.Caffe.BlobProto.Builder> 
           getBlobsBuilderList() {
        return getBlobsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          caffe.Caffe.BlobProto, caffe.Caffe.BlobProto.Builder, caffe.Caffe.BlobProtoOrBuilder> 
          getBlobsFieldBuilder() {
        if (blobsBuilder_ == null) {
          blobsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              caffe.Caffe.BlobProto, caffe.Caffe.BlobProto.Builder, caffe.Caffe.BlobProtoOrBuilder>(
                  blobs_,
                  ((bitField0_ & 0x00400000) == 0x00400000),
                  getParentForChildren(),
                  isClean());
          blobs_ = null;
        }
        return blobsBuilder_;
      }

      // repeated float blobs_lr = 51;
      private java.util.List<java.lang.Float> blobsLr_ = java.util.Collections.emptyList();
      private void ensureBlobsLrIsMutable() {
        if (!((bitField0_ & 0x00800000) == 0x00800000)) {
          blobsLr_ = new java.util.ArrayList<java.lang.Float>(blobsLr_);
          bitField0_ |= 0x00800000;
         }
      }
      /**
       * <code>repeated float blobs_lr = 51;</code>
       *
       * <pre>
       * The ratio that is multiplied on the global learning rate. If you want to
       * set the learning ratio for one blob, you need to set it for all blobs.
       * </pre>
       */
      public java.util.List<java.lang.Float>
          getBlobsLrList() {
        return java.util.Collections.unmodifiableList(blobsLr_);
      }
      /**
       * <code>repeated float blobs_lr = 51;</code>
       *
       * <pre>
       * The ratio that is multiplied on the global learning rate. If you want to
       * set the learning ratio for one blob, you need to set it for all blobs.
       * </pre>
       */
      public int getBlobsLrCount() {
        return blobsLr_.size();
      }
      /**
       * <code>repeated float blobs_lr = 51;</code>
       *
       * <pre>
       * The ratio that is multiplied on the global learning rate. If you want to
       * set the learning ratio for one blob, you need to set it for all blobs.
       * </pre>
       */
      public float getBlobsLr(int index) {
        return blobsLr_.get(index);
      }
      /**
       * <code>repeated float blobs_lr = 51;</code>
       *
       * <pre>
       * The ratio that is multiplied on the global learning rate. If you want to
       * set the learning ratio for one blob, you need to set it for all blobs.
       * </pre>
       */
      public Builder setBlobsLr(
          int index, float value) {
        ensureBlobsLrIsMutable();
        blobsLr_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float blobs_lr = 51;</code>
       *
       * <pre>
       * The ratio that is multiplied on the global learning rate. If you want to
       * set the learning ratio for one blob, you need to set it for all blobs.
       * </pre>
       */
      public Builder addBlobsLr(float value) {
        ensureBlobsLrIsMutable();
        blobsLr_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float blobs_lr = 51;</code>
       *
       * <pre>
       * The ratio that is multiplied on the global learning rate. If you want to
       * set the learning ratio for one blob, you need to set it for all blobs.
       * </pre>
       */
      public Builder addAllBlobsLr(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureBlobsLrIsMutable();
        super.addAll(values, blobsLr_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float blobs_lr = 51;</code>
       *
       * <pre>
       * The ratio that is multiplied on the global learning rate. If you want to
       * set the learning ratio for one blob, you need to set it for all blobs.
       * </pre>
       */
      public Builder clearBlobsLr() {
        blobsLr_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00800000);
        onChanged();
        return this;
      }

      // repeated float weight_decay = 52;
      private java.util.List<java.lang.Float> weightDecay_ = java.util.Collections.emptyList();
      private void ensureWeightDecayIsMutable() {
        if (!((bitField0_ & 0x01000000) == 0x01000000)) {
          weightDecay_ = new java.util.ArrayList<java.lang.Float>(weightDecay_);
          bitField0_ |= 0x01000000;
         }
      }
      /**
       * <code>repeated float weight_decay = 52;</code>
       *
       * <pre>
       * The weight decay that is multiplied on the global weight decay.
       * </pre>
       */
      public java.util.List<java.lang.Float>
          getWeightDecayList() {
        return java.util.Collections.unmodifiableList(weightDecay_);
      }
      /**
       * <code>repeated float weight_decay = 52;</code>
       *
       * <pre>
       * The weight decay that is multiplied on the global weight decay.
       * </pre>
       */
      public int getWeightDecayCount() {
        return weightDecay_.size();
      }
      /**
       * <code>repeated float weight_decay = 52;</code>
       *
       * <pre>
       * The weight decay that is multiplied on the global weight decay.
       * </pre>
       */
      public float getWeightDecay(int index) {
        return weightDecay_.get(index);
      }
      /**
       * <code>repeated float weight_decay = 52;</code>
       *
       * <pre>
       * The weight decay that is multiplied on the global weight decay.
       * </pre>
       */
      public Builder setWeightDecay(
          int index, float value) {
        ensureWeightDecayIsMutable();
        weightDecay_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float weight_decay = 52;</code>
       *
       * <pre>
       * The weight decay that is multiplied on the global weight decay.
       * </pre>
       */
      public Builder addWeightDecay(float value) {
        ensureWeightDecayIsMutable();
        weightDecay_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float weight_decay = 52;</code>
       *
       * <pre>
       * The weight decay that is multiplied on the global weight decay.
       * </pre>
       */
      public Builder addAllWeightDecay(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureWeightDecayIsMutable();
        super.addAll(values, weightDecay_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float weight_decay = 52;</code>
       *
       * <pre>
       * The weight decay that is multiplied on the global weight decay.
       * </pre>
       */
      public Builder clearWeightDecay() {
        weightDecay_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x01000000);
        onChanged();
        return this;
      }

      // optional uint32 rand_skip = 53 [default = 0];
      private int randSkip_ ;
      /**
       * <code>optional uint32 rand_skip = 53 [default = 0];</code>
       *
       * <pre>
       * The rand_skip variable is for the data layer to skip a few data points
       * to avoid all asynchronous sgd clients to start at the same point. The skip
       * point would be set as rand_skip * rand(0,1). Note that rand_skip should not
       * be larger than the number of keys in the database.
       * </pre>
       */
      public boolean hasRandSkip() {
        return ((bitField0_ & 0x02000000) == 0x02000000);
      }
      /**
       * <code>optional uint32 rand_skip = 53 [default = 0];</code>
       *
       * <pre>
       * The rand_skip variable is for the data layer to skip a few data points
       * to avoid all asynchronous sgd clients to start at the same point. The skip
       * point would be set as rand_skip * rand(0,1). Note that rand_skip should not
       * be larger than the number of keys in the database.
       * </pre>
       */
      public int getRandSkip() {
        return randSkip_;
      }
      /**
       * <code>optional uint32 rand_skip = 53 [default = 0];</code>
       *
       * <pre>
       * The rand_skip variable is for the data layer to skip a few data points
       * to avoid all asynchronous sgd clients to start at the same point. The skip
       * point would be set as rand_skip * rand(0,1). Note that rand_skip should not
       * be larger than the number of keys in the database.
       * </pre>
       */
      public Builder setRandSkip(int value) {
        bitField0_ |= 0x02000000;
        randSkip_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 rand_skip = 53 [default = 0];</code>
       *
       * <pre>
       * The rand_skip variable is for the data layer to skip a few data points
       * to avoid all asynchronous sgd clients to start at the same point. The skip
       * point would be set as rand_skip * rand(0,1). Note that rand_skip should not
       * be larger than the number of keys in the database.
       * </pre>
       */
      public Builder clearRandSkip() {
        bitField0_ = (bitField0_ & ~0x02000000);
        randSkip_ = 0;
        onChanged();
        return this;
      }

      // optional float det_fg_threshold = 54 [default = 0.5];
      private float detFgThreshold_ = 0.5F;
      /**
       * <code>optional float det_fg_threshold = 54 [default = 0.5];</code>
       *
       * <pre>
       * Fields related to detection (det_*)
       * foreground (object) overlap threshold
       * </pre>
       */
      public boolean hasDetFgThreshold() {
        return ((bitField0_ & 0x04000000) == 0x04000000);
      }
      /**
       * <code>optional float det_fg_threshold = 54 [default = 0.5];</code>
       *
       * <pre>
       * Fields related to detection (det_*)
       * foreground (object) overlap threshold
       * </pre>
       */
      public float getDetFgThreshold() {
        return detFgThreshold_;
      }
      /**
       * <code>optional float det_fg_threshold = 54 [default = 0.5];</code>
       *
       * <pre>
       * Fields related to detection (det_*)
       * foreground (object) overlap threshold
       * </pre>
       */
      public Builder setDetFgThreshold(float value) {
        bitField0_ |= 0x04000000;
        detFgThreshold_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float det_fg_threshold = 54 [default = 0.5];</code>
       *
       * <pre>
       * Fields related to detection (det_*)
       * foreground (object) overlap threshold
       * </pre>
       */
      public Builder clearDetFgThreshold() {
        bitField0_ = (bitField0_ & ~0x04000000);
        detFgThreshold_ = 0.5F;
        onChanged();
        return this;
      }

      // optional float det_bg_threshold = 55 [default = 0.5];
      private float detBgThreshold_ = 0.5F;
      /**
       * <code>optional float det_bg_threshold = 55 [default = 0.5];</code>
       *
       * <pre>
       * background (non-object) overlap threshold
       * </pre>
       */
      public boolean hasDetBgThreshold() {
        return ((bitField0_ & 0x08000000) == 0x08000000);
      }
      /**
       * <code>optional float det_bg_threshold = 55 [default = 0.5];</code>
       *
       * <pre>
       * background (non-object) overlap threshold
       * </pre>
       */
      public float getDetBgThreshold() {
        return detBgThreshold_;
      }
      /**
       * <code>optional float det_bg_threshold = 55 [default = 0.5];</code>
       *
       * <pre>
       * background (non-object) overlap threshold
       * </pre>
       */
      public Builder setDetBgThreshold(float value) {
        bitField0_ |= 0x08000000;
        detBgThreshold_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float det_bg_threshold = 55 [default = 0.5];</code>
       *
       * <pre>
       * background (non-object) overlap threshold
       * </pre>
       */
      public Builder clearDetBgThreshold() {
        bitField0_ = (bitField0_ & ~0x08000000);
        detBgThreshold_ = 0.5F;
        onChanged();
        return this;
      }

      // optional float det_fg_fraction = 56 [default = 0.25];
      private float detFgFraction_ = 0.25F;
      /**
       * <code>optional float det_fg_fraction = 56 [default = 0.25];</code>
       *
       * <pre>
       * Fraction of batch that should be foreground objects
       * </pre>
       */
      public boolean hasDetFgFraction() {
        return ((bitField0_ & 0x10000000) == 0x10000000);
      }
      /**
       * <code>optional float det_fg_fraction = 56 [default = 0.25];</code>
       *
       * <pre>
       * Fraction of batch that should be foreground objects
       * </pre>
       */
      public float getDetFgFraction() {
        return detFgFraction_;
      }
      /**
       * <code>optional float det_fg_fraction = 56 [default = 0.25];</code>
       *
       * <pre>
       * Fraction of batch that should be foreground objects
       * </pre>
       */
      public Builder setDetFgFraction(float value) {
        bitField0_ |= 0x10000000;
        detFgFraction_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float det_fg_fraction = 56 [default = 0.25];</code>
       *
       * <pre>
       * Fraction of batch that should be foreground objects
       * </pre>
       */
      public Builder clearDetFgFraction() {
        bitField0_ = (bitField0_ & ~0x10000000);
        detFgFraction_ = 0.25F;
        onChanged();
        return this;
      }

      // optional uint32 det_context_pad = 58 [default = 0];
      private int detContextPad_ ;
      /**
       * <code>optional uint32 det_context_pad = 58 [default = 0];</code>
       *
       * <pre>
       * Amount of contextual padding to add around a window
       * (used only by the window_data_layer)
       * </pre>
       */
      public boolean hasDetContextPad() {
        return ((bitField0_ & 0x20000000) == 0x20000000);
      }
      /**
       * <code>optional uint32 det_context_pad = 58 [default = 0];</code>
       *
       * <pre>
       * Amount of contextual padding to add around a window
       * (used only by the window_data_layer)
       * </pre>
       */
      public int getDetContextPad() {
        return detContextPad_;
      }
      /**
       * <code>optional uint32 det_context_pad = 58 [default = 0];</code>
       *
       * <pre>
       * Amount of contextual padding to add around a window
       * (used only by the window_data_layer)
       * </pre>
       */
      public Builder setDetContextPad(int value) {
        bitField0_ |= 0x20000000;
        detContextPad_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 det_context_pad = 58 [default = 0];</code>
       *
       * <pre>
       * Amount of contextual padding to add around a window
       * (used only by the window_data_layer)
       * </pre>
       */
      public Builder clearDetContextPad() {
        bitField0_ = (bitField0_ & ~0x20000000);
        detContextPad_ = 0;
        onChanged();
        return this;
      }

      // optional string det_crop_mode = 59 [default = "warp"];
      private java.lang.Object detCropMode_ = "warp";
      /**
       * <code>optional string det_crop_mode = 59 [default = "warp"];</code>
       *
       * <pre>
       * Mode for cropping out a detection window
       * warp: cropped window is warped to a fixed size and aspect ratio
       * square: the tightest square around the window is cropped
       * </pre>
       */
      public boolean hasDetCropMode() {
        return ((bitField0_ & 0x40000000) == 0x40000000);
      }
      /**
       * <code>optional string det_crop_mode = 59 [default = "warp"];</code>
       *
       * <pre>
       * Mode for cropping out a detection window
       * warp: cropped window is warped to a fixed size and aspect ratio
       * square: the tightest square around the window is cropped
       * </pre>
       */
      public java.lang.String getDetCropMode() {
        java.lang.Object ref = detCropMode_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          detCropMode_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string det_crop_mode = 59 [default = "warp"];</code>
       *
       * <pre>
       * Mode for cropping out a detection window
       * warp: cropped window is warped to a fixed size and aspect ratio
       * square: the tightest square around the window is cropped
       * </pre>
       */
      public com.google.protobuf.ByteString
          getDetCropModeBytes() {
        java.lang.Object ref = detCropMode_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          detCropMode_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string det_crop_mode = 59 [default = "warp"];</code>
       *
       * <pre>
       * Mode for cropping out a detection window
       * warp: cropped window is warped to a fixed size and aspect ratio
       * square: the tightest square around the window is cropped
       * </pre>
       */
      public Builder setDetCropMode(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x40000000;
        detCropMode_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string det_crop_mode = 59 [default = "warp"];</code>
       *
       * <pre>
       * Mode for cropping out a detection window
       * warp: cropped window is warped to a fixed size and aspect ratio
       * square: the tightest square around the window is cropped
       * </pre>
       */
      public Builder clearDetCropMode() {
        bitField0_ = (bitField0_ & ~0x40000000);
        detCropMode_ = getDefaultInstance().getDetCropMode();
        onChanged();
        return this;
      }
      /**
       * <code>optional string det_crop_mode = 59 [default = "warp"];</code>
       *
       * <pre>
       * Mode for cropping out a detection window
       * warp: cropped window is warped to a fixed size and aspect ratio
       * square: the tightest square around the window is cropped
       * </pre>
       */
      public Builder setDetCropModeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x40000000;
        detCropMode_ = value;
        onChanged();
        return this;
      }

      // optional int32 new_num = 60 [default = 0];
      private int newNum_ ;
      /**
       * <code>optional int32 new_num = 60 [default = 0];</code>
       *
       * <pre>
       * For ReshapeLayer, one needs to specify the new dimensions.
       * </pre>
       */
      public boolean hasNewNum() {
        return ((bitField0_ & 0x80000000) == 0x80000000);
      }
      /**
       * <code>optional int32 new_num = 60 [default = 0];</code>
       *
       * <pre>
       * For ReshapeLayer, one needs to specify the new dimensions.
       * </pre>
       */
      public int getNewNum() {
        return newNum_;
      }
      /**
       * <code>optional int32 new_num = 60 [default = 0];</code>
       *
       * <pre>
       * For ReshapeLayer, one needs to specify the new dimensions.
       * </pre>
       */
      public Builder setNewNum(int value) {
        bitField0_ |= 0x80000000;
        newNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 new_num = 60 [default = 0];</code>
       *
       * <pre>
       * For ReshapeLayer, one needs to specify the new dimensions.
       * </pre>
       */
      public Builder clearNewNum() {
        bitField0_ = (bitField0_ & ~0x80000000);
        newNum_ = 0;
        onChanged();
        return this;
      }

      // optional int32 new_channels = 61 [default = 0];
      private int newChannels_ ;
      /**
       * <code>optional int32 new_channels = 61 [default = 0];</code>
       */
      public boolean hasNewChannels() {
        return ((bitField1_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 new_channels = 61 [default = 0];</code>
       */
      public int getNewChannels() {
        return newChannels_;
      }
      /**
       * <code>optional int32 new_channels = 61 [default = 0];</code>
       */
      public Builder setNewChannels(int value) {
        bitField1_ |= 0x00000001;
        newChannels_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 new_channels = 61 [default = 0];</code>
       */
      public Builder clearNewChannels() {
        bitField1_ = (bitField1_ & ~0x00000001);
        newChannels_ = 0;
        onChanged();
        return this;
      }

      // optional int32 new_height = 62 [default = 0];
      private int newHeight_ ;
      /**
       * <code>optional int32 new_height = 62 [default = 0];</code>
       */
      public boolean hasNewHeight() {
        return ((bitField1_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 new_height = 62 [default = 0];</code>
       */
      public int getNewHeight() {
        return newHeight_;
      }
      /**
       * <code>optional int32 new_height = 62 [default = 0];</code>
       */
      public Builder setNewHeight(int value) {
        bitField1_ |= 0x00000002;
        newHeight_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 new_height = 62 [default = 0];</code>
       */
      public Builder clearNewHeight() {
        bitField1_ = (bitField1_ & ~0x00000002);
        newHeight_ = 0;
        onChanged();
        return this;
      }

      // optional int32 new_width = 63 [default = 0];
      private int newWidth_ ;
      /**
       * <code>optional int32 new_width = 63 [default = 0];</code>
       */
      public boolean hasNewWidth() {
        return ((bitField1_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 new_width = 63 [default = 0];</code>
       */
      public int getNewWidth() {
        return newWidth_;
      }
      /**
       * <code>optional int32 new_width = 63 [default = 0];</code>
       */
      public Builder setNewWidth(int value) {
        bitField1_ |= 0x00000004;
        newWidth_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 new_width = 63 [default = 0];</code>
       */
      public Builder clearNewWidth() {
        bitField1_ = (bitField1_ & ~0x00000004);
        newWidth_ = 0;
        onChanged();
        return this;
      }

      // optional bool shuffle_images = 64 [default = false];
      private boolean shuffleImages_ ;
      /**
       * <code>optional bool shuffle_images = 64 [default = false];</code>
       *
       * <pre>
       * Whether or not ImageLayer should shuffle the list of files at every epoch.
       * It will also resize images if new_height or new_width are not zero.
       * </pre>
       */
      public boolean hasShuffleImages() {
        return ((bitField1_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional bool shuffle_images = 64 [default = false];</code>
       *
       * <pre>
       * Whether or not ImageLayer should shuffle the list of files at every epoch.
       * It will also resize images if new_height or new_width are not zero.
       * </pre>
       */
      public boolean getShuffleImages() {
        return shuffleImages_;
      }
      /**
       * <code>optional bool shuffle_images = 64 [default = false];</code>
       *
       * <pre>
       * Whether or not ImageLayer should shuffle the list of files at every epoch.
       * It will also resize images if new_height or new_width are not zero.
       * </pre>
       */
      public Builder setShuffleImages(boolean value) {
        bitField1_ |= 0x00000008;
        shuffleImages_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool shuffle_images = 64 [default = false];</code>
       *
       * <pre>
       * Whether or not ImageLayer should shuffle the list of files at every epoch.
       * It will also resize images if new_height or new_width are not zero.
       * </pre>
       */
      public Builder clearShuffleImages() {
        bitField1_ = (bitField1_ & ~0x00000008);
        shuffleImages_ = false;
        onChanged();
        return this;
      }

      // optional uint32 concat_dim = 65 [default = 1];
      private int concatDim_ = 1;
      /**
       * <code>optional uint32 concat_dim = 65 [default = 1];</code>
       *
       * <pre>
       * For ConcatLayer, one needs to specify the dimension for concatenation, and
       * the other dimensions must be the same for all the bottom blobs.
       * By default it will concatenate blobs along the channels dimension.
       * </pre>
       */
      public boolean hasConcatDim() {
        return ((bitField1_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional uint32 concat_dim = 65 [default = 1];</code>
       *
       * <pre>
       * For ConcatLayer, one needs to specify the dimension for concatenation, and
       * the other dimensions must be the same for all the bottom blobs.
       * By default it will concatenate blobs along the channels dimension.
       * </pre>
       */
      public int getConcatDim() {
        return concatDim_;
      }
      /**
       * <code>optional uint32 concat_dim = 65 [default = 1];</code>
       *
       * <pre>
       * For ConcatLayer, one needs to specify the dimension for concatenation, and
       * the other dimensions must be the same for all the bottom blobs.
       * By default it will concatenate blobs along the channels dimension.
       * </pre>
       */
      public Builder setConcatDim(int value) {
        bitField1_ |= 0x00000010;
        concatDim_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 concat_dim = 65 [default = 1];</code>
       *
       * <pre>
       * For ConcatLayer, one needs to specify the dimension for concatenation, and
       * the other dimensions must be the same for all the bottom blobs.
       * By default it will concatenate blobs along the channels dimension.
       * </pre>
       */
      public Builder clearConcatDim() {
        bitField1_ = (bitField1_ & ~0x00000010);
        concatDim_ = 1;
        onChanged();
        return this;
      }

      // optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;
      private caffe.Caffe.HDF5OutputParameter hdf5OutputParam_ = caffe.Caffe.HDF5OutputParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.HDF5OutputParameter, caffe.Caffe.HDF5OutputParameter.Builder, caffe.Caffe.HDF5OutputParameterOrBuilder> hdf5OutputParamBuilder_;
      /**
       * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;</code>
       */
      public boolean hasHdf5OutputParam() {
        return ((bitField1_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;</code>
       */
      public caffe.Caffe.HDF5OutputParameter getHdf5OutputParam() {
        if (hdf5OutputParamBuilder_ == null) {
          return hdf5OutputParam_;
        } else {
          return hdf5OutputParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;</code>
       */
      public Builder setHdf5OutputParam(caffe.Caffe.HDF5OutputParameter value) {
        if (hdf5OutputParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          hdf5OutputParam_ = value;
          onChanged();
        } else {
          hdf5OutputParamBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;</code>
       */
      public Builder setHdf5OutputParam(
          caffe.Caffe.HDF5OutputParameter.Builder builderForValue) {
        if (hdf5OutputParamBuilder_ == null) {
          hdf5OutputParam_ = builderForValue.build();
          onChanged();
        } else {
          hdf5OutputParamBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;</code>
       */
      public Builder mergeHdf5OutputParam(caffe.Caffe.HDF5OutputParameter value) {
        if (hdf5OutputParamBuilder_ == null) {
          if (((bitField1_ & 0x00000020) == 0x00000020) &&
              hdf5OutputParam_ != caffe.Caffe.HDF5OutputParameter.getDefaultInstance()) {
            hdf5OutputParam_ =
              caffe.Caffe.HDF5OutputParameter.newBuilder(hdf5OutputParam_).mergeFrom(value).buildPartial();
          } else {
            hdf5OutputParam_ = value;
          }
          onChanged();
        } else {
          hdf5OutputParamBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;</code>
       */
      public Builder clearHdf5OutputParam() {
        if (hdf5OutputParamBuilder_ == null) {
          hdf5OutputParam_ = caffe.Caffe.HDF5OutputParameter.getDefaultInstance();
          onChanged();
        } else {
          hdf5OutputParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000020);
        return this;
      }
      /**
       * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;</code>
       */
      public caffe.Caffe.HDF5OutputParameter.Builder getHdf5OutputParamBuilder() {
        bitField1_ |= 0x00000020;
        onChanged();
        return getHdf5OutputParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;</code>
       */
      public caffe.Caffe.HDF5OutputParameterOrBuilder getHdf5OutputParamOrBuilder() {
        if (hdf5OutputParamBuilder_ != null) {
          return hdf5OutputParamBuilder_.getMessageOrBuilder();
        } else {
          return hdf5OutputParam_;
        }
      }
      /**
       * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.HDF5OutputParameter, caffe.Caffe.HDF5OutputParameter.Builder, caffe.Caffe.HDF5OutputParameterOrBuilder> 
          getHdf5OutputParamFieldBuilder() {
        if (hdf5OutputParamBuilder_ == null) {
          hdf5OutputParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.HDF5OutputParameter, caffe.Caffe.HDF5OutputParameter.Builder, caffe.Caffe.HDF5OutputParameterOrBuilder>(
                  hdf5OutputParam_,
                  getParentForChildren(),
                  isClean());
          hdf5OutputParam_ = null;
        }
        return hdf5OutputParamBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:caffe.V0LayerParameter)
    }

    static {
      defaultInstance = new V0LayerParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.V0LayerParameter)
  }

  public interface PReLUParameterOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional .caffe.FillerParameter filler = 1;
    /**
     * <code>optional .caffe.FillerParameter filler = 1;</code>
     *
     * <pre>
     * Initial value of a_i. Default is a_i=0.25 for all i.
     * </pre>
     */
    boolean hasFiller();
    /**
     * <code>optional .caffe.FillerParameter filler = 1;</code>
     *
     * <pre>
     * Initial value of a_i. Default is a_i=0.25 for all i.
     * </pre>
     */
    caffe.Caffe.FillerParameter getFiller();
    /**
     * <code>optional .caffe.FillerParameter filler = 1;</code>
     *
     * <pre>
     * Initial value of a_i. Default is a_i=0.25 for all i.
     * </pre>
     */
    caffe.Caffe.FillerParameterOrBuilder getFillerOrBuilder();

    // optional bool channel_shared = 2 [default = false];
    /**
     * <code>optional bool channel_shared = 2 [default = false];</code>
     *
     * <pre>
     * Whether or not slope paramters are shared across channels.
     * </pre>
     */
    boolean hasChannelShared();
    /**
     * <code>optional bool channel_shared = 2 [default = false];</code>
     *
     * <pre>
     * Whether or not slope paramters are shared across channels.
     * </pre>
     */
    boolean getChannelShared();
  }
  /**
   * Protobuf type {@code caffe.PReLUParameter}
   *
   * <pre>
   * Parametric ReLU described in K. He et al, Delving Deep into Rectifiers:
   * Surpassing Human-Level Performance on ImageNet Classification, 2015.
   * </pre>
   */
  public static final class PReLUParameter extends
      com.google.protobuf.GeneratedMessage
      implements PReLUParameterOrBuilder {
    // Use PReLUParameter.newBuilder() to construct.
    private PReLUParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private PReLUParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final PReLUParameter defaultInstance;
    public static PReLUParameter getDefaultInstance() {
      return defaultInstance;
    }

    public PReLUParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private PReLUParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              caffe.Caffe.FillerParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = filler_.toBuilder();
              }
              filler_ = input.readMessage(caffe.Caffe.FillerParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(filler_);
                filler_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              channelShared_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_PReLUParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_PReLUParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.PReLUParameter.class, caffe.Caffe.PReLUParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<PReLUParameter> PARSER =
        new com.google.protobuf.AbstractParser<PReLUParameter>() {
      public PReLUParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PReLUParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<PReLUParameter> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional .caffe.FillerParameter filler = 1;
    public static final int FILLER_FIELD_NUMBER = 1;
    private caffe.Caffe.FillerParameter filler_;
    /**
     * <code>optional .caffe.FillerParameter filler = 1;</code>
     *
     * <pre>
     * Initial value of a_i. Default is a_i=0.25 for all i.
     * </pre>
     */
    public boolean hasFiller() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .caffe.FillerParameter filler = 1;</code>
     *
     * <pre>
     * Initial value of a_i. Default is a_i=0.25 for all i.
     * </pre>
     */
    public caffe.Caffe.FillerParameter getFiller() {
      return filler_;
    }
    /**
     * <code>optional .caffe.FillerParameter filler = 1;</code>
     *
     * <pre>
     * Initial value of a_i. Default is a_i=0.25 for all i.
     * </pre>
     */
    public caffe.Caffe.FillerParameterOrBuilder getFillerOrBuilder() {
      return filler_;
    }

    // optional bool channel_shared = 2 [default = false];
    public static final int CHANNEL_SHARED_FIELD_NUMBER = 2;
    private boolean channelShared_;
    /**
     * <code>optional bool channel_shared = 2 [default = false];</code>
     *
     * <pre>
     * Whether or not slope paramters are shared across channels.
     * </pre>
     */
    public boolean hasChannelShared() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional bool channel_shared = 2 [default = false];</code>
     *
     * <pre>
     * Whether or not slope paramters are shared across channels.
     * </pre>
     */
    public boolean getChannelShared() {
      return channelShared_;
    }

    private void initFields() {
      filler_ = caffe.Caffe.FillerParameter.getDefaultInstance();
      channelShared_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, filler_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBool(2, channelShared_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, filler_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, channelShared_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.PReLUParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.PReLUParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.PReLUParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.PReLUParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.PReLUParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.PReLUParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.PReLUParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.PReLUParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.PReLUParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.PReLUParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.PReLUParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.PReLUParameter}
     *
     * <pre>
     * Parametric ReLU described in K. He et al, Delving Deep into Rectifiers:
     * Surpassing Human-Level Performance on ImageNet Classification, 2015.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements caffe.Caffe.PReLUParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_PReLUParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_PReLUParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.PReLUParameter.class, caffe.Caffe.PReLUParameter.Builder.class);
      }

      // Construct using caffe.Caffe.PReLUParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getFillerFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (fillerBuilder_ == null) {
          filler_ = caffe.Caffe.FillerParameter.getDefaultInstance();
        } else {
          fillerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        channelShared_ = false;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_PReLUParameter_descriptor;
      }

      public caffe.Caffe.PReLUParameter getDefaultInstanceForType() {
        return caffe.Caffe.PReLUParameter.getDefaultInstance();
      }

      public caffe.Caffe.PReLUParameter build() {
        caffe.Caffe.PReLUParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.PReLUParameter buildPartial() {
        caffe.Caffe.PReLUParameter result = new caffe.Caffe.PReLUParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (fillerBuilder_ == null) {
          result.filler_ = filler_;
        } else {
          result.filler_ = fillerBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.channelShared_ = channelShared_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.PReLUParameter) {
          return mergeFrom((caffe.Caffe.PReLUParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.PReLUParameter other) {
        if (other == caffe.Caffe.PReLUParameter.getDefaultInstance()) return this;
        if (other.hasFiller()) {
          mergeFiller(other.getFiller());
        }
        if (other.hasChannelShared()) {
          setChannelShared(other.getChannelShared());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.PReLUParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.PReLUParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .caffe.FillerParameter filler = 1;
      private caffe.Caffe.FillerParameter filler_ = caffe.Caffe.FillerParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.FillerParameter, caffe.Caffe.FillerParameter.Builder, caffe.Caffe.FillerParameterOrBuilder> fillerBuilder_;
      /**
       * <code>optional .caffe.FillerParameter filler = 1;</code>
       *
       * <pre>
       * Initial value of a_i. Default is a_i=0.25 for all i.
       * </pre>
       */
      public boolean hasFiller() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .caffe.FillerParameter filler = 1;</code>
       *
       * <pre>
       * Initial value of a_i. Default is a_i=0.25 for all i.
       * </pre>
       */
      public caffe.Caffe.FillerParameter getFiller() {
        if (fillerBuilder_ == null) {
          return filler_;
        } else {
          return fillerBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.FillerParameter filler = 1;</code>
       *
       * <pre>
       * Initial value of a_i. Default is a_i=0.25 for all i.
       * </pre>
       */
      public Builder setFiller(caffe.Caffe.FillerParameter value) {
        if (fillerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          filler_ = value;
          onChanged();
        } else {
          fillerBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter filler = 1;</code>
       *
       * <pre>
       * Initial value of a_i. Default is a_i=0.25 for all i.
       * </pre>
       */
      public Builder setFiller(
          caffe.Caffe.FillerParameter.Builder builderForValue) {
        if (fillerBuilder_ == null) {
          filler_ = builderForValue.build();
          onChanged();
        } else {
          fillerBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter filler = 1;</code>
       *
       * <pre>
       * Initial value of a_i. Default is a_i=0.25 for all i.
       * </pre>
       */
      public Builder mergeFiller(caffe.Caffe.FillerParameter value) {
        if (fillerBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              filler_ != caffe.Caffe.FillerParameter.getDefaultInstance()) {
            filler_ =
              caffe.Caffe.FillerParameter.newBuilder(filler_).mergeFrom(value).buildPartial();
          } else {
            filler_ = value;
          }
          onChanged();
        } else {
          fillerBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter filler = 1;</code>
       *
       * <pre>
       * Initial value of a_i. Default is a_i=0.25 for all i.
       * </pre>
       */
      public Builder clearFiller() {
        if (fillerBuilder_ == null) {
          filler_ = caffe.Caffe.FillerParameter.getDefaultInstance();
          onChanged();
        } else {
          fillerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter filler = 1;</code>
       *
       * <pre>
       * Initial value of a_i. Default is a_i=0.25 for all i.
       * </pre>
       */
      public caffe.Caffe.FillerParameter.Builder getFillerBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getFillerFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.FillerParameter filler = 1;</code>
       *
       * <pre>
       * Initial value of a_i. Default is a_i=0.25 for all i.
       * </pre>
       */
      public caffe.Caffe.FillerParameterOrBuilder getFillerOrBuilder() {
        if (fillerBuilder_ != null) {
          return fillerBuilder_.getMessageOrBuilder();
        } else {
          return filler_;
        }
      }
      /**
       * <code>optional .caffe.FillerParameter filler = 1;</code>
       *
       * <pre>
       * Initial value of a_i. Default is a_i=0.25 for all i.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.FillerParameter, caffe.Caffe.FillerParameter.Builder, caffe.Caffe.FillerParameterOrBuilder> 
          getFillerFieldBuilder() {
        if (fillerBuilder_ == null) {
          fillerBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.FillerParameter, caffe.Caffe.FillerParameter.Builder, caffe.Caffe.FillerParameterOrBuilder>(
                  filler_,
                  getParentForChildren(),
                  isClean());
          filler_ = null;
        }
        return fillerBuilder_;
      }

      // optional bool channel_shared = 2 [default = false];
      private boolean channelShared_ ;
      /**
       * <code>optional bool channel_shared = 2 [default = false];</code>
       *
       * <pre>
       * Whether or not slope paramters are shared across channels.
       * </pre>
       */
      public boolean hasChannelShared() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional bool channel_shared = 2 [default = false];</code>
       *
       * <pre>
       * Whether or not slope paramters are shared across channels.
       * </pre>
       */
      public boolean getChannelShared() {
        return channelShared_;
      }
      /**
       * <code>optional bool channel_shared = 2 [default = false];</code>
       *
       * <pre>
       * Whether or not slope paramters are shared across channels.
       * </pre>
       */
      public Builder setChannelShared(boolean value) {
        bitField0_ |= 0x00000002;
        channelShared_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool channel_shared = 2 [default = false];</code>
       *
       * <pre>
       * Whether or not slope paramters are shared across channels.
       * </pre>
       */
      public Builder clearChannelShared() {
        bitField0_ = (bitField0_ & ~0x00000002);
        channelShared_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.PReLUParameter)
    }

    static {
      defaultInstance = new PReLUParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.PReLUParameter)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_BlobShape_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_BlobShape_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_BlobProto_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_BlobProto_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_BlobProtoVector_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_BlobProtoVector_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_Datum_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_Datum_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_FillerParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_FillerParameter_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_NetParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_NetParameter_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_SolverParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_SolverParameter_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_SolverState_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_SolverState_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_NetState_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_NetState_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_NetStateRule_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_NetStateRule_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_ParamSpec_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_ParamSpec_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_LayerParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_LayerParameter_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_ROIPoolingParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_ROIPoolingParameter_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_ProposalParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_ProposalParameter_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_SmoothL1LossParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_SmoothL1LossParameter_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_TransformationParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_TransformationParameter_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_LossParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_LossParameter_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_AccuracyParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_AccuracyParameter_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_ArgMaxParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_ArgMaxParameter_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_ConcatParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_ConcatParameter_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_BatchNormParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_BatchNormParameter_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_BiasParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_BiasParameter_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_ContrastiveLossParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_ContrastiveLossParameter_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_ConvolutionParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_ConvolutionParameter_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_CropParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_CropParameter_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_DataParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_DataParameter_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_DropoutParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_DropoutParameter_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_DummyDataParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_DummyDataParameter_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_EltwiseParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_EltwiseParameter_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_ELUParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_ELUParameter_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_EmbedParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_EmbedParameter_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_ExpParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_ExpParameter_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_FlattenParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_FlattenParameter_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_HDF5DataParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_HDF5DataParameter_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_HDF5OutputParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_HDF5OutputParameter_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_HingeLossParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_HingeLossParameter_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_ImageDataParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_ImageDataParameter_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_InfogainLossParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_InfogainLossParameter_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_InnerProductParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_InnerProductParameter_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_InputParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_InputParameter_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_LogParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_LogParameter_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_LRNParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_LRNParameter_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_MemoryDataParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_MemoryDataParameter_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_MVNParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_MVNParameter_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_ParameterParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_ParameterParameter_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_PoolingParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_PoolingParameter_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_PowerParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_PowerParameter_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_PythonParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_PythonParameter_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_RecurrentParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_RecurrentParameter_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_ReductionParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_ReductionParameter_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_ReLUParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_ReLUParameter_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_ReshapeParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_ReshapeParameter_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_ScaleParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_ScaleParameter_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_SigmoidParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_SigmoidParameter_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_SliceParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_SliceParameter_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_SoftmaxParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_SoftmaxParameter_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_TanHParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_TanHParameter_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_TileParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_TileParameter_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_ThresholdParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_ThresholdParameter_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_WindowDataParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_WindowDataParameter_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_SPPParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_SPPParameter_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_V1LayerParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_V1LayerParameter_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_V0LayerParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_V0LayerParameter_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_PReLUParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_PReLUParameter_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\027caffe/proto/caffe.proto\022\005caffe\"\034\n\tBlob" +
      "Shape\022\017\n\003dim\030\001 \003(\003B\002\020\001\"\314\001\n\tBlobProto\022\037\n\005" +
      "shape\030\007 \001(\0132\020.caffe.BlobShape\022\020\n\004data\030\005 " +
      "\003(\002B\002\020\001\022\020\n\004diff\030\006 \003(\002B\002\020\001\022\027\n\013double_data" +
      "\030\010 \003(\001B\002\020\001\022\027\n\013double_diff\030\t \003(\001B\002\020\001\022\016\n\003n" +
      "um\030\001 \001(\005:\0010\022\023\n\010channels\030\002 \001(\005:\0010\022\021\n\006heig" +
      "ht\030\003 \001(\005:\0010\022\020\n\005width\030\004 \001(\005:\0010\"2\n\017BlobPro" +
      "toVector\022\037\n\005blobs\030\001 \003(\0132\020.caffe.BlobProt" +
      "o\"\201\001\n\005Datum\022\020\n\010channels\030\001 \001(\005\022\016\n\006height\030" +
      "\002 \001(\005\022\r\n\005width\030\003 \001(\005\022\014\n\004data\030\004 \001(\014\022\r\n\005la",
      "bel\030\005 \001(\005\022\022\n\nfloat_data\030\006 \003(\002\022\026\n\007encoded" +
      "\030\007 \001(\010:\005false\"\212\002\n\017FillerParameter\022\026\n\004typ" +
      "e\030\001 \001(\t:\010constant\022\020\n\005value\030\002 \001(\002:\0010\022\016\n\003m" +
      "in\030\003 \001(\002:\0010\022\016\n\003max\030\004 \001(\002:\0011\022\017\n\004mean\030\005 \001(" +
      "\002:\0010\022\016\n\003std\030\006 \001(\002:\0011\022\022\n\006sparse\030\007 \001(\005:\002-1" +
      "\022B\n\rvariance_norm\030\010 \001(\0162#.caffe.FillerPa" +
      "rameter.VarianceNorm:\006FAN_IN\"4\n\014Variance" +
      "Norm\022\n\n\006FAN_IN\020\000\022\013\n\007FAN_OUT\020\001\022\013\n\007AVERAGE" +
      "\020\002\"\216\002\n\014NetParameter\022\014\n\004name\030\001 \001(\t\022\r\n\005inp" +
      "ut\030\003 \003(\t\022%\n\013input_shape\030\010 \003(\0132\020.caffe.Bl",
      "obShape\022\021\n\tinput_dim\030\004 \003(\005\022\035\n\016force_back" +
      "ward\030\005 \001(\010:\005false\022\036\n\005state\030\006 \001(\0132\017.caffe" +
      ".NetState\022\031\n\ndebug_info\030\007 \001(\010:\005false\022$\n\005" +
      "layer\030d \003(\0132\025.caffe.LayerParameter\022\'\n\006la" +
      "yers\030\002 \003(\0132\027.caffe.V1LayerParameter\"\273\n\n\017" +
      "SolverParameter\022\013\n\003net\030\030 \001(\t\022&\n\tnet_para" +
      "m\030\031 \001(\0132\023.caffe.NetParameter\022\021\n\ttrain_ne" +
      "t\030\001 \001(\t\022\020\n\010test_net\030\002 \003(\t\022,\n\017train_net_p" +
      "aram\030\025 \001(\0132\023.caffe.NetParameter\022+\n\016test_" +
      "net_param\030\026 \003(\0132\023.caffe.NetParameter\022$\n\013",
      "train_state\030\032 \001(\0132\017.caffe.NetState\022#\n\nte" +
      "st_state\030\033 \003(\0132\017.caffe.NetState\022\021\n\ttest_" +
      "iter\030\003 \003(\005\022\030\n\rtest_interval\030\004 \001(\005:\0010\022 \n\021" +
      "test_compute_loss\030\023 \001(\010:\005false\022!\n\023test_i" +
      "nitialization\030  \001(\010:\004true\022\017\n\007base_lr\030\005 \001" +
      "(\002\022\017\n\007display\030\006 \001(\005\022\027\n\014average_loss\030! \001(" +
      "\005:\0011\022\020\n\010max_iter\030\007 \001(\005\022\024\n\titer_size\030$ \001(" +
      "\005:\0011\022\021\n\tlr_policy\030\010 \001(\t\022\r\n\005gamma\030\t \001(\002\022\r" +
      "\n\005power\030\n \001(\002\022\020\n\010momentum\030\013 \001(\002\022\024\n\014weigh" +
      "t_decay\030\014 \001(\002\022\037\n\023regularization_type\030\035 \001",
      "(\t:\002L2\022\020\n\010stepsize\030\r \001(\005\022\021\n\tstepvalue\030\" " +
      "\003(\005\022\027\n\017plateau_winsize\030) \003(\005\022\032\n\016clip_gra" +
      "dients\030# \001(\002:\002-1\022\023\n\010snapshot\030\016 \001(\005:\0010\022\027\n" +
      "\017snapshot_prefix\030\017 \001(\t\022\034\n\rsnapshot_diff\030" +
      "\020 \001(\010:\005false\022K\n\017snapshot_format\030% \001(\0162%." +
      "caffe.SolverParameter.SnapshotFormat:\013BI" +
      "NARYPROTO\022;\n\013solver_mode\030\021 \001(\0162!.caffe.S" +
      "olverParameter.SolverMode:\003GPU\022\024\n\tdevice" +
      "_id\030\022 \001(\005:\0010\022\027\n\013random_seed\030\024 \001(\003:\002-1\022\021\n" +
      "\004type\030( \001(\t:\003SGD\022\024\n\005delta\030\037 \001(\002:\0051e-08\022\030",
      "\n\tmomentum2\030\' \001(\002:\0050.999\022\027\n\trms_decay\030& " +
      "\001(\002:\0040.99\022\031\n\ndebug_info\030\027 \001(\010:\005false\022\"\n\024" +
      "snapshot_after_train\030\034 \001(\010:\004true\022;\n\013solv" +
      "er_type\030\036 \001(\0162!.caffe.SolverParameter.So" +
      "lverType:\003SGD\"+\n\016SnapshotFormat\022\010\n\004HDF5\020" +
      "\000\022\017\n\013BINARYPROTO\020\001\"\036\n\nSolverMode\022\007\n\003CPU\020" +
      "\000\022\007\n\003GPU\020\001\"U\n\nSolverType\022\007\n\003SGD\020\000\022\014\n\010NES" +
      "TEROV\020\001\022\013\n\007ADAGRAD\020\002\022\013\n\007RMSPROP\020\003\022\014\n\010ADA" +
      "DELTA\020\004\022\010\n\004ADAM\020\005\"\245\001\n\013SolverState\022\014\n\004ite" +
      "r\030\001 \001(\005\022\023\n\013learned_net\030\002 \001(\t\022!\n\007history\030",
      "\003 \003(\0132\020.caffe.BlobProto\022\027\n\014current_step\030" +
      "\004 \001(\005:\0010\022\033\n\014minimum_loss\030\005 \001(\002:\0051e+38\022\032\n" +
      "\017iter_last_event\030\006 \001(\005:\0010\"N\n\010NetState\022!\n" +
      "\005phase\030\001 \001(\0162\014.caffe.Phase:\004TEST\022\020\n\005leve" +
      "l\030\002 \001(\005:\0010\022\r\n\005stage\030\003 \003(\t\"s\n\014NetStateRul" +
      "e\022\033\n\005phase\030\001 \001(\0162\014.caffe.Phase\022\021\n\tmin_le" +
      "vel\030\002 \001(\005\022\021\n\tmax_level\030\003 \001(\005\022\r\n\005stage\030\004 " +
      "\003(\t\022\021\n\tnot_stage\030\005 \003(\t\"\243\001\n\tParamSpec\022\014\n\004" +
      "name\030\001 \001(\t\0221\n\nshare_mode\030\002 \001(\0162\035.caffe.P" +
      "aramSpec.DimCheckMode\022\022\n\007lr_mult\030\003 \001(\002:\001",
      "1\022\025\n\ndecay_mult\030\004 \001(\002:\0011\"*\n\014DimCheckMode" +
      "\022\n\n\006STRICT\020\000\022\016\n\nPERMISSIVE\020\001\"\260\025\n\016LayerPa" +
      "rameter\022\014\n\004name\030\001 \001(\t\022\014\n\004type\030\002 \001(\t\022\016\n\006b" +
      "ottom\030\003 \003(\t\022\013\n\003top\030\004 \003(\t\022\033\n\005phase\030\n \001(\0162" +
      "\014.caffe.Phase\022\023\n\013loss_weight\030\005 \003(\002\022\037\n\005pa" +
      "ram\030\006 \003(\0132\020.caffe.ParamSpec\022\037\n\005blobs\030\007 \003" +
      "(\0132\020.caffe.BlobProto\022\026\n\016propagate_down\030\013" +
      " \003(\010\022$\n\007include\030\010 \003(\0132\023.caffe.NetStateRu" +
      "le\022$\n\007exclude\030\t \003(\0132\023.caffe.NetStateRule" +
      "\0227\n\017transform_param\030d \001(\0132\036.caffe.Transf",
      "ormationParameter\022(\n\nloss_param\030e \001(\0132\024." +
      "caffe.LossParameter\0220\n\016accuracy_param\030f " +
      "\001(\0132\030.caffe.AccuracyParameter\022,\n\014argmax_" +
      "param\030g \001(\0132\026.caffe.ArgMaxParameter\0224\n\020b" +
      "atch_norm_param\030\213\001 \001(\0132\031.caffe.BatchNorm" +
      "Parameter\022)\n\nbias_param\030\215\001 \001(\0132\024.caffe.B" +
      "iasParameter\022,\n\014concat_param\030h \001(\0132\026.caf" +
      "fe.ConcatParameter\022?\n\026contrastive_loss_p" +
      "aram\030i \001(\0132\037.caffe.ContrastiveLossParame" +
      "ter\0226\n\021convolution_param\030j \001(\0132\033.caffe.C",
      "onvolutionParameter\022)\n\ncrop_param\030\220\001 \001(\013" +
      "2\024.caffe.CropParameter\022(\n\ndata_param\030k \001" +
      "(\0132\024.caffe.DataParameter\022.\n\rdropout_para" +
      "m\030l \001(\0132\027.caffe.DropoutParameter\0223\n\020dumm" +
      "y_data_param\030m \001(\0132\031.caffe.DummyDataPara" +
      "meter\022.\n\reltwise_param\030n \001(\0132\027.caffe.Elt" +
      "wiseParameter\022\'\n\telu_param\030\214\001 \001(\0132\023.caff" +
      "e.ELUParameter\022+\n\013embed_param\030\211\001 \001(\0132\025.c" +
      "affe.EmbedParameter\022&\n\texp_param\030o \001(\0132\023" +
      ".caffe.ExpParameter\022/\n\rflatten_param\030\207\001 ",
      "\001(\0132\027.caffe.FlattenParameter\0221\n\017hdf5_dat" +
      "a_param\030p \001(\0132\030.caffe.HDF5DataParameter\022" +
      "5\n\021hdf5_output_param\030q \001(\0132\032.caffe.HDF5O" +
      "utputParameter\0223\n\020hinge_loss_param\030r \001(\013" +
      "2\031.caffe.HingeLossParameter\0223\n\020image_dat" +
      "a_param\030s \001(\0132\031.caffe.ImageDataParameter" +
      "\0229\n\023infogain_loss_param\030t \001(\0132\034.caffe.In" +
      "fogainLossParameter\0229\n\023inner_product_par" +
      "am\030u \001(\0132\034.caffe.InnerProductParameter\022+" +
      "\n\013input_param\030\217\001 \001(\0132\025.caffe.InputParame",
      "ter\022\'\n\tlog_param\030\206\001 \001(\0132\023.caffe.LogParam" +
      "eter\022&\n\tlrn_param\030v \001(\0132\023.caffe.LRNParam" +
      "eter\0225\n\021memory_data_param\030w \001(\0132\032.caffe." +
      "MemoryDataParameter\022&\n\tmvn_param\030x \001(\0132\023" +
      ".caffe.MVNParameter\0223\n\017parameter_param\030\221" +
      "\001 \001(\0132\031.caffe.ParameterParameter\022.\n\rpool" +
      "ing_param\030y \001(\0132\027.caffe.PoolingParameter" +
      "\022*\n\013power_param\030z \001(\0132\025.caffe.PowerParam" +
      "eter\022+\n\013prelu_param\030\203\001 \001(\0132\025.caffe.PReLU" +
      "Parameter\022-\n\014python_param\030\202\001 \001(\0132\026.caffe",
      ".PythonParameter\0223\n\017recurrent_param\030\222\001 \001" +
      "(\0132\031.caffe.RecurrentParameter\0223\n\017reducti" +
      "on_param\030\210\001 \001(\0132\031.caffe.ReductionParamet" +
      "er\022(\n\nrelu_param\030{ \001(\0132\024.caffe.ReLUParam" +
      "eter\022/\n\rreshape_param\030\205\001 \001(\0132\027.caffe.Res" +
      "hapeParameter\022+\n\013scale_param\030\216\001 \001(\0132\025.ca" +
      "ffe.ScaleParameter\022.\n\rsigmoid_param\030| \001(" +
      "\0132\027.caffe.SigmoidParameter\022.\n\rsoftmax_pa" +
      "ram\030} \001(\0132\027.caffe.SoftmaxParameter\022\'\n\tsp" +
      "p_param\030\204\001 \001(\0132\023.caffe.SPPParameter\022*\n\013s",
      "lice_param\030~ \001(\0132\025.caffe.SliceParameter\022" +
      "(\n\ntanh_param\030\177 \001(\0132\024.caffe.TanHParamete" +
      "r\0223\n\017threshold_param\030\200\001 \001(\0132\031.caffe.Thre" +
      "sholdParameter\022)\n\ntile_param\030\212\001 \001(\0132\024.ca" +
      "ffe.TileParameter\0226\n\021window_data_param\030\201" +
      "\001 \001(\0132\032.caffe.WindowDataParameter\0228\n\021roi" +
      "_pooling_param\030\327\307\370\003 \001(\0132\032.caffe.ROIPooli" +
      "ngParameter\022=\n\024smooth_l1_loss_param\030\330\307\370\003" +
      " \001(\0132\034.caffe.SmoothL1LossParameter\0223\n\016pr" +
      "oposal_param\030\331\307\370\003 \001(\0132\030.caffe.ProposalPa",
      "rameter\"Y\n\023ROIPoolingParameter\022\023\n\010pooled" +
      "_h\030\001 \001(\r:\0010\022\023\n\010pooled_w\030\002 \001(\r:\0010\022\030\n\rspat" +
      "ial_scale\030\003 \001(\002:\0011\"\310\001\n\021ProposalParameter" +
      "\022\027\n\013feat_stride\030\001 \001(\r:\00216\022\025\n\tbase_size\030\002" +
      " \001(\r:\00216\022\024\n\010min_size\030\003 \001(\r:\00216\022\r\n\005ratio\030" +
      "\004 \003(\002\022\r\n\005scale\030\005 \003(\002\022\032\n\014pre_nms_topn\030\006 \001" +
      "(\r:\0046000\022\032\n\rpost_nms_topn\030\007 \001(\r:\003300\022\027\n\n" +
      "nms_thresh\030\010 \001(\002:\0030.7\")\n\025SmoothL1LossPar" +
      "ameter\022\020\n\005sigma\030\001 \001(\002:\0011\"\266\001\n\027Transformat" +
      "ionParameter\022\020\n\005scale\030\001 \001(\002:\0011\022\025\n\006mirror",
      "\030\002 \001(\010:\005false\022\024\n\tcrop_size\030\003 \001(\r:\0010\022\021\n\tm" +
      "ean_file\030\004 \001(\t\022\022\n\nmean_value\030\005 \003(\002\022\032\n\013fo" +
      "rce_color\030\006 \001(\010:\005false\022\031\n\nforce_gray\030\007 \001" +
      "(\010:\005false\"\302\001\n\rLossParameter\022\024\n\014ignore_la" +
      "bel\030\001 \001(\005\022D\n\rnormalization\030\003 \001(\0162&.caffe" +
      ".LossParameter.NormalizationMode:\005VALID\022" +
      "\021\n\tnormalize\030\002 \001(\010\"B\n\021NormalizationMode\022" +
      "\010\n\004FULL\020\000\022\t\n\005VALID\020\001\022\016\n\nBATCH_SIZE\020\002\022\010\n\004" +
      "NONE\020\003\"L\n\021AccuracyParameter\022\020\n\005top_k\030\001 \001" +
      "(\r:\0011\022\017\n\004axis\030\002 \001(\005:\0011\022\024\n\014ignore_label\030\003",
      " \001(\005\"M\n\017ArgMaxParameter\022\032\n\013out_max_val\030\001" +
      " \001(\010:\005false\022\020\n\005top_k\030\002 \001(\r:\0011\022\014\n\004axis\030\003 " +
      "\001(\005\"9\n\017ConcatParameter\022\017\n\004axis\030\002 \001(\005:\0011\022" +
      "\025\n\nconcat_dim\030\001 \001(\r:\0011\"j\n\022BatchNormParam" +
      "eter\022\030\n\020use_global_stats\030\001 \001(\010\022&\n\027moving" +
      "_average_fraction\030\002 \001(\002:\0050.999\022\022\n\003eps\030\003 " +
      "\001(\002:\0051e-05\"]\n\rBiasParameter\022\017\n\004axis\030\001 \001(" +
      "\005:\0011\022\023\n\010num_axes\030\002 \001(\005:\0011\022&\n\006filler\030\003 \001(" +
      "\0132\026.caffe.FillerParameter\"L\n\030Contrastive" +
      "LossParameter\022\021\n\006margin\030\001 \001(\002:\0011\022\035\n\016lega",
      "cy_version\030\002 \001(\010:\005false\"\374\003\n\024ConvolutionP" +
      "arameter\022\022\n\nnum_output\030\001 \001(\r\022\027\n\tbias_ter" +
      "m\030\002 \001(\010:\004true\022\013\n\003pad\030\003 \003(\r\022\023\n\013kernel_siz" +
      "e\030\004 \003(\r\022\016\n\006stride\030\006 \003(\r\022\020\n\010dilation\030\022 \003(" +
      "\r\022\020\n\005pad_h\030\t \001(\r:\0010\022\020\n\005pad_w\030\n \001(\r:\0010\022\020\n" +
      "\010kernel_h\030\013 \001(\r\022\020\n\010kernel_w\030\014 \001(\r\022\020\n\010str" +
      "ide_h\030\r \001(\r\022\020\n\010stride_w\030\016 \001(\r\022\020\n\005group\030\005" +
      " \001(\r:\0011\022-\n\rweight_filler\030\007 \001(\0132\026.caffe.F" +
      "illerParameter\022+\n\013bias_filler\030\010 \001(\0132\026.ca" +
      "ffe.FillerParameter\022;\n\006engine\030\017 \001(\0162\".ca",
      "ffe.ConvolutionParameter.Engine:\007DEFAULT" +
      "\022\017\n\004axis\030\020 \001(\005:\0011\022\036\n\017force_nd_im2col\030\021 \001" +
      "(\010:\005false\"+\n\006Engine\022\013\n\007DEFAULT\020\000\022\t\n\005CAFF" +
      "E\020\001\022\t\n\005CUDNN\020\002\"0\n\rCropParameter\022\017\n\004axis\030" +
      "\001 \001(\005:\0012\022\016\n\006offset\030\002 \003(\r\"\244\002\n\rDataParamet" +
      "er\022\016\n\006source\030\001 \001(\t\022\022\n\nbatch_size\030\004 \001(\r\022\024" +
      "\n\trand_skip\030\007 \001(\r:\0010\0221\n\007backend\030\010 \001(\0162\027." +
      "caffe.DataParameter.DB:\007LEVELDB\022\020\n\005scale" +
      "\030\002 \001(\002:\0011\022\021\n\tmean_file\030\003 \001(\t\022\024\n\tcrop_siz" +
      "e\030\005 \001(\r:\0010\022\025\n\006mirror\030\006 \001(\010:\005false\022\"\n\023for",
      "ce_encoded_color\030\t \001(\010:\005false\022\023\n\010prefetc" +
      "h\030\n \001(\r:\0014\"\033\n\002DB\022\013\n\007LEVELDB\020\000\022\010\n\004LMDB\020\001\"" +
      ".\n\020DropoutParameter\022\032\n\rdropout_ratio\030\001 \001" +
      "(\002:\0030.5\"\240\001\n\022DummyDataParameter\022+\n\013data_f" +
      "iller\030\001 \003(\0132\026.caffe.FillerParameter\022\037\n\005s" +
      "hape\030\006 \003(\0132\020.caffe.BlobShape\022\013\n\003num\030\002 \003(" +
      "\r\022\020\n\010channels\030\003 \003(\r\022\016\n\006height\030\004 \003(\r\022\r\n\005w" +
      "idth\030\005 \003(\r\"\245\001\n\020EltwiseParameter\0229\n\topera" +
      "tion\030\001 \001(\0162!.caffe.EltwiseParameter.Eltw" +
      "iseOp:\003SUM\022\r\n\005coeff\030\002 \003(\002\022\036\n\020stable_prod",
      "_grad\030\003 \001(\010:\004true\"\'\n\tEltwiseOp\022\010\n\004PROD\020\000" +
      "\022\007\n\003SUM\020\001\022\007\n\003MAX\020\002\" \n\014ELUParameter\022\020\n\005al" +
      "pha\030\001 \001(\002:\0011\"\254\001\n\016EmbedParameter\022\022\n\nnum_o" +
      "utput\030\001 \001(\r\022\021\n\tinput_dim\030\002 \001(\r\022\027\n\tbias_t" +
      "erm\030\003 \001(\010:\004true\022-\n\rweight_filler\030\004 \001(\0132\026" +
      ".caffe.FillerParameter\022+\n\013bias_filler\030\005 " +
      "\001(\0132\026.caffe.FillerParameter\"D\n\014ExpParame" +
      "ter\022\020\n\004base\030\001 \001(\002:\002-1\022\020\n\005scale\030\002 \001(\002:\0011\022" +
      "\020\n\005shift\030\003 \001(\002:\0010\"9\n\020FlattenParameter\022\017\n" +
      "\004axis\030\001 \001(\005:\0011\022\024\n\010end_axis\030\002 \001(\005:\002-1\"O\n\021",
      "HDF5DataParameter\022\016\n\006source\030\001 \001(\t\022\022\n\nbat" +
      "ch_size\030\002 \001(\r\022\026\n\007shuffle\030\003 \001(\010:\005false\"(\n" +
      "\023HDF5OutputParameter\022\021\n\tfile_name\030\001 \001(\t\"" +
      "^\n\022HingeLossParameter\0220\n\004norm\030\001 \001(\0162\036.ca" +
      "ffe.HingeLossParameter.Norm:\002L1\"\026\n\004Norm\022" +
      "\006\n\002L1\020\001\022\006\n\002L2\020\002\"\227\002\n\022ImageDataParameter\022\016" +
      "\n\006source\030\001 \001(\t\022\025\n\nbatch_size\030\004 \001(\r:\0011\022\024\n" +
      "\trand_skip\030\007 \001(\r:\0010\022\026\n\007shuffle\030\010 \001(\010:\005fa" +
      "lse\022\025\n\nnew_height\030\t \001(\r:\0010\022\024\n\tnew_width\030" +
      "\n \001(\r:\0010\022\026\n\010is_color\030\013 \001(\010:\004true\022\020\n\005scal",
      "e\030\002 \001(\002:\0011\022\021\n\tmean_file\030\003 \001(\t\022\024\n\tcrop_si" +
      "ze\030\005 \001(\r:\0010\022\025\n\006mirror\030\006 \001(\010:\005false\022\025\n\013ro" +
      "ot_folder\030\014 \001(\t:\000\"\'\n\025InfogainLossParamet" +
      "er\022\016\n\006source\030\001 \001(\t\"\313\001\n\025InnerProductParam" +
      "eter\022\022\n\nnum_output\030\001 \001(\r\022\027\n\tbias_term\030\002 " +
      "\001(\010:\004true\022-\n\rweight_filler\030\003 \001(\0132\026.caffe" +
      ".FillerParameter\022+\n\013bias_filler\030\004 \001(\0132\026." +
      "caffe.FillerParameter\022\017\n\004axis\030\005 \001(\005:\0011\022\030" +
      "\n\ttranspose\030\006 \001(\010:\005false\"1\n\016InputParamet" +
      "er\022\037\n\005shape\030\001 \003(\0132\020.caffe.BlobShape\"D\n\014L",
      "ogParameter\022\020\n\004base\030\001 \001(\002:\002-1\022\020\n\005scale\030\002" +
      " \001(\002:\0011\022\020\n\005shift\030\003 \001(\002:\0010\"\270\002\n\014LRNParamet" +
      "er\022\025\n\nlocal_size\030\001 \001(\r:\0015\022\020\n\005alpha\030\002 \001(\002" +
      ":\0011\022\022\n\004beta\030\003 \001(\002:\0040.75\022D\n\013norm_region\030\004" +
      " \001(\0162\036.caffe.LRNParameter.NormRegion:\017AC" +
      "ROSS_CHANNELS\022\014\n\001k\030\005 \001(\002:\0011\0223\n\006engine\030\006 " +
      "\001(\0162\032.caffe.LRNParameter.Engine:\007DEFAULT" +
      "\"5\n\nNormRegion\022\023\n\017ACROSS_CHANNELS\020\000\022\022\n\016W" +
      "ITHIN_CHANNEL\020\001\"+\n\006Engine\022\013\n\007DEFAULT\020\000\022\t" +
      "\n\005CAFFE\020\001\022\t\n\005CUDNN\020\002\"Z\n\023MemoryDataParame",
      "ter\022\022\n\nbatch_size\030\001 \001(\r\022\020\n\010channels\030\002 \001(" +
      "\r\022\016\n\006height\030\003 \001(\r\022\r\n\005width\030\004 \001(\r\"d\n\014MVNP" +
      "arameter\022 \n\022normalize_variance\030\001 \001(\010:\004tr" +
      "ue\022\036\n\017across_channels\030\002 \001(\010:\005false\022\022\n\003ep" +
      "s\030\003 \001(\002:\0051e-09\"5\n\022ParameterParameter\022\037\n\005" +
      "shape\030\001 \001(\0132\020.caffe.BlobShape\"\242\003\n\020Poolin" +
      "gParameter\0225\n\004pool\030\001 \001(\0162\".caffe.Pooling" +
      "Parameter.PoolMethod:\003MAX\022\016\n\003pad\030\004 \001(\r:\001" +
      "0\022\020\n\005pad_h\030\t \001(\r:\0010\022\020\n\005pad_w\030\n \001(\r:\0010\022\023\n" +
      "\013kernel_size\030\002 \001(\r\022\020\n\010kernel_h\030\005 \001(\r\022\020\n\010",
      "kernel_w\030\006 \001(\r\022\021\n\006stride\030\003 \001(\r:\0011\022\020\n\010str" +
      "ide_h\030\007 \001(\r\022\020\n\010stride_w\030\010 \001(\r\0227\n\006engine\030" +
      "\013 \001(\0162\036.caffe.PoolingParameter.Engine:\007D" +
      "EFAULT\022\035\n\016global_pooling\030\014 \001(\010:\005false\".\n" +
      "\nPoolMethod\022\007\n\003MAX\020\000\022\007\n\003AVE\020\001\022\016\n\nSTOCHAS" +
      "TIC\020\002\"+\n\006Engine\022\013\n\007DEFAULT\020\000\022\t\n\005CAFFE\020\001\022" +
      "\t\n\005CUDNN\020\002\"F\n\016PowerParameter\022\020\n\005power\030\001 " +
      "\001(\002:\0011\022\020\n\005scale\030\002 \001(\002:\0011\022\020\n\005shift\030\003 \001(\002:" +
      "\0010\"g\n\017PythonParameter\022\016\n\006module\030\001 \001(\t\022\r\n" +
      "\005layer\030\002 \001(\t\022\023\n\tparam_str\030\003 \001(\t:\000\022 \n\021sha",
      "re_in_parallel\030\004 \001(\010:\005false\"\300\001\n\022Recurren" +
      "tParameter\022\025\n\nnum_output\030\001 \001(\r:\0010\022-\n\rwei" +
      "ght_filler\030\002 \001(\0132\026.caffe.FillerParameter" +
      "\022+\n\013bias_filler\030\003 \001(\0132\026.caffe.FillerPara" +
      "meter\022\031\n\ndebug_info\030\004 \001(\010:\005false\022\034\n\rexpo" +
      "se_hidden\030\005 \001(\010:\005false\"\255\001\n\022ReductionPara" +
      "meter\022=\n\toperation\030\001 \001(\0162%.caffe.Reducti" +
      "onParameter.ReductionOp:\003SUM\022\017\n\004axis\030\002 \001" +
      "(\005:\0010\022\020\n\005coeff\030\003 \001(\002:\0011\"5\n\013ReductionOp\022\007" +
      "\n\003SUM\020\001\022\010\n\004ASUM\020\002\022\t\n\005SUMSQ\020\003\022\010\n\004MEAN\020\004\"\215",
      "\001\n\rReLUParameter\022\031\n\016negative_slope\030\001 \001(\002" +
      ":\0010\0224\n\006engine\030\002 \001(\0162\033.caffe.ReLUParamete" +
      "r.Engine:\007DEFAULT\"+\n\006Engine\022\013\n\007DEFAULT\020\000" +
      "\022\t\n\005CAFFE\020\001\022\t\n\005CUDNN\020\002\"Z\n\020ReshapeParamet" +
      "er\022\037\n\005shape\030\001 \001(\0132\020.caffe.BlobShape\022\017\n\004a" +
      "xis\030\002 \001(\005:\0010\022\024\n\010num_axes\030\003 \001(\005:\002-1\"\245\001\n\016S" +
      "caleParameter\022\017\n\004axis\030\001 \001(\005:\0011\022\023\n\010num_ax" +
      "es\030\002 \001(\005:\0011\022&\n\006filler\030\003 \001(\0132\026.caffe.Fill" +
      "erParameter\022\030\n\tbias_term\030\004 \001(\010:\005false\022+\n" +
      "\013bias_filler\030\005 \001(\0132\026.caffe.FillerParamet",
      "er\"x\n\020SigmoidParameter\0227\n\006engine\030\001 \001(\0162\036" +
      ".caffe.SigmoidParameter.Engine:\007DEFAULT\"" +
      "+\n\006Engine\022\013\n\007DEFAULT\020\000\022\t\n\005CAFFE\020\001\022\t\n\005CUD" +
      "NN\020\002\"L\n\016SliceParameter\022\017\n\004axis\030\003 \001(\005:\0011\022" +
      "\023\n\013slice_point\030\002 \003(\r\022\024\n\tslice_dim\030\001 \001(\r:" +
      "\0011\"\211\001\n\020SoftmaxParameter\0227\n\006engine\030\001 \001(\0162" +
      "\036.caffe.SoftmaxParameter.Engine:\007DEFAULT" +
      "\022\017\n\004axis\030\002 \001(\005:\0011\"+\n\006Engine\022\013\n\007DEFAULT\020\000" +
      "\022\t\n\005CAFFE\020\001\022\t\n\005CUDNN\020\002\"r\n\rTanHParameter\022" +
      "4\n\006engine\030\001 \001(\0162\033.caffe.TanHParameter.En",
      "gine:\007DEFAULT\"+\n\006Engine\022\013\n\007DEFAULT\020\000\022\t\n\005" +
      "CAFFE\020\001\022\t\n\005CUDNN\020\002\"/\n\rTileParameter\022\017\n\004a" +
      "xis\030\001 \001(\005:\0011\022\r\n\005tiles\030\002 \001(\005\"*\n\022Threshold" +
      "Parameter\022\024\n\tthreshold\030\001 \001(\002:\0010\"\301\002\n\023Wind" +
      "owDataParameter\022\016\n\006source\030\001 \001(\t\022\020\n\005scale" +
      "\030\002 \001(\002:\0011\022\021\n\tmean_file\030\003 \001(\t\022\022\n\nbatch_si" +
      "ze\030\004 \001(\r\022\024\n\tcrop_size\030\005 \001(\r:\0010\022\025\n\006mirror" +
      "\030\006 \001(\010:\005false\022\031\n\014fg_threshold\030\007 \001(\002:\0030.5" +
      "\022\031\n\014bg_threshold\030\010 \001(\002:\0030.5\022\031\n\013fg_fracti" +
      "on\030\t \001(\002:\0040.25\022\026\n\013context_pad\030\n \001(\r:\0010\022\027",
      "\n\tcrop_mode\030\013 \001(\t:\004warp\022\033\n\014cache_images\030" +
      "\014 \001(\010:\005false\022\025\n\013root_folder\030\r \001(\t:\000\"\353\001\n\014" +
      "SPPParameter\022\026\n\016pyramid_height\030\001 \001(\r\0221\n\004" +
      "pool\030\002 \001(\0162\036.caffe.SPPParameter.PoolMeth" +
      "od:\003MAX\0223\n\006engine\030\006 \001(\0162\032.caffe.SPPParam" +
      "eter.Engine:\007DEFAULT\".\n\nPoolMethod\022\007\n\003MA" +
      "X\020\000\022\007\n\003AVE\020\001\022\016\n\nSTOCHASTIC\020\002\"+\n\006Engine\022\013" +
      "\n\007DEFAULT\020\000\022\t\n\005CAFFE\020\001\022\t\n\005CUDNN\020\002\"\340\023\n\020V1" +
      "LayerParameter\022\016\n\006bottom\030\002 \003(\t\022\013\n\003top\030\003 " +
      "\003(\t\022\014\n\004name\030\004 \001(\t\022$\n\007include\030  \003(\0132\023.caf",
      "fe.NetStateRule\022$\n\007exclude\030! \003(\0132\023.caffe" +
      ".NetStateRule\022/\n\004type\030\005 \001(\0162!.caffe.V1La" +
      "yerParameter.LayerType\022\037\n\005blobs\030\006 \003(\0132\020." +
      "caffe.BlobProto\022\016\n\005param\030\351\007 \003(\t\022>\n\017blob_" +
      "share_mode\030\352\007 \003(\0162$.caffe.V1LayerParamet" +
      "er.DimCheckMode\022\020\n\010blobs_lr\030\007 \003(\002\022\024\n\014wei" +
      "ght_decay\030\010 \003(\002\022\023\n\013loss_weight\030# \003(\002\0220\n\016" +
      "accuracy_param\030\033 \001(\0132\030.caffe.AccuracyPar" +
      "ameter\022,\n\014argmax_param\030\027 \001(\0132\026.caffe.Arg" +
      "MaxParameter\022,\n\014concat_param\030\t \001(\0132\026.caf",
      "fe.ConcatParameter\022?\n\026contrastive_loss_p" +
      "aram\030( \001(\0132\037.caffe.ContrastiveLossParame" +
      "ter\0226\n\021convolution_param\030\n \001(\0132\033.caffe.C" +
      "onvolutionParameter\022(\n\ndata_param\030\013 \001(\0132" +
      "\024.caffe.DataParameter\022.\n\rdropout_param\030\014" +
      " \001(\0132\027.caffe.DropoutParameter\0223\n\020dummy_d" +
      "ata_param\030\032 \001(\0132\031.caffe.DummyDataParamet" +
      "er\022.\n\reltwise_param\030\030 \001(\0132\027.caffe.Eltwis" +
      "eParameter\022&\n\texp_param\030) \001(\0132\023.caffe.Ex" +
      "pParameter\0221\n\017hdf5_data_param\030\r \001(\0132\030.ca",
      "ffe.HDF5DataParameter\0225\n\021hdf5_output_par" +
      "am\030\016 \001(\0132\032.caffe.HDF5OutputParameter\0223\n\020" +
      "hinge_loss_param\030\035 \001(\0132\031.caffe.HingeLoss" +
      "Parameter\0223\n\020image_data_param\030\017 \001(\0132\031.ca" +
      "ffe.ImageDataParameter\0229\n\023infogain_loss_" +
      "param\030\020 \001(\0132\034.caffe.InfogainLossParamete" +
      "r\0229\n\023inner_product_param\030\021 \001(\0132\034.caffe.I" +
      "nnerProductParameter\022&\n\tlrn_param\030\022 \001(\0132" +
      "\023.caffe.LRNParameter\0225\n\021memory_data_para" +
      "m\030\026 \001(\0132\032.caffe.MemoryDataParameter\022&\n\tm",
      "vn_param\030\" \001(\0132\023.caffe.MVNParameter\022.\n\rp" +
      "ooling_param\030\023 \001(\0132\027.caffe.PoolingParame" +
      "ter\022*\n\013power_param\030\025 \001(\0132\025.caffe.PowerPa" +
      "rameter\022(\n\nrelu_param\030\036 \001(\0132\024.caffe.ReLU" +
      "Parameter\022.\n\rsigmoid_param\030& \001(\0132\027.caffe" +
      ".SigmoidParameter\022.\n\rsoftmax_param\030\' \001(\013" +
      "2\027.caffe.SoftmaxParameter\022*\n\013slice_param" +
      "\030\037 \001(\0132\025.caffe.SliceParameter\022(\n\ntanh_pa" +
      "ram\030% \001(\0132\024.caffe.TanHParameter\0222\n\017thres" +
      "hold_param\030\031 \001(\0132\031.caffe.ThresholdParame",
      "ter\0225\n\021window_data_param\030\024 \001(\0132\032.caffe.W" +
      "indowDataParameter\0227\n\017transform_param\030$ " +
      "\001(\0132\036.caffe.TransformationParameter\022(\n\nl" +
      "oss_param\030* \001(\0132\024.caffe.LossParameter\022&\n" +
      "\005layer\030\001 \001(\0132\027.caffe.V0LayerParameter\"\330\004" +
      "\n\tLayerType\022\010\n\004NONE\020\000\022\n\n\006ABSVAL\020#\022\014\n\010ACC" +
      "URACY\020\001\022\n\n\006ARGMAX\020\036\022\010\n\004BNLL\020\002\022\n\n\006CONCAT\020" +
      "\003\022\024\n\020CONTRASTIVE_LOSS\020%\022\017\n\013CONVOLUTION\020\004" +
      "\022\010\n\004DATA\020\005\022\021\n\rDECONVOLUTION\020\'\022\013\n\007DROPOUT" +
      "\020\006\022\016\n\nDUMMY_DATA\020 \022\022\n\016EUCLIDEAN_LOSS\020\007\022\013",
      "\n\007ELTWISE\020\031\022\007\n\003EXP\020&\022\013\n\007FLATTEN\020\010\022\r\n\tHDF" +
      "5_DATA\020\t\022\017\n\013HDF5_OUTPUT\020\n\022\016\n\nHINGE_LOSS\020" +
      "\034\022\n\n\006IM2COL\020\013\022\016\n\nIMAGE_DATA\020\014\022\021\n\rINFOGAI" +
      "N_LOSS\020\r\022\021\n\rINNER_PRODUCT\020\016\022\007\n\003LRN\020\017\022\017\n\013" +
      "MEMORY_DATA\020\035\022\035\n\031MULTINOMIAL_LOGISTIC_LO" +
      "SS\020\020\022\007\n\003MVN\020\"\022\013\n\007POOLING\020\021\022\t\n\005POWER\020\032\022\010\n" +
      "\004RELU\020\022\022\013\n\007SIGMOID\020\023\022\036\n\032SIGMOID_CROSS_EN" +
      "TROPY_LOSS\020\033\022\013\n\007SILENCE\020$\022\013\n\007SOFTMAX\020\024\022\020" +
      "\n\014SOFTMAX_LOSS\020\025\022\t\n\005SPLIT\020\026\022\t\n\005SLICE\020!\022\010" +
      "\n\004TANH\020\027\022\017\n\013WINDOW_DATA\020\030\022\r\n\tTHRESHOLD\020\037",
      "\"*\n\014DimCheckMode\022\n\n\006STRICT\020\000\022\016\n\nPERMISSI" +
      "VE\020\001\"\375\007\n\020V0LayerParameter\022\014\n\004name\030\001 \001(\t\022" +
      "\014\n\004type\030\002 \001(\t\022\022\n\nnum_output\030\003 \001(\r\022\026\n\010bia" +
      "sterm\030\004 \001(\010:\004true\022-\n\rweight_filler\030\005 \001(\013" +
      "2\026.caffe.FillerParameter\022+\n\013bias_filler\030" +
      "\006 \001(\0132\026.caffe.FillerParameter\022\016\n\003pad\030\007 \001" +
      "(\r:\0010\022\022\n\nkernelsize\030\010 \001(\r\022\020\n\005group\030\t \001(\r" +
      ":\0011\022\021\n\006stride\030\n \001(\r:\0011\0225\n\004pool\030\013 \001(\0162\".c" +
      "affe.V0LayerParameter.PoolMethod:\003MAX\022\032\n" +
      "\rdropout_ratio\030\014 \001(\002:\0030.5\022\025\n\nlocal_size\030",
      "\r \001(\r:\0015\022\020\n\005alpha\030\016 \001(\002:\0011\022\022\n\004beta\030\017 \001(\002" +
      ":\0040.75\022\014\n\001k\030\026 \001(\002:\0011\022\016\n\006source\030\020 \001(\t\022\020\n\005" +
      "scale\030\021 \001(\002:\0011\022\020\n\010meanfile\030\022 \001(\t\022\021\n\tbatc" +
      "hsize\030\023 \001(\r\022\023\n\010cropsize\030\024 \001(\r:\0010\022\025\n\006mirr" +
      "or\030\025 \001(\010:\005false\022\037\n\005blobs\0302 \003(\0132\020.caffe.B" +
      "lobProto\022\020\n\010blobs_lr\0303 \003(\002\022\024\n\014weight_dec" +
      "ay\0304 \003(\002\022\024\n\trand_skip\0305 \001(\r:\0010\022\035\n\020det_fg" +
      "_threshold\0306 \001(\002:\0030.5\022\035\n\020det_bg_threshol" +
      "d\0307 \001(\002:\0030.5\022\035\n\017det_fg_fraction\0308 \001(\002:\0040" +
      ".25\022\032\n\017det_context_pad\030: \001(\r:\0010\022\033\n\rdet_c",
      "rop_mode\030; \001(\t:\004warp\022\022\n\007new_num\030< \001(\005:\0010" +
      "\022\027\n\014new_channels\030= \001(\005:\0010\022\025\n\nnew_height\030" +
      "> \001(\005:\0010\022\024\n\tnew_width\030? \001(\005:\0010\022\035\n\016shuffl" +
      "e_images\030@ \001(\010:\005false\022\025\n\nconcat_dim\030A \001(" +
      "\r:\0011\0226\n\021hdf5_output_param\030\351\007 \001(\0132\032.caffe" +
      ".HDF5OutputParameter\".\n\nPoolMethod\022\007\n\003MA" +
      "X\020\000\022\007\n\003AVE\020\001\022\016\n\nSTOCHASTIC\020\002\"W\n\016PReLUPar" +
      "ameter\022&\n\006filler\030\001 \001(\0132\026.caffe.FillerPar" +
      "ameter\022\035\n\016channel_shared\030\002 \001(\010:\005false*\034\n" +
      "\005Phase\022\t\n\005TRAIN\020\000\022\010\n\004TEST\020\001"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_caffe_BlobShape_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_caffe_BlobShape_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_caffe_BlobShape_descriptor,
              new java.lang.String[] { "Dim", });
          internal_static_caffe_BlobProto_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_caffe_BlobProto_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_caffe_BlobProto_descriptor,
              new java.lang.String[] { "Shape", "Data", "Diff", "DoubleData", "DoubleDiff", "Num", "Channels", "Height", "Width", });
          internal_static_caffe_BlobProtoVector_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_caffe_BlobProtoVector_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_caffe_BlobProtoVector_descriptor,
              new java.lang.String[] { "Blobs", });
          internal_static_caffe_Datum_descriptor =
            getDescriptor().getMessageTypes().get(3);
          internal_static_caffe_Datum_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_caffe_Datum_descriptor,
              new java.lang.String[] { "Channels", "Height", "Width", "Data", "Label", "FloatData", "Encoded", });
          internal_static_caffe_FillerParameter_descriptor =
            getDescriptor().getMessageTypes().get(4);
          internal_static_caffe_FillerParameter_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_caffe_FillerParameter_descriptor,
              new java.lang.String[] { "Type", "Value", "Min", "Max", "Mean", "Std", "Sparse", "VarianceNorm", });
          internal_static_caffe_NetParameter_descriptor =
            getDescriptor().getMessageTypes().get(5);
          internal_static_caffe_NetParameter_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_caffe_NetParameter_descriptor,
              new java.lang.String[] { "Name", "Input", "InputShape", "InputDim", "ForceBackward", "State", "DebugInfo", "Layer", "Layers", });
          internal_static_caffe_SolverParameter_descriptor =
            getDescriptor().getMessageTypes().get(6);
          internal_static_caffe_SolverParameter_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_caffe_SolverParameter_descriptor,
              new java.lang.String[] { "Net", "NetParam", "TrainNet", "TestNet", "TrainNetParam", "TestNetParam", "TrainState", "TestState", "TestIter", "TestInterval", "TestComputeLoss", "TestInitialization", "BaseLr", "Display", "AverageLoss", "MaxIter", "IterSize", "LrPolicy", "Gamma", "Power", "Momentum", "WeightDecay", "RegularizationType", "Stepsize", "Stepvalue", "PlateauWinsize", "ClipGradients", "Snapshot", "SnapshotPrefix", "SnapshotDiff", "SnapshotFormat", "SolverMode", "DeviceId", "RandomSeed", "Type", "Delta", "Momentum2", "RmsDecay", "DebugInfo", "SnapshotAfterTrain", "SolverType", });
          internal_static_caffe_SolverState_descriptor =
            getDescriptor().getMessageTypes().get(7);
          internal_static_caffe_SolverState_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_caffe_SolverState_descriptor,
              new java.lang.String[] { "Iter", "LearnedNet", "History", "CurrentStep", "MinimumLoss", "IterLastEvent", });
          internal_static_caffe_NetState_descriptor =
            getDescriptor().getMessageTypes().get(8);
          internal_static_caffe_NetState_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_caffe_NetState_descriptor,
              new java.lang.String[] { "Phase", "Level", "Stage", });
          internal_static_caffe_NetStateRule_descriptor =
            getDescriptor().getMessageTypes().get(9);
          internal_static_caffe_NetStateRule_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_caffe_NetStateRule_descriptor,
              new java.lang.String[] { "Phase", "MinLevel", "MaxLevel", "Stage", "NotStage", });
          internal_static_caffe_ParamSpec_descriptor =
            getDescriptor().getMessageTypes().get(10);
          internal_static_caffe_ParamSpec_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_caffe_ParamSpec_descriptor,
              new java.lang.String[] { "Name", "ShareMode", "LrMult", "DecayMult", });
          internal_static_caffe_LayerParameter_descriptor =
            getDescriptor().getMessageTypes().get(11);
          internal_static_caffe_LayerParameter_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_caffe_LayerParameter_descriptor,
              new java.lang.String[] { "Name", "Type", "Bottom", "Top", "Phase", "LossWeight", "Param", "Blobs", "PropagateDown", "Include", "Exclude", "TransformParam", "LossParam", "AccuracyParam", "ArgmaxParam", "BatchNormParam", "BiasParam", "ConcatParam", "ContrastiveLossParam", "ConvolutionParam", "CropParam", "DataParam", "DropoutParam", "DummyDataParam", "EltwiseParam", "EluParam", "EmbedParam", "ExpParam", "FlattenParam", "Hdf5DataParam", "Hdf5OutputParam", "HingeLossParam", "ImageDataParam", "InfogainLossParam", "InnerProductParam", "InputParam", "LogParam", "LrnParam", "MemoryDataParam", "MvnParam", "ParameterParam", "PoolingParam", "PowerParam", "PreluParam", "PythonParam", "RecurrentParam", "ReductionParam", "ReluParam", "ReshapeParam", "ScaleParam", "SigmoidParam", "SoftmaxParam", "SppParam", "SliceParam", "TanhParam", "ThresholdParam", "TileParam", "WindowDataParam", "RoiPoolingParam", "SmoothL1LossParam", "ProposalParam", });
          internal_static_caffe_ROIPoolingParameter_descriptor =
            getDescriptor().getMessageTypes().get(12);
          internal_static_caffe_ROIPoolingParameter_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_caffe_ROIPoolingParameter_descriptor,
              new java.lang.String[] { "PooledH", "PooledW", "SpatialScale", });
          internal_static_caffe_ProposalParameter_descriptor =
            getDescriptor().getMessageTypes().get(13);
          internal_static_caffe_ProposalParameter_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_caffe_ProposalParameter_descriptor,
              new java.lang.String[] { "FeatStride", "BaseSize", "MinSize", "Ratio", "Scale", "PreNmsTopn", "PostNmsTopn", "NmsThresh", });
          internal_static_caffe_SmoothL1LossParameter_descriptor =
            getDescriptor().getMessageTypes().get(14);
          internal_static_caffe_SmoothL1LossParameter_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_caffe_SmoothL1LossParameter_descriptor,
              new java.lang.String[] { "Sigma", });
          internal_static_caffe_TransformationParameter_descriptor =
            getDescriptor().getMessageTypes().get(15);
          internal_static_caffe_TransformationParameter_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_caffe_TransformationParameter_descriptor,
              new java.lang.String[] { "Scale", "Mirror", "CropSize", "MeanFile", "MeanValue", "ForceColor", "ForceGray", });
          internal_static_caffe_LossParameter_descriptor =
            getDescriptor().getMessageTypes().get(16);
          internal_static_caffe_LossParameter_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_caffe_LossParameter_descriptor,
              new java.lang.String[] { "IgnoreLabel", "Normalization", "Normalize", });
          internal_static_caffe_AccuracyParameter_descriptor =
            getDescriptor().getMessageTypes().get(17);
          internal_static_caffe_AccuracyParameter_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_caffe_AccuracyParameter_descriptor,
              new java.lang.String[] { "TopK", "Axis", "IgnoreLabel", });
          internal_static_caffe_ArgMaxParameter_descriptor =
            getDescriptor().getMessageTypes().get(18);
          internal_static_caffe_ArgMaxParameter_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_caffe_ArgMaxParameter_descriptor,
              new java.lang.String[] { "OutMaxVal", "TopK", "Axis", });
          internal_static_caffe_ConcatParameter_descriptor =
            getDescriptor().getMessageTypes().get(19);
          internal_static_caffe_ConcatParameter_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_caffe_ConcatParameter_descriptor,
              new java.lang.String[] { "Axis", "ConcatDim", });
          internal_static_caffe_BatchNormParameter_descriptor =
            getDescriptor().getMessageTypes().get(20);
          internal_static_caffe_BatchNormParameter_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_caffe_BatchNormParameter_descriptor,
              new java.lang.String[] { "UseGlobalStats", "MovingAverageFraction", "Eps", });
          internal_static_caffe_BiasParameter_descriptor =
            getDescriptor().getMessageTypes().get(21);
          internal_static_caffe_BiasParameter_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_caffe_BiasParameter_descriptor,
              new java.lang.String[] { "Axis", "NumAxes", "Filler", });
          internal_static_caffe_ContrastiveLossParameter_descriptor =
            getDescriptor().getMessageTypes().get(22);
          internal_static_caffe_ContrastiveLossParameter_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_caffe_ContrastiveLossParameter_descriptor,
              new java.lang.String[] { "Margin", "LegacyVersion", });
          internal_static_caffe_ConvolutionParameter_descriptor =
            getDescriptor().getMessageTypes().get(23);
          internal_static_caffe_ConvolutionParameter_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_caffe_ConvolutionParameter_descriptor,
              new java.lang.String[] { "NumOutput", "BiasTerm", "Pad", "KernelSize", "Stride", "Dilation", "PadH", "PadW", "KernelH", "KernelW", "StrideH", "StrideW", "Group", "WeightFiller", "BiasFiller", "Engine", "Axis", "ForceNdIm2Col", });
          internal_static_caffe_CropParameter_descriptor =
            getDescriptor().getMessageTypes().get(24);
          internal_static_caffe_CropParameter_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_caffe_CropParameter_descriptor,
              new java.lang.String[] { "Axis", "Offset", });
          internal_static_caffe_DataParameter_descriptor =
            getDescriptor().getMessageTypes().get(25);
          internal_static_caffe_DataParameter_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_caffe_DataParameter_descriptor,
              new java.lang.String[] { "Source", "BatchSize", "RandSkip", "Backend", "Scale", "MeanFile", "CropSize", "Mirror", "ForceEncodedColor", "Prefetch", });
          internal_static_caffe_DropoutParameter_descriptor =
            getDescriptor().getMessageTypes().get(26);
          internal_static_caffe_DropoutParameter_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_caffe_DropoutParameter_descriptor,
              new java.lang.String[] { "DropoutRatio", });
          internal_static_caffe_DummyDataParameter_descriptor =
            getDescriptor().getMessageTypes().get(27);
          internal_static_caffe_DummyDataParameter_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_caffe_DummyDataParameter_descriptor,
              new java.lang.String[] { "DataFiller", "Shape", "Num", "Channels", "Height", "Width", });
          internal_static_caffe_EltwiseParameter_descriptor =
            getDescriptor().getMessageTypes().get(28);
          internal_static_caffe_EltwiseParameter_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_caffe_EltwiseParameter_descriptor,
              new java.lang.String[] { "Operation", "Coeff", "StableProdGrad", });
          internal_static_caffe_ELUParameter_descriptor =
            getDescriptor().getMessageTypes().get(29);
          internal_static_caffe_ELUParameter_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_caffe_ELUParameter_descriptor,
              new java.lang.String[] { "Alpha", });
          internal_static_caffe_EmbedParameter_descriptor =
            getDescriptor().getMessageTypes().get(30);
          internal_static_caffe_EmbedParameter_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_caffe_EmbedParameter_descriptor,
              new java.lang.String[] { "NumOutput", "InputDim", "BiasTerm", "WeightFiller", "BiasFiller", });
          internal_static_caffe_ExpParameter_descriptor =
            getDescriptor().getMessageTypes().get(31);
          internal_static_caffe_ExpParameter_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_caffe_ExpParameter_descriptor,
              new java.lang.String[] { "Base", "Scale", "Shift", });
          internal_static_caffe_FlattenParameter_descriptor =
            getDescriptor().getMessageTypes().get(32);
          internal_static_caffe_FlattenParameter_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_caffe_FlattenParameter_descriptor,
              new java.lang.String[] { "Axis", "EndAxis", });
          internal_static_caffe_HDF5DataParameter_descriptor =
            getDescriptor().getMessageTypes().get(33);
          internal_static_caffe_HDF5DataParameter_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_caffe_HDF5DataParameter_descriptor,
              new java.lang.String[] { "Source", "BatchSize", "Shuffle", });
          internal_static_caffe_HDF5OutputParameter_descriptor =
            getDescriptor().getMessageTypes().get(34);
          internal_static_caffe_HDF5OutputParameter_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_caffe_HDF5OutputParameter_descriptor,
              new java.lang.String[] { "FileName", });
          internal_static_caffe_HingeLossParameter_descriptor =
            getDescriptor().getMessageTypes().get(35);
          internal_static_caffe_HingeLossParameter_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_caffe_HingeLossParameter_descriptor,
              new java.lang.String[] { "Norm", });
          internal_static_caffe_ImageDataParameter_descriptor =
            getDescriptor().getMessageTypes().get(36);
          internal_static_caffe_ImageDataParameter_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_caffe_ImageDataParameter_descriptor,
              new java.lang.String[] { "Source", "BatchSize", "RandSkip", "Shuffle", "NewHeight", "NewWidth", "IsColor", "Scale", "MeanFile", "CropSize", "Mirror", "RootFolder", });
          internal_static_caffe_InfogainLossParameter_descriptor =
            getDescriptor().getMessageTypes().get(37);
          internal_static_caffe_InfogainLossParameter_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_caffe_InfogainLossParameter_descriptor,
              new java.lang.String[] { "Source", });
          internal_static_caffe_InnerProductParameter_descriptor =
            getDescriptor().getMessageTypes().get(38);
          internal_static_caffe_InnerProductParameter_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_caffe_InnerProductParameter_descriptor,
              new java.lang.String[] { "NumOutput", "BiasTerm", "WeightFiller", "BiasFiller", "Axis", "Transpose", });
          internal_static_caffe_InputParameter_descriptor =
            getDescriptor().getMessageTypes().get(39);
          internal_static_caffe_InputParameter_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_caffe_InputParameter_descriptor,
              new java.lang.String[] { "Shape", });
          internal_static_caffe_LogParameter_descriptor =
            getDescriptor().getMessageTypes().get(40);
          internal_static_caffe_LogParameter_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_caffe_LogParameter_descriptor,
              new java.lang.String[] { "Base", "Scale", "Shift", });
          internal_static_caffe_LRNParameter_descriptor =
            getDescriptor().getMessageTypes().get(41);
          internal_static_caffe_LRNParameter_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_caffe_LRNParameter_descriptor,
              new java.lang.String[] { "LocalSize", "Alpha", "Beta", "NormRegion", "K", "Engine", });
          internal_static_caffe_MemoryDataParameter_descriptor =
            getDescriptor().getMessageTypes().get(42);
          internal_static_caffe_MemoryDataParameter_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_caffe_MemoryDataParameter_descriptor,
              new java.lang.String[] { "BatchSize", "Channels", "Height", "Width", });
          internal_static_caffe_MVNParameter_descriptor =
            getDescriptor().getMessageTypes().get(43);
          internal_static_caffe_MVNParameter_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_caffe_MVNParameter_descriptor,
              new java.lang.String[] { "NormalizeVariance", "AcrossChannels", "Eps", });
          internal_static_caffe_ParameterParameter_descriptor =
            getDescriptor().getMessageTypes().get(44);
          internal_static_caffe_ParameterParameter_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_caffe_ParameterParameter_descriptor,
              new java.lang.String[] { "Shape", });
          internal_static_caffe_PoolingParameter_descriptor =
            getDescriptor().getMessageTypes().get(45);
          internal_static_caffe_PoolingParameter_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_caffe_PoolingParameter_descriptor,
              new java.lang.String[] { "Pool", "Pad", "PadH", "PadW", "KernelSize", "KernelH", "KernelW", "Stride", "StrideH", "StrideW", "Engine", "GlobalPooling", });
          internal_static_caffe_PowerParameter_descriptor =
            getDescriptor().getMessageTypes().get(46);
          internal_static_caffe_PowerParameter_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_caffe_PowerParameter_descriptor,
              new java.lang.String[] { "Power", "Scale", "Shift", });
          internal_static_caffe_PythonParameter_descriptor =
            getDescriptor().getMessageTypes().get(47);
          internal_static_caffe_PythonParameter_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_caffe_PythonParameter_descriptor,
              new java.lang.String[] { "Module", "Layer", "ParamStr", "ShareInParallel", });
          internal_static_caffe_RecurrentParameter_descriptor =
            getDescriptor().getMessageTypes().get(48);
          internal_static_caffe_RecurrentParameter_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_caffe_RecurrentParameter_descriptor,
              new java.lang.String[] { "NumOutput", "WeightFiller", "BiasFiller", "DebugInfo", "ExposeHidden", });
          internal_static_caffe_ReductionParameter_descriptor =
            getDescriptor().getMessageTypes().get(49);
          internal_static_caffe_ReductionParameter_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_caffe_ReductionParameter_descriptor,
              new java.lang.String[] { "Operation", "Axis", "Coeff", });
          internal_static_caffe_ReLUParameter_descriptor =
            getDescriptor().getMessageTypes().get(50);
          internal_static_caffe_ReLUParameter_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_caffe_ReLUParameter_descriptor,
              new java.lang.String[] { "NegativeSlope", "Engine", });
          internal_static_caffe_ReshapeParameter_descriptor =
            getDescriptor().getMessageTypes().get(51);
          internal_static_caffe_ReshapeParameter_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_caffe_ReshapeParameter_descriptor,
              new java.lang.String[] { "Shape", "Axis", "NumAxes", });
          internal_static_caffe_ScaleParameter_descriptor =
            getDescriptor().getMessageTypes().get(52);
          internal_static_caffe_ScaleParameter_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_caffe_ScaleParameter_descriptor,
              new java.lang.String[] { "Axis", "NumAxes", "Filler", "BiasTerm", "BiasFiller", });
          internal_static_caffe_SigmoidParameter_descriptor =
            getDescriptor().getMessageTypes().get(53);
          internal_static_caffe_SigmoidParameter_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_caffe_SigmoidParameter_descriptor,
              new java.lang.String[] { "Engine", });
          internal_static_caffe_SliceParameter_descriptor =
            getDescriptor().getMessageTypes().get(54);
          internal_static_caffe_SliceParameter_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_caffe_SliceParameter_descriptor,
              new java.lang.String[] { "Axis", "SlicePoint", "SliceDim", });
          internal_static_caffe_SoftmaxParameter_descriptor =
            getDescriptor().getMessageTypes().get(55);
          internal_static_caffe_SoftmaxParameter_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_caffe_SoftmaxParameter_descriptor,
              new java.lang.String[] { "Engine", "Axis", });
          internal_static_caffe_TanHParameter_descriptor =
            getDescriptor().getMessageTypes().get(56);
          internal_static_caffe_TanHParameter_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_caffe_TanHParameter_descriptor,
              new java.lang.String[] { "Engine", });
          internal_static_caffe_TileParameter_descriptor =
            getDescriptor().getMessageTypes().get(57);
          internal_static_caffe_TileParameter_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_caffe_TileParameter_descriptor,
              new java.lang.String[] { "Axis", "Tiles", });
          internal_static_caffe_ThresholdParameter_descriptor =
            getDescriptor().getMessageTypes().get(58);
          internal_static_caffe_ThresholdParameter_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_caffe_ThresholdParameter_descriptor,
              new java.lang.String[] { "Threshold", });
          internal_static_caffe_WindowDataParameter_descriptor =
            getDescriptor().getMessageTypes().get(59);
          internal_static_caffe_WindowDataParameter_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_caffe_WindowDataParameter_descriptor,
              new java.lang.String[] { "Source", "Scale", "MeanFile", "BatchSize", "CropSize", "Mirror", "FgThreshold", "BgThreshold", "FgFraction", "ContextPad", "CropMode", "CacheImages", "RootFolder", });
          internal_static_caffe_SPPParameter_descriptor =
            getDescriptor().getMessageTypes().get(60);
          internal_static_caffe_SPPParameter_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_caffe_SPPParameter_descriptor,
              new java.lang.String[] { "PyramidHeight", "Pool", "Engine", });
          internal_static_caffe_V1LayerParameter_descriptor =
            getDescriptor().getMessageTypes().get(61);
          internal_static_caffe_V1LayerParameter_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_caffe_V1LayerParameter_descriptor,
              new java.lang.String[] { "Bottom", "Top", "Name", "Include", "Exclude", "Type", "Blobs", "Param", "BlobShareMode", "BlobsLr", "WeightDecay", "LossWeight", "AccuracyParam", "ArgmaxParam", "ConcatParam", "ContrastiveLossParam", "ConvolutionParam", "DataParam", "DropoutParam", "DummyDataParam", "EltwiseParam", "ExpParam", "Hdf5DataParam", "Hdf5OutputParam", "HingeLossParam", "ImageDataParam", "InfogainLossParam", "InnerProductParam", "LrnParam", "MemoryDataParam", "MvnParam", "PoolingParam", "PowerParam", "ReluParam", "SigmoidParam", "SoftmaxParam", "SliceParam", "TanhParam", "ThresholdParam", "WindowDataParam", "TransformParam", "LossParam", "Layer", });
          internal_static_caffe_V0LayerParameter_descriptor =
            getDescriptor().getMessageTypes().get(62);
          internal_static_caffe_V0LayerParameter_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_caffe_V0LayerParameter_descriptor,
              new java.lang.String[] { "Name", "Type", "NumOutput", "Biasterm", "WeightFiller", "BiasFiller", "Pad", "Kernelsize", "Group", "Stride", "Pool", "DropoutRatio", "LocalSize", "Alpha", "Beta", "K", "Source", "Scale", "Meanfile", "Batchsize", "Cropsize", "Mirror", "Blobs", "BlobsLr", "WeightDecay", "RandSkip", "DetFgThreshold", "DetBgThreshold", "DetFgFraction", "DetContextPad", "DetCropMode", "NewNum", "NewChannels", "NewHeight", "NewWidth", "ShuffleImages", "ConcatDim", "Hdf5OutputParam", });
          internal_static_caffe_PReLUParameter_descriptor =
            getDescriptor().getMessageTypes().get(63);
          internal_static_caffe_PReLUParameter_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_caffe_PReLUParameter_descriptor,
              new java.lang.String[] { "Filler", "ChannelShared", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
