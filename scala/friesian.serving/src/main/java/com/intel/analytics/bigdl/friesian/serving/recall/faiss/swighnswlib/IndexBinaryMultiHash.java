/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.intel.analytics.bigdl.friesian.serving.recall.faiss.swighnswlib;

public class IndexBinaryMultiHash extends IndexBinary {
  private transient long swigCPtr;

  protected IndexBinaryMultiHash(long cPtr, boolean cMemoryOwn) {
    super(swigfaissJNI.IndexBinaryMultiHash_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(IndexBinaryMultiHash obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        swigfaissJNI.delete_IndexBinaryMultiHash(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public void setStorage(IndexBinaryFlat value) {
    swigfaissJNI.IndexBinaryMultiHash_storage_set(swigCPtr, this, IndexBinaryFlat.getCPtr(value), value);
  }

  public IndexBinaryFlat getStorage() {
    long cPtr = swigfaissJNI.IndexBinaryMultiHash_storage_get(swigCPtr, this);
    return (cPtr == 0) ? null : new IndexBinaryFlat(cPtr, false);
  }

  public void setOwn_fields(boolean value) {
    swigfaissJNI.IndexBinaryMultiHash_own_fields_set(swigCPtr, this, value);
  }

  public boolean getOwn_fields() {
    return swigfaissJNI.IndexBinaryMultiHash_own_fields_get(swigCPtr, this);
  }

  public void setMaps(SWIGTYPE_p_std__vectorT_std__unordered_mapT_long_std__vectorT_long_t_t_t value) {
    swigfaissJNI.IndexBinaryMultiHash_maps_set(swigCPtr, this, SWIGTYPE_p_std__vectorT_std__unordered_mapT_long_std__vectorT_long_t_t_t.getCPtr(value));
  }

  public SWIGTYPE_p_std__vectorT_std__unordered_mapT_long_std__vectorT_long_t_t_t getMaps() {
    long cPtr = swigfaissJNI.IndexBinaryMultiHash_maps_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_std__vectorT_std__unordered_mapT_long_std__vectorT_long_t_t_t(cPtr, false);
  }

  public void setNhash(int value) {
    swigfaissJNI.IndexBinaryMultiHash_nhash_set(swigCPtr, this, value);
  }

  public int getNhash() {
    return swigfaissJNI.IndexBinaryMultiHash_nhash_get(swigCPtr, this);
  }

  public void setB(int value) {
    swigfaissJNI.IndexBinaryMultiHash_b_set(swigCPtr, this, value);
  }

  public int getB() {
    return swigfaissJNI.IndexBinaryMultiHash_b_get(swigCPtr, this);
  }

  public void setNflip(int value) {
    swigfaissJNI.IndexBinaryMultiHash_nflip_set(swigCPtr, this, value);
  }

  public int getNflip() {
    return swigfaissJNI.IndexBinaryMultiHash_nflip_get(swigCPtr, this);
  }

  public IndexBinaryMultiHash(int d, int nhash, int b) {
    this(swigfaissJNI.new_IndexBinaryMultiHash__SWIG_0(d, nhash, b), true);
  }

  public IndexBinaryMultiHash() {
    this(swigfaissJNI.new_IndexBinaryMultiHash__SWIG_1(), true);
  }

  public void reset() {
    swigfaissJNI.IndexBinaryMultiHash_reset(swigCPtr, this);
  }

  public void add(int n, SWIGTYPE_p_unsigned_char x) {
    swigfaissJNI.IndexBinaryMultiHash_add(swigCPtr, this, n, SWIGTYPE_p_unsigned_char.getCPtr(x));
  }

  public void range_search(int n, SWIGTYPE_p_unsigned_char x, int radius, RangeSearchResult result) {
    swigfaissJNI.IndexBinaryMultiHash_range_search(swigCPtr, this, n, SWIGTYPE_p_unsigned_char.getCPtr(x), radius, RangeSearchResult.getCPtr(result), result);
  }

  public void search(int n, SWIGTYPE_p_unsigned_char x, int k, SWIGTYPE_p_int distances, SWIGTYPE_p_long labels) {
    swigfaissJNI.IndexBinaryMultiHash_search(swigCPtr, this, n, SWIGTYPE_p_unsigned_char.getCPtr(x), k, SWIGTYPE_p_int.getCPtr(distances), SWIGTYPE_p_long.getCPtr(labels));
  }

  public long hashtable_size() {
    return swigfaissJNI.IndexBinaryMultiHash_hashtable_size(swigCPtr, this);
  }

}
